[
    {
        "instruction": "Generate a python program to print a Roman Numeral for any number between 1 and 5.",
        "input": "",
        "output": "def print_roman_numeral(num):\n    if num == 1:\n        return \"I\"\n    elif num == 2:\n        return \"II\"\n    elif num == 3:\n        return \"III\"\n    elif num == 4:\n        return \"IV\"\n    elif num == 5:\n        return \"V\"\n    else:\n        return \"invalid number\"\n\nnumber = int(input(\"Enter a number between 1 and 5: \"))\nprint(print_roman_numeral(number))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to print a Roman Numeral for any number between 1 and 5.\n\n### Input:\n\n\n### Output:\ndef print_roman_numeral(num):\n    if num == 1:\n        return \"I\"\n    elif num == 2:\n        return \"II\"\n    elif num == 3:\n        return \"III\"\n    elif num == 4:\n        return \"IV\"\n    elif num == 5:\n        return \"V\"\n    else:\n        return \"invalid number\"\n\nnumber = int(input(\"Enter a number between 1 and 5: \"))\nprint(print_roman_numeral(number))"
    },
    {
        "instruction": "Write a Python program to sort data from the largest to the smallest.",
        "input": "[44, 23, 11, 33, 5]",
        "output": "unsorted_list = [44, 23, 11, 33, 5]\nsorted_list = sorted(unsorted_list, reverse=True)\n\nprint(sorted_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort data from the largest to the smallest.\n\n### Input:\n[44, 23, 11, 33, 5]\n\n### Output:\nunsorted_list = [44, 23, 11, 33, 5]\nsorted_list = sorted(unsorted_list, reverse=True)\n\nprint(sorted_list)"
    },
    {
        "instruction": "Write a python program which takes a given address data in the form of a dictionary and returns the geocodes of the address.",
        "input": "{'street': '123 Main Street', 'state': 'NY', 'zip': '12345'}",
        "output": "\"\"\"\nGet the geocodes of an address data\n\"\"\"\n\nimport requests\n\ndef geocode_address(address):\n    # Create the url \n    url = 'http://maps.googleapis.com/maps/api/geocode/json'\n\n    # Create the params \n    params = {'address': '{street}, {state}, {zip}'.format(**address),\n              'sensor': 'false'}\n   \n    # Make the request \n    resp = requests.get(url, params=params)\n    data = resp.json()\n\n    # Extract the latitude and longitude\n    if data['status'] == 'OK':\n        lat = data['results'][0]['geometry']['location']['lat']\n        lng = data['results'][0]['geometry']['location']['lng']\n    else:\n        return 'Error: Address not found'\n   \n    return [lat, lng]\n    \nif __name__ == '__main__':\n    address = {'street': '123 Main Street', 'state': 'NY', 'zip': '12345'}\n    print(geocode_address(address))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program which takes a given address data in the form of a dictionary and returns the geocodes of the address.\n\n### Input:\n{'street': '123 Main Street', 'state': 'NY', 'zip': '12345'}\n\n### Output:\n\"\"\"\nGet the geocodes of an address data\n\"\"\"\n\nimport requests\n\ndef geocode_address(address):\n    # Create the url \n    url = 'http://maps.googleapis.com/maps/api/geocode/json'\n\n    # Create the params \n    params = {'address': '{street}, {state}, {zip}'.format(**address),\n              'sensor': 'false'}\n   \n    # Make the request \n    resp = requests.get(url, params=params)\n    data = resp.json()\n\n    # Extract the latitude and longitude\n    if data['status'] == 'OK':\n        lat = data['results'][0]['geometry']['location']['lat']\n        lng = data['results'][0]['geometry']['location']['lng']\n    else:\n        return 'Error: Address not found'\n   \n    return [lat, lng]\n    \nif __name__ == '__main__':\n    address = {'street': '123 Main Street', 'state': 'NY', 'zip': '12345'}\n    print(geocode_address(address))"
    },
    {
        "instruction": "Write a Python program to sort a given list of strings based on their length.",
        "input": "list1 = [\"apple\", \"orange\", \"banana\", \"mango\"]",
        "output": "def sort_str_by_length(list1):\n return sorted(list1, key=len)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a given list of strings based on their length.\n\n### Input:\nlist1 = [\"apple\", \"orange\", \"banana\", \"mango\"]\n\n### Output:\ndef sort_str_by_length(list1):\n return sorted(list1, key=len)"
    },
    {
        "instruction": "Implement an algorithm for optimizing a program written in Python.",
        "input": "def makeChange(coinSet, change):\n    bestSet = []\n    for i in range(change + 1):\n        bestSet.append([i])\n    for i in range(1, change + 1):\n        for j in range(len(coinSet)):\n            if coinSet[j] < = i:\n                bestSet[i] = min(bestSet[i], 1 + bestSet[i - coinSet[j]]):\n    return bestSet[change]",
        "output": "def makeChange(coinSet, change):\n    bestSet = []\n    for i in range(change + 1):\n        bestSet.append([i])\n\n    # populate the list until the change amount\n    for i in range(1, change + 1):\n        for j in range(len(coinSet)):\n            # test to see if the coin is less then or equal to the change\n            if coinSet[j] <= i:\n                bestSet[i] = min(bestSet[i], 1 + bestSet[i - coinSet[j]])\n\n    # check to make sure the coins sum upto given amount else return None\n    if(sum(bestSet[change]) != change):\n        return None\n\n    return bestSet[change]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm for optimizing a program written in Python.\n\n### Input:\ndef makeChange(coinSet, change):\n    bestSet = []\n    for i in range(change + 1):\n        bestSet.append([i])\n    for i in range(1, change + 1):\n        for j in range(len(coinSet)):\n            if coinSet[j] < = i:\n                bestSet[i] = min(bestSet[i], 1 + bestSet[i - coinSet[j]]):\n    return bestSet[change]\n\n### Output:\ndef makeChange(coinSet, change):\n    bestSet = []\n    for i in range(change + 1):\n        bestSet.append([i])\n\n    # populate the list until the change amount\n    for i in range(1, change + 1):\n        for j in range(len(coinSet)):\n            # test to see if the coin is less then or equal to the change\n            if coinSet[j] <= i:\n                bestSet[i] = min(bestSet[i], 1 + bestSet[i - coinSet[j]])\n\n    # check to make sure the coins sum upto given amount else return None\n    if(sum(bestSet[change]) != change):\n        return None\n\n    return bestSet[change]"
    },
    {
        "instruction": "Develop a process in Python to classify a set of data points into two categories.",
        "input": "[1, 2, 3, 4, 5, 6, 7]",
        "output": "def classifier(data_points):\n categories = []\n for data_point in data_points:\n if data_point % 2 == 0:\n categories.append('even')\n else:\n categories.append('odd')\n return categories",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a process in Python to classify a set of data points into two categories.\n\n### Input:\n[1, 2, 3, 4, 5, 6, 7]\n\n### Output:\ndef classifier(data_points):\n categories = []\n for data_point in data_points:\n if data_point % 2 == 0:\n categories.append('even')\n else:\n categories.append('odd')\n return categories"
    },
    {
        "instruction": "Design a function in Python to find the most repeated character in a string.",
        "input": "my_string=\"Hello world\"",
        "output": "def most_repeated_character(my_string):\n    counts = Counter(my_string)\n    max_char = max(counts, key=counts.get)\n    return max_char\n\nprint(\"Most repeated character:\", most_repeated_character(my_string))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to find the most repeated character in a string.\n\n### Input:\nmy_string=\"Hello world\"\n\n### Output:\ndef most_repeated_character(my_string):\n    counts = Counter(my_string)\n    max_char = max(counts, key=counts.get)\n    return max_char\n\nprint(\"Most repeated character:\", most_repeated_character(my_string))"
    },
    {
        "instruction": "Write a Python program to classify a given set of data into any two classes.",
        "input": "data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "def classify_data(data):\n class_1 = []\n class_2 = []\n\n for value in data:\n if value % 2 == 0:\n class_1.append(value)\n else:\n class_2.append(value)\n\n return class_1, class_2",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify a given set of data into any two classes.\n\n### Input:\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n### Output:\ndef classify_data(data):\n class_1 = []\n class_2 = []\n\n for value in data:\n if value % 2 == 0:\n class_1.append(value)\n else:\n class_2.append(value)\n\n return class_1, class_2"
    },
    {
        "instruction": "Write a Python program to generate a random list of length n containing integers within range (0, n-1).",
        "input": "n = 6",
        "output": "import random \n  \ndef random_list(n): \n    # Generating a random list of length n\n    random_list = [] \n    for i in range(n): \n        random_list.append(random.randint(0,n-1)) \n      \n    return random_list \n  \n# Driver Code \nn = 6\nprint(random_list(n))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a random list of length n containing integers within range (0, n-1).\n\n### Input:\nn = 6\n\n### Output:\nimport random \n  \ndef random_list(n): \n    # Generating a random list of length n\n    random_list = [] \n    for i in range(n): \n        random_list.append(random.randint(0,n-1)) \n      \n    return random_list \n  \n# Driver Code \nn = 6\nprint(random_list(n))"
    },
    {
        "instruction": "Create a Python script to download a web page from a URL.",
        "input": "https://example.com",
        "output": "import requests\n\n# Get the webpage\nurl = 'https://example.com'\nr = requests.get(url)\n\n# Save the webpage to a file \nwith open('webpage.html', 'wb') as f:\n f.write(r.content)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to download a web page from a URL.\n\n### Input:\nhttps://example.com\n\n### Output:\nimport requests\n\n# Get the webpage\nurl = 'https://example.com'\nr = requests.get(url)\n\n# Save the webpage to a file \nwith open('webpage.html', 'wb') as f:\n f.write(r.content)"
    },
    {
        "instruction": "Remove the duplicates from a given array using Python",
        "input": "data = [1, 3, 3, 4, 5, 6, 6, 7]",
        "output": "def remove_duplicates(data):\n    result = []\n    for element in data:\n        if element not in result:\n            result.append(element)\n    return result\n\nprint(remove_duplicates([1, 3, 3, 4, 5, 6, 6, 7]))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRemove the duplicates from a given array using Python\n\n### Input:\ndata = [1, 3, 3, 4, 5, 6, 6, 7]\n\n### Output:\ndef remove_duplicates(data):\n    result = []\n    for element in data:\n        if element not in result:\n            result.append(element)\n    return result\n\nprint(remove_duplicates([1, 3, 3, 4, 5, 6, 6, 7]))"
    },
    {
        "instruction": "Implement an algorithm to find a substring in a given string using a greedy approach in Python.",
        "input": "string = \"This is a sample string\"\nsubstring = \"sample\"",
        "output": "def find_substring(string, substring):\n    start = 0\n    result = \"\"\n    while start < len(string):\n        idx = string.find(substring, start)\n        if idx == -1:\n            break\n        result += string[idx:idx+len(substring)]\n        start = idx+len(substring)\n    return result",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm to find a substring in a given string using a greedy approach in Python.\n\n### Input:\nstring = \"This is a sample string\"\nsubstring = \"sample\"\n\n### Output:\ndef find_substring(string, substring):\n    start = 0\n    result = \"\"\n    while start < len(string):\n        idx = string.find(substring, start)\n        if idx == -1:\n            break\n        result += string[idx:idx+len(substring)]\n        start = idx+len(substring)\n    return result"
    },
    {
        "instruction": "Create a Python program to group words that are anagrams into a list.",
        "input": "['eat', 'tea', 'tan', 'ate', 'nat', 'bat']",
        "output": "def group_anagrams(words): \n    result = {} \n      \n    for word in words: \n        key = ''.join(sorted(word)) \n        if key in result.keys(): \n            result[key].append(word) \n        else: \n            result[key] = [word] \n  \n    return list(result.values()) \n\nwords = ['eat', 'tea', 'tan', 'ate', 'nat', 'bat'] \nprint(group_anagrams(words))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to group words that are anagrams into a list.\n\n### Input:\n['eat', 'tea', 'tan', 'ate', 'nat', 'bat']\n\n### Output:\ndef group_anagrams(words): \n    result = {} \n      \n    for word in words: \n        key = ''.join(sorted(word)) \n        if key in result.keys(): \n            result[key].append(word) \n        else: \n            result[key] = [word] \n  \n    return list(result.values()) \n\nwords = ['eat', 'tea', 'tan', 'ate', 'nat', 'bat'] \nprint(group_anagrams(words))"
    },
    {
        "instruction": "Generate a Python script to cluster handwritten numbers by a given similarity metric.",
        "input": "",
        "output": "# import the necessary libraries\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn.datasets import load_digits\n\n# load the digits dataset\ndigits = load_digits()\n\n# define the clustering model\nkmeans_model = KMeans(n_clusters=10, random_state=42)\n\n# fit the model to the digits dataset \nkmeans_model.fit(digits.data)\n\n# assign labels to the clusters\nlabels = kmeans_model.labels_\n\n# plot the clusters\nfor i in range(10):\n    # create a mask to isolate each cluster\n    mask = labels == i\n    \n    # plot the images of the cluster\n    plt.title(f\"Cluster {i}\")\n    plt.imshow(digits.images[mask][0], cmap=\"gray\")\n    plt.show()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to cluster handwritten numbers by a given similarity metric.\n\n### Input:\n\n\n### Output:\n# import the necessary libraries\nimport matplotlib.pyplot as plt\nfrom sklearn.cluster import KMeans\nfrom sklearn.datasets import load_digits\n\n# load the digits dataset\ndigits = load_digits()\n\n# define the clustering model\nkmeans_model = KMeans(n_clusters=10, random_state=42)\n\n# fit the model to the digits dataset \nkmeans_model.fit(digits.data)\n\n# assign labels to the clusters\nlabels = kmeans_model.labels_\n\n# plot the clusters\nfor i in range(10):\n    # create a mask to isolate each cluster\n    mask = labels == i\n    \n    # plot the images of the cluster\n    plt.title(f\"Cluster {i}\")\n    plt.imshow(digits.images[mask][0], cmap=\"gray\")\n    plt.show()"
    },
    {
        "instruction": "Optimize the given Python code to improve the runtime.",
        "input": "def sum_list(nums):\n sum_total = 0\n for n in nums:\n  sum_total += n \n return sum_total\n\nnums = [1, 2, 3, 4, 5]",
        "output": "def sum_list(nums):\n return sum(nums)\n\nnums = [1, 2, 3, 4, 5]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the given Python code to improve the runtime.\n\n### Input:\ndef sum_list(nums):\n sum_total = 0\n for n in nums:\n  sum_total += n \n return sum_total\n\nnums = [1, 2, 3, 4, 5]\n\n### Output:\ndef sum_list(nums):\n return sum(nums)\n\nnums = [1, 2, 3, 4, 5]"
    },
    {
        "instruction": "Implement a function to merge and sort two given sorted lists in Python.",
        "input": "list_1 = [1, 3, 5, 6, 7]\nlist_2 = [4, 8, 9, 10]",
        "output": "def merge_sort(list_1, list_2):\n    merged_list = list_1 + list_2\n    merged_list.sort()\n    return merged_list\n\nif __name__ == '__main__':\n    list_1 = [1, 3, 5, 6, 7]\n    list_2 = [4, 8, 9, 10]\n    print(merge_sort(list_1, list_2))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function to merge and sort two given sorted lists in Python.\n\n### Input:\nlist_1 = [1, 3, 5, 6, 7]\nlist_2 = [4, 8, 9, 10]\n\n### Output:\ndef merge_sort(list_1, list_2):\n    merged_list = list_1 + list_2\n    merged_list.sort()\n    return merged_list\n\nif __name__ == '__main__':\n    list_1 = [1, 3, 5, 6, 7]\n    list_2 = [4, 8, 9, 10]\n    print(merge_sort(list_1, list_2))"
    },
    {
        "instruction": "Convert the following pseudocode into a Python program: \n\n<Set X to be the sum of the cubes of all numbers from 1 to 10>",
        "input": "",
        "output": "x = 0\n\nfor i in range(1,11):\n    x += i**3\n\nprint(x)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following pseudocode into a Python program: \n\n<Set X to be the sum of the cubes of all numbers from 1 to 10>\n\n### Input:\n\n\n### Output:\nx = 0\n\nfor i in range(1,11):\n    x += i**3\n\nprint(x)"
    },
    {
        "instruction": "Given a list of numbers, write a python program that finds the highest and second-highest number in the list.",
        "input": "my_list = [1,5,10,14,19,25]",
        "output": "def find_max_min(my_list):\n    max1 = float(\"-inf\")\n    max2 = float(\"-inf\")\n    for num in my_list:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return max1, max2\n\nmax1, max2 = find_max_min(my_list)\nprint(\"The highest and second-highest number in the list are: %d, %d\" % (max1, max2))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of numbers, write a python program that finds the highest and second-highest number in the list.\n\n### Input:\nmy_list = [1,5,10,14,19,25]\n\n### Output:\ndef find_max_min(my_list):\n    max1 = float(\"-inf\")\n    max2 = float(\"-inf\")\n    for num in my_list:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return max1, max2\n\nmax1, max2 = find_max_min(my_list)\nprint(\"The highest and second-highest number in the list are: %d, %d\" % (max1, max2))"
    },
    {
        "instruction": "Develop an algorithm to check if a string S is a palindrome in Python.",
        "input": "String S = \"racecar\"",
        "output": "def is_palindrome(s):\n    # Convert strings to lowercase\n    s = s.lower()\n \n    # Iterate through middle of string with indices \n    for i in range(len(s) // 2):\n        if s[i] != s[len(s) - i - 1]:\n            return False\n    return True",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm to check if a string S is a palindrome in Python.\n\n### Input:\nString S = \"racecar\"\n\n### Output:\ndef is_palindrome(s):\n    # Convert strings to lowercase\n    s = s.lower()\n \n    # Iterate through middle of string with indices \n    for i in range(len(s) // 2):\n        if s[i] != s[len(s) - i - 1]:\n            return False\n    return True"
    },
    {
        "instruction": "Implement a Python program for the 0/1 knapsack problem.",
        "input": "weights = [10, 30, 20] \nvalues = [30, 90, 60]\ncapacity = 50",
        "output": "def knapsack_0_1(weights, values, capacity):\n    n = len(values)\n    matrix = [ [0]*(capacity+1) for _ in range(n+1) ]\n    \n    for i in range(1, n+1):\n        for c in range(capacity+1):\n            if weights[i-1] > c:\n                matrix[i][c] = matrix[i-1][c]\n            else:\n                matrix[i][c] = max(matrix[i-1][c],\n                                  values[i-1] + matrix[i-1][c-weights[i-1]])\n    return matrix[i][c]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python program for the 0/1 knapsack problem.\n\n### Input:\nweights = [10, 30, 20] \nvalues = [30, 90, 60]\ncapacity = 50\n\n### Output:\ndef knapsack_0_1(weights, values, capacity):\n    n = len(values)\n    matrix = [ [0]*(capacity+1) for _ in range(n+1) ]\n    \n    for i in range(1, n+1):\n        for c in range(capacity+1):\n            if weights[i-1] > c:\n                matrix[i][c] = matrix[i-1][c]\n            else:\n                matrix[i][c] = max(matrix[i-1][c],\n                                  values[i-1] + matrix[i-1][c-weights[i-1]])\n    return matrix[i][c]"
    },
    {
        "instruction": "Write a Python script to simulate a first person shooter game.",
        "input": "No input required",
        "output": "import pygame\nimport math\n\n# Initialize pygame\npygame.init()\nclock = pygame.time.Clock()\n\n# Setup window\nwindow_width, window_height = 800, 600\nwindow = pygame.display.set_mode((window_width, window_height))\npygame.display.set_caption(\"First Person Shooter\")\n\n# Load images\nplayer_image = pygame.image.load(\"player.png\")\n\n# Setup player\nplayer_x = 400\nplayer_y = 300\nplayer_x_change = 0\nplayer_y_change = 0\n\n# Game loop\nrun = True\nwhile run:\n    # Window background\n    window.fill((0, 0, 0))\n    \n    # Track user events\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            run = False\n    \n    # Get and handle key inputs\n    keys = pygame.key.get_pressed()\n    if keys[pygame.K_LEFT]:\n        player_x_change = -4\n    if keys[pygame.K_RIGHT]:\n        player_x_change = 4\n    if keys[pygame.K_UP]:\n        player_y_change = -4\n    if keys[pygame.K_DOWN]:\n        player_y_change = 4\n    \n    # Move player\n    player_x += player_x_change\n    player_y += player_y_change\n    \n    # Boundary check\n    if player_x <= 0:\n        player_x = 0\n    elif player_x >= window_width - 64:\n        player_x = window_width - 64\n    if player_y <= 0:\n        player_y = 0\n    elif player_y >= window_height - 64:\n        player_y = window_height - 64\n    \n    # Display player\n    window.blit(player_image, (player_x, player_y))\n    \n    # Update window\n    pygame.display.update()\n    \n    # Wait for a frame\n    clock.tick(60)\n    \n# Quit game\npygame.quit()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to simulate a first person shooter game.\n\n### Input:\nNo input required\n\n### Output:\nimport pygame\nimport math\n\n# Initialize pygame\npygame.init()\nclock = pygame.time.Clock()\n\n# Setup window\nwindow_width, window_height = 800, 600\nwindow = pygame.display.set_mode((window_width, window_height))\npygame.display.set_caption(\"First Person Shooter\")\n\n# Load images\nplayer_image = pygame.image.load(\"player.png\")\n\n# Setup player\nplayer_x = 400\nplayer_y = 300\nplayer_x_change = 0\nplayer_y_change = 0\n\n# Game loop\nrun = True\nwhile run:\n    # Window background\n    window.fill((0, 0, 0))\n    \n    # Track user events\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            run = False\n    \n    # Get and handle key inputs\n    keys = pygame.key.get_pressed()\n    if keys[pygame.K_LEFT]:\n        player_x_change = -4\n    if keys[pygame.K_RIGHT]:\n        player_x_change = 4\n    if keys[pygame.K_UP]:\n        player_y_change = -4\n    if keys[pygame.K_DOWN]:\n        player_y_change = 4\n    \n    # Move player\n    player_x += player_x_change\n    player_y += player_y_change\n    \n    # Boundary check\n    if player_x <= 0:\n        player_x = 0\n    elif player_x >= window_width - 64:\n        player_x = window_width - 64\n    if player_y <= 0:\n        player_y = 0\n    elif player_y >= window_height - 64:\n        player_y = window_height - 64\n    \n    # Display player\n    window.blit(player_image, (player_x, player_y))\n    \n    # Update window\n    pygame.display.update()\n    \n    # Wait for a frame\n    clock.tick(60)\n    \n# Quit game\npygame.quit()"
    },
    {
        "instruction": "Design a function in Python to generate a random password.",
        "input": "",
        "output": "\"\"\"\nDesign a function in Python to generate a random password\n\"\"\"\n\nimport string\nimport random\n\ndef generate_password(length=16):\n    # list of possible characters for the password\n    characters = string.ascii_letters + string.punctuation + string.digits\n    \n    # generate a random password\n    password = ''.join(random.choice(characters) for i in range(length))\n    \n    # return the random password\n    return password\n\n# generate a random password\nrandom_password = generate_password()\n\n# print the random password\nprint(random_password)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to generate a random password.\n\n### Input:\n\n\n### Output:\n\"\"\"\nDesign a function in Python to generate a random password\n\"\"\"\n\nimport string\nimport random\n\ndef generate_password(length=16):\n    # list of possible characters for the password\n    characters = string.ascii_letters + string.punctuation + string.digits\n    \n    # generate a random password\n    password = ''.join(random.choice(characters) for i in range(length))\n    \n    # return the random password\n    return password\n\n# generate a random password\nrandom_password = generate_password()\n\n# print the random password\nprint(random_password)"
    },
    {
        "instruction": "Write a Python program that predicts the future price of a stock in two weeks.",
        "input": "Current stock prices: IBM $145, AAPL $285, MSFT $181",
        "output": "# Import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Load the data\ndata = [[145, 285, 181], [149, 290, 184], [153, 295, 187]]\ndata = pd.DataFrame(data, columns=['IBM', 'AAPL', 'MSFT'])\n\n# Define and fit the linear regression model\nmodel = LinearRegression()\nmodel.fit(data[['IBM', 'AAPL', 'MSFT']], data.shift(-1))\n\n# Make predictions for the future stock prices\npredictions = model.predict([[145, 285, 181], [149, 290, 184]])[0]\nprint('Predicted future stock prices: IBM: %f, AAPL: $%f, MSFT: $%f.' %\n  (predictions[0], predictions[1], predictions[2]))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that predicts the future price of a stock in two weeks.\n\n### Input:\nCurrent stock prices: IBM $145, AAPL $285, MSFT $181\n\n### Output:\n# Import necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Load the data\ndata = [[145, 285, 181], [149, 290, 184], [153, 295, 187]]\ndata = pd.DataFrame(data, columns=['IBM', 'AAPL', 'MSFT'])\n\n# Define and fit the linear regression model\nmodel = LinearRegression()\nmodel.fit(data[['IBM', 'AAPL', 'MSFT']], data.shift(-1))\n\n# Make predictions for the future stock prices\npredictions = model.predict([[145, 285, 181], [149, 290, 184]])[0]\nprint('Predicted future stock prices: IBM: %f, AAPL: $%f, MSFT: $%f.' %\n  (predictions[0], predictions[1], predictions[2]))"
    },
    {
        "instruction": "Generate a Python class called Circle that stores the radius of a circle and calculates the area.",
        "input": "",
        "output": "class Circle:\n\n    def __init__(self, radius):\n        self.radius = radius\n\n    def calculateArea(self):\n        return 3.14159 * self.radius * self.radius",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class called Circle that stores the radius of a circle and calculates the area.\n\n### Input:\n\n\n### Output:\nclass Circle:\n\n    def __init__(self, radius):\n        self.radius = radius\n\n    def calculateArea(self):\n        return 3.14159 * self.radius * self.radius"
    },
    {
        "instruction": "Generate a function in Python using the input argument that takes in a string, removes all the vowels from it, and returns a new string without any vowels.",
        "input": "the quick brown fox jumps over the lazy dog",
        "output": "def remove_vowels(text):\n    no_vowels = \"\"\n    for character in text:\n        if character not in \"aeiouAEIOU\":\n            no_vowels += character\n    return no_vowels",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python using the input argument that takes in a string, removes all the vowels from it, and returns a new string without any vowels.\n\n### Input:\nthe quick brown fox jumps over the lazy dog\n\n### Output:\ndef remove_vowels(text):\n    no_vowels = \"\"\n    for character in text:\n        if character not in \"aeiouAEIOU\":\n            no_vowels += character\n    return no_vowels"
    },
    {
        "instruction": "Write a function to count the number of syllables in a word using regular expression in Python?",
        "input": "Not applicable",
        "output": "import re\n\ndef count_syllables(word):\n  pattern = r'[aeiouy]+'\n  return len(re.findall(pattern, word))\n\nprint(count_syllables('syllable'))  # 3\nprint(count_syllables('balloons'))  # 2",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to count the number of syllables in a word using regular expression in Python?\n\n### Input:\nNot applicable\n\n### Output:\nimport re\n\ndef count_syllables(word):\n  pattern = r'[aeiouy]+'\n  return len(re.findall(pattern, word))\n\nprint(count_syllables('syllable'))  # 3\nprint(count_syllables('balloons'))  # 2"
    },
    {
        "instruction": "Generate a function in Python to zip two lists.",
        "input": "list1 = [\"a\", \"b\", \"c\"]\nlist2 = [1, 2, 3]",
        "output": "def zip_two_lists(list1, list2):\n    return zip(list1, list2)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python to zip two lists.\n\n### Input:\nlist1 = [\"a\", \"b\", \"c\"]\nlist2 = [1, 2, 3]\n\n### Output:\ndef zip_two_lists(list1, list2):\n    return zip(list1, list2)"
    },
    {
        "instruction": "Write a Python program that sorts a list of numbers using the Merge Sort algorithm.",
        "input": "Not applicable",
        "output": "def merge_sort(lst):\n # Base case: if lst has 0 or 1 element, it is already sorted\n if len(lst) <= 1:\n  return lst\n\n # Split the list into two halves\n mid = len(lst) // 2\n left_half = merge_sort(lst[:mid])\n right_half = merge_sort(lst[mid:])\n\n # Merge the sorted halves\n return merge(left_half, right_half)\n\ndef merge(left_half, right_half):\n # Create an empty list\n merged_list = []\n\n # Each loop iteration, take the smallest remaining element in each list\n while left_half and right_half:\n  if left_half[0] <= right_half[0]:\n   merged_list.append(left_half.pop(0))\n  else:\n   merged_list.append(right_half.pop(0))\n\n # Add the remainder of the left or right half\n merged_list.extend(left_half)\n merged_list.extend(right_half)\n\n # Return the merged list\n return merged_list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that sorts a list of numbers using the Merge Sort algorithm.\n\n### Input:\nNot applicable\n\n### Output:\ndef merge_sort(lst):\n # Base case: if lst has 0 or 1 element, it is already sorted\n if len(lst) <= 1:\n  return lst\n\n # Split the list into two halves\n mid = len(lst) // 2\n left_half = merge_sort(lst[:mid])\n right_half = merge_sort(lst[mid:])\n\n # Merge the sorted halves\n return merge(left_half, right_half)\n\ndef merge(left_half, right_half):\n # Create an empty list\n merged_list = []\n\n # Each loop iteration, take the smallest remaining element in each list\n while left_half and right_half:\n  if left_half[0] <= right_half[0]:\n   merged_list.append(left_half.pop(0))\n  else:\n   merged_list.append(right_half.pop(0))\n\n # Add the remainder of the left or right half\n merged_list.extend(left_half)\n merged_list.extend(right_half)\n\n # Return the merged list\n return merged_list"
    },
    {
        "instruction": "Design a Python dictionary for storing data about countries and their corresponding capital cities.",
        "input": "",
        "output": "countries_cities = {\n    \"UK\": \"London\", \n    \"France\": \"Paris\", \n    \"Spain\": \"Madrid\", \n    \"Germany\": \"Berlin\", \n    \"Italy\": \"Rome\"\n    }",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python dictionary for storing data about countries and their corresponding capital cities.\n\n### Input:\n\n\n### Output:\ncountries_cities = {\n    \"UK\": \"London\", \n    \"France\": \"Paris\", \n    \"Spain\": \"Madrid\", \n    \"Germany\": \"Berlin\", \n    \"Italy\": \"Rome\"\n    }"
    },
    {
        "instruction": "Develop a Python class that implements a stack data structure with push and pop methods.",
        "input": "",
        "output": "class Stack:\n  def __init__(self):\n    self.items = []\n    \n  def push(self, item):\n    self.items.append(item)\n    \n  def pop(self):\n    return self.items.pop()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python class that implements a stack data structure with push and pop methods.\n\n### Input:\n\n\n### Output:\nclass Stack:\n  def __init__(self):\n    self.items = []\n    \n  def push(self, item):\n    self.items.append(item)\n    \n  def pop(self):\n    return self.items.pop()"
    },
    {
        "instruction": "Can you generate code to clear all whitespace from a given string in Python?",
        "input": "Input String = \" Hello World    \"",
        "output": "def clear_whitespace(s):\n        s = s.strip() # Remove leading and trailing whitespaces\n        s = \"\".join(s.split()) # Remove middle whitespaces\n        return s\n\nprint(clear_whitespace(\" Hello World    \"))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you generate code to clear all whitespace from a given string in Python?\n\n### Input:\nInput String = \" Hello World    \"\n\n### Output:\ndef clear_whitespace(s):\n        s = s.strip() # Remove leading and trailing whitespaces\n        s = \"\".join(s.split()) # Remove middle whitespaces\n        return s\n\nprint(clear_whitespace(\" Hello World    \"))"
    },
    {
        "instruction": "Write a Python script that takes a list of words as input and calculates the average length of the words.",
        "input": "[\"Hello\",\"World\",\"Beautiful\",\"Day\"]",
        "output": "words = [\"Hello\",\"World\",\"Beautiful\",\"Day\"]\n\nlengths = [len(word) for word in words]\navg_length = sum(lengths) / len(lengths)\n\nprint(\"Average word length is {:.2f}\".format(avg_length))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that takes a list of words as input and calculates the average length of the words.\n\n### Input:\n[\"Hello\",\"World\",\"Beautiful\",\"Day\"]\n\n### Output:\nwords = [\"Hello\",\"World\",\"Beautiful\",\"Day\"]\n\nlengths = [len(word) for word in words]\navg_length = sum(lengths) / len(lengths)\n\nprint(\"Average word length is {:.2f}\".format(avg_length))"
    },
    {
        "instruction": "Generate a Python program to check if a list contains a given value.",
        "input": "",
        "output": "def check_if_contains(lst, val):\n    return val in lst",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to check if a list contains a given value.\n\n### Input:\n\n\n### Output:\ndef check_if_contains(lst, val):\n    return val in lst"
    },
    {
        "instruction": "Create a Python program to analyze the sentiment of a given sentence.",
        "input": "sentence = 'I am very happy to be here'",
        "output": "from textblob import TextBlob\n\nsentence = 'I am very happy to be here'\nsentiment = TextBlob(sentence).polarity\n\nif sentiment > 0:\n    print(\"Sentiment: Positive\")\nelif sentiment == 0:\n    print(\"Sentiment: Neutral\")\nelse:\n    print(\"Sentiment: Negative\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to analyze the sentiment of a given sentence.\n\n### Input:\nsentence = 'I am very happy to be here'\n\n### Output:\nfrom textblob import TextBlob\n\nsentence = 'I am very happy to be here'\nsentiment = TextBlob(sentence).polarity\n\nif sentiment > 0:\n    print(\"Sentiment: Positive\")\nelif sentiment == 0:\n    print(\"Sentiment: Neutral\")\nelse:\n    print(\"Sentiment: Negative\")"
    },
    {
        "instruction": "Develop an algorithm in Python to find the depth of a binary tree.",
        "input": "",
        "output": "def findDepth(root): \n    if root is None: \n        return 0 ;  \n  \n    else :  \n        left_height = findDepth(root.left) \n        right_height = findDepth(root.right) \n  \n        if left_height > right_height : \n            return left_height+1\n        else: \n            return right_height+1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to find the depth of a binary tree.\n\n### Input:\n\n\n### Output:\ndef findDepth(root): \n    if root is None: \n        return 0 ;  \n  \n    else :  \n        left_height = findDepth(root.left) \n        right_height = findDepth(root.right) \n  \n        if left_height > right_height : \n            return left_height+1\n        else: \n            return right_height+1"
    },
    {
        "instruction": "Write a Python program to take a string as input and return a new string with all vowels removed.",
        "input": "",
        "output": "def remove_vowels(string):\n    # compile regex\n    regex = re.compile('[aeiou]', re.IGNORECASE)\n    # replace matching characters with an empty string\n    return regex.sub('', string)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to take a string as input and return a new string with all vowels removed.\n\n### Input:\n\n\n### Output:\ndef remove_vowels(string):\n    # compile regex\n    regex = re.compile('[aeiou]', re.IGNORECASE)\n    # replace matching characters with an empty string\n    return regex.sub('', string)"
    },
    {
        "instruction": "Build a classifier in Python that can classify a movie against different genres.",
        "input": "",
        "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# read in the dataset\ndf = pd.read_csv('movie_data.csv')\n\n# remove irrelevant columns\ndf_clean = df.drop(['plot', 'cast', 'director', 'year'], axis=1)\n\n# feature engineering\nX = df_clean.drop('genre', axis=1).values\ny = df_clean['genre'].values\n\n# split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# train the model \nrf = RandomForestClassifier(n_estimators=1000, random_state=0)\nrf.fit(X_train, y_train)\n\n# evaluate the model\naccuracy = rf.score(X_test, y_test)\nprint('Model accuracy on test set: ', accuracy)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a classifier in Python that can classify a movie against different genres.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# read in the dataset\ndf = pd.read_csv('movie_data.csv')\n\n# remove irrelevant columns\ndf_clean = df.drop(['plot', 'cast', 'director', 'year'], axis=1)\n\n# feature engineering\nX = df_clean.drop('genre', axis=1).values\ny = df_clean['genre'].values\n\n# split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# train the model \nrf = RandomForestClassifier(n_estimators=1000, random_state=0)\nrf.fit(X_train, y_train)\n\n# evaluate the model\naccuracy = rf.score(X_test, y_test)\nprint('Model accuracy on test set: ', accuracy)"
    },
    {
        "instruction": "Create a Python Flask application which allows users to store and retrieve a list of books.",
        "input": "Not applicable",
        "output": "from flask import Flask, request\nimport sqlite3\n\n# configure the database\ndb_name = 'booklist.db'\n\ndef get_cursor():\n    conn = sqlite3.connect(db_name)\n    conn.row_factory = sqlite3.Row\n    return conn.cursor()\n\n# create the Flask application\napp = Flask(__name__)\n\n# create a route to view all books\n@app.route('/books', methods=['GET'])\ndef view_books():\n    cursor = get_cursor()\n    cursor.execute('SELECT * FROM books')\n    books = cursor.fetchall()\n    return books\n\n# create a route to store a book\n@app.route('/books', methods=['POST'])\ndef store_book():\n    title = request.json.get('title')\n    author = request.json.get('author')\n\n    cursor = get_cursor()\n    cursor.execute('INSERT INTO books (title, author) VALUES (?,?)', (title, author))\n    conn = cursor.connection\n    conn.commit()\n    return 'Book Added successfully'\n\n# run the application\nif __name__ == '__main__':\n    app.run(debug=True)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python Flask application which allows users to store and retrieve a list of books.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, request\nimport sqlite3\n\n# configure the database\ndb_name = 'booklist.db'\n\ndef get_cursor():\n    conn = sqlite3.connect(db_name)\n    conn.row_factory = sqlite3.Row\n    return conn.cursor()\n\n# create the Flask application\napp = Flask(__name__)\n\n# create a route to view all books\n@app.route('/books', methods=['GET'])\ndef view_books():\n    cursor = get_cursor()\n    cursor.execute('SELECT * FROM books')\n    books = cursor.fetchall()\n    return books\n\n# create a route to store a book\n@app.route('/books', methods=['POST'])\ndef store_book():\n    title = request.json.get('title')\n    author = request.json.get('author')\n\n    cursor = get_cursor()\n    cursor.execute('INSERT INTO books (title, author) VALUES (?,?)', (title, author))\n    conn = cursor.connection\n    conn.commit()\n    return 'Book Added successfully'\n\n# run the application\nif __name__ == '__main__':\n    app.run(debug=True)"
    },
    {
        "instruction": "Write a Python program to demonstrate inheritance between two classes.",
        "input": "",
        "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n \n    def show_info(self):\n        print(\"Name of Person is: \", self.name)\n        print(\"Age of Person is: \", self.age)\n    \nclass Employee(Person):\n    def __init__(self, name, age, emp_id):\n        super().__init__(name, age)\n        self.emp_id = emp_id\n    \n    def show_info(self):\n        super().show_info()\n        print(\"ID of Employee is: \", self.emp_id)\n \nemp = Employee(\"John Doe\", 30, \"E1001\")\nemp.show_info()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to demonstrate inheritance between two classes.\n\n### Input:\n\n\n### Output:\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n \n    def show_info(self):\n        print(\"Name of Person is: \", self.name)\n        print(\"Age of Person is: \", self.age)\n    \nclass Employee(Person):\n    def __init__(self, name, age, emp_id):\n        super().__init__(name, age)\n        self.emp_id = emp_id\n    \n    def show_info(self):\n        super().show_info()\n        print(\"ID of Employee is: \", self.emp_id)\n \nemp = Employee(\"John Doe\", 30, \"E1001\")\nemp.show_info()"
    },
    {
        "instruction": "Write a Python program to implement a given sorting algorithm",
        "input": "Array: [9, 8, 7, 6, 5, 4, 3, 2, 1]\nSorting Algorithm: Insertion Sort",
        "output": "def insertion_sort(arr):\n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key \n\narr = [9, 8, 7, 6, 5, 4, 3, 2, 1]\ninsertion_sort(arr)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to implement a given sorting algorithm\n\n### Input:\nArray: [9, 8, 7, 6, 5, 4, 3, 2, 1]\nSorting Algorithm: Insertion Sort\n\n### Output:\ndef insertion_sort(arr):\n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key \n\narr = [9, 8, 7, 6, 5, 4, 3, 2, 1]\ninsertion_sort(arr)"
    },
    {
        "instruction": "Write a Python program to create a class to represent a bank account and add two methods, deposit and withdrawal, to modify the account balance.",
        "input": "Not applicable.",
        "output": "class BankAccount:\n    \n    def __init__(self, name, balance=0.0):\n        self.name = name\n        self.balance = balance\n        \n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n    \n    def withdraw(self, amount):\n        if amount > self.balance:\n            raise RuntimeError('Amount greater than available balance.')\n        self.balance -= amount\n        return self.balance",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a class to represent a bank account and add two methods, deposit and withdrawal, to modify the account balance.\n\n### Input:\nNot applicable.\n\n### Output:\nclass BankAccount:\n    \n    def __init__(self, name, balance=0.0):\n        self.name = name\n        self.balance = balance\n        \n    def deposit(self, amount):\n        self.balance += amount\n        return self.balance\n    \n    def withdraw(self, amount):\n        if amount > self.balance:\n            raise RuntimeError('Amount greater than available balance.')\n        self.balance -= amount\n        return self.balance"
    },
    {
        "instruction": "The given code is a Python module that provides functions to interact with video4linux2 (v4l2) devices. To use this module, import it into your Python script and call the functions as needed. The functions include:\n\n- `list_devices()`: lists all v4l2 devices currently connected to the system.\n- `list_resolutions(device)`: lists all supported resolutions for a given v4l2 device.\n- `get_brightness(device)`: gets the current brightness value for a given v4l2 device.\n- `set_brightness(device, value)`: sets the brightness value for a given v4l2 device.\n- `get_contrast(device)`: gets the current contrast value for a given v4l2 device.\n- `set_contrast(device, value)`: sets the contrast value for a given v4l2 device.\n- `get_saturation(device)`: gets the current saturation value for a given v4l2 device.\n- `set_saturation(device, value)`: sets the saturation value for a given v4l2 device.\n- `get_hue(device)`: gets the current hue value for a given v4l2 device.\n- `set_hue(device, value)`: sets the hue value for a given v4l2 device.",
        "input": "",
        "output": "\n# Copyright (c) 2013 Calin Crisan\n# This file is part of motionEye.\n#\n# motionEye is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n# \n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n# \n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>. \n\nimport fcntl\nimport logging\nimport os.path\nimport re\nimport stat\nimport subprocess\nimport time\nimport utils\n\n\n_resolutions_cache = {}\n_ctrls_cache = {}\n_ctrl_values_cache = {}\n\n_DEV_V4L_BY_ID = '/dev/v4l/by-id/'\n\n\ndef find_v4l2_ctl():\n    try:\n        return subprocess.check_output('which v4l2-ctl', shell=True).strip()\n    \n    except subprocess.CalledProcessError: # not found\n        return None\n\n\ndef list_devices():\n    global _resolutions_cache, _ctrls_cache, _ctrl_values_cache\n    \n    logging.debug('listing v4l2 devices...')\n    \n    try:\n        output = ''\n        started = time.time()\n        p = subprocess.Popen('v4l2-ctl --list-devices 2>/dev/null', shell=True, stdout=subprocess.PIPE, bufsize=1)\n\n        fd = p.stdout.fileno()\n        fl = fcntl.fcntl(fd, fcntl.F_GETFL)\n        fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)\n\n        while True:\n            try:\n                data = p.stdout.read(1024)\n                if not data:\n                    break\n            \n            except IOError:\n                data = ''\n                time.sleep(0.01)\n\n            output += data\n\n            if len(output) > 10240:\n                logging.warn('v4l2-ctl command returned more than 10k of output')\n                break\n            \n            if time.time() - started > 3:\n                logging.warn('v4l2-ctl command ran for more than 3 seconds')\n                break\n\n    except subprocess.CalledProcessError:\n        logging.debug('failed to list devices (probably no devices installed)')\n        return []\n\n    try:\n        # try to kill the v4l2-ctl subprocess\n        p.kill()\n\n    except:\n        pass # nevermind\n\n    name = None\n    devices = []\n    for line in output.split('\\n'):\n        if line.startswith('\\t'):\n            device = line.strip()\n            persistent_device = find_persistent_device(device)\n            devices.append((device, persistent_device, name))\n        \n            logging.debug('found device %(name)s: %(device)s, %(persistent_device)s' % {\n                    'name': name, 'device': device, 'persistent_device': persistent_device})\n\n        else:\n            name = line.split('(')[0].strip()\n    \n    # clear the cache\n    _resolutions_cache = {}\n    _ctrls_cache = {}\n    _ctrl_values_cache = {}\n\n    return devices\n\n\ndef list_resolutions(device):\n    global _resolutions_cache\n    \n    device = utils.make_str(device)\n    \n    if device in _resolutions_cache:\n        return _resolutions_cache[device]\n    \n    logging.debug('listing resolutions of device %(device)s...' % {'device': device})\n    \n    resolutions = set()\n    output = ''\n    started = time.time()\n    p = subprocess.Popen('v4l2-ctl -d \"%(device)s\" --list-formats-ext | grep -vi stepwise | grep -oE \"[0-9]+x[0-9]+\" || true' % {\n            'device': device}, shell=True, stdout=subprocess.PIPE, bufsize=1)\n\n    fd = p.stdout.fileno()\n    fl = fcntl.fcntl(fd, fcntl.F_GETFL)\n    fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)\n\n    while True:\n        try:\n            data = p.stdout.read(1024)\n            if not data:\n                break\n\n        except IOError:\n            data = ''\n            time.sleep(0.01)\n\n        output += data\n\n        if len(output) > 10240:\n            logging.warn('v4l2-ctl command returned more than 10k of output')\n            break\n        \n        if time.time() - started > 3:\n            logging.warn('v4l2-ctl command ran for more than 3 seconds')\n            break\n    \n    try:\n        # try to kill the v4l2-ctl subprocess\n        p.kill()\n    \n    except:\n        pass # nevermind\n\n    for pair in output.split('\\n'):\n        pair = pair.strip()\n        if not pair:\n            continue\n        \n        width, height = pair.split('x')\n        width = int(width)\n        height = int(height)\n\n        if (width, height) in resolutions:\n            continue # duplicate resolution\n\n        if width < 96 or height < 96: # some reasonable minimal values\n            continue\n        \n        if width % 16 or height % 16: # ignore non-modulo 16 resolutions\n            continue\n\n        resolutions.add((width, height))\n        \n        logging.debug('found resolution %(width)sx%(height)s for device %(device)s' % {\n                'device': device, 'width': width, 'height': height})\n    \n    if not resolutions:\n        logging.debug('no resolutions found for device %(device)s, using common values' % {'device': device})\n\n        # no resolution returned by v4l2-ctl call, add common default resolutions\n        resolutions = utils.COMMON_RESOLUTIONS\n\n    resolutions = list(sorted(resolutions, key=lambda r: (r[0], r[1])))\n    _resolutions_cache[device] = resolutions\n    \n    return resolutions\n\n\ndef device_present(device):\n    device = utils.make_str(device)\n    \n    try:\n        st = os.stat(device)\n        return stat.S_ISCHR(st.st_mode)\n\n    except:\n        return False\n    \n\ndef find_persistent_device(device):\n    device = utils.make_str(device)\n    \n    try:\n        devs_by_id = os.listdir(_DEV_V4L_BY_ID)\n\n    except OSError:\n        return device\n    \n    for p in devs_by_id:\n        p = os.path.join(_DEV_V4L_BY_ID, p)\n        if os.path.realpath(p) == device:\n            return p\n    \n    return device\n\n\ndef get_brightness(device):\n    return _get_ctrl(device, 'brightness')\n\n\ndef set_brightness(device, value):\n    _set_ctrl(device, 'brightness', value)\n\n\ndef get_contrast(device):\n    return _get_ctrl(device, 'contrast')\n\n\ndef set_contrast(device, value):\n    _set_ctrl(device, 'contrast', value)\n\n\ndef get_saturation(device):\n    return _get_ctrl(device, 'saturation')\n\n\ndef set_saturation(device, value):\n    _set_ctrl(device, 'saturation', value)\n\n\ndef get_hue(device):\n    return _get_ctrl(device, 'hue')\n\n\ndef set_hue(device, value):\n    _set_ctrl(device, 'hue', value)\n\n\ndef _get_ctrl(device, control):\n    global _ctrl_values_cache\n    \n    device = utils.make_str(device)\n    \n    if not device_present(device):\n        return None\n    \n    if device in _ctrl_values_cache and control in _ctrl_values_cache[device]:\n        return _ctrl_values_cache[device][control]\n    \n    controls = _list_ctrls(device)\n    properties = controls.get(control)\n    if properties is None:\n        logging.warn('control %(control)s not found for device %(device)s' % {\n                'control': control, 'device': device})\n        \n        return None\n    \n    value = int(properties['value'])\n    \n    # adjust the value range\n    if 'min' in properties and 'max' in properties:\n        min_value = int(properties['min'])\n        max_value = int(properties['max'])\n        \n        value = int(round((value - min_value) * 100.0 / (max_value - min_value)))\n    \n    else:\n        logging.warn('min and max values not found for control %(control)s of device %(device)s' % {\n                'control': control, 'device': device})\n    \n    logging.debug('control %(control)s of device %(device)s is %(value)s%%' % {\n            'control': control, 'device': device, 'value': value})\n    \n    return value\n\n\ndef _set_ctrl(device, control, value):\n    global _ctrl_values_cache\n    \n    device = utils.make_str(device)\n    \n    if not device_present(device):\n        return\n\n    controls = _list_ctrls(device)\n    properties = controls.get(control)\n    if properties is None:\n        logging.warn('control %(control)s not found for device %(device)s' % {\n                'control': control, 'device': device})\n        \n        return\n    \n    _ctrl_values_cache.setdefault(device, {})[control] = value\n\n    # adjust the value range\n    if 'min' in properties and 'max' in properties:\n        min_value = int(properties['min'])\n        max_value = int(properties['max'])\n        \n        value = int(round(min_value + value * (max_value - min_value) / 100.0))\n    \n    else:\n        logging.warn('min and max values not found for control %(control)s of device %(device)s' % {\n                'control': control, 'device': device})\n    \n    logging.debug('setting control %(control)s of device %(device)s to %(value)s' % {\n            'control': control, 'device': device, 'value': value})\n\n    output = ''\n    started = time.time()\n    p = subprocess.Popen('v4l2-ctl -d \"%(device)s\" --set-ctrl %(control)s=%(value)s' % {\n            'device': device, 'control': control, 'value': value}, shell=True, stdout=subprocess.PIPE, bufsize=1)\n\n    fd = p.stdout.fileno()\n    fl = fcntl.fcntl(fd, fcntl.F_GETFL)\n    fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)\n\n    while True:\n        try:\n            data = p.stdout.read(1024)\n            if not data:\n                break\n        \n        except IOError:\n            data = ''\n            time.sleep(0.01)\n\n        output += data\n\n        if len(output) > 10240:\n            logging.warn('v4l2-ctl command returned more than 10k of output')\n            break\n\n        if time.time() - started > 3:\n            logging.warn('v4l2-ctl command ran for more than 3 seconds')\n            break\n\n    try:\n        # try to kill the v4l2-ctl subprocess\n        p.kill()\n\n    except:\n        pass # nevermind\n\n\ndef _list_ctrls(device):\n    global _ctrls_cache\n    \n    device = utils.make_str(device)\n\n    if device in _ctrls_cache:\n        return _ctrls_cache[device]\n    \n    output = ''\n    started = time.time()\n    p = subprocess.Popen('v4l2-ctl -d \"%(device)s\" --list-ctrls' % {\n            'device': device}, shell=True, stdout=subprocess.PIPE, bufsize=1)\n\n    fd = p.stdout.fileno()\n    fl = fcntl.fcntl(fd, fcntl.F_GETFL)\n    fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)\n\n    while True:\n        try:\n            data = p.stdout.read(1024)\n            if not data:\n                break\n        \n        except IOError:\n            data = ''\n            time.sleep(0.01)\n\n        output += data\n\n        if len(output) > 10240:\n            logging.warn('v4l2-ctl command returned more than 10k of output')\n            break\n\n        if time.time() - started > 3:\n            logging.warn('v4l2-ctl command ran for more than 3 seconds')\n            break\n\n    try:\n        # try to kill the v4l2-ctl subprocess\n        p.kill()\n\n    except:\n        pass # nevermind\n\n    controls = {}\n    for line in output.split('\\n'):\n        if not line:\n            continue\n        \n        match = re.match('^\\s*(\\w+)\\s+\\(\\w+\\)\\s+\\:\\s*(.+)', line)\n        if not match:\n            continue\n        \n        (control, properties) = match.groups()\n        properties = dict([v.split('=', 1) for v in properties.split(' ') if v.count('=')])\n        controls[control] = properties\n    \n    _ctrls_cache[device] = controls\n    \n    return controls\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a Python module that provides functions to interact with video4linux2 (v4l2) devices. To use this module, import it into your Python script and call the functions as needed. The functions include:\n\n- `list_devices()`: lists all v4l2 devices currently connected to the system.\n- `list_resolutions(device)`: lists all supported resolutions for a given v4l2 device.\n- `get_brightness(device)`: gets the current brightness value for a given v4l2 device.\n- `set_brightness(device, value)`: sets the brightness value for a given v4l2 device.\n- `get_contrast(device)`: gets the current contrast value for a given v4l2 device.\n- `set_contrast(device, value)`: sets the contrast value for a given v4l2 device.\n- `get_saturation(device)`: gets the current saturation value for a given v4l2 device.\n- `set_saturation(device, value)`: sets the saturation value for a given v4l2 device.\n- `get_hue(device)`: gets the current hue value for a given v4l2 device.\n- `set_hue(device, value)`: sets the hue value for a given v4l2 device.\n\n### Input:\n\n\n### Output:\n\n# Copyright (c) 2013 Calin Crisan\n# This file is part of motionEye.\n#\n# motionEye is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n# \n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n# \n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>. \n\nimport fcntl\nimport logging\nimport os.path\nimport re\nimport stat\nimport subprocess\nimport time\nimport utils\n\n\n_resolutions_cache = {}\n_ctrls_cache = {}\n_ctrl_values_cache = {}\n\n_DEV_V4L_BY_ID = '/dev/v4l/by-id/'\n\n\ndef find_v4l2_ctl():\n    try:\n        return subprocess.check_output('which v4l2-ctl', shell=True).strip()\n    \n    except subprocess.CalledProcessError: # not found\n        return None\n\n\ndef list_devices():\n    global _resolutions_cache, _ctrls_cache, _ctrl_values_cache\n    \n    logging.debug('listing v4l2 devices...')\n    \n    try:\n        output = ''\n        started = time.time()\n        p = subprocess.Popen('v4l2-ctl --list-devices 2>/dev/null', shell=True, stdout=subprocess.PIPE, bufsize=1)\n\n        fd = p.stdout.fileno()\n        fl = fcntl.fcntl(fd, fcntl.F_GETFL)\n        fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)\n\n        while True:\n            try:\n                data = p.stdout.read(1024)\n                if not data:\n                    break\n            \n            except IOError:\n                data = ''\n                time.sleep(0.01)\n\n            output += data\n\n            if len(output) > 10240:\n                logging.warn('v4l2-ctl command returned more than 10k of output')\n                break\n            \n            if time.time() - started > 3:\n                logging.warn('v4l2-ctl command ran for more than 3 seconds')\n                break\n\n    except subprocess.CalledProcessError:\n        logging.debug('failed to list devices (probably no devices installed)')\n        return []\n\n    try:\n        # try to kill the v4l2-ctl subprocess\n        p.kill()\n\n    except:\n        pass # nevermind\n\n    name = None\n    devices = []\n    for line in output.split('\\n'):\n        if line.startswith('\\t'):\n            device = line.strip()\n            persistent_device = find_persistent_device(device)\n            devices.append((device, persistent_device, name))\n        \n            logging.debug('found device %(name)s: %(device)s, %(persistent_device)s' % {\n                    'name': name, 'device': device, 'persistent_device': persistent_device})\n\n        else:\n            name = line.split('(')[0].strip()\n    \n    # clear the cache\n    _resolutions_cache = {}\n    _ctrls_cache = {}\n    _ctrl_values_cache = {}\n\n    return devices\n\n\ndef list_resolutions(device):\n    global _resolutions_cache\n    \n    device = utils.make_str(device)\n    \n    if device in _resolutions_cache:\n        return _resolutions_cache[device]\n    \n    logging.debug('listing resolutions of device %(device)s...' % {'device': device})\n    \n    resolutions = set()\n    output = ''\n    started = time.time()\n    p = subprocess.Popen('v4l2-ctl -d \"%(device)s\" --list-formats-ext | grep -vi stepwise | grep -oE \"[0-9]+x[0-9]+\" || true' % {\n            'device': device}, shell=True, stdout=subprocess.PIPE, bufsize=1)\n\n    fd = p.stdout.fileno()\n    fl = fcntl.fcntl(fd, fcntl.F_GETFL)\n    fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)\n\n    while True:\n        try:\n            data = p.stdout.read(1024)\n            if not data:\n                break\n\n        except IOError:\n            data = ''\n            time.sleep(0.01)\n\n        output += data\n\n        if len(output) > 10240:\n            logging.warn('v4l2-ctl command returned more than 10k of output')\n            break\n        \n        if time.time() - started > 3:\n            logging.warn('v4l2-ctl command ran for more than 3 seconds')\n            break\n    \n    try:\n        # try to kill the v4l2-ctl subprocess\n        p.kill()\n    \n    except:\n        pass # nevermind\n\n    for pair in output.split('\\n'):\n        pair = pair.strip()\n        if not pair:\n            continue\n        \n        width, height = pair.split('x')\n        width = int(width)\n        height = int(height)\n\n        if (width, height) in resolutions:\n            continue # duplicate resolution\n\n        if width < 96 or height < 96: # some reasonable minimal values\n            continue\n        \n        if width % 16 or height % 16: # ignore non-modulo 16 resolutions\n            continue\n\n        resolutions.add((width, height))\n        \n        logging.debug('found resolution %(width)sx%(height)s for device %(device)s' % {\n                'device': device, 'width': width, 'height': height})\n    \n    if not resolutions:\n        logging.debug('no resolutions found for device %(device)s, using common values' % {'device': device})\n\n        # no resolution returned by v4l2-ctl call, add common default resolutions\n        resolutions = utils.COMMON_RESOLUTIONS\n\n    resolutions = list(sorted(resolutions, key=lambda r: (r[0], r[1])))\n    _resolutions_cache[device] = resolutions\n    \n    return resolutions\n\n\ndef device_present(device):\n    device = utils.make_str(device)\n    \n    try:\n        st = os.stat(device)\n        return stat.S_ISCHR(st.st_mode)\n\n    except:\n        return False\n    \n\ndef find_persistent_device(device):\n    device = utils.make_str(device)\n    \n    try:\n        devs_by_id = os.listdir(_DEV_V4L_BY_ID)\n\n    except OSError:\n        return device\n    \n    for p in devs_by_id:\n        p = os.path.join(_DEV_V4L_BY_ID, p)\n        if os.path.realpath(p) == device:\n            return p\n    \n    return device\n\n\ndef get_brightness(device):\n    return _get_ctrl(device, 'brightness')\n\n\ndef set_brightness(device, value):\n    _set_ctrl(device, 'brightness', value)\n\n\ndef get_contrast(device):\n    return _get_ctrl(device, 'contrast')\n\n\ndef set_contrast(device, value):\n    _set_ctrl(device, 'contrast', value)\n\n\ndef get_saturation(device):\n    return _get_ctrl(device, 'saturation')\n\n\ndef set_saturation(device, value):\n    _set_ctrl(device, 'saturation', value)\n\n\ndef get_hue(device):\n    return _get_ctrl(device, 'hue')\n\n\ndef set_hue(device, value):\n    _set_ctrl(device, 'hue', value)\n\n\ndef _get_ctrl(device, control):\n    global _ctrl_values_cache\n    \n    device = utils.make_str(device)\n    \n    if not device_present(device):\n        return None\n    \n    if device in _ctrl_values_cache and control in _ctrl_values_cache[device]:\n        return _ctrl_values_cache[device][control]\n    \n    controls = _list_ctrls(device)\n    properties = controls.get(control)\n    if properties is None:\n        logging.warn('control %(control)s not found for device %(device)s' % {\n                'control': control, 'device': device})\n        \n        return None\n    \n    value = int(properties['value'])\n    \n    # adjust the value range\n    if 'min' in properties and 'max' in properties:\n        min_value = int(properties['min'])\n        max_value = int(properties['max'])\n        \n        value = int(round((value - min_value) * 100.0 / (max_value - min_value)))\n    \n    else:\n        logging.warn('min and max values not found for control %(control)s of device %(device)s' % {\n                'control': control, 'device': device})\n    \n    logging.debug('control %(control)s of device %(device)s is %(value)s%%' % {\n            'control': control, 'device': device, 'value': value})\n    \n    return value\n\n\ndef _set_ctrl(device, control, value):\n    global _ctrl_values_cache\n    \n    device = utils.make_str(device)\n    \n    if not device_present(device):\n        return\n\n    controls = _list_ctrls(device)\n    properties = controls.get(control)\n    if properties is None:\n        logging.warn('control %(control)s not found for device %(device)s' % {\n                'control': control, 'device': device})\n        \n        return\n    \n    _ctrl_values_cache.setdefault(device, {})[control] = value\n\n    # adjust the value range\n    if 'min' in properties and 'max' in properties:\n        min_value = int(properties['min'])\n        max_value = int(properties['max'])\n        \n        value = int(round(min_value + value * (max_value - min_value) / 100.0))\n    \n    else:\n        logging.warn('min and max values not found for control %(control)s of device %(device)s' % {\n                'control': control, 'device': device})\n    \n    logging.debug('setting control %(control)s of device %(device)s to %(value)s' % {\n            'control': control, 'device': device, 'value': value})\n\n    output = ''\n    started = time.time()\n    p = subprocess.Popen('v4l2-ctl -d \"%(device)s\" --set-ctrl %(control)s=%(value)s' % {\n            'device': device, 'control': control, 'value': value}, shell=True, stdout=subprocess.PIPE, bufsize=1)\n\n    fd = p.stdout.fileno()\n    fl = fcntl.fcntl(fd, fcntl.F_GETFL)\n    fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)\n\n    while True:\n        try:\n            data = p.stdout.read(1024)\n            if not data:\n                break\n        \n        except IOError:\n            data = ''\n            time.sleep(0.01)\n\n        output += data\n\n        if len(output) > 10240:\n            logging.warn('v4l2-ctl command returned more than 10k of output')\n            break\n\n        if time.time() - started > 3:\n            logging.warn('v4l2-ctl command ran for more than 3 seconds')\n            break\n\n    try:\n        # try to kill the v4l2-ctl subprocess\n        p.kill()\n\n    except:\n        pass # nevermind\n\n\ndef _list_ctrls(device):\n    global _ctrls_cache\n    \n    device = utils.make_str(device)\n\n    if device in _ctrls_cache:\n        return _ctrls_cache[device]\n    \n    output = ''\n    started = time.time()\n    p = subprocess.Popen('v4l2-ctl -d \"%(device)s\" --list-ctrls' % {\n            'device': device}, shell=True, stdout=subprocess.PIPE, bufsize=1)\n\n    fd = p.stdout.fileno()\n    fl = fcntl.fcntl(fd, fcntl.F_GETFL)\n    fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)\n\n    while True:\n        try:\n            data = p.stdout.read(1024)\n            if not data:\n                break\n        \n        except IOError:\n            data = ''\n            time.sleep(0.01)\n\n        output += data\n\n        if len(output) > 10240:\n            logging.warn('v4l2-ctl command returned more than 10k of output')\n            break\n\n        if time.time() - started > 3:\n            logging.warn('v4l2-ctl command ran for more than 3 seconds')\n            break\n\n    try:\n        # try to kill the v4l2-ctl subprocess\n        p.kill()\n\n    except:\n        pass # nevermind\n\n    controls = {}\n    for line in output.split('\\n'):\n        if not line:\n            continue\n        \n        match = re.match('^\\s*(\\w+)\\s+\\(\\w+\\)\\s+\\:\\s*(.+)', line)\n        if not match:\n            continue\n        \n        (control, properties) = match.groups()\n        properties = dict([v.split('=', 1) for v in properties.split(' ') if v.count('=')])\n        controls[control] = properties\n    \n    _ctrls_cache[device] = controls\n    \n    return controls\n"
    },
    {
        "instruction": "Write a Python program to divide a given list into n equal lists.",
        "input": "my_list = [1, 2, 3, 4, 5, 6]\nn = 3",
        "output": "# Function to divide the given list into N equal parts\ndef divide_list(my_list, n):\n \n    # List Comprehension to divide the list into n equal parts\n    list_of_lists = [my_list[i * n:(i + 1) * n] for i in range((len(my_list) + n - 1) // n )]  \n  \n    return list_of_lists\n\n# Driver Code  \nmy_list = [1, 2, 3, 4, 5, 6]\nn = 3\n\ndivide_list(my_list, n)\n\n# Output: [[1, 2, 3], [4, 5, 6], [7, 8]]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to divide a given list into n equal lists.\n\n### Input:\nmy_list = [1, 2, 3, 4, 5, 6]\nn = 3\n\n### Output:\n# Function to divide the given list into N equal parts\ndef divide_list(my_list, n):\n \n    # List Comprehension to divide the list into n equal parts\n    list_of_lists = [my_list[i * n:(i + 1) * n] for i in range((len(my_list) + n - 1) // n )]  \n  \n    return list_of_lists\n\n# Driver Code  \nmy_list = [1, 2, 3, 4, 5, 6]\nn = 3\n\ndivide_list(my_list, n)\n\n# Output: [[1, 2, 3], [4, 5, 6], [7, 8]]"
    },
    {
        "instruction": "Edit the following Python program to make it run without any syntax errors.",
        "input": "def sum(alist)\n    total 0\n    for i in range alist\n        total += i\n    return total",
        "output": "def sum(alist):\n    total = 0\n    for i in alist:\n        total += i\n    return total",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python program to make it run without any syntax errors.\n\n### Input:\ndef sum(alist)\n    total 0\n    for i in range alist\n        total += i\n    return total\n\n### Output:\ndef sum(alist):\n    total = 0\n    for i in alist:\n        total += i\n    return total"
    },
    {
        "instruction": "Write a Python program which randomly selects 3 items from a list of 5 items and prints them to the console.",
        "input": "list = [\"apple\", \"banana\", \"orange\", \"strawberry\", \"grape\"]",
        "output": "import random\n\nlist = [\"apple\", \"banana\", \"orange\", \"strawberry\", \"grape\"]\nrandom.shuffle(list)\n\nfor item in list[:3]:\n print(item)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program which randomly selects 3 items from a list of 5 items and prints them to the console.\n\n### Input:\nlist = [\"apple\", \"banana\", \"orange\", \"strawberry\", \"grape\"]\n\n### Output:\nimport random\n\nlist = [\"apple\", \"banana\", \"orange\", \"strawberry\", \"grape\"]\nrandom.shuffle(list)\n\nfor item in list[:3]:\n print(item)"
    },
    {
        "instruction": "Implement a real-time chat application in Python using websockets.",
        "input": "Not applicable",
        "output": "import websockets\n\nusers = []\n\nasync def consumer(websocket):\n while True:\n message = await websocket.recv()\n \n for user in users:\n await user.send(message)\n\nasync def producer(websocket, path):\n users.append(websocket)\n await consumer(websocket)\n\nstart_server = websockets.serve(producer, 'localhost', 8000)\n\nasyncio.get_event_loop().run_until_complete(start_server)\nasyncio.get_event_loop().run_forever()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a real-time chat application in Python using websockets.\n\n### Input:\nNot applicable\n\n### Output:\nimport websockets\n\nusers = []\n\nasync def consumer(websocket):\n while True:\n message = await websocket.recv()\n \n for user in users:\n await user.send(message)\n\nasync def producer(websocket, path):\n users.append(websocket)\n await consumer(websocket)\n\nstart_server = websockets.serve(producer, 'localhost', 8000)\n\nasyncio.get_event_loop().run_until_complete(start_server)\nasyncio.get_event_loop().run_forever()"
    },
    {
        "instruction": "Develop a Python function that squares a given number.",
        "input": "",
        "output": "def square(number):\n \u00a0 \u00a0return number * number",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function that squares a given number.\n\n### Input:\n\n\n### Output:\ndef square(number):\n \u00a0 \u00a0return number * number"
    },
    {
        "instruction": "Develop a Python program for randomly generating a 3-D object of n cubes",
        "input": "n = 8",
        "output": "from random import random\n\ndef generate_cubed_object(n):\n    objects = []\n    for i in range(n):\n        x = random()\n        y = random()\n        z = random()\n        objects.append([x, y, z])\n    return objects\n\nprint(generate_cubed_object(8)) # [[0.4, 0.2, 0.3], [0.5, 0.6, 0.7], ....]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program for randomly generating a 3-D object of n cubes\n\n### Input:\nn = 8\n\n### Output:\nfrom random import random\n\ndef generate_cubed_object(n):\n    objects = []\n    for i in range(n):\n        x = random()\n        y = random()\n        z = random()\n        objects.append([x, y, z])\n    return objects\n\nprint(generate_cubed_object(8)) # [[0.4, 0.2, 0.3], [0.5, 0.6, 0.7], ....]"
    },
    {
        "instruction": "Convert the given array to an array of dictionaries in Python.",
        "input": "array = [[\"a\", 1], [\"b\", 2], [\"c\", 3]]",
        "output": "[{'a': 1}, {'b': 2}, {'c': 3}]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the given array to an array of dictionaries in Python.\n\n### Input:\narray = [[\"a\", 1], [\"b\", 2], [\"c\", 3]]\n\n### Output:\n[{'a': 1}, {'b': 2}, {'c': 3}]"
    },
    {
        "instruction": "Create a Python program to implement the triangle numbers.",
        "input": "n = 5",
        "output": "def triangle_numbers(n):\n    res = 0\n    for i in range(n):\n        res += i+1\n    return res\n\nresult = triangle_numbers(n)\nprint(result) # output: 15",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to implement the triangle numbers.\n\n### Input:\nn = 5\n\n### Output:\ndef triangle_numbers(n):\n    res = 0\n    for i in range(n):\n        res += i+1\n    return res\n\nresult = triangle_numbers(n)\nprint(result) # output: 15"
    },
    {
        "instruction": "Can you construct a Python program that takes a string of words and counts the occurrences of each word?",
        "input": "\"This is an example of a string of words\"",
        "output": "words = \"This is an example of a string of words\".split()\n\nword_freq = {}\nfor word in words:\n    if word not in word_freq:\n        word_freq[word] = 1\n    else:\n        word_freq[word] += 1\n\nfor key, value in word_freq.items():\n    print(f\"{key} : {value}\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you construct a Python program that takes a string of words and counts the occurrences of each word?\n\n### Input:\n\"This is an example of a string of words\"\n\n### Output:\nwords = \"This is an example of a string of words\".split()\n\nword_freq = {}\nfor word in words:\n    if word not in word_freq:\n        word_freq[word] = 1\n    else:\n        word_freq[word] += 1\n\nfor key, value in word_freq.items():\n    print(f\"{key} : {value}\")"
    },
    {
        "instruction": "Write a function in Python to find the longest substring in a string that is palindromic.",
        "input": "str = \"forgeeksskeegeekefrogg\"",
        "output": "def longestPalindromicSubstring( str):\n n = len(str)\n \n # table[i][j] will be false if substring str[i..j] \n # is not palindrome. \n # Else table[i][j] will be true\n table = [[0 for x in range(n)] for y \n                                  in range(n)] \n  \n # All substrings of length 1 are palindromes \n maxLength = 1\n i = 0\n while (i < n): \n  table[i][i] = True\n  i = i + 1\n  \n # check for substring of length 2. \n start = 0\n i = 0\n while i < n-1: \n  if (str[i] == str[i + 1]): \n   table[i][i + 1] = True\n   start = i \n   maxLength = 2\n  i = i + 1\n  \n # Check for lengths greater than 2. k is length \n # of substring \n k = 3\n while k <= n: \n  # Fix the starting index \n  i = 0\n  while i < (n-k+1): \n   # Get the ending index of substring from \n   # starting index i and length k \n   j = i + k - 1\n  \n   # checking for sub-string from ith index to \n   # jth index iff str[i+1] to \n   # str[j-1] is a palindrome \n   if (table[i+1][j-1] and\n           str[i] == str[j]): \n    table[i][j] = True\n  \n    if (k > maxLength): \n     start = i \n     maxLength = k \n   i = i + 1\n  k = k + 1\n print (\"Longest palindrome substring is: \") \n print  (str[start:start + maxLength]) \n  \n  # return length of LPS \n return maxLength",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to find the longest substring in a string that is palindromic.\n\n### Input:\nstr = \"forgeeksskeegeekefrogg\"\n\n### Output:\ndef longestPalindromicSubstring( str):\n n = len(str)\n \n # table[i][j] will be false if substring str[i..j] \n # is not palindrome. \n # Else table[i][j] will be true\n table = [[0 for x in range(n)] for y \n                                  in range(n)] \n  \n # All substrings of length 1 are palindromes \n maxLength = 1\n i = 0\n while (i < n): \n  table[i][i] = True\n  i = i + 1\n  \n # check for substring of length 2. \n start = 0\n i = 0\n while i < n-1: \n  if (str[i] == str[i + 1]): \n   table[i][i + 1] = True\n   start = i \n   maxLength = 2\n  i = i + 1\n  \n # Check for lengths greater than 2. k is length \n # of substring \n k = 3\n while k <= n: \n  # Fix the starting index \n  i = 0\n  while i < (n-k+1): \n   # Get the ending index of substring from \n   # starting index i and length k \n   j = i + k - 1\n  \n   # checking for sub-string from ith index to \n   # jth index iff str[i+1] to \n   # str[j-1] is a palindrome \n   if (table[i+1][j-1] and\n           str[i] == str[j]): \n    table[i][j] = True\n  \n    if (k > maxLength): \n     start = i \n     maxLength = k \n   i = i + 1\n  k = k + 1\n print (\"Longest palindrome substring is: \") \n print  (str[start:start + maxLength]) \n  \n  # return length of LPS \n return maxLength"
    },
    {
        "instruction": "Design a Python program to read in a integer array and find the second largest element in the array.",
        "input": "[3, 8, 4, 5, 7, 6]",
        "output": "def second_largest(arr):\n    first_largest =  arr[0]\n    second_largest = -float(\"inf\")\n    for num in arr:\n        if num > first_largest:\n            second_largest = first_largest\n            first_largest = num\n        elif second_largest < num < first_largest:\n            second_largest = num\n            \n    return second_largest\n\nif __name__ == '__main__':\n    arr = [3, 8, 4, 5, 7, 6]\n    print(second_largest(arr))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to read in a integer array and find the second largest element in the array.\n\n### Input:\n[3, 8, 4, 5, 7, 6]\n\n### Output:\ndef second_largest(arr):\n    first_largest =  arr[0]\n    second_largest = -float(\"inf\")\n    for num in arr:\n        if num > first_largest:\n            second_largest = first_largest\n            first_largest = num\n        elif second_largest < num < first_largest:\n            second_largest = num\n            \n    return second_largest\n\nif __name__ == '__main__':\n    arr = [3, 8, 4, 5, 7, 6]\n    print(second_largest(arr))"
    },
    {
        "instruction": "Generate a Python program to convert Fahrenheit to Celsius using a given formula.",
        "input": "",
        "output": "def fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5 / 9\n    return celsius",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to convert Fahrenheit to Celsius using a given formula.\n\n### Input:\n\n\n### Output:\ndef fahrenheit_to_celsius(fahrenheit):\n    celsius = (fahrenheit - 32) * 5 / 9\n    return celsius"
    },
    {
        "instruction": "Create a Python program to create a pandas DataFrame containing data about cars. Include columns for make, model, price, and mpg.",
        "input": "Not applicable",
        "output": "import pandas as pd\n\ncolumn_names = [\"make\", \"model\", \"price\", \"mpg\"]\ncars = [ \n    [\"Toyota\", \"Camry\", 23000, 28],\n    [\"Honda\", \"Accord\", 21000, 30],\n    [\"Ford\", \"Ecosport\", 20000, 25],\n    [\"Hyundai\", \"Elantra\", 22000, 27],\n    [\"Toyota\", \"Corolla\", 18000, 35],\n    [\"Honda\", \"Civic\", 19000, 32],\n    [\"Ford\", \"Escape\", 24000, 24],\n    [\"Hyundai\", \"Sonata\", 19500, 29]\n]\n\ndf = pd.DataFrame(cars, columns=column_names)\nprint(df)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to create a pandas DataFrame containing data about cars. Include columns for make, model, price, and mpg.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\n\ncolumn_names = [\"make\", \"model\", \"price\", \"mpg\"]\ncars = [ \n    [\"Toyota\", \"Camry\", 23000, 28],\n    [\"Honda\", \"Accord\", 21000, 30],\n    [\"Ford\", \"Ecosport\", 20000, 25],\n    [\"Hyundai\", \"Elantra\", 22000, 27],\n    [\"Toyota\", \"Corolla\", 18000, 35],\n    [\"Honda\", \"Civic\", 19000, 32],\n    [\"Ford\", \"Escape\", 24000, 24],\n    [\"Hyundai\", \"Sonata\", 19500, 29]\n]\n\ndf = pd.DataFrame(cars, columns=column_names)\nprint(df)"
    },
    {
        "instruction": "Sort a dictionary by values in Python.",
        "input": "",
        "output": "dictionary = {'key1':1, 'key2': 3, 'key3': 2}\nsorted_dict = {key: value for key, value in sorted(dictionary.items(), key=lambda item: item[1])}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSort a dictionary by values in Python.\n\n### Input:\n\n\n### Output:\ndictionary = {'key1':1, 'key2': 3, 'key3': 2}\nsorted_dict = {key: value for key, value in sorted(dictionary.items(), key=lambda item: item[1])}"
    },
    {
        "instruction": "Create a function in Python using list-comprehension to turn all the strings in the list to lowercase.",
        "input": "words = [\"Hello\", \"My\", \"Name\", \"IS\", \"John\"]",
        "output": "def to_lowercase(words):\n    return [word.lower() for word in words]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python using list-comprehension to turn all the strings in the list to lowercase.\n\n### Input:\nwords = [\"Hello\", \"My\", \"Name\", \"IS\", \"John\"]\n\n### Output:\ndef to_lowercase(words):\n    return [word.lower() for word in words]"
    },
    {
        "instruction": "Create a web-server for a machine learning API using Python and Flask.",
        "input": "Example code of a machine learning model.",
        "output": "import flask, json\nfrom flask import request, jsonify\n\n# create the machine learning model\ndef create_ml_model(data):\n    return model\n\n# web-server\napp = Flask(__name__)\n\n@app.route('/ml', methods=['POST'])\ndef ml():\n    # Get input data from request\n    req_data = request.get_json()\n    # Create the model\n    model = create_ml_model(req_data)\n    # Make a prediction\n    pred = model.predict(req_data)\n    # Return the prediction\n    return jsonify(pred)\n\nif __name__ == '__main__':\n    app.run(port=5000)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web-server for a machine learning API using Python and Flask.\n\n### Input:\nExample code of a machine learning model.\n\n### Output:\nimport flask, json\nfrom flask import request, jsonify\n\n# create the machine learning model\ndef create_ml_model(data):\n    return model\n\n# web-server\napp = Flask(__name__)\n\n@app.route('/ml', methods=['POST'])\ndef ml():\n    # Get input data from request\n    req_data = request.get_json()\n    # Create the model\n    model = create_ml_model(req_data)\n    # Make a prediction\n    pred = model.predict(req_data)\n    # Return the prediction\n    return jsonify(pred)\n\nif __name__ == '__main__':\n    app.run(port=5000)"
    },
    {
        "instruction": "Edit the following Python code to optimize the performance of a function that takes a list of numbers as input and prints the maximum and minimum values.",
        "input": "The input should include a sample piece of Python code for testing and optimizing purposes:\n\ndef print_min_max(numbers):\n    max_num = 0\n    min_num = 0\n    for n in numbers:\n        if n > max_num:\n            max_num = n;\n        if n < min_num:\n            min_num = n;\n    print(\"Max: {0}, Min: {1}\".format(max_num, min_num))",
        "output": "def print_min_max(numbers):\n max_num = min_num = numbers[0]\n for n in numbers[1:]:\n     max_num = max(max_num, n)\n     min_num = min(min_num, n)\n print(\"Max: {0}, Min: {1}\".format(max_num, min_num))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code to optimize the performance of a function that takes a list of numbers as input and prints the maximum and minimum values.\n\n### Input:\nThe input should include a sample piece of Python code for testing and optimizing purposes:\n\ndef print_min_max(numbers):\n    max_num = 0\n    min_num = 0\n    for n in numbers:\n        if n > max_num:\n            max_num = n;\n        if n < min_num:\n            min_num = n;\n    print(\"Max: {0}, Min: {1}\".format(max_num, min_num))\n\n### Output:\ndef print_min_max(numbers):\n max_num = min_num = numbers[0]\n for n in numbers[1:]:\n     max_num = max(max_num, n)\n     min_num = min(min_num, n)\n print(\"Max: {0}, Min: {1}\".format(max_num, min_num))"
    },
    {
        "instruction": "Refactor a given code snippet into a Python Lambda function.",
        "input": "def some_method(x, y):\n    result = x + y\n    return result",
        "output": "some_method = lambda x, y: x + y",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRefactor a given code snippet into a Python Lambda function.\n\n### Input:\ndef some_method(x, y):\n    result = x + y\n    return result\n\n### Output:\nsome_method = lambda x, y: x + y"
    },
    {
        "instruction": "Create a Python script that scrapes a website for all the external links present in the page.",
        "input": "Not applicable",
        "output": "import requests \nfrom bs4 import BeautifulSoup \n  \ndef extract_links_from_url(url): \n  \n    # make a request to the URL  \n    r = requests.get(url) \n  \n    # create a beautiful soup object  \n    soup = BeautifulSoup(r.content,'html5lib') \n  \n    # find and return hyperlinks(a tags)  \n    return [link['href'] for link in soup.find_all('a', href=True)]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that scrapes a website for all the external links present in the page.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests \nfrom bs4 import BeautifulSoup \n  \ndef extract_links_from_url(url): \n  \n    # make a request to the URL  \n    r = requests.get(url) \n  \n    # create a beautiful soup object  \n    soup = BeautifulSoup(r.content,'html5lib') \n  \n    # find and return hyperlinks(a tags)  \n    return [link['href'] for link in soup.find_all('a', href=True)]"
    },
    {
        "instruction": "Create a program in Python that takes two numbers as an input and returns the sum of the two numbers.",
        "input": "",
        "output": "def sum_nums(a, b):\n    \"\"\"Returns the sum of two numbers a and b.\"\"\"\n    return a + b",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes two numbers as an input and returns the sum of the two numbers.\n\n### Input:\n\n\n### Output:\ndef sum_nums(a, b):\n    \"\"\"Returns the sum of two numbers a and b.\"\"\"\n    return a + b"
    },
    {
        "instruction": "Write a function in Python to select the 3rd character from each string in the given list.",
        "input": "['IronMan', 'Hulk', 'Thor', 'Captain America']",
        "output": "def third_char(lst):\n third_chars = \"\"\n for word in lst:\n third_chars += word[2]\n return third_chars\n\nthird_char(['IronMan', 'Hulk', 'Thor', 'Captain America'])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to select the 3rd character from each string in the given list.\n\n### Input:\n['IronMan', 'Hulk', 'Thor', 'Captain America']\n\n### Output:\ndef third_char(lst):\n third_chars = \"\"\n for word in lst:\n third_chars += word[2]\n return third_chars\n\nthird_char(['IronMan', 'Hulk', 'Thor', 'Captain America'])"
    },
    {
        "instruction": "Implement a priority queue data structure in Python.",
        "input": "Not applicable",
        "output": "import heapq\n\n\nclass PriorityQueue:\n \n def __init__(self):\n self.heap = []\n \n def push(self, item, priority):\n heapq.heappush(self.heap, (priority, item))\n   \n def pop(self):\n return heapq.heappop(self.heap)[1]\n\npq = PriorityQueue()\npq.push('A',1)\npq.push('B',5)\npq.push('C',2)\n\nwhile not pq.isEmpty():\n print(pq.pop())",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a priority queue data structure in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport heapq\n\n\nclass PriorityQueue:\n \n def __init__(self):\n self.heap = []\n \n def push(self, item, priority):\n heapq.heappush(self.heap, (priority, item))\n   \n def pop(self):\n return heapq.heappop(self.heap)[1]\n\npq = PriorityQueue()\npq.push('A',1)\npq.push('B',5)\npq.push('C',2)\n\nwhile not pq.isEmpty():\n print(pq.pop())"
    },
    {
        "instruction": "Write a Python program to check that a string contains only a specified set of characters.",
        "input": "string = 'abcdefghijklmn'\nspecified_characters = 'abcde'",
        "output": "def checkString(string, specified_characters):\n    for char in string:\n        if char not in specified_characters:\n            return False\n    return True\n\nstring = 'abcdefghijklmn'\nspecified_characters = 'abcde'\n\nif(checkString(string, specified_characters)):\n    print(\"String contains only specified characters\")\nelse:\n    print(\"String does not contain only specified characters\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to check that a string contains only a specified set of characters.\n\n### Input:\nstring = 'abcdefghijklmn'\nspecified_characters = 'abcde'\n\n### Output:\ndef checkString(string, specified_characters):\n    for char in string:\n        if char not in specified_characters:\n            return False\n    return True\n\nstring = 'abcdefghijklmn'\nspecified_characters = 'abcde'\n\nif(checkString(string, specified_characters)):\n    print(\"String contains only specified characters\")\nelse:\n    print(\"String does not contain only specified characters\")"
    },
    {
        "instruction": "Generate the Fibonacci sequence of length 8 (starting from 0) in Python.",
        "input": "",
        "output": "def fibonacciSequence(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b \n\nfibonacciSequence(8) # Output:21",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate the Fibonacci sequence of length 8 (starting from 0) in Python.\n\n### Input:\n\n\n### Output:\ndef fibonacciSequence(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b \n\nfibonacciSequence(8) # Output:21"
    },
    {
        "instruction": "Design a computer program in Python to store and search for items in a shopping list.",
        "input": "Not applicable",
        "output": "# Shopping list application \n\n# Declare a list to store all the items \nshopping_list = []\n\n# Function to add item to the list\ndef add_item(item):\n  shopping_list.append(item)\n  print(\"Item added!\")\n\n# Function to remove item from the list\ndef remove_item(item):\n  shopping_list.remove(item)\n  print(\"Item removed!\")\n\n# Function to search for an item in the list\ndef search_item(item):\n  if item in shopping_list:\n    print(\"Item found.\")\n  else:\n    print(\"Item not found.\")\n\n# Function to display all the items\ndef display_items():\n  print(\"Here is your list:\")\n  for item in shopping_list:\n    print(item)\n\n# Test functions \nadd_item(\"Milk\")\nadd_item(\"Bread\")\nremove_item(\"Milk\")\nsearch_item(\"Bread\")\ndisplay_items()\n\n# Output: \n# Item added!\n# Item added!\n# Item removed!\n# Item found.\n# Here is your list: \n# Bread",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a computer program in Python to store and search for items in a shopping list.\n\n### Input:\nNot applicable\n\n### Output:\n# Shopping list application \n\n# Declare a list to store all the items \nshopping_list = []\n\n# Function to add item to the list\ndef add_item(item):\n  shopping_list.append(item)\n  print(\"Item added!\")\n\n# Function to remove item from the list\ndef remove_item(item):\n  shopping_list.remove(item)\n  print(\"Item removed!\")\n\n# Function to search for an item in the list\ndef search_item(item):\n  if item in shopping_list:\n    print(\"Item found.\")\n  else:\n    print(\"Item not found.\")\n\n# Function to display all the items\ndef display_items():\n  print(\"Here is your list:\")\n  for item in shopping_list:\n    print(item)\n\n# Test functions \nadd_item(\"Milk\")\nadd_item(\"Bread\")\nremove_item(\"Milk\")\nsearch_item(\"Bread\")\ndisplay_items()\n\n# Output: \n# Item added!\n# Item added!\n# Item removed!\n# Item found.\n# Here is your list: \n# Bread"
    },
    {
        "instruction": "Generate a Python function to calculate the absolute value of a number.",
        "input": "",
        "output": "def absolute_value(num):\n    if num < 0:\n        return -num\n    else:\n        return num",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to calculate the absolute value of a number.\n\n### Input:\n\n\n### Output:\ndef absolute_value(num):\n    if num < 0:\n        return -num\n    else:\n        return num"
    },
    {
        "instruction": "Implement a singleton Python class.",
        "input": "",
        "output": "class Singleton:\n    _instance = None\n\n    def __new__(cls):\n        if not cls._instance:\n            cls._instance = super(Singleton, cls).__new__(cls)\n        return cls._instance",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a singleton Python class.\n\n### Input:\n\n\n### Output:\nclass Singleton:\n    _instance = None\n\n    def __new__(cls):\n        if not cls._instance:\n            cls._instance = super(Singleton, cls).__new__(cls)\n        return cls._instance"
    },
    {
        "instruction": "Create an application in Python that takes user input for an year and prints the day of the week for January 1st of that year.",
        "input": "Year: 2018",
        "output": "import datetime\n\ndef day_of_week(year): \n date = datetime.datetime(year, 1, 1)\n return date.strftime(\"%A\")\n\nprint(day_of_week(2018)) # Output: Monday",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an application in Python that takes user input for an year and prints the day of the week for January 1st of that year.\n\n### Input:\nYear: 2018\n\n### Output:\nimport datetime\n\ndef day_of_week(year): \n date = datetime.datetime(year, 1, 1)\n return date.strftime(\"%A\")\n\nprint(day_of_week(2018)) # Output: Monday"
    },
    {
        "instruction": "Build a neural network in Python that classifies cats and dogs.",
        "input": "",
        "output": "import tensorflow as tf\nfrom tensorflow import keras\n\n# Create the model\nmodel = keras.Sequential()\nmodel.add(keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)))\nmodel.add(keras.layers.MaxPooling2D((2, 2)))\nmodel.add(keras.layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(keras.layers.MaxPooling2D((2, 2)))\nmodel.add(keras.layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(keras.layers.MaxPooling2D((2, 2)))\nmodel.add(keras.layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(keras.layers.MaxPooling2D((2, 2)))\nmodel.add(keras.layers.Flatten())\nmodel.add(keras.layers.Dense(512, activation='relu'))\nmodel.add(keras.layers.Dense(1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer=keras.optimizers.RMSprop(lr=1e-4), metrics=['acc'])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a neural network in Python that classifies cats and dogs.\n\n### Input:\n\n\n### Output:\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Create the model\nmodel = keras.Sequential()\nmodel.add(keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)))\nmodel.add(keras.layers.MaxPooling2D((2, 2)))\nmodel.add(keras.layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(keras.layers.MaxPooling2D((2, 2)))\nmodel.add(keras.layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(keras.layers.MaxPooling2D((2, 2)))\nmodel.add(keras.layers.Conv2D(128, (3, 3), activation='relu'))\nmodel.add(keras.layers.MaxPooling2D((2, 2)))\nmodel.add(keras.layers.Flatten())\nmodel.add(keras.layers.Dense(512, activation='relu'))\nmodel.add(keras.layers.Dense(1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer=keras.optimizers.RMSprop(lr=1e-4), metrics=['acc'])"
    },
    {
        "instruction": "Design a binary search algorithm in Python that finds the index of an element in a sorted array.",
        "input": "[1, 2, 3, 4, 5, 6, 7], 5",
        "output": "def binary_search(arr, target):\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # target is not found\n    return -1\n\nresult = binary_search([1, 2, 3, 4, 5, 6, 7], 5)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a binary search algorithm in Python that finds the index of an element in a sorted array.\n\n### Input:\n[1, 2, 3, 4, 5, 6, 7], 5\n\n### Output:\ndef binary_search(arr, target):\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # target is not found\n    return -1\n\nresult = binary_search([1, 2, 3, 4, 5, 6, 7], 5)\nprint(result)"
    },
    {
        "instruction": "Write a line of code to print the first five elements in a given list in Python.",
        "input": "",
        "output": "print(list[:5])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a line of code to print the first five elements in a given list in Python.\n\n### Input:\n\n\n### Output:\nprint(list[:5])"
    },
    {
        "instruction": "What is the best way to generate a basic HTTP server in Python?",
        "input": "",
        "output": "import http.server\n\nserver_address = ('', 8000) \nhttpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)\nhttpd.serve_forever()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat is the best way to generate a basic HTTP server in Python?\n\n### Input:\n\n\n### Output:\nimport http.server\n\nserver_address = ('', 8000) \nhttpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)\nhttpd.serve_forever()"
    },
    {
        "instruction": "Write a function in Python that takes in a list of integers. The function should return a list of integers such that the result is made up of the elements of the original list sorted in descending order.",
        "input": "[3, 5, 2, 1]",
        "output": "def sorted_descending(list_of_ints):\n  result = sorted(list_of_ints, reverse=True)\n  return result",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes in a list of integers. The function should return a list of integers such that the result is made up of the elements of the original list sorted in descending order.\n\n### Input:\n[3, 5, 2, 1]\n\n### Output:\ndef sorted_descending(list_of_ints):\n  result = sorted(list_of_ints, reverse=True)\n  return result"
    },
    {
        "instruction": "Generate a python program to print the given sentence in reverse.",
        "input": "Sentence: \"This is an example\"",
        "output": "def reverse_string(s):\n    return s[::-1]\n\nprint(reverse_string(\"This is an example\"))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to print the given sentence in reverse.\n\n### Input:\nSentence: \"This is an example\"\n\n### Output:\ndef reverse_string(s):\n    return s[::-1]\n\nprint(reverse_string(\"This is an example\"))"
    },
    {
        "instruction": "Create a python program to calculate Fibonacci sequence for a given number.",
        "input": "n = 8",
        "output": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nif __name__ == '__main__':\n    n = 8\n    print(fibonacci(n))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to calculate Fibonacci sequence for a given number.\n\n### Input:\nn = 8\n\n### Output:\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n\nif __name__ == '__main__':\n    n = 8\n    print(fibonacci(n))"
    },
    {
        "instruction": "Develop an algorithm in Python to find the longest common prefix in an array of strings.",
        "input": "array = [\"apple\", \"ape\", \"app\", \"application\"]",
        "output": "def commonPrefix(array):\n    result = \"\"\n    if len(array) > 0:\n        # Find the minimum length of the word in the array.\n        min_length = min([len(i) for i in array])\n        \n        # Iterate through the letters in the word with the minimum length.\n        for i in range(min_length):\n            curr_char = array[0][i]\n            flag = True\n            \n            # For each letter, check if each of the words have that letter.\n            for j in range(len(array)):\n                if array[j][i] != curr_char:\n                    flag = False\n                    break\n            if flag:\n                result += curr_char\n            else:\n                break\n    return result\n\ncommonPrefix([\"apple\", \"ape\", \"app\", \"application\"])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to find the longest common prefix in an array of strings.\n\n### Input:\narray = [\"apple\", \"ape\", \"app\", \"application\"]\n\n### Output:\ndef commonPrefix(array):\n    result = \"\"\n    if len(array) > 0:\n        # Find the minimum length of the word in the array.\n        min_length = min([len(i) for i in array])\n        \n        # Iterate through the letters in the word with the minimum length.\n        for i in range(min_length):\n            curr_char = array[0][i]\n            flag = True\n            \n            # For each letter, check if each of the words have that letter.\n            for j in range(len(array)):\n                if array[j][i] != curr_char:\n                    flag = False\n                    break\n            if flag:\n                result += curr_char\n            else:\n                break\n    return result\n\ncommonPrefix([\"apple\", \"ape\", \"app\", \"application\"])"
    },
    {
        "instruction": "Design a program in Python to implement a queue data structure.",
        "input": "",
        "output": "class Queue:\n     # Initialize the queue \n    def __init__(self): \n        self.items = [] \n\n    # Add an element to the queue \n    def enqueue(self, item): \n        self.items.insert(0, item) \n\n    # Remove the last element from the queue \n    def dequeue(self): \n        return self.items.pop() \n\n    # Check if the queue is empty \n    def isEmpty(self): \n        return self.items == [] \n\n    # Get the size of the queue \n    def size(self): \n        return len(self.items)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to implement a queue data structure.\n\n### Input:\n\n\n### Output:\nclass Queue:\n     # Initialize the queue \n    def __init__(self): \n        self.items = [] \n\n    # Add an element to the queue \n    def enqueue(self, item): \n        self.items.insert(0, item) \n\n    # Remove the last element from the queue \n    def dequeue(self): \n        return self.items.pop() \n\n    # Check if the queue is empty \n    def isEmpty(self): \n        return self.items == [] \n\n    # Get the size of the queue \n    def size(self): \n        return len(self.items)"
    },
    {
        "instruction": "Create a Python script for replacing all the vowels in a string with underscores.",
        "input": "",
        "output": "def replace_vowels(string): \n    vowels = ('a', 'e', 'i', 'o', 'u') \n    for x in string.lower(): \n        if x in vowels: \n            string = string.replace(x, \"_\") \n    return string",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for replacing all the vowels in a string with underscores.\n\n### Input:\n\n\n### Output:\ndef replace_vowels(string): \n    vowels = ('a', 'e', 'i', 'o', 'u') \n    for x in string.lower(): \n        if x in vowels: \n            string = string.replace(x, \"_\") \n    return string"
    },
    {
        "instruction": "Write a Python function that takes a list of strings as input and returns a new list containing all the strings that start with 'A'",
        "input": "List = [\"Apple\", \"Banana\", \"Ant\", \"Dog\", \"Aardvark\"]",
        "output": "def startWithA(list): \n\tnew_list = [] \n\tfor el in list: \n\t\tif el[0] == 'A': \n\t\t\tnew_list.append(el) \n\treturn new_list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes a list of strings as input and returns a new list containing all the strings that start with 'A'\n\n### Input:\nList = [\"Apple\", \"Banana\", \"Ant\", \"Dog\", \"Aardvark\"]\n\n### Output:\ndef startWithA(list): \n\tnew_list = [] \n\tfor el in list: \n\t\tif el[0] == 'A': \n\t\t\tnew_list.append(el) \n\treturn new_list"
    },
    {
        "instruction": "Write a python program to calculate the average of a list of numbers.",
        "input": "[1, 2, 3, 4, 5]",
        "output": "def calculate_average(numbers):\n    total = sum(numbers)\n    length = len(numbers)\n    return total / length\n\nnumbers = [1, 2, 3, 4, 5]\naverage = calculate_average(numbers)\nprint(average)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to calculate the average of a list of numbers.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef calculate_average(numbers):\n    total = sum(numbers)\n    length = len(numbers)\n    return total / length\n\nnumbers = [1, 2, 3, 4, 5]\naverage = calculate_average(numbers)\nprint(average)"
    },
    {
        "instruction": "Create a Python script to format a JSON string.",
        "input": "json_str = \u2018{\u201dname\u201d:\u201dRobert\u201d, \u201dage\u201d:30, \u201dcity\u201d:\u201dNew York\u201d}\u2019",
        "output": "# import json library\nimport json\n\n# parse input string as JSON\njson_data = json.loads(json_str)\n\n# format the json string\nformatted_json = json.dumps(json_data, indent=4)\n\n# print the formatted json string\nprint(formatted_json)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to format a JSON string.\n\n### Input:\njson_str = \u2018{\u201dname\u201d:\u201dRobert\u201d, \u201dage\u201d:30, \u201dcity\u201d:\u201dNew York\u201d}\u2019\n\n### Output:\n# import json library\nimport json\n\n# parse input string as JSON\njson_data = json.loads(json_str)\n\n# format the json string\nformatted_json = json.dumps(json_data, indent=4)\n\n# print the formatted json string\nprint(formatted_json)"
    },
    {
        "instruction": "Write a command line program in Python for sorting a list of integers with the quick sort algorithm.",
        "input": "[9, 4, 7, 3, 2, 1, 8, 5, 6]",
        "output": "def quickSort(arr):\n if len(arr) <= 1:\n return arr\n\n pivot = arr[len(arr) // 2]\n left = [x for x in arr if x < pivot]\n middle = [x for x in arr if x == pivot]\n right = [x for x in arr if x > pivot]\n\n return quickSort(left) + middle + quickSort(right)\n\narr = [9, 4, 7, 3, 2, 1, 8, 5, 6]\n\nprint(quickSort(arr)) # prints [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a command line program in Python for sorting a list of integers with the quick sort algorithm.\n\n### Input:\n[9, 4, 7, 3, 2, 1, 8, 5, 6]\n\n### Output:\ndef quickSort(arr):\n if len(arr) <= 1:\n return arr\n\n pivot = arr[len(arr) // 2]\n left = [x for x in arr if x < pivot]\n middle = [x for x in arr if x == pivot]\n right = [x for x in arr if x > pivot]\n\n return quickSort(left) + middle + quickSort(right)\n\narr = [9, 4, 7, 3, 2, 1, 8, 5, 6]\n\nprint(quickSort(arr)) # prints [1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "instruction": "Design an algorithm in Python to replace an element in a given list of numbers at a given position with another number.",
        "input": "list: [1, 2, 3, 4, 5],\u00a0 element: 8,\u00a0 position: 3",
        "output": "def replace_elem(lst, val, pos):\n    lst[pos] = val\n    return lst\n\nlist = [1, 2, 3, 4, 5]\nelement = 8\nposition = 3\n\nresult = replace_elem(list, element, position)\nprint('After replacing element: ', result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to replace an element in a given list of numbers at a given position with another number.\n\n### Input:\nlist: [1, 2, 3, 4, 5],\u00a0 element: 8,\u00a0 position: 3\n\n### Output:\ndef replace_elem(lst, val, pos):\n    lst[pos] = val\n    return lst\n\nlist = [1, 2, 3, 4, 5]\nelement = 8\nposition = 3\n\nresult = replace_elem(list, element, position)\nprint('After replacing element: ', result)"
    },
    {
        "instruction": "Given a text string, write a Python program to count the number of words in the string.",
        "input": "string = \"Python is a powerful programming language\"",
        "output": "def count_words(string):\n  words = string.split()\n  return len(words)\n\nstring = \"Python is a powerful programming language\"\nprint(count_words(string))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a text string, write a Python program to count the number of words in the string.\n\n### Input:\nstring = \"Python is a powerful programming language\"\n\n### Output:\ndef count_words(string):\n  words = string.split()\n  return len(words)\n\nstring = \"Python is a powerful programming language\"\nprint(count_words(string))"
    },
    {
        "instruction": "Create a Python program to store basic user information (e.g. name, age, email) in a database.",
        "input": "Not applicable",
        "output": "import sqlite3\n\ndbname = 'userdata.db'\nconn = sqlite3.connect(dbname)\nc = conn.cursor()\n\n# Create a table for user data\nc.execute(\"\"\"CREATE TABLE IF NOT EXISTS user \n (name TEXT, age INTEGER, email TEXT)\n \"\"\")\n\n# Add a single record\nrecord = ('John', 28, 'john@example.com')\nc.execute('INSERT INTO user VALUES (?,?,?)', record)\n\n# Commit changes to database\nconn.commit()\n\n# Retrieve and display all records\nc.execute('SELECT * FROM user')\nfor user in c.fetchall():\n print(user)\n\n# Close the connection to the database \nconn.close()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to store basic user information (e.g. name, age, email) in a database.\n\n### Input:\nNot applicable\n\n### Output:\nimport sqlite3\n\ndbname = 'userdata.db'\nconn = sqlite3.connect(dbname)\nc = conn.cursor()\n\n# Create a table for user data\nc.execute(\"\"\"CREATE TABLE IF NOT EXISTS user \n (name TEXT, age INTEGER, email TEXT)\n \"\"\")\n\n# Add a single record\nrecord = ('John', 28, 'john@example.com')\nc.execute('INSERT INTO user VALUES (?,?,?)', record)\n\n# Commit changes to database\nconn.commit()\n\n# Retrieve and display all records\nc.execute('SELECT * FROM user')\nfor user in c.fetchall():\n print(user)\n\n# Close the connection to the database \nconn.close()"
    },
    {
        "instruction": "Create a program in Python which will return the index of the maximum value in a given array.",
        "input": "[2, 10, 4, 8, 1]",
        "output": "def find_max(arr):\n  max_val = max(arr)\n  for i in range(len(arr)):\n    if arr[i] == max_val:\n      return i",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python which will return the index of the maximum value in a given array.\n\n### Input:\n[2, 10, 4, 8, 1]\n\n### Output:\ndef find_max(arr):\n  max_val = max(arr)\n  for i in range(len(arr)):\n    if arr[i] == max_val:\n      return i"
    },
    {
        "instruction": "Create a machine learning model in Python using the Scikit-learn library to predict the temperature of a city using several metrics such as humidity, windspeed, and pressure.",
        "input": "humidity, windspeed, pressure",
        "output": "import pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\ndata = pd.read_csv('<dataset_path>')\n\n# Split into independent and dependent variables\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values\n\n# Split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train the linear regression model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Test the model\ny_pred = model.predict(X_test)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python using the Scikit-learn library to predict the temperature of a city using several metrics such as humidity, windspeed, and pressure.\n\n### Input:\nhumidity, windspeed, pressure\n\n### Output:\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\ndata = pd.read_csv('<dataset_path>')\n\n# Split into independent and dependent variables\nX = data.iloc[:, :-1].values\ny = data.iloc[:, -1].values\n\n# Split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Train the linear regression model\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Test the model\ny_pred = model.predict(X_test)"
    },
    {
        "instruction": "Create a Python program that takes a number and prints the product of that number and its next two values.",
        "input": "num = 5",
        "output": "def product(num):\n\treturn num * (num + 1) * (num + 2)\n\nprint(product(num))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a number and prints the product of that number and its next two values.\n\n### Input:\nnum = 5\n\n### Output:\ndef product(num):\n\treturn num * (num + 1) * (num + 2)\n\nprint(product(num))"
    },
    {
        "instruction": "Edit the following Python script to randomly select 10 numbers between 10 and 20, store them in the list lst, and print them out.",
        "input": "lst = []",
        "output": "import random\nlst = random.sample(range(10, 21), 10)\nprint(lst)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python script to randomly select 10 numbers between 10 and 20, store them in the list lst, and print them out.\n\n### Input:\nlst = []\n\n### Output:\nimport random\nlst = random.sample(range(10, 21), 10)\nprint(lst)"
    },
    {
        "instruction": "Write a Python program to optimize a neural network architecture using evolutionary algorithms.",
        "input": "The neural network should have 3 layers, where the first layer is an input layer of 8 nodes, the second layer has 10 nodes and the third layer has 4 nodes.",
        "output": "import numpy as np\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Generate dataset\nX = np.random.rand(1000, 8)\ny = np.random.randint(2, size=(1000, 1))\n\n# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y)\n\n# Create neural net classifier with 3 layers of 8, 10 and 4 nodes\nnn_model = MLPClassifier(solver='adam', hidden_layer_sizes=(8, 10, 4), \nactivation='relu')\n\n# Train model\nnn_model.fit(X_train, y_train)\n\n# Test model\nscore = nn_model.score(X_test, y_test)\n\n# Create an evolutionary optimization to further optimize the model\nfrom evolutionary_search import EvolutionaryAlgorithmSearchCV\n\n# Define the search space\nsearch_space = {\n'hidden_layer_sizes': [(8, 8), (8, 10, 4), (10, 8, 4)],\n 'activation': ['tanh', 'relu']\n}\n\n# Create an evolutionary optimization search\noptimizer = EvolutionaryAlgorithmSearchCV(nn_model, search_space,\nscoring='accuracy',\n cv=3,\n verbose=1,\n population_size=50,\n gene_mutation_prob=0.10,\n gene_crossover_prob=0.5,\n tournament_size=3,\n generations_number=10,\n n_jobs=1)\n\n# Optimize model\noptimizer.fit(X_train, y_train)\n\n# Save optimized model\noptimized_nn_model = optimizer.best_estimator_\n\n# Test optimized model\nscore_opt = optimized_nn_model.score(X_test, y_test)\n\n# Print scores for original and optimized models\nprint('Original:', score)\nprint('Optimized:', score_opt)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize a neural network architecture using evolutionary algorithms.\n\n### Input:\nThe neural network should have 3 layers, where the first layer is an input layer of 8 nodes, the second layer has 10 nodes and the third layer has 4 nodes.\n\n### Output:\nimport numpy as np\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Generate dataset\nX = np.random.rand(1000, 8)\ny = np.random.randint(2, size=(1000, 1))\n\n# Split data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y)\n\n# Create neural net classifier with 3 layers of 8, 10 and 4 nodes\nnn_model = MLPClassifier(solver='adam', hidden_layer_sizes=(8, 10, 4), \nactivation='relu')\n\n# Train model\nnn_model.fit(X_train, y_train)\n\n# Test model\nscore = nn_model.score(X_test, y_test)\n\n# Create an evolutionary optimization to further optimize the model\nfrom evolutionary_search import EvolutionaryAlgorithmSearchCV\n\n# Define the search space\nsearch_space = {\n'hidden_layer_sizes': [(8, 8), (8, 10, 4), (10, 8, 4)],\n 'activation': ['tanh', 'relu']\n}\n\n# Create an evolutionary optimization search\noptimizer = EvolutionaryAlgorithmSearchCV(nn_model, search_space,\nscoring='accuracy',\n cv=3,\n verbose=1,\n population_size=50,\n gene_mutation_prob=0.10,\n gene_crossover_prob=0.5,\n tournament_size=3,\n generations_number=10,\n n_jobs=1)\n\n# Optimize model\noptimizer.fit(X_train, y_train)\n\n# Save optimized model\noptimized_nn_model = optimizer.best_estimator_\n\n# Test optimized model\nscore_opt = optimized_nn_model.score(X_test, y_test)\n\n# Print scores for original and optimized models\nprint('Original:', score)\nprint('Optimized:', score_opt)"
    },
    {
        "instruction": "Create a web scraper using Python and BeautifulSoup to collect data from a given table on a website.",
        "input": "Assume the table contains a list of products and their prices",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\n# URL\nurl = \"https://www.example.com/table-with-products\"\n\n# Get the page content\npage = requests.get(url)\n\n# Parse the page and extract the table\nsoup = BeautifulSoup(page.content, 'html.parser')\ntable = soup.find(\"table\")\n\n# Loop through each row of the table\nrows = table.find_all(\"tr\")\nfor row in rows:\n    # Extract table header and its content\n    header = row.find(\"th\")\n    cells = row.find_all(\"td\")\n\n    # Extract product name\n    product_name = header.text if header else ''\n\n    # Extract product price\n    product_price = cells[0].text if cells else ''\n    \n    # Print the collected data\n    print(f'{product_name}: {product_price}')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper using Python and BeautifulSoup to collect data from a given table on a website.\n\n### Input:\nAssume the table contains a list of products and their prices\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# URL\nurl = \"https://www.example.com/table-with-products\"\n\n# Get the page content\npage = requests.get(url)\n\n# Parse the page and extract the table\nsoup = BeautifulSoup(page.content, 'html.parser')\ntable = soup.find(\"table\")\n\n# Loop through each row of the table\nrows = table.find_all(\"tr\")\nfor row in rows:\n    # Extract table header and its content\n    header = row.find(\"th\")\n    cells = row.find_all(\"td\")\n\n    # Extract product name\n    product_name = header.text if header else ''\n\n    # Extract product price\n    product_price = cells[0].text if cells else ''\n    \n    # Print the collected data\n    print(f'{product_name}: {product_price}')"
    },
    {
        "instruction": "Create a class in Python to represent a student and a method that calculates their grade.",
        "input": "Not applicable",
        "output": "class Student:\n def __init__(self, assignments, tests, projects):\n self.assignments = assignments\n self.tests = tests\n self.projects = projects\n\ndef calculate_grade(self):\n total = (self.assignments * 0.3) + (self.tests * 0.4) + (self.projects * 0.3)\n return total",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to represent a student and a method that calculates their grade.\n\n### Input:\nNot applicable\n\n### Output:\nclass Student:\n def __init__(self, assignments, tests, projects):\n self.assignments = assignments\n self.tests = tests\n self.projects = projects\n\ndef calculate_grade(self):\n total = (self.assignments * 0.3) + (self.tests * 0.4) + (self.projects * 0.3)\n return total"
    },
    {
        "instruction": "Create a python function that takes a list as an argument and returns a list with all the values doubled.",
        "input": "lst = [2, 4, 6]",
        "output": "def double_list(lst):\n    return [x*2 for x in lst]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function that takes a list as an argument and returns a list with all the values doubled.\n\n### Input:\nlst = [2, 4, 6]\n\n### Output:\ndef double_list(lst):\n    return [x*2 for x in lst]"
    },
    {
        "instruction": "Write a Python program to find the largest common substring between two strings.",
        "input": "str1 = \"abcdxyz\"\nstr2 = \"xyzabcd\"",
        "output": "def largest_common_substring(str1, str2):\n    # Create a 2D list to store the LCS lengths\n    lengths = [[0 for _ in range(len(str2)+1)] for _ in range(len(str1)+1)]\n\n    # Fill the table\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                lengths[i][j] = lengths[i-1][j-1] + 1\n            else:\n                lengths[i][j] = max(lengths[i-1][j], lengths[i][j-1])\n\n    # Read the substring out from from the table\n    result = \"\"\n    x, y = len(str1), len(str2)\n    while x != 0 and y != 0:\n        if lengths[x][y] == lengths[x-1][y]:\n            x -= 1\n        elif lengths[x][y] == lengths[x][y-1]:\n            y -= 1\n        else:\n            result = str1[x-1] + result\n            x -= 1\n            y -= 1\n\n    return result\n\n# Test\nstr1 = \"abcdxyz\"\nstr2 = \"xyzabcd\"\nprint(\"The largest common substring is\", largest_common_substring(str1, str2))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the largest common substring between two strings.\n\n### Input:\nstr1 = \"abcdxyz\"\nstr2 = \"xyzabcd\"\n\n### Output:\ndef largest_common_substring(str1, str2):\n    # Create a 2D list to store the LCS lengths\n    lengths = [[0 for _ in range(len(str2)+1)] for _ in range(len(str1)+1)]\n\n    # Fill the table\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                lengths[i][j] = lengths[i-1][j-1] + 1\n            else:\n                lengths[i][j] = max(lengths[i-1][j], lengths[i][j-1])\n\n    # Read the substring out from from the table\n    result = \"\"\n    x, y = len(str1), len(str2)\n    while x != 0 and y != 0:\n        if lengths[x][y] == lengths[x-1][y]:\n            x -= 1\n        elif lengths[x][y] == lengths[x][y-1]:\n            y -= 1\n        else:\n            result = str1[x-1] + result\n            x -= 1\n            y -= 1\n\n    return result\n\n# Test\nstr1 = \"abcdxyz\"\nstr2 = \"xyzabcd\"\nprint(\"The largest common substring is\", largest_common_substring(str1, str2))"
    },
    {
        "instruction": "Write an object oriented Python program to create an Employee class that stores employee details.",
        "input": "",
        "output": "class Employee:\n \n    #constructor\n    def __init__(self, name, salary, age):\n        self.name = name\n        self.salary = salary\n        self.age = age\n \n    #methods\n    def getName(self):\n        return self.name\n \n    def getSalary(self):\n        return self.salary\n \n    def getAge(self):\n        return self.age",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an object oriented Python program to create an Employee class that stores employee details.\n\n### Input:\n\n\n### Output:\nclass Employee:\n \n    #constructor\n    def __init__(self, name, salary, age):\n        self.name = name\n        self.salary = salary\n        self.age = age\n \n    #methods\n    def getName(self):\n        return self.name\n \n    def getSalary(self):\n        return self.salary\n \n    def getAge(self):\n        return self.age"
    },
    {
        "instruction": "Refactor this Python program to optimize the performance",
        "input": "def calculate_sum(numbers):\n    total = 0\n    for n in numbers:\n        total += n\n    return total",
        "output": "def calculate_sum(numbers):\n    return sum(numbers)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRefactor this Python program to optimize the performance\n\n### Input:\ndef calculate_sum(numbers):\n    total = 0\n    for n in numbers:\n        total += n\n    return total\n\n### Output:\ndef calculate_sum(numbers):\n    return sum(numbers)"
    },
    {
        "instruction": "Write a Python program to define and execute a callback method.",
        "input": "",
        "output": "def callback(a, b): \n    # perform calculation \n    return c \n  \n# define a function to use for the callback \ndef my_function(x): \n    return x*x \n\nresult = callback(5, my_function) \nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to define and execute a callback method.\n\n### Input:\n\n\n### Output:\ndef callback(a, b): \n    # perform calculation \n    return c \n  \n# define a function to use for the callback \ndef my_function(x): \n    return x*x \n\nresult = callback(5, my_function) \nprint(result)"
    },
    {
        "instruction": "Create a reinforcement learning environment in Python that teaches an agent to navigate through a simple gridworld.",
        "input": "Not applicable",
        "output": "import numpy as np\n\n# define the environment\nclass Gridworld:\n def __init__(self, size=4):\n self.size = size\n self.reset()\n \n def reset(self):\n # reset the environment\n self.state = np.zeros((self.size, self.size))\n self.done = False\n self.reward = 0\n \n # define states\n self.state[3,3] = 1\n self.current_state = [0,0]\n \n # define actions\n self.action_space = {0: 'up',\n 1: 'down',\n 2: 'left',\n 3: 'right'}\n \n # define the rewards\n self.reward_space = {'win': 1, 'loss': -1, 'tie': 0}\n \n def step(self, action):\n # take an action in the environment\n reward = 0\n done = False\n # calculate next state\n current_state = self.current_state\n if action == 0:\n next_state = [current_state[0] - 1, current_state[1]]\n elif action == 1:\n next_state = [current_state[0] + 1, current_state[1]]\n elif action == 2:\n next_state = [current_state[0], current_state[1] - 1]\n elif action == 3:\n next_state = [current_state[0], current_state[1] + 1]\n else:\n pass\n \n # check for rewards\n if self.state[next_state[0], next_state[1]] == 1:\n reward = self.reward_space['win']\n self.done = True\n elif (next_state[0] < 0 or next_state[0] >= self.size) or (next_state[1] < 0 or next_state[1] >= self.size):\n # reward for out of bounds penalty\n reward = self.reward_space['loss']\n self.done = True\n \n # update state\n self.state[current_state[0], current_state[1]] = 0\n self.state[next_state[0], next_state[1]] = 1\n self.current_state = next_state\n \n # return state, reward, and done\n return self.state, reward, self.done",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a reinforcement learning environment in Python that teaches an agent to navigate through a simple gridworld.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\n\n# define the environment\nclass Gridworld:\n def __init__(self, size=4):\n self.size = size\n self.reset()\n \n def reset(self):\n # reset the environment\n self.state = np.zeros((self.size, self.size))\n self.done = False\n self.reward = 0\n \n # define states\n self.state[3,3] = 1\n self.current_state = [0,0]\n \n # define actions\n self.action_space = {0: 'up',\n 1: 'down',\n 2: 'left',\n 3: 'right'}\n \n # define the rewards\n self.reward_space = {'win': 1, 'loss': -1, 'tie': 0}\n \n def step(self, action):\n # take an action in the environment\n reward = 0\n done = False\n # calculate next state\n current_state = self.current_state\n if action == 0:\n next_state = [current_state[0] - 1, current_state[1]]\n elif action == 1:\n next_state = [current_state[0] + 1, current_state[1]]\n elif action == 2:\n next_state = [current_state[0], current_state[1] - 1]\n elif action == 3:\n next_state = [current_state[0], current_state[1] + 1]\n else:\n pass\n \n # check for rewards\n if self.state[next_state[0], next_state[1]] == 1:\n reward = self.reward_space['win']\n self.done = True\n elif (next_state[0] < 0 or next_state[0] >= self.size) or (next_state[1] < 0 or next_state[1] >= self.size):\n # reward for out of bounds penalty\n reward = self.reward_space['loss']\n self.done = True\n \n # update state\n self.state[current_state[0], current_state[1]] = 0\n self.state[next_state[0], next_state[1]] = 1\n self.current_state = next_state\n \n # return state, reward, and done\n return self.state, reward, self.done"
    },
    {
        "instruction": "Generate a Python function for finding the maximum consecutive sum of a list of numbers.",
        "input": "",
        "output": "def max_consecutive_sum(numbers):\n    \"\"\"\n    Finds the maximum consecutive sum of a list of numbers. \n    \n    Args:\n        numbers (list of ints): The list of numbers.\n    \n    Return:\n        int: The maximum consecutive sum.\n    \"\"\"\n\n    # Set the initial maximum sum\n    max_sum = float('-inf')\n\n    # Iterate through the numbers and find the maximum sum\n    running_sum = 0\n    for number in numbers:\n        running_sum += number\n        if running_sum > max_sum:\n            max_sum = running_sum\n        if running_sum < 0:\n            running_sum = 0\n    \n    return max_sum",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function for finding the maximum consecutive sum of a list of numbers.\n\n### Input:\n\n\n### Output:\ndef max_consecutive_sum(numbers):\n    \"\"\"\n    Finds the maximum consecutive sum of a list of numbers. \n    \n    Args:\n        numbers (list of ints): The list of numbers.\n    \n    Return:\n        int: The maximum consecutive sum.\n    \"\"\"\n\n    # Set the initial maximum sum\n    max_sum = float('-inf')\n\n    # Iterate through the numbers and find the maximum sum\n    running_sum = 0\n    for number in numbers:\n        running_sum += number\n        if running_sum > max_sum:\n            max_sum = running_sum\n        if running_sum < 0:\n            running_sum = 0\n    \n    return max_sum"
    },
    {
        "instruction": "Implement a decision tree model in Python for classifying a dataset.",
        "input": "\"data.csv\": 5 numerical features and one output label (0 or 1)",
        "output": "import numpy as np\nfrom sklearn import tree\n\n# Load the data\ndata = np.genfromtxt(\"data.csv\", delimiter=\",\")\nX = data[:,:-1]\ny = data[:,-1]\n\n# Create and train the decision tree model\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, y)\n\n# Use the model to predict values\npredictions = clf.predict(X)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a decision tree model in Python for classifying a dataset.\n\n### Input:\n\"data.csv\": 5 numerical features and one output label (0 or 1)\n\n### Output:\nimport numpy as np\nfrom sklearn import tree\n\n# Load the data\ndata = np.genfromtxt(\"data.csv\", delimiter=\",\")\nX = data[:,:-1]\ny = data[:,-1]\n\n# Create and train the decision tree model\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(X, y)\n\n# Use the model to predict values\npredictions = clf.predict(X)"
    },
    {
        "instruction": "Create a decision tree classifier in Python to distinguish cats and dogs.",
        "input": "",
        "output": "import numpy as np\nfrom sklearn import tree\n\n# Create the data\nx = np.array([[0, 0], [1, 1]])\ny = np.array([0, 1])\n\n# Train the tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(x, y)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a decision tree classifier in Python to distinguish cats and dogs.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom sklearn import tree\n\n# Create the data\nx = np.array([[0, 0], [1, 1]])\ny = np.array([0, 1])\n\n# Train the tree\nclf = tree.DecisionTreeClassifier()\nclf = clf.fit(x, y)"
    },
    {
        "instruction": "Create a Python program that finds the longest word in a sentence.",
        "input": "My name is John",
        "output": "def find_longest_word(sentence):\n    # Split sentence into a list of words\n    words = sentence.split()\n    # Track the longest word\n    longest_word = ''\n    # Iterate over the list of words\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    # Return the longest word\n    return longest_word\n\nprint(find_longest_word(\"My name is John\"))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that finds the longest word in a sentence.\n\n### Input:\nMy name is John\n\n### Output:\ndef find_longest_word(sentence):\n    # Split sentence into a list of words\n    words = sentence.split()\n    # Track the longest word\n    longest_word = ''\n    # Iterate over the list of words\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    # Return the longest word\n    return longest_word\n\nprint(find_longest_word(\"My name is John\"))"
    },
    {
        "instruction": "Create a Python program to sort a given list using the merge sort algorithm",
        "input": "",
        "output": "def merge_sort(alist):\n    if len(alist)>1:\n        mid = len(alist)//2\n        lefthalf = alist[:mid]\n        righthalf = alist[mid:]\n\n        merge_sort(lefthalf)\n        merge_sort(righthalf)\n\n        i=0\n        j=0\n        k=0\n        while i < len(lefthalf) and j < len(righthalf):\n            if lefthalf[i] < righthalf[j]:\n                alist[k]=lefthalf[i]\n                i=i+1\n            else:\n                alist[k]=righthalf[j]\n                j=j+1\n            k=k+1\n\n        while i < len(lefthalf):\n            alist[k]=lefthalf[i]\n            i=i+1\n            k=k+1\n\n        while j < len(righthalf):\n            alist[k]=righthalf[j]\n            j=j+1\n            k=k+1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to sort a given list using the merge sort algorithm\n\n### Input:\n\n\n### Output:\ndef merge_sort(alist):\n    if len(alist)>1:\n        mid = len(alist)//2\n        lefthalf = alist[:mid]\n        righthalf = alist[mid:]\n\n        merge_sort(lefthalf)\n        merge_sort(righthalf)\n\n        i=0\n        j=0\n        k=0\n        while i < len(lefthalf) and j < len(righthalf):\n            if lefthalf[i] < righthalf[j]:\n                alist[k]=lefthalf[i]\n                i=i+1\n            else:\n                alist[k]=righthalf[j]\n                j=j+1\n            k=k+1\n\n        while i < len(lefthalf):\n            alist[k]=lefthalf[i]\n            i=i+1\n            k=k+1\n\n        while j < len(righthalf):\n            alist[k]=righthalf[j]\n            j=j+1\n            k=k+1"
    },
    {
        "instruction": "Write code to generate a random 3x3 tic-tac-toe board in Python.",
        "input": "",
        "output": "import random\n\n# our tic-tac-toe board\nboard = []\n\n# function to generate a random 3x3 tic-tac-toe board\ndef generate_board():\n  # create a 3x3 board\n  board = [[0 for i in range(3)] for j in range(3)]\n\n  # populate the board randomly\n  for row in range(3):\n    for col in range(3):\n      board[row][col] = random.choice(['X','O'])\n\n  return board\n\n# print the generated board\nboard = generate_board()\nfor row in board:\n  print(row)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code to generate a random 3x3 tic-tac-toe board in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\n# our tic-tac-toe board\nboard = []\n\n# function to generate a random 3x3 tic-tac-toe board\ndef generate_board():\n  # create a 3x3 board\n  board = [[0 for i in range(3)] for j in range(3)]\n\n  # populate the board randomly\n  for row in range(3):\n    for col in range(3):\n      board[row][col] = random.choice(['X','O'])\n\n  return board\n\n# print the generated board\nboard = generate_board()\nfor row in board:\n  print(row)"
    },
    {
        "instruction": "Design a user interface in Python to capture a personal profile details.",
        "input": "",
        "output": "def get_profile_details():\n    \n    name = input(\"Please enter your name: \")\n    age = int(input(\"Please enter your age: \"))\n    city = input(\"Please enter your city: \")\n    country = input(\"Please enter your country: \")\n    occupation = input(\"Please enter your occupation (if any): \")\n    \n    profile_details = {\n        'name': name,\n        'age': age,\n        'city': city,\n        'country': country,\n        'occupation': occupation\n    }\n    \n    return profile_details\n\n# Driver code\nprint(get_profile_details())",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a user interface in Python to capture a personal profile details.\n\n### Input:\n\n\n### Output:\ndef get_profile_details():\n    \n    name = input(\"Please enter your name: \")\n    age = int(input(\"Please enter your age: \"))\n    city = input(\"Please enter your city: \")\n    country = input(\"Please enter your country: \")\n    occupation = input(\"Please enter your occupation (if any): \")\n    \n    profile_details = {\n        'name': name,\n        'age': age,\n        'city': city,\n        'country': country,\n        'occupation': occupation\n    }\n    \n    return profile_details\n\n# Driver code\nprint(get_profile_details())"
    },
    {
        "instruction": "Write a function in Python to convert a given date in the format mm-dd-yyyy to the format dd-mm-yyyy.",
        "input": "",
        "output": "def convertDateFormat(inputDate):\n    dateList = inputDate.split('-')\n    newFormat = dateList[1] + \"-\" + dateList[0] + \"-\" + dateList[2]\n    return newFormat",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to convert a given date in the format mm-dd-yyyy to the format dd-mm-yyyy.\n\n### Input:\n\n\n### Output:\ndef convertDateFormat(inputDate):\n    dateList = inputDate.split('-')\n    newFormat = dateList[1] + \"-\" + dateList[0] + \"-\" + dateList[2]\n    return newFormat"
    },
    {
        "instruction": "Write a Python program for predicting the trend of a stock based on historical data.",
        "input": "Not applicable",
        "output": "import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Read the data into a pandas DataFrame \ndf = pd.read_csv('StockData.csv') \n\n# Create the independent variable x which is a 2D array \nx = df['Days'].values.reshape(-1,1) \n  \n# Create the dependent variable Y \ny = df['Price'].values.reshape(-1,1) \n  \n# Create the linear regression model  \nlr = LinearRegression() \n  \n# Fit the model  \nlr.fit(x, y) \n  \n# Get the slope of the model \nslope = lr.coef_ \nprint(\"Slope of the model is\", slope) \n  \n# Get the y-intercept of the model \nintercept = lr.intercept_ \nprint(\"y-intercept of the model is\", intercept) \n  \n# Get the predictions for the x values\ny_pred = lr.predict(x)\n\n# Get the trend of the stock\ntrend = np.sign(np.mean(y_pred)).astype('int')\nprint(\"Trend of the stock is\", trend)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program for predicting the trend of a stock based on historical data.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Read the data into a pandas DataFrame \ndf = pd.read_csv('StockData.csv') \n\n# Create the independent variable x which is a 2D array \nx = df['Days'].values.reshape(-1,1) \n  \n# Create the dependent variable Y \ny = df['Price'].values.reshape(-1,1) \n  \n# Create the linear regression model  \nlr = LinearRegression() \n  \n# Fit the model  \nlr.fit(x, y) \n  \n# Get the slope of the model \nslope = lr.coef_ \nprint(\"Slope of the model is\", slope) \n  \n# Get the y-intercept of the model \nintercept = lr.intercept_ \nprint(\"y-intercept of the model is\", intercept) \n  \n# Get the predictions for the x values\ny_pred = lr.predict(x)\n\n# Get the trend of the stock\ntrend = np.sign(np.mean(y_pred)).astype('int')\nprint(\"Trend of the stock is\", trend)"
    },
    {
        "instruction": "Formulate a program in python that will print out the first ten values of p Fibonacci sequence.",
        "input": "",
        "output": "a, b = 0, 1\nfor i in range(10):\n    print(a)\n    a, b = b, a + b",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFormulate a program in python that will print out the first ten values of p Fibonacci sequence.\n\n### Input:\n\n\n### Output:\na, b = 0, 1\nfor i in range(10):\n    print(a)\n    a, b = b, a + b"
    },
    {
        "instruction": "Build a Python program to classify text into categories based on predefined labels.",
        "input": "label1 = 'sports'\nlabel2 = 'science'\ntext = 'Football is a team sport popular all over the world'",
        "output": "import nltk\n\nlabel1 = 'sports'\nlabel2 = 'science'\ntext = 'Football is a team sport popular all over the world'\n\n# Tokenize the sentence\ntokens = nltk.word_tokenize(text)\n\n# Define a training dataset\ntraining_data = [['Football is a popular team sport',label1], \n           ['Molecular Biology deals with genetics',label2]]\n\n# Extract the vocabulary from the dictionary\nword_features = set([word for (sent,cat) in training_data for word in sent.split()])\n\n# Create word dictionary\ndef feature_dictionary(tokens):\n  token_words = set(tokens)\n  features = {}\n  for word in word_features:\n    features['w_({})'.format(word)] = (word in token_words)\n  return features\n\n# Classify the input text\ninput_features = feature_dictionary(tokens)\n\nif input_features['w_(Football)']:\n  print('The sentence belongs to the sports category.')\nelif input_features['w_(Molecular)']:\n  print('The sentence belongs to the science category.')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python program to classify text into categories based on predefined labels.\n\n### Input:\nlabel1 = 'sports'\nlabel2 = 'science'\ntext = 'Football is a team sport popular all over the world'\n\n### Output:\nimport nltk\n\nlabel1 = 'sports'\nlabel2 = 'science'\ntext = 'Football is a team sport popular all over the world'\n\n# Tokenize the sentence\ntokens = nltk.word_tokenize(text)\n\n# Define a training dataset\ntraining_data = [['Football is a popular team sport',label1], \n           ['Molecular Biology deals with genetics',label2]]\n\n# Extract the vocabulary from the dictionary\nword_features = set([word for (sent,cat) in training_data for word in sent.split()])\n\n# Create word dictionary\ndef feature_dictionary(tokens):\n  token_words = set(tokens)\n  features = {}\n  for word in word_features:\n    features['w_({})'.format(word)] = (word in token_words)\n  return features\n\n# Classify the input text\ninput_features = feature_dictionary(tokens)\n\nif input_features['w_(Football)']:\n  print('The sentence belongs to the sports category.')\nelif input_features['w_(Molecular)']:\n  print('The sentence belongs to the science category.')"
    },
    {
        "instruction": "Copy code to StationA and StationB, and set the hostnames StationA and StationB.",
        "input": "",
        "output": "\"\"\"\n\nWe need two special hostnames to connect to: \n\nStationA\n\nand \n\nStationB\n\n\"\"\"\n\n\nfrom __future__ import with_statement, print_function\nfrom fabric.api import local, settings, abort, run, sudo, cd, hosts, env, execute\nfrom fabric.contrib.console import confirm\nfrom fabric.operations import put, get\nfrom fabric.contrib.project import rsync_project\n\nimport re\nimport subprocess as sp \nimport os.path \nfrom   StringIO import StringIO\n\n\ncurrent_dir = os.path.dirname(os.path.realpath(__file__))\n\n\nVNC_LICENSE = [\n    \"xxxxx-xxxxx-xxxxx-xxxxx-xxxxx\"\n]\n\n\n# TODO: Put a proper deployment mechanism here.\nenv.key_filename = '/home/alcides/.ssh/zunzun_ec2_keypair_0.pem'\n\nStationA_H = 'ubuntu@54.149.116.230'\nStationB_H = 'ubuntu@54.149.116.233'\nBeefy_H    = 'ubuntu@52.11.217.155'\n# TODO: Make the IP number below deployment-specific...\nBeefy_InternalIP = '192.168.112.131'\nStationA_InternalIP = '192.168.112.129'\nStationB_InternalIP = '192.168.112.130'\nHomeDir_Name = \"ubuntu\"\n\n\n@hosts(StationA_H)\ndef StationA():\n    \"\"\"\n    Copies code to StationA \n    \"\"\"\n    rsync_project(\n        local_dir = \"scripts/StationA\",\n        remote_dir = (\"/home/{HomeDir_Name}/\".format(HomeDir_Name=HomeDir_Name))\n        )\n    run(\"ln -sf /home/{HomeDir_Name}/StationA/onstartup.py /home/{HomeDir_Name}/onstartup.py\".format(HomeDir_Name=HomeDir_Name))\n\n\n@hosts(StationB_H)\ndef setup_dns_masq():\n    sudo(\"apt-get install -y dnsmasq\")\n    put(\n        local_path  = StringIO(\"addn-hosts=/home/{HomeDir_Name}/dnsmasq_more.conf\\n\".format(HomeDir_Name=HomeDir_Name)),\n        remote_path = \"/etc/dnsmasq.conf\",\n        use_sudo=True)\n\n\n\n@hosts(StationB_H)\ndef StationB():\n    \"\"\"\n    Copies both the chrome plugin and the DNSMasq watcher \n    \"\"\"\n    rsync_project(\n        local_dir = \"scripts/StationB\",\n        remote_dir = (\"/home/{HomeDir_Name}/\".format(HomeDir_Name=HomeDir_Name))\n        )\n    rsync_project(\n        local_dir = \"scripts/StationA/chrome_captures_hars\",\n        remote_dir = ((\"/home/{HomeDir_Name}/StationB/\".format(HomeDir_Name=HomeDir_Name)).format(HomeDir_Name=HomeDir_Name))\n        )\n    run(\"ln -sf /home/{HomeDir_Name}/StationB/onstartup.py /home/{HomeDir_Name}/onstartup.py\".format(HomeDir_Name=HomeDir_Name))\n\n\n@hosts(StationB_H)\ndef install_updatednsmasq_service():\n    with settings(warn_only=True):\n        sudo(\"service updatednsmasq stop\")\n    put(\n        local_path = \"scripts/StationB/configure_dnsmasq.py\",\n        remote_path = \"/home/{HomeDir_Name}/StationB/configure_dnsmasq.py\".format(HomeDir_Name=HomeDir_Name) ,\n        use_sudo = True\n        )\n    put(\n        local_path = StringIO(\"\"\"\ndescription \"Update dnsmasq\"\n\nstart on runlevel [2345]\nstop on runlevel [!2345]\n\numask 022\n\nconsole log\n\nenv PATH=/opt/openssl-1.0.2/bin/:/usr/bin:/usr/local/bin:/usr/sbin:/bin \nexport PATH\nenv LD_LIBRARY_PATH=/opt/openssl-1.0.2/lib\nexport LD_LIBRARY_PATH\nenv USER={HomeDir_Name}\nexport USER\n\nscript \n    exec /usr/bin/python /home/{HomeDir_Name}/StationB/configure_dnsmasq.py\nend script\n\n\"\"\".format(HomeDir_Name=HomeDir_Name)),\n        remote_path = \"/etc/init/updatednsmasq.conf\",\n        use_sudo=True )\n    sudo(\"service updatednsmasq start\")\n\n\n@hosts(Beefy_H)\ndef Beefy():\n    sudo(\"apt-get update\")\n    sudo(\"apt-get -y install libgmp-dev\")\n\n\n@hosts(Beefy_H)\ndef BeefyRehMimic():\n    with settings(warn_only=True):\n        sudo(\"service mimic stop\")\n    put(\n        local_path  = \"dist/build/reh-mimic/reh-mimic\",\n        remote_path = \"/home/{HomeDir_Name}/reh-mimic\".format(HomeDir_Name=HomeDir_Name)\n        )\n    run(\"chmod ugo+x /home/{HomeDir_Name}/reh-mimic\".format(HomeDir_Name=HomeDir_Name))\n    sudo(\"rm /home/{HomeDir_Name}/mimic -rf\".format(HomeDir_Name=HomeDir_Name) )\n    rsync_project(\n        local_dir  = \"mimic\",\n        remote_dir = \"/home/{HomeDir_Name}/\".format(HomeDir_Name=HomeDir_Name),\n        )\n    put(\n        local_path  = \"scripts/mimic.conf\",\n        remote_path = \"/etc/init/mimic.conf\",\n        use_sudo    = True\n        )\n    sudo(\"touch /root/.rnd\")\n    sudo(\"service mimic start\")\n\n\n\n@hosts(Beefy_H, StationA_H, StationB_H )\ndef configure_logging():\n    if env.host_string == StationA_H:\n        put(\n            local_path = StringIO(\"\"\"$template Logentries,\"199fb2e1-8227-4f73-9150-70a34a5d5e0c %HOSTNAME% %syslogtag%%msg%\\\\n\"\n*.* @@api.logentries.com:10000;Logentries\"\"\"),\n            remote_path = \"/etc/rsyslog.d/70-logentries.conf\",\n            use_sudo = True )\n    elif env.host_string == StationB_H:\n        put(\n            local_path = StringIO(\"\"\"$template Logentries,\"3d2fd756-407a-4764-b130-1dd6f22a1b62 %HOSTNAME% %syslogtag%%msg%\\\\n\"\n*.* @@api.logentries.com:10000;Logentries\"\"\"),\n            remote_path = \"/etc/rsyslog.d/70-logentries.conf\",\n            use_sudo = True )\n    else:\n        put(\n            local_path = StringIO(\"\"\"$template Logentries,\"7551d4e0-fa76-466f-8547-8c9a347a9363 %HOSTNAME% %syslogtag%%msg%\\\\n\"\n*.* @@api.logentries.com:10000;Logentries\"\"\"),\n            remote_path = \"/etc/rsyslog.d/70-logentries.conf\",\n            use_sudo = True )\n        \n    sudo(\"service rsyslog restart\")\n    # Check logging works...\n    sudo(\"logger -t test Hello there Logentries\")\n\n\n@hosts (StationA_H, StationB_H)\ndef deploy_specific():\n    if env.host_string == StationA_H:\n        print(\"StationA deploy\")\n        StationA()\n    elif env.host_string == StationB_H:\n        print(\"StationB deploy\")\n        StationB()\n    else: \n        print(\"Beefy station deploy\")\n        Beefy()\n\n\n@hosts(StationA_H, StationB_H)\ndef apt_stations():\n    sudo(\"apt-get update\")\n    sudo(\"apt-get install -y xutils xbase-clients xfonts-base xfonts-75dpi xfonts-100dpi\")\n    sudo(\"apt-get install -y python-pip\")\n    sudo(\"apt-get install -y xdotool\")\n    sudo(\"apt-get install -y xfwm4\") \n\n\n@hosts(StationA_H, StationB_H)\ndef pythonlibs():\n    sudo(\"pip install python-daemon>=2.0\")\n    sudo(\"pip install raven\")\n\n\n@hosts(Beefy_H, StationA_H, StationB_H)\ndef ssl():\n    \"\"\"\n    Copies Openssl and curl to the target hosts...\n    \"\"\"\n    sudo(\"mkdir -p /opt/openssl-1.0.2/\")\n    sudo((\"chown {HomeDir_Name} /opt/openssl-1.0.2/\".format(HomeDir_Name=HomeDir_Name)))\n    rsync_project(\n        local_dir = \"/opt/openssl-1.0.2\",\n        remote_dir = \"/opt/\",\n        extra_opts=\"-avz\"\n        )\n    put(\n        local_path = \"scripts/ca-certificates.crt\",\n        remote_path = \"/etc/ssl/certs/ca-certificates.crt\",\n        use_sudo = True\n        )\n\n\n@hosts(Beefy_H, StationA_H, StationB_H)\ndef ca():\n    \"\"\"\n    Copies the ca certificate to the home...\n    \"\"\"\n    put(\n        local_path = \"mimic-here/config/ca/cacert.pem\",\n        remote_path = (\"/home/{HomeDir_Name}/cacert.pem\".format(HomeDir_Name=HomeDir_Name)),\n        use_sudo = True\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef install_vnc():\n    \"\"\"\n    \n    \"\"\"\n    # run(\"curl -L -o VNC.tar.gz https://www.realvnc.com/download/binary/1720/\")\n    # run(\"tar xvf VNC-5.2.3-Linux-x64-ANY.tar.gz\")\n\n\n    put(\n        local_path = \"scripts/VNC-5.2.3-Linux-x64-ANY.tar.gz\",\n        remote_path = (\"/home/{HomeDir_Name}/VNC-5.2.3-Linux-x64-ANY.tar.gz\".format(HomeDir_Name=HomeDir_Name)),\n        use_sudo = True\n        )\n    run((\"tar -xzf /home/{HomeDir_Name}/VNC-5.2.3-Linux-x64-ANY.tar.gz\".format(HomeDir_Name=HomeDir_Name)))\n    # Get a handier name.... \n    run(\"rm -rf vnc\")\n    run((\"mv /home/{HomeDir_Name}/VNC-5.2.3-Linux-x64 /home/{HomeDir_Name}/vnc\".format(HomeDir_Name=HomeDir_Name)))\n    sudo((\"/home/{HomeDir_Name}/vnc/vnclicense -add {VncLicense}\".format(\n        HomeDir_Name= HomeDir_Name,\n        VncLicense = VNC_LICENSE[0]\n    )))\n    # Will demand some for of interactive input...\n    run((\"mkdir -p /home/{HomeDir_Name}/.vnc/\".format(HomeDir_Name=HomeDir_Name)))\n    run((\"mkdir -p /home/{HomeDir_Name}/.vnc/config.d/\".format(HomeDir_Name=HomeDir_Name)))\n    sudo((\"/home/{HomeDir_Name}/vnc/vncpasswd /home/{HomeDir_Name}/.vnc/config.d/Xvnc\".format(HomeDir_Name=HomeDir_Name)))\n    vnc_fix_permissions()\n\n@hosts(StationA_H, StationB_H)\ndef vnc_fix_permissions():\n    sudo((\"chown {HomeDir_Name} /home/{HomeDir_Name}/.vnc -R\").format(HomeDir_Name=HomeDir_Name))\n\n@hosts(StationA_H, StationB_H)\ndef install_vnc_xstartup():\n    run((\"mkdir -p /home/{HomeDir_Name}/.vnc/\".format(HomeDir_Name=HomeDir_Name)))\n    run((\"mkdir -p /home/{HomeDir_Name}/.vnc/config.d/\".format(HomeDir_Name=HomeDir_Name)))\n    put(\n        local_path = \"scripts/vnc-xstartup\",\n        remote_path = (\"/home/{HomeDir_Name}/.vnc/xstartup\".format(HomeDir_Name=HomeDir_Name))\n        )\n    run(\"chmod ugo+x /home/{HomeDir_Name}/.vnc/xstartup\".format(HomeDir_Name=HomeDir_Name))\n    put(\n        local_path = \"scripts/xvncfontpath\",\n        remote_path = (\"/home/{HomeDir_Name}/.vnc/config.d/xvncfontpath\".format(HomeDir_Name=HomeDir_Name))\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef setup_google_chrome():\n    put(\n        local_path = \"scripts/google-chrome-stable_current_amd64.deb\",\n        remote_path = (\"/home/{HomeDir_Name}/google-chrome-stable_current_amd64.deb\".format(HomeDir_Name=HomeDir_Name)),\n        use_sudo = True\n        )\n    really_setup_google_chrome()\n\n\n@hosts(Beefy_H, StationA_H, StationB_H)\ndef ensure_local_hosts():\n    # Get the contents of /etc/hosts\n    local_file = StringIO()\n    get(\n        local_path = local_file,\n        remote_path = \"/etc/hosts\",\n        use_sudo = True \n        )\n    hosts_file = local_file.getvalue()\n    snippet =  \"\"\"# DO NOT EDIT BELOW BY HAND\n{Beefy_InternalIP} instr.httpdos.com\n192.168.112.129 ip-192-168-112-129\n192.168.112.130 ip-192-168-112-130\n192.168.112.131 ip-192-168-112-131\n# END DO NOT EDIT BELOW\"\"\".format(\n    StationA_InternalIP = StationA_InternalIP,\n    Beefy_InternalIP    = Beefy_InternalIP\n    )\n    mo = re.search(r\"# DO NOT EDIT BELOW BY HAND\\n(.*?)\\n# END DO NOT EDIT BELOW\", hosts_file, re.MULTILINE)\n    if mo:\n        part_before = hosts_file[:mo.start(0)]\n        part_after = hosts_file[mo.end(0):]\n        hosts_file = part_before + snippet + part_after\n    else:\n        hosts_file += \"\\n\" + snippet\n\n    put(\n        local_path = StringIO(hosts_file),\n        remote_path = \"/etc/hosts\",\n        use_sudo = True\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef really_setup_google_chrome():\n    sudo(\"apt-get update\")\n    sudo((\"apt-get -f install -y\".format(HomeDir_Name=HomeDir_Name)))\n    sudo(\"apt-get install -y --fix-missing xdg-utils\")\n    sudo((\"dpkg -i --force-depends /home/{HomeDir_Name}/google-chrome-stable_current_amd64.deb\".format(HomeDir_Name=HomeDir_Name)))\n    sudo((\"apt-get -f install -y\".format(HomeDir_Name=HomeDir_Name)))\n\n\n@hosts(StationA_H, StationB_H)\ndef setup_vnc_service():\n    put(\n        local_path = \"scripts/vncserv-{HomeDir_Name}.conf\".format(HomeDir_Name=HomeDir_Name),\n        remote_path = \"/etc/init/vncserv.conf\",\n        use_sudo = True\n        )\n    put(\n        local_path = \"scripts/undaemon.py\",\n        remote_path = \"/home/{HomeDir_Name}/undaemon.py\".format(HomeDir_Name=HomeDir_Name)\n        )\n    run(\"chmod ugo+x /home/{HomeDir_Name}/undaemon.py\".format(HomeDir_Name=HomeDir_Name))\n    with settings(warn_only=True):\n        sudo(\n            \"service vncserv start\"\n            )\n\n\n@hosts(StationA_H, StationB_H)\ndef  disable_lightdm():\n    contents = StringIO(\"manual\")\n    put(\n        local_path = contents, \n        remote_path = \"/etc/init/lightdm.override\",\n        use_sudo=True\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef touch_xauthority():\n    run(\"touch $HOME/.Xauthority\")\n\n\n@hosts(StationA_H, StationB_H)\ndef deploy():\n    execute(apt_stations)\n    execute(setup_dns_masq)\n    execute(setup_google_chrome)\n    execute(deploy_specific)\n    execute(touch_xauthority)\n    execute(disable_lightdm)\n    execute(StationA)\n    execute(StationB)\n    execute(Beefy)\n    execute(ca)\n    execute(ssl)\n    execute(install_vnc)\n    execute(install_vnc_xstartup)\n    execute(ensure_local_hosts)\n    execute(setup_vnc_service)\n    execute(pythonlibs)\n    execute(BeefyRehMimic)\n    execute(install_updatednsmasq_service)    \n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCopy code to StationA and StationB, and set the hostnames StationA and StationB.\n\n### Input:\n\n\n### Output:\n\"\"\"\n\nWe need two special hostnames to connect to: \n\nStationA\n\nand \n\nStationB\n\n\"\"\"\n\n\nfrom __future__ import with_statement, print_function\nfrom fabric.api import local, settings, abort, run, sudo, cd, hosts, env, execute\nfrom fabric.contrib.console import confirm\nfrom fabric.operations import put, get\nfrom fabric.contrib.project import rsync_project\n\nimport re\nimport subprocess as sp \nimport os.path \nfrom   StringIO import StringIO\n\n\ncurrent_dir = os.path.dirname(os.path.realpath(__file__))\n\n\nVNC_LICENSE = [\n    \"xxxxx-xxxxx-xxxxx-xxxxx-xxxxx\"\n]\n\n\n# TODO: Put a proper deployment mechanism here.\nenv.key_filename = '/home/alcides/.ssh/zunzun_ec2_keypair_0.pem'\n\nStationA_H = 'ubuntu@54.149.116.230'\nStationB_H = 'ubuntu@54.149.116.233'\nBeefy_H    = 'ubuntu@52.11.217.155'\n# TODO: Make the IP number below deployment-specific...\nBeefy_InternalIP = '192.168.112.131'\nStationA_InternalIP = '192.168.112.129'\nStationB_InternalIP = '192.168.112.130'\nHomeDir_Name = \"ubuntu\"\n\n\n@hosts(StationA_H)\ndef StationA():\n    \"\"\"\n    Copies code to StationA \n    \"\"\"\n    rsync_project(\n        local_dir = \"scripts/StationA\",\n        remote_dir = (\"/home/{HomeDir_Name}/\".format(HomeDir_Name=HomeDir_Name))\n        )\n    run(\"ln -sf /home/{HomeDir_Name}/StationA/onstartup.py /home/{HomeDir_Name}/onstartup.py\".format(HomeDir_Name=HomeDir_Name))\n\n\n@hosts(StationB_H)\ndef setup_dns_masq():\n    sudo(\"apt-get install -y dnsmasq\")\n    put(\n        local_path  = StringIO(\"addn-hosts=/home/{HomeDir_Name}/dnsmasq_more.conf\\n\".format(HomeDir_Name=HomeDir_Name)),\n        remote_path = \"/etc/dnsmasq.conf\",\n        use_sudo=True)\n\n\n\n@hosts(StationB_H)\ndef StationB():\n    \"\"\"\n    Copies both the chrome plugin and the DNSMasq watcher \n    \"\"\"\n    rsync_project(\n        local_dir = \"scripts/StationB\",\n        remote_dir = (\"/home/{HomeDir_Name}/\".format(HomeDir_Name=HomeDir_Name))\n        )\n    rsync_project(\n        local_dir = \"scripts/StationA/chrome_captures_hars\",\n        remote_dir = ((\"/home/{HomeDir_Name}/StationB/\".format(HomeDir_Name=HomeDir_Name)).format(HomeDir_Name=HomeDir_Name))\n        )\n    run(\"ln -sf /home/{HomeDir_Name}/StationB/onstartup.py /home/{HomeDir_Name}/onstartup.py\".format(HomeDir_Name=HomeDir_Name))\n\n\n@hosts(StationB_H)\ndef install_updatednsmasq_service():\n    with settings(warn_only=True):\n        sudo(\"service updatednsmasq stop\")\n    put(\n        local_path = \"scripts/StationB/configure_dnsmasq.py\",\n        remote_path = \"/home/{HomeDir_Name}/StationB/configure_dnsmasq.py\".format(HomeDir_Name=HomeDir_Name) ,\n        use_sudo = True\n        )\n    put(\n        local_path = StringIO(\"\"\"\ndescription \"Update dnsmasq\"\n\nstart on runlevel [2345]\nstop on runlevel [!2345]\n\numask 022\n\nconsole log\n\nenv PATH=/opt/openssl-1.0.2/bin/:/usr/bin:/usr/local/bin:/usr/sbin:/bin \nexport PATH\nenv LD_LIBRARY_PATH=/opt/openssl-1.0.2/lib\nexport LD_LIBRARY_PATH\nenv USER={HomeDir_Name}\nexport USER\n\nscript \n    exec /usr/bin/python /home/{HomeDir_Name}/StationB/configure_dnsmasq.py\nend script\n\n\"\"\".format(HomeDir_Name=HomeDir_Name)),\n        remote_path = \"/etc/init/updatednsmasq.conf\",\n        use_sudo=True )\n    sudo(\"service updatednsmasq start\")\n\n\n@hosts(Beefy_H)\ndef Beefy():\n    sudo(\"apt-get update\")\n    sudo(\"apt-get -y install libgmp-dev\")\n\n\n@hosts(Beefy_H)\ndef BeefyRehMimic():\n    with settings(warn_only=True):\n        sudo(\"service mimic stop\")\n    put(\n        local_path  = \"dist/build/reh-mimic/reh-mimic\",\n        remote_path = \"/home/{HomeDir_Name}/reh-mimic\".format(HomeDir_Name=HomeDir_Name)\n        )\n    run(\"chmod ugo+x /home/{HomeDir_Name}/reh-mimic\".format(HomeDir_Name=HomeDir_Name))\n    sudo(\"rm /home/{HomeDir_Name}/mimic -rf\".format(HomeDir_Name=HomeDir_Name) )\n    rsync_project(\n        local_dir  = \"mimic\",\n        remote_dir = \"/home/{HomeDir_Name}/\".format(HomeDir_Name=HomeDir_Name),\n        )\n    put(\n        local_path  = \"scripts/mimic.conf\",\n        remote_path = \"/etc/init/mimic.conf\",\n        use_sudo    = True\n        )\n    sudo(\"touch /root/.rnd\")\n    sudo(\"service mimic start\")\n\n\n\n@hosts(Beefy_H, StationA_H, StationB_H )\ndef configure_logging():\n    if env.host_string == StationA_H:\n        put(\n            local_path = StringIO(\"\"\"$template Logentries,\"199fb2e1-8227-4f73-9150-70a34a5d5e0c %HOSTNAME% %syslogtag%%msg%\\\\n\"\n*.* @@api.logentries.com:10000;Logentries\"\"\"),\n            remote_path = \"/etc/rsyslog.d/70-logentries.conf\",\n            use_sudo = True )\n    elif env.host_string == StationB_H:\n        put(\n            local_path = StringIO(\"\"\"$template Logentries,\"3d2fd756-407a-4764-b130-1dd6f22a1b62 %HOSTNAME% %syslogtag%%msg%\\\\n\"\n*.* @@api.logentries.com:10000;Logentries\"\"\"),\n            remote_path = \"/etc/rsyslog.d/70-logentries.conf\",\n            use_sudo = True )\n    else:\n        put(\n            local_path = StringIO(\"\"\"$template Logentries,\"7551d4e0-fa76-466f-8547-8c9a347a9363 %HOSTNAME% %syslogtag%%msg%\\\\n\"\n*.* @@api.logentries.com:10000;Logentries\"\"\"),\n            remote_path = \"/etc/rsyslog.d/70-logentries.conf\",\n            use_sudo = True )\n        \n    sudo(\"service rsyslog restart\")\n    # Check logging works...\n    sudo(\"logger -t test Hello there Logentries\")\n\n\n@hosts (StationA_H, StationB_H)\ndef deploy_specific():\n    if env.host_string == StationA_H:\n        print(\"StationA deploy\")\n        StationA()\n    elif env.host_string == StationB_H:\n        print(\"StationB deploy\")\n        StationB()\n    else: \n        print(\"Beefy station deploy\")\n        Beefy()\n\n\n@hosts(StationA_H, StationB_H)\ndef apt_stations():\n    sudo(\"apt-get update\")\n    sudo(\"apt-get install -y xutils xbase-clients xfonts-base xfonts-75dpi xfonts-100dpi\")\n    sudo(\"apt-get install -y python-pip\")\n    sudo(\"apt-get install -y xdotool\")\n    sudo(\"apt-get install -y xfwm4\") \n\n\n@hosts(StationA_H, StationB_H)\ndef pythonlibs():\n    sudo(\"pip install python-daemon>=2.0\")\n    sudo(\"pip install raven\")\n\n\n@hosts(Beefy_H, StationA_H, StationB_H)\ndef ssl():\n    \"\"\"\n    Copies Openssl and curl to the target hosts...\n    \"\"\"\n    sudo(\"mkdir -p /opt/openssl-1.0.2/\")\n    sudo((\"chown {HomeDir_Name} /opt/openssl-1.0.2/\".format(HomeDir_Name=HomeDir_Name)))\n    rsync_project(\n        local_dir = \"/opt/openssl-1.0.2\",\n        remote_dir = \"/opt/\",\n        extra_opts=\"-avz\"\n        )\n    put(\n        local_path = \"scripts/ca-certificates.crt\",\n        remote_path = \"/etc/ssl/certs/ca-certificates.crt\",\n        use_sudo = True\n        )\n\n\n@hosts(Beefy_H, StationA_H, StationB_H)\ndef ca():\n    \"\"\"\n    Copies the ca certificate to the home...\n    \"\"\"\n    put(\n        local_path = \"mimic-here/config/ca/cacert.pem\",\n        remote_path = (\"/home/{HomeDir_Name}/cacert.pem\".format(HomeDir_Name=HomeDir_Name)),\n        use_sudo = True\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef install_vnc():\n    \"\"\"\n    \n    \"\"\"\n    # run(\"curl -L -o VNC.tar.gz https://www.realvnc.com/download/binary/1720/\")\n    # run(\"tar xvf VNC-5.2.3-Linux-x64-ANY.tar.gz\")\n\n\n    put(\n        local_path = \"scripts/VNC-5.2.3-Linux-x64-ANY.tar.gz\",\n        remote_path = (\"/home/{HomeDir_Name}/VNC-5.2.3-Linux-x64-ANY.tar.gz\".format(HomeDir_Name=HomeDir_Name)),\n        use_sudo = True\n        )\n    run((\"tar -xzf /home/{HomeDir_Name}/VNC-5.2.3-Linux-x64-ANY.tar.gz\".format(HomeDir_Name=HomeDir_Name)))\n    # Get a handier name.... \n    run(\"rm -rf vnc\")\n    run((\"mv /home/{HomeDir_Name}/VNC-5.2.3-Linux-x64 /home/{HomeDir_Name}/vnc\".format(HomeDir_Name=HomeDir_Name)))\n    sudo((\"/home/{HomeDir_Name}/vnc/vnclicense -add {VncLicense}\".format(\n        HomeDir_Name= HomeDir_Name,\n        VncLicense = VNC_LICENSE[0]\n    )))\n    # Will demand some for of interactive input...\n    run((\"mkdir -p /home/{HomeDir_Name}/.vnc/\".format(HomeDir_Name=HomeDir_Name)))\n    run((\"mkdir -p /home/{HomeDir_Name}/.vnc/config.d/\".format(HomeDir_Name=HomeDir_Name)))\n    sudo((\"/home/{HomeDir_Name}/vnc/vncpasswd /home/{HomeDir_Name}/.vnc/config.d/Xvnc\".format(HomeDir_Name=HomeDir_Name)))\n    vnc_fix_permissions()\n\n@hosts(StationA_H, StationB_H)\ndef vnc_fix_permissions():\n    sudo((\"chown {HomeDir_Name} /home/{HomeDir_Name}/.vnc -R\").format(HomeDir_Name=HomeDir_Name))\n\n@hosts(StationA_H, StationB_H)\ndef install_vnc_xstartup():\n    run((\"mkdir -p /home/{HomeDir_Name}/.vnc/\".format(HomeDir_Name=HomeDir_Name)))\n    run((\"mkdir -p /home/{HomeDir_Name}/.vnc/config.d/\".format(HomeDir_Name=HomeDir_Name)))\n    put(\n        local_path = \"scripts/vnc-xstartup\",\n        remote_path = (\"/home/{HomeDir_Name}/.vnc/xstartup\".format(HomeDir_Name=HomeDir_Name))\n        )\n    run(\"chmod ugo+x /home/{HomeDir_Name}/.vnc/xstartup\".format(HomeDir_Name=HomeDir_Name))\n    put(\n        local_path = \"scripts/xvncfontpath\",\n        remote_path = (\"/home/{HomeDir_Name}/.vnc/config.d/xvncfontpath\".format(HomeDir_Name=HomeDir_Name))\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef setup_google_chrome():\n    put(\n        local_path = \"scripts/google-chrome-stable_current_amd64.deb\",\n        remote_path = (\"/home/{HomeDir_Name}/google-chrome-stable_current_amd64.deb\".format(HomeDir_Name=HomeDir_Name)),\n        use_sudo = True\n        )\n    really_setup_google_chrome()\n\n\n@hosts(Beefy_H, StationA_H, StationB_H)\ndef ensure_local_hosts():\n    # Get the contents of /etc/hosts\n    local_file = StringIO()\n    get(\n        local_path = local_file,\n        remote_path = \"/etc/hosts\",\n        use_sudo = True \n        )\n    hosts_file = local_file.getvalue()\n    snippet =  \"\"\"# DO NOT EDIT BELOW BY HAND\n{Beefy_InternalIP} instr.httpdos.com\n192.168.112.129 ip-192-168-112-129\n192.168.112.130 ip-192-168-112-130\n192.168.112.131 ip-192-168-112-131\n# END DO NOT EDIT BELOW\"\"\".format(\n    StationA_InternalIP = StationA_InternalIP,\n    Beefy_InternalIP    = Beefy_InternalIP\n    )\n    mo = re.search(r\"# DO NOT EDIT BELOW BY HAND\\n(.*?)\\n# END DO NOT EDIT BELOW\", hosts_file, re.MULTILINE)\n    if mo:\n        part_before = hosts_file[:mo.start(0)]\n        part_after = hosts_file[mo.end(0):]\n        hosts_file = part_before + snippet + part_after\n    else:\n        hosts_file += \"\\n\" + snippet\n\n    put(\n        local_path = StringIO(hosts_file),\n        remote_path = \"/etc/hosts\",\n        use_sudo = True\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef really_setup_google_chrome():\n    sudo(\"apt-get update\")\n    sudo((\"apt-get -f install -y\".format(HomeDir_Name=HomeDir_Name)))\n    sudo(\"apt-get install -y --fix-missing xdg-utils\")\n    sudo((\"dpkg -i --force-depends /home/{HomeDir_Name}/google-chrome-stable_current_amd64.deb\".format(HomeDir_Name=HomeDir_Name)))\n    sudo((\"apt-get -f install -y\".format(HomeDir_Name=HomeDir_Name)))\n\n\n@hosts(StationA_H, StationB_H)\ndef setup_vnc_service():\n    put(\n        local_path = \"scripts/vncserv-{HomeDir_Name}.conf\".format(HomeDir_Name=HomeDir_Name),\n        remote_path = \"/etc/init/vncserv.conf\",\n        use_sudo = True\n        )\n    put(\n        local_path = \"scripts/undaemon.py\",\n        remote_path = \"/home/{HomeDir_Name}/undaemon.py\".format(HomeDir_Name=HomeDir_Name)\n        )\n    run(\"chmod ugo+x /home/{HomeDir_Name}/undaemon.py\".format(HomeDir_Name=HomeDir_Name))\n    with settings(warn_only=True):\n        sudo(\n            \"service vncserv start\"\n            )\n\n\n@hosts(StationA_H, StationB_H)\ndef  disable_lightdm():\n    contents = StringIO(\"manual\")\n    put(\n        local_path = contents, \n        remote_path = \"/etc/init/lightdm.override\",\n        use_sudo=True\n        )\n\n\n@hosts(StationA_H, StationB_H)\ndef touch_xauthority():\n    run(\"touch $HOME/.Xauthority\")\n\n\n@hosts(StationA_H, StationB_H)\ndef deploy():\n    execute(apt_stations)\n    execute(setup_dns_masq)\n    execute(setup_google_chrome)\n    execute(deploy_specific)\n    execute(touch_xauthority)\n    execute(disable_lightdm)\n    execute(StationA)\n    execute(StationB)\n    execute(Beefy)\n    execute(ca)\n    execute(ssl)\n    execute(install_vnc)\n    execute(install_vnc_xstartup)\n    execute(ensure_local_hosts)\n    execute(setup_vnc_service)\n    execute(pythonlibs)\n    execute(BeefyRehMimic)\n    execute(install_updatednsmasq_service)    \n"
    },
    {
        "instruction": "Develop a natural language processing model using Python to detect customer sentiment in a customer review.",
        "input": "",
        "output": "from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\ndef train_model(X_train, y_train):\n    vectorizer = CountVectorizer()\n    vectorizer.fit(X_train)\n    X_train_vectorized = vectorizer.transform(X_train)\n    nb_model = GaussianNB()\n    nb_model.fit(X_train_vectorized.toarray(), y_train)\n    return nb_model, vectorizer\n\ndef predict(X_test, nb_model, vectorizer):\n    X_test_vectorized = vectorizer.transform(X_test)\n    predictions = nb_model.predict(X_test_vectorized.toarray())\n    return predictions",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a natural language processing model using Python to detect customer sentiment in a customer review.\n\n### Input:\n\n\n### Output:\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score, confusion_matrix\n\ndef train_model(X_train, y_train):\n    vectorizer = CountVectorizer()\n    vectorizer.fit(X_train)\n    X_train_vectorized = vectorizer.transform(X_train)\n    nb_model = GaussianNB()\n    nb_model.fit(X_train_vectorized.toarray(), y_train)\n    return nb_model, vectorizer\n\ndef predict(X_test, nb_model, vectorizer):\n    X_test_vectorized = vectorizer.transform(X_test)\n    predictions = nb_model.predict(X_test_vectorized.toarray())\n    return predictions"
    },
    {
        "instruction": "Construct a Python program to predict whether a given patient has cancer or not.",
        "input": "Features of the patient: age = 25, sex = male, BMI = 25, number of children = 0",
        "output": "import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Get the data\ndata = pd.read_csv('data.csv')\n\n# Create the features and target arrays\nX = data.drop(columns=['has_cancer'])\ny = data['has_cancer']\n\n# Split into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33)\n\n# Train the model\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(X_train, y_train)\n\n# Make predictions\nprediction = model.predict([[25, 'male', 25, 0]])\n\nif prediction[0] == 1:\n    print('The patient has cancer.')\nelse:\n    print('The patient does not have cancer.')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to predict whether a given patient has cancer or not.\n\n### Input:\nFeatures of the patient: age = 25, sex = male, BMI = 25, number of children = 0\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Get the data\ndata = pd.read_csv('data.csv')\n\n# Create the features and target arrays\nX = data.drop(columns=['has_cancer'])\ny = data['has_cancer']\n\n# Split into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33)\n\n# Train the model\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(X_train, y_train)\n\n# Make predictions\nprediction = model.predict([[25, 'male', 25, 0]])\n\nif prediction[0] == 1:\n    print('The patient has cancer.')\nelse:\n    print('The patient does not have cancer.')"
    },
    {
        "instruction": "Write a Python function to sort the given list of tuples based on their second elements.",
        "input": "",
        "output": "def sort_tuples_by_second(tuples):\n tuple_order = sorted(tuples, key=lambda x: x[1])\n return tuple_order",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to sort the given list of tuples based on their second elements.\n\n### Input:\n\n\n### Output:\ndef sort_tuples_by_second(tuples):\n tuple_order = sorted(tuples, key=lambda x: x[1])\n return tuple_order"
    },
    {
        "instruction": "Write a Python program to generate UUID",
        "input": "",
        "output": "import uuid\n\ndef generate_uuid():\n    return str(uuid.uuid4())",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate UUID\n\n### Input:\n\n\n### Output:\nimport uuid\n\ndef generate_uuid():\n    return str(uuid.uuid4())"
    },
    {
        "instruction": "Create a class to generate an invoice from a given order in Python.",
        "input": "",
        "output": "\"\"\"\nCreate a class to generate an invoice from a given order in Python. \n\"\"\"\n\nclass Invoice:\n    def __init__(self, order):\n        self.order = order\n    \n    def generate_invoice(self):\n        invoice = dict()\n        order_item_amounts = [order.price * order.quantity for order in self.order]\n        invoice['subtotal'] = sum(order_item_amounts)\n        invoice['tax_rate'] = 0.15\n        invoice['tax_amount'] = invoice['subtotal'] * invoice['tax_rate']\n        invoice['total_amount'] = invoice['subtotal'] + invoice['tax_amount']\n    \n        return invoice\n    \n    def print_invoice(self):\n        invoice = self.generate_invoice()\n        print('subtotal: {}\\ntax rate: {}\\ntax amount:{}\\ntotal amount: {}'.format(\n            invoice['subtotal'], \n            invoice['tax_rate'], \n            invoice['tax_amount'], \n            invoice['total_amount']\n            ))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class to generate an invoice from a given order in Python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a class to generate an invoice from a given order in Python. \n\"\"\"\n\nclass Invoice:\n    def __init__(self, order):\n        self.order = order\n    \n    def generate_invoice(self):\n        invoice = dict()\n        order_item_amounts = [order.price * order.quantity for order in self.order]\n        invoice['subtotal'] = sum(order_item_amounts)\n        invoice['tax_rate'] = 0.15\n        invoice['tax_amount'] = invoice['subtotal'] * invoice['tax_rate']\n        invoice['total_amount'] = invoice['subtotal'] + invoice['tax_amount']\n    \n        return invoice\n    \n    def print_invoice(self):\n        invoice = self.generate_invoice()\n        print('subtotal: {}\\ntax rate: {}\\ntax amount:{}\\ntotal amount: {}'.format(\n            invoice['subtotal'], \n            invoice['tax_rate'], \n            invoice['tax_amount'], \n            invoice['total_amount']\n            ))"
    },
    {
        "instruction": "Generate a Python script to assign grades to a set of test scores.",
        "input": "[90, 80, 75, 70, 65]",
        "output": "def assignGrades(scores):\n    grades = []\n    for score in scores:\n        if score >= 90:\n            grades.append(\"A\")\n        elif score >= 80:\n            grades.append(\"B\")\n        elif score >= 70:\n            grades.append(\"C\")\n        elif score >= 65:\n            grades.append(\"D\")\n        else:\n            grades.append(\"F\")\n            \n    return grades",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to assign grades to a set of test scores.\n\n### Input:\n[90, 80, 75, 70, 65]\n\n### Output:\ndef assignGrades(scores):\n    grades = []\n    for score in scores:\n        if score >= 90:\n            grades.append(\"A\")\n        elif score >= 80:\n            grades.append(\"B\")\n        elif score >= 70:\n            grades.append(\"C\")\n        elif score >= 65:\n            grades.append(\"D\")\n        else:\n            grades.append(\"F\")\n            \n    return grades"
    },
    {
        "instruction": "Create a Python program that will take a list of integers as input and generate an array of all triplets in that list whose sum is equal to 0",
        "input": "[-3, 4, 6, 0, -2]",
        "output": "def generateTriplets(arr):\n  result = []\n\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      for k in range(j + 1, len(arr)):\n        if (arr[i] + arr[j] + arr[k] == 0):\n          result.append([arr[i], arr[j], arr[k]])\n\n  return result\n\narr = [-3, 4, 6, 0, -2]\nprint(generateTriplets(arr))\n\n# Output: [[-3, 0, 3], [-2, 0, 2]]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that will take a list of integers as input and generate an array of all triplets in that list whose sum is equal to 0\n\n### Input:\n[-3, 4, 6, 0, -2]\n\n### Output:\ndef generateTriplets(arr):\n  result = []\n\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      for k in range(j + 1, len(arr)):\n        if (arr[i] + arr[j] + arr[k] == 0):\n          result.append([arr[i], arr[j], arr[k]])\n\n  return result\n\narr = [-3, 4, 6, 0, -2]\nprint(generateTriplets(arr))\n\n# Output: [[-3, 0, 3], [-2, 0, 2]]"
    },
    {
        "instruction": "Write an algorithm in Python to detect the monotonic increasing pattern in a given array.",
        "input": "[2, 3, 4, 5, 6, 7, 8, 1]",
        "output": "def increasingPattern(arr):\n\tstatus = False\n\tcheck = arr[0]\n\tfor i in range(1,len(arr)): \n\t\tif check < arr[i]:\n\t\t\tcheck = arr[i]\n\t\t\tstatus = True\n\t\telse:\n\t\t\tstatus = False\n\t\t\tbreak\n\treturn status\n\n\n# Test case\narr = [2, 3, 4, 5, 6, 7, 8, 1]\nprint(increasingPattern(arr))  # Output: False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to detect the monotonic increasing pattern in a given array.\n\n### Input:\n[2, 3, 4, 5, 6, 7, 8, 1]\n\n### Output:\ndef increasingPattern(arr):\n\tstatus = False\n\tcheck = arr[0]\n\tfor i in range(1,len(arr)): \n\t\tif check < arr[i]:\n\t\t\tcheck = arr[i]\n\t\t\tstatus = True\n\t\telse:\n\t\t\tstatus = False\n\t\t\tbreak\n\treturn status\n\n\n# Test case\narr = [2, 3, 4, 5, 6, 7, 8, 1]\nprint(increasingPattern(arr))  # Output: False"
    },
    {
        "instruction": "Create a Python script that takes two inputs from the user: a list of numbers and an integer. The script should loop over the input list and check if any two numbers in the list add up to the input integer.",
        "input": "list = [3, 5, 10, 15]\ninteger = 17",
        "output": "list = [3, 5, 10, 15]\ninteger = 17\n\ntotal = 0\n\nfor i in list:\n for j in list:\n total = i + j\n if total == integer:\n print(\"Two numbers that add up to\", integer, \"are\", i, \"and\", j)\n break",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that takes two inputs from the user: a list of numbers and an integer. The script should loop over the input list and check if any two numbers in the list add up to the input integer.\n\n### Input:\nlist = [3, 5, 10, 15]\ninteger = 17\n\n### Output:\nlist = [3, 5, 10, 15]\ninteger = 17\n\ntotal = 0\n\nfor i in list:\n for j in list:\n total = i + j\n if total == integer:\n print(\"Two numbers that add up to\", integer, \"are\", i, \"and\", j)\n break"
    },
    {
        "instruction": "Write a Python program to perform linear regression on a given dataset.",
        "input": "",
        "output": "import numpy as np\n\n# Define the data\nx_vals = np.array([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\ny_vals = np.array([1.0, 2.9, 3.2, 4.2, 5.3, 6.3])\n\n# Estimate the linear regression weights\nA = np.array([x_vals, np.ones(len(x_vals))])\nweights = np.linalg.lstsq(A.T, y_vals)[0] # obtaining the weights\n\n# Calculate the best fit line\nbest_fit_line = np.dot(x_vals, weights[0]) + weights[1]\n\n# Calculate the squared error\nsquared_error = np.sum((y_vals - best_fit_line)**2)\nprint(squared_error)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to perform linear regression on a given dataset.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\n# Define the data\nx_vals = np.array([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\ny_vals = np.array([1.0, 2.9, 3.2, 4.2, 5.3, 6.3])\n\n# Estimate the linear regression weights\nA = np.array([x_vals, np.ones(len(x_vals))])\nweights = np.linalg.lstsq(A.T, y_vals)[0] # obtaining the weights\n\n# Calculate the best fit line\nbest_fit_line = np.dot(x_vals, weights[0]) + weights[1]\n\n# Calculate the squared error\nsquared_error = np.sum((y_vals - best_fit_line)**2)\nprint(squared_error)"
    },
    {
        "instruction": "Create a spell checker in Python for the given text.",
        "input": "Text: Ths is a languige exersice",
        "output": "\"\"\"\nCreate a Spell Checker\n\"\"\"\n\nimport enchant\n\ndef check_spelling(text):\n    # Create a spell checker\n    spell_checker = enchant.Dict(\"en_US\")\n\n    # Split the text into words\n    words = text.split()\n\n    # Check the spelling of each word\n    for i, word in enumerate(words):\n        if not spell_checker.check(word):\n            # Word is misspelled, suggest a correction\n            words[i] = spell_checker.suggest(word)[0]\n    \n    # Join the words back together\n    corrected_text = ' '.join(words)\n\n    return corrected_text\n\nif __name__ == '__main__':\n    text = 'Ths is a languige exersice'\n    corrected_text = check_spelling(text)\n    print(corrected_text)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a spell checker in Python for the given text.\n\n### Input:\nText: Ths is a languige exersice\n\n### Output:\n\"\"\"\nCreate a Spell Checker\n\"\"\"\n\nimport enchant\n\ndef check_spelling(text):\n    # Create a spell checker\n    spell_checker = enchant.Dict(\"en_US\")\n\n    # Split the text into words\n    words = text.split()\n\n    # Check the spelling of each word\n    for i, word in enumerate(words):\n        if not spell_checker.check(word):\n            # Word is misspelled, suggest a correction\n            words[i] = spell_checker.suggest(word)[0]\n    \n    # Join the words back together\n    corrected_text = ' '.join(words)\n\n    return corrected_text\n\nif __name__ == '__main__':\n    text = 'Ths is a languige exersice'\n    corrected_text = check_spelling(text)\n    print(corrected_text)"
    },
    {
        "instruction": "Design a Python class with methods to compute the square and cube of a given number.",
        "input": "",
        "output": "\"\"\"\nDesign a Python class with methods to compute the square and cube of a \ngiven number.\n\"\"\"\n\nclass MathOperations:\n\n    # constructor\n    def __init__(self, number):\n        self.number = number\n\n    # method to compute the square\n    def square(self):\n        return self.number * self.number\n\n    # method to compute the cube\n    def cube(self):\n        return self.number * self.number * self.number\n\n# create an object of the MathOperations class\nobj = MathOperations(2)\n\n# calling methods\nprint(\"Square of 2 is:\", obj.square())\nprint(\"Cube of 2 is:\", obj.cube())",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class with methods to compute the square and cube of a given number.\n\n### Input:\n\n\n### Output:\n\"\"\"\nDesign a Python class with methods to compute the square and cube of a \ngiven number.\n\"\"\"\n\nclass MathOperations:\n\n    # constructor\n    def __init__(self, number):\n        self.number = number\n\n    # method to compute the square\n    def square(self):\n        return self.number * self.number\n\n    # method to compute the cube\n    def cube(self):\n        return self.number * self.number * self.number\n\n# create an object of the MathOperations class\nobj = MathOperations(2)\n\n# calling methods\nprint(\"Square of 2 is:\", obj.square())\nprint(\"Cube of 2 is:\", obj.cube())"
    },
    {
        "instruction": "Generate a vectorized implementation of the following sorting algorithm in python.",
        "input": "The following algorithm determines if X is a permutation of Y:\n1. Count the number of elements in each of X and Y\n2. Compare the elements\n3. Sort X in ascending order",
        "output": "def isPermutation(x, y): \n    # Count the number of elements in each of X and Y\n    x_len = len(x)\n    y_len = len(y)\n\n    # Compare the lengths\n    if x_len != y_len:\n        return False\n    \n    # Vectorize the comparison\n    comparison = (x == y)\n    if not comparison.all():\n        return False\n\n    # Vectorize the sorting\n    x.sort()\n    return True",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a vectorized implementation of the following sorting algorithm in python.\n\n### Input:\nThe following algorithm determines if X is a permutation of Y:\n1. Count the number of elements in each of X and Y\n2. Compare the elements\n3. Sort X in ascending order\n\n### Output:\ndef isPermutation(x, y): \n    # Count the number of elements in each of X and Y\n    x_len = len(x)\n    y_len = len(y)\n\n    # Compare the lengths\n    if x_len != y_len:\n        return False\n    \n    # Vectorize the comparison\n    comparison = (x == y)\n    if not comparison.all():\n        return False\n\n    # Vectorize the sorting\n    x.sort()\n    return True"
    },
    {
        "instruction": "Create a visualisation for the following dataset in Python using Matplotlib.",
        "input": "movie_name,distance\nJareth and Sarah, 77.4\nGarreth and Martha, 4.3\nPam and Joe, 22.6",
        "output": "import matplotlib.pyplot as plt\n\nmovie_name = ['Jareth and Sarah', 'Garreth and Martha', 'Pam and Joe']\ndistance = [77.4, 4.3, 22.6]\n\nplt.bar(movie_name, distance)\nplt.xlabel('Movie Name')\nplt.ylabel('Distance (miles)')\nplt.title('Movie Name vs Distance')\nplt.show()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a visualisation for the following dataset in Python using Matplotlib.\n\n### Input:\nmovie_name,distance\nJareth and Sarah, 77.4\nGarreth and Martha, 4.3\nPam and Joe, 22.6\n\n### Output:\nimport matplotlib.pyplot as plt\n\nmovie_name = ['Jareth and Sarah', 'Garreth and Martha', 'Pam and Joe']\ndistance = [77.4, 4.3, 22.6]\n\nplt.bar(movie_name, distance)\nplt.xlabel('Movie Name')\nplt.ylabel('Distance (miles)')\nplt.title('Movie Name vs Distance')\nplt.show()"
    },
    {
        "instruction": "Write a Python program to create a random string of length 8 consisting of alphabets and numbers.",
        "input": "",
        "output": "\"\"\"\nCreate a random string of length 8 consisting of alphabets and numbers\n\"\"\"\n\nimport random\nimport string\n\ndef random_string_generator():\n    \"\"\"\n    This function generates a random string of length 8 consisting\n    of alphabets and numbers\n    \"\"\"\n    list_of_characters = string.ascii_letters + string.digits\n    rnd_string = ''.join(random.choice(list_of_characters) for _ in range(8))\n    return rnd_string\n\nif __name__ == '__main__':\n    print(random_string_generator())",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a random string of length 8 consisting of alphabets and numbers.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a random string of length 8 consisting of alphabets and numbers\n\"\"\"\n\nimport random\nimport string\n\ndef random_string_generator():\n    \"\"\"\n    This function generates a random string of length 8 consisting\n    of alphabets and numbers\n    \"\"\"\n    list_of_characters = string.ascii_letters + string.digits\n    rnd_string = ''.join(random.choice(list_of_characters) for _ in range(8))\n    return rnd_string\n\nif __name__ == '__main__':\n    print(random_string_generator())"
    },
    {
        "instruction": "Generate a Python program to render a Mandelbrot set.",
        "input": "",
        "output": "import numpy as np\nimport matplotlib.pyplot as plt \n\ndef mandelbrot(width, height):\n    # Super sample size (larger number of iterations for high-quality image)\n    ssample = 4\n    # Width and height of the image\n    width *= ssample\n    height *= ssample\n    # Maximum iterations for each point on the complex plane.\n    max_iteration = 100\n\n    # Initialize an empty array for storing the iteration count.\n    cmap = np.zeros([height, width])\n    x0, x1 = -2., 1.\n    y0, y1 = -1.5, 1.5\n\n    # Loop over a grid of points on the complex plane.\n    for y in range(height):\n        zy = y * (y1 - y0) / (height - 1) + y0\n        for x in range(width):\n            zx = x * (x1 - x0) / (width - 1) + x0\n            z = zx + zy * 1j\n            c = z\n\n            # Iterate until the iteration count exceeds the maximum.\n            for n in range(max_iteration):\n            \t# Calculate the next value in the sequence\n                z = z * z + c\n                # Check if the absolute value of 'z' has exceeded 2\n                if abs(z) > 4:\n                    break\n            # Set the iteration count (cmap) for the current point.\n            cmap[y, x] = n\n\n    cmap = cmap / (np.max(cmap) / 255.) # Rescale for better visibility\n    cmap = cmap[::ssample, ::ssample] # Resize\n    plt.imsave('mandelbrot.png', cmap, cmap='nipy_spectral')\n\nmandelbrot(800, 600)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to render a Mandelbrot set.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport matplotlib.pyplot as plt \n\ndef mandelbrot(width, height):\n    # Super sample size (larger number of iterations for high-quality image)\n    ssample = 4\n    # Width and height of the image\n    width *= ssample\n    height *= ssample\n    # Maximum iterations for each point on the complex plane.\n    max_iteration = 100\n\n    # Initialize an empty array for storing the iteration count.\n    cmap = np.zeros([height, width])\n    x0, x1 = -2., 1.\n    y0, y1 = -1.5, 1.5\n\n    # Loop over a grid of points on the complex plane.\n    for y in range(height):\n        zy = y * (y1 - y0) / (height - 1) + y0\n        for x in range(width):\n            zx = x * (x1 - x0) / (width - 1) + x0\n            z = zx + zy * 1j\n            c = z\n\n            # Iterate until the iteration count exceeds the maximum.\n            for n in range(max_iteration):\n            \t# Calculate the next value in the sequence\n                z = z * z + c\n                # Check if the absolute value of 'z' has exceeded 2\n                if abs(z) > 4:\n                    break\n            # Set the iteration count (cmap) for the current point.\n            cmap[y, x] = n\n\n    cmap = cmap / (np.max(cmap) / 255.) # Rescale for better visibility\n    cmap = cmap[::ssample, ::ssample] # Resize\n    plt.imsave('mandelbrot.png', cmap, cmap='nipy_spectral')\n\nmandelbrot(800, 600)"
    },
    {
        "instruction": "Write a Python code that replaces every occurrence of an alphabet in a sentence with the next alphabet in the alphabetical order.",
        "input": "\"Hello, World!\"",
        "output": "def alphabet_order(sentence):\n    output = \"\"\n    for character in sentence:\n        if character.isalpha():\n            ascii_value = ord(character)\n            ascii_value += 1\n            output += chr(ascii_value)\n        else:\n            output += character\n    return output\n\n#Main\nprint(alphabet_order(\"Hello, World!\"))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code that replaces every occurrence of an alphabet in a sentence with the next alphabet in the alphabetical order.\n\n### Input:\n\"Hello, World!\"\n\n### Output:\ndef alphabet_order(sentence):\n    output = \"\"\n    for character in sentence:\n        if character.isalpha():\n            ascii_value = ord(character)\n            ascii_value += 1\n            output += chr(ascii_value)\n        else:\n            output += character\n    return output\n\n#Main\nprint(alphabet_order(\"Hello, World!\"))"
    },
    {
        "instruction": "Create a Python program that calculates the average of 3 grades and returns a grade level using the following scale:\n\n90-100: A\n80-89: B\n70-79: C\n60-69: D\nBelow 60: F",
        "input": "87, 61, 95",
        "output": "def get_grade_level(grades):\n  average = sum(grades) / len(grades)\n  if average >= 90:\n    grade_level = 'A'\n  elif average >= 80:\n    grade_level = 'B'\n  elif average >= 70:\n    grade_level = 'C'\n  elif average >= 60:\n    grade_level = 'D'\n  else:\n    grade_level = 'F'\n\n  return grade_level",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that calculates the average of 3 grades and returns a grade level using the following scale:\n\n90-100: A\n80-89: B\n70-79: C\n60-69: D\nBelow 60: F\n\n### Input:\n87, 61, 95\n\n### Output:\ndef get_grade_level(grades):\n  average = sum(grades) / len(grades)\n  if average >= 90:\n    grade_level = 'A'\n  elif average >= 80:\n    grade_level = 'B'\n  elif average >= 70:\n    grade_level = 'C'\n  elif average >= 60:\n    grade_level = 'D'\n  else:\n    grade_level = 'F'\n\n  return grade_level"
    },
    {
        "instruction": "Write a Python program to decode the given encoded text using ROT-13 algorithm.",
        "input": "Gur pynff vf snpgbevnag",
        "output": "The code is obfuscated",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to decode the given encoded text using ROT-13 algorithm.\n\n### Input:\nGur pynff vf snpgbevnag\n\n### Output:\nThe code is obfuscated"
    },
    {
        "instruction": "Create a Python Code Snippet to retrieve the last two elements from a list.",
        "input": "[1, 2, 3, 4, 5]",
        "output": "lastTwoElements = [1, 2, 3, 4, 5][-2:]\n\nprint(lastTwoElements)\n#Output: [4, 5]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python Code Snippet to retrieve the last two elements from a list.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\nlastTwoElements = [1, 2, 3, 4, 5][-2:]\n\nprint(lastTwoElements)\n#Output: [4, 5]"
    },
    {
        "instruction": "Write a Python program to create a contact list application. The program should contain functions for creating a new contact, updating existing contacts, deleting contacts, and searching for contacts.",
        "input": "Not applicable",
        "output": "class ContactList:\n def __init__(self):\n self.contacts = []\n \n def add_contact(self, contact):\n self.contacts.append(contact)\n \n def update_contact(self, contact_id, contact):\n for i, c in enumerate(self.contacts):\n if c.id == contact_id:\n self.contacts[i] = contact\n \n def delete_contact(self, contact_id):\n for i, c in enumerate(self.contacts):\n if c.id == contact_id:\n del self.contacts[i]\n break\n \n def search_contact(self, name):\n result = []\n for c in self.contacts:\n if c.name == name:\n result.append(c)\n return result\n\nclass Contact:\n def __init__(self, id, name, phone_number):\n self.id = id\n self.name = name\n self.phone_number = phone_number\n \n contact_list = ContactList()\n \n #add contact\n contact_list.add_contact(Contact(1, \"John Smith\", \"+1-202-555-0175\"))\n \n #update contact\n contact_list.update_contact(1, Contact(1, \"John Doe\", \"+1-202-555-0175\"))\n \n #delete contact\n contact_list.delete_contact(1)\n \n #search contact\n result = contact_list.search_contact(\"John Doe\")\n if result:\n print(result[0].phone_number)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a contact list application. The program should contain functions for creating a new contact, updating existing contacts, deleting contacts, and searching for contacts.\n\n### Input:\nNot applicable\n\n### Output:\nclass ContactList:\n def __init__(self):\n self.contacts = []\n \n def add_contact(self, contact):\n self.contacts.append(contact)\n \n def update_contact(self, contact_id, contact):\n for i, c in enumerate(self.contacts):\n if c.id == contact_id:\n self.contacts[i] = contact\n \n def delete_contact(self, contact_id):\n for i, c in enumerate(self.contacts):\n if c.id == contact_id:\n del self.contacts[i]\n break\n \n def search_contact(self, name):\n result = []\n for c in self.contacts:\n if c.name == name:\n result.append(c)\n return result\n\nclass Contact:\n def __init__(self, id, name, phone_number):\n self.id = id\n self.name = name\n self.phone_number = phone_number\n \n contact_list = ContactList()\n \n #add contact\n contact_list.add_contact(Contact(1, \"John Smith\", \"+1-202-555-0175\"))\n \n #update contact\n contact_list.update_contact(1, Contact(1, \"John Doe\", \"+1-202-555-0175\"))\n \n #delete contact\n contact_list.delete_contact(1)\n \n #search contact\n result = contact_list.search_contact(\"John Doe\")\n if result:\n print(result[0].phone_number)"
    },
    {
        "instruction": "Generate a Python program that sorts a given array using the bubble sort algorithm.",
        "input": "Array to be sorted: [5, 7, 1, 9, 3]",
        "output": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        swapped = False\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                swapped = True\n        if swapped == False:\n            break\n    return arr\n\narr = [5, 7, 1, 9, 3]\narr = bubble_sort(arr)\nprint (\"Sorted array :\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that sorts a given array using the bubble sort algorithm.\n\n### Input:\nArray to be sorted: [5, 7, 1, 9, 3]\n\n### Output:\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        swapped = False\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                swapped = True\n        if swapped == False:\n            break\n    return arr\n\narr = [5, 7, 1, 9, 3]\narr = bubble_sort(arr)\nprint (\"Sorted array :\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),"
    },
    {
        "instruction": "You are given the following string. Write a Python program to print how many times each word appears in the string.",
        "input": "input_string = \"This is an exmaple of a string.\"",
        "output": "def count_words(input_string):\n  words_count = {}\n  words = input_string.split()\n  for word in words:\n    if word in words_count:\n      words_count[word] += 1\n    else:\n      words_count[word] = 1\n  return words_count\n\nwords_count = count_words(input_string)\nprint(words_count)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are given the following string. Write a Python program to print how many times each word appears in the string.\n\n### Input:\ninput_string = \"This is an exmaple of a string.\"\n\n### Output:\ndef count_words(input_string):\n  words_count = {}\n  words = input_string.split()\n  for word in words:\n    if word in words_count:\n      words_count[word] += 1\n    else:\n      words_count[word] = 1\n  return words_count\n\nwords_count = count_words(input_string)\nprint(words_count)"
    },
    {
        "instruction": "Create a k-nearest-neighbour algorithm in Python to classify data points in two classes.",
        "input": "",
        "output": "import numpy as np\nimport pandas as pd\n\ndef knn(features, target, neighbors):\n    target = np.array(target)\n    num_samples = target.shape[0]\n\n    # Calculate Euclidean distances from each sample point\n    distances = np.sqrt(((features - features[:,np.newaxis])**2).sum(axis=2))\n\n    # Get indices of the k nearest neighbors\n    indices = np.argsort(distances, axis=1)[:, :neighbors]\n\n    # Count frequencies of each class among k nearest neighbors\n    nbors_classes = target[indices]\n    nbors_freq = np.apply_along_axis(lambda x: np.bincount(x, minlength=2), 1, nbors_classes)\n\n    # Make predictions\n    pred = np.argmax(nbors_freq, axis=1)\n    return pred",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a k-nearest-neighbour algorithm in Python to classify data points in two classes.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport pandas as pd\n\ndef knn(features, target, neighbors):\n    target = np.array(target)\n    num_samples = target.shape[0]\n\n    # Calculate Euclidean distances from each sample point\n    distances = np.sqrt(((features - features[:,np.newaxis])**2).sum(axis=2))\n\n    # Get indices of the k nearest neighbors\n    indices = np.argsort(distances, axis=1)[:, :neighbors]\n\n    # Count frequencies of each class among k nearest neighbors\n    nbors_classes = target[indices]\n    nbors_freq = np.apply_along_axis(lambda x: np.bincount(x, minlength=2), 1, nbors_classes)\n\n    # Make predictions\n    pred = np.argmax(nbors_freq, axis=1)\n    return pred"
    },
    {
        "instruction": "Develop a Python script to convert a list of words into a dictionary with its frequency count as the key and the words as the value.",
        "input": "List of words: hello, world, hello, python, hello",
        "output": "words = [\"hello\",\"world\",\"hello\",\"python\",\"hello\"] \n\n# counting frequency of each word in a list \nwordFrequencyDict = {}\nfor word in words: \n    if (word in wordFrequencyDict): \n        wordFrequencyDict[word] += 1\n    else: \n        wordFrequencyDict[word] = 1\n\nprint(wordFrequencyDict)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to convert a list of words into a dictionary with its frequency count as the key and the words as the value.\n\n### Input:\nList of words: hello, world, hello, python, hello\n\n### Output:\nwords = [\"hello\",\"world\",\"hello\",\"python\",\"hello\"] \n\n# counting frequency of each word in a list \nwordFrequencyDict = {}\nfor word in words: \n    if (word in wordFrequencyDict): \n        wordFrequencyDict[word] += 1\n    else: \n        wordFrequencyDict[word] = 1\n\nprint(wordFrequencyDict)"
    },
    {
        "instruction": "Write a function to calculate the median value of given list of numbers in Python.",
        "input": "Random Integer List : [3, 5, 2, 8, 6, 5]",
        "output": "def calculate_median(input_list): \n   \n    # Sort the list\n    sorted_list = sorted(input_list)\n    length = len(sorted_list)\n  \n    # Check if number of elements are even \n    if (length % 2 == 0) :  \n        # If true, get the 2 middle elements \n        first = length//2 -1\n        second = length//2\n  \n        # Get the median value\n        median = (sorted_list[first] + sorted_list[second]) / 2\n    else : \n        # If odd, get the middle element \n        median = sorted_list[length//2]\n\n    return median\n\n# Call the function\ninput_list = [3, 5, 2, 8, 6, 5]\nprint(calculate_median(input_list))\n\n# Output: 5",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to calculate the median value of given list of numbers in Python.\n\n### Input:\nRandom Integer List : [3, 5, 2, 8, 6, 5]\n\n### Output:\ndef calculate_median(input_list): \n   \n    # Sort the list\n    sorted_list = sorted(input_list)\n    length = len(sorted_list)\n  \n    # Check if number of elements are even \n    if (length % 2 == 0) :  \n        # If true, get the 2 middle elements \n        first = length//2 -1\n        second = length//2\n  \n        # Get the median value\n        median = (sorted_list[first] + sorted_list[second]) / 2\n    else : \n        # If odd, get the middle element \n        median = sorted_list[length//2]\n\n    return median\n\n# Call the function\ninput_list = [3, 5, 2, 8, 6, 5]\nprint(calculate_median(input_list))\n\n# Output: 5"
    },
    {
        "instruction": "Create a Python program that will generate a random password of length 10 that will contain at least one lowercase letter, one uppercase letter, one digit, one special character (e.g. @, #, &, etc.).",
        "input": "Not applicable",
        "output": "import random\nimport string\n\ndef generate_password():\n    password = ''\n    characters = string.ascii_letters + string.digits + string.punctuation\n    for i in range(10):\n        password += random.choice(characters)\n    if not any(c.islower() for c in password):\n        password = generate_password()\n    if not any(c.isupper() for c in password):\n        password = generate_password()\n    if not any(c.isdigit() for c in password):\n        password = generate_password()\n    return password\n\nprint(generate_password())",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that will generate a random password of length 10 that will contain at least one lowercase letter, one uppercase letter, one digit, one special character (e.g. @, #, &, etc.).\n\n### Input:\nNot applicable\n\n### Output:\nimport random\nimport string\n\ndef generate_password():\n    password = ''\n    characters = string.ascii_letters + string.digits + string.punctuation\n    for i in range(10):\n        password += random.choice(characters)\n    if not any(c.islower() for c in password):\n        password = generate_password()\n    if not any(c.isupper() for c in password):\n        password = generate_password()\n    if not any(c.isdigit() for c in password):\n        password = generate_password()\n    return password\n\nprint(generate_password())"
    },
    {
        "instruction": "Write a web scraper in Python that looks for comments on a given website and stores them in a database.",
        "input": "website: www.example.com",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\n# set the target URL\nurl = \"https://www.example.com\"\n\n# get the HTML from the page\npage = requests.get(url).text\n\n# parse the html\nsoup = BeautifulSoup(page, \"html.parser\")\n\n# find the comment elements\ncomments = soup.find_all(\"div\", {\"class\": \"comment\"})\n\n# loop the comments\nfor comment in comments:\n  text = comment.find(\"p\").text\n  user = comment.find(\"span\", {\"class\": \"name\"}).text\n  print(user + \": \" + text)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a web scraper in Python that looks for comments on a given website and stores them in a database.\n\n### Input:\nwebsite: www.example.com\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# set the target URL\nurl = \"https://www.example.com\"\n\n# get the HTML from the page\npage = requests.get(url).text\n\n# parse the html\nsoup = BeautifulSoup(page, \"html.parser\")\n\n# find the comment elements\ncomments = soup.find_all(\"div\", {\"class\": \"comment\"})\n\n# loop the comments\nfor comment in comments:\n  text = comment.find(\"p\").text\n  user = comment.find(\"span\", {\"class\": \"name\"}).text\n  print(user + \": \" + text)"
    },
    {
        "instruction": "Create a basic calculator program in Python which takes two numbers from the user and the mathematical operator and outputs the result of the calculation.",
        "input": "45 + 13",
        "output": "num1 = float(input(\"Enter your first number: \"))\nnum2 = float(input(\"Enter your second number: \"))\nop = input(\"Enter the operator : \")\n\nif op == \"+\":\n  result = num1 + num2\nelif op == \"-\":\n  result = num1 - num2\nelif op == \"*\":\n  result = num1 * num2\nelif op == \"/\":\n  result = num1 / num2\n\nprint(\"The result is : \", result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic calculator program in Python which takes two numbers from the user and the mathematical operator and outputs the result of the calculation.\n\n### Input:\n45 + 13\n\n### Output:\nnum1 = float(input(\"Enter your first number: \"))\nnum2 = float(input(\"Enter your second number: \"))\nop = input(\"Enter the operator : \")\n\nif op == \"+\":\n  result = num1 + num2\nelif op == \"-\":\n  result = num1 - num2\nelif op == \"*\":\n  result = num1 * num2\nelif op == \"/\":\n  result = num1 / num2\n\nprint(\"The result is : \", result)"
    },
    {
        "instruction": "Create a python program to convert temperatures from Farenheit to Celsius.",
        "input": "94 F",
        "output": "def Farenheit_to_Celsius(temperature):\n  celsius = (temperature - 32) * 5/9\n  return celsius\n\ntemp_F = 94\ntemp_C = Farenheit_to_Celsius(temp_F)\n\nprint('{}\u00b0F is equal to {}\u00b0C'.format(temp_F, temp_C))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to convert temperatures from Farenheit to Celsius.\n\n### Input:\n94 F\n\n### Output:\ndef Farenheit_to_Celsius(temperature):\n  celsius = (temperature - 32) * 5/9\n  return celsius\n\ntemp_F = 94\ntemp_C = Farenheit_to_Celsius(temp_F)\n\nprint('{}\u00b0F is equal to {}\u00b0C'.format(temp_F, temp_C))"
    },
    {
        "instruction": "Construct a Python class for calculating the area and perimeter of a square.",
        "input": "",
        "output": "class Square:\n def __init__(self, side):\n self.side = side\n\n def calculate_area(self):\n return self.side * self.side\n\n def calculate_perimeter(self):\n return self.side * 4",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python class for calculating the area and perimeter of a square.\n\n### Input:\n\n\n### Output:\nclass Square:\n def __init__(self, side):\n self.side = side\n\n def calculate_area(self):\n return self.side * self.side\n\n def calculate_perimeter(self):\n return self.side * 4"
    },
    {
        "instruction": "Design a Python program that counts the number of words in a sentence.",
        "input": "This is a sentence with seven words.",
        "output": "def countWords(sentence): \n \n    # split the sentence into words \n    words = sentence.split() \n    wordCount = len(words) \n   \n    return wordCount \n  \n# Driver code \nsentence = \"This is a sentence with seven words.\"\nwordCount = countWords(sentence) \nprint(\"Number of words in the sentence =\", wordCount)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program that counts the number of words in a sentence.\n\n### Input:\nThis is a sentence with seven words.\n\n### Output:\ndef countWords(sentence): \n \n    # split the sentence into words \n    words = sentence.split() \n    wordCount = len(words) \n   \n    return wordCount \n  \n# Driver code \nsentence = \"This is a sentence with seven words.\"\nwordCount = countWords(sentence) \nprint(\"Number of words in the sentence =\", wordCount)"
    },
    {
        "instruction": "Construct a python program for linear search for a given element in an array.",
        "input": "Array: [1, 2, 3, 4, 5] \nElement: 4",
        "output": "def linearSearch(array, element): \n    for i in range(len(array)): \n        if array[i]==element: \n            return i\n    return -1\n\nlinearSearch([1, 2, 3, 4, 5], 4) # returns 3",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a python program for linear search for a given element in an array.\n\n### Input:\nArray: [1, 2, 3, 4, 5] \nElement: 4\n\n### Output:\ndef linearSearch(array, element): \n    for i in range(len(array)): \n        if array[i]==element: \n            return i\n    return -1\n\nlinearSearch([1, 2, 3, 4, 5], 4) # returns 3"
    },
    {
        "instruction": "Implement a function in Python to find the maximum subarray of a given array of integers. The maximum subarray is the contiguous subarray whose sum of elements is greatest.",
        "input": "array = [-2, -3, 4, -1, -2, 1, 5, -3]",
        "output": "def maximum_subarray(arr): \n max_so_far = 0\n max_ending_here = 0\n\n for i in arr: \n max_ending_here = max_ending_here + i \n if max_ending_here % 0: \n max_ending_here = 0\n elif max_so_far < max_ending_here: \n max_so_far = max_ending_here \n return max_so_far\n\nmaximum_subarray(array)  # Returns 7",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python to find the maximum subarray of a given array of integers. The maximum subarray is the contiguous subarray whose sum of elements is greatest.\n\n### Input:\narray = [-2, -3, 4, -1, -2, 1, 5, -3]\n\n### Output:\ndef maximum_subarray(arr): \n max_so_far = 0\n max_ending_here = 0\n\n for i in arr: \n max_ending_here = max_ending_here + i \n if max_ending_here % 0: \n max_ending_here = 0\n elif max_so_far < max_ending_here: \n max_so_far = max_ending_here \n return max_so_far\n\nmaximum_subarray(array)  # Returns 7"
    },
    {
        "instruction": "Come up with a Python program to merge two sorted lists.",
        "input": "",
        "output": "def merge(list1, list2): \n    merged_list = [] \n    i = 0\n    j = 0\n  \n    while i < len(list1) and j < len(list2): \n        if list1[i] < list2[j]: \n            merged_list.append(list1[i]) \n            i+= 1\n        else: \n            merged_list.append(list2[j]) \n            j+= 1\n   \n    merged_list += list1[i:]\n    merged_list += list2[j:]\n  \n    return merged_list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a Python program to merge two sorted lists.\n\n### Input:\n\n\n### Output:\ndef merge(list1, list2): \n    merged_list = [] \n    i = 0\n    j = 0\n  \n    while i < len(list1) and j < len(list2): \n        if list1[i] < list2[j]: \n            merged_list.append(list1[i]) \n            i+= 1\n        else: \n            merged_list.append(list2[j]) \n            j+= 1\n   \n    merged_list += list1[i:]\n    merged_list += list2[j:]\n  \n    return merged_list"
    },
    {
        "instruction": "Using the input provided, add a try/except block to the given Python code.",
        "input": "for n in file_name[:20]:\n    print(n)",
        "output": "try:\n    for n in file_name[:20]:\n        print(n)\nexcept Exception as e:\n    print(e)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the input provided, add a try/except block to the given Python code.\n\n### Input:\nfor n in file_name[:20]:\n    print(n)\n\n### Output:\ntry:\n    for n in file_name[:20]:\n        print(n)\nexcept Exception as e:\n    print(e)"
    },
    {
        "instruction": "Develop a Python Program to sort an array without using any built-in functions.",
        "input": "",
        "output": "def sort_array(array): \n    for i in range(len(array)): \n        for j in range(i+1, len(array)): \n            if array[j] < array[i]: \n                array[j], array[i] = array[i], array[j] \n  \n    return array",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python Program to sort an array without using any built-in functions.\n\n### Input:\n\n\n### Output:\ndef sort_array(array): \n    for i in range(len(array)): \n        for j in range(i+1, len(array)): \n            if array[j] < array[i]: \n                array[j], array[i] = array[i], array[j] \n  \n    return array"
    },
    {
        "instruction": "In Python, create a class to define a circle object.",
        "input": "",
        "output": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius \n \n    def area(self):\n        return 3.14 * self.radius * self.radius\n \n    def circumference(self):\n        return 2 * 3.14 * self.radius\n \n# Driver code \nc = Circle(2)\nprint('Area = ', c.area())\nprint('Circumference = ', c.circumference())",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, create a class to define a circle object.\n\n### Input:\n\n\n### Output:\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius \n \n    def area(self):\n        return 3.14 * self.radius * self.radius\n \n    def circumference(self):\n        return 2 * 3.14 * self.radius\n \n# Driver code \nc = Circle(2)\nprint('Area = ', c.area())\nprint('Circumference = ', c.circumference())"
    },
    {
        "instruction": "Rewrite the following python code using a lambda expression",
        "input": "def function_name(x): \n    return x * 2",
        "output": "function_name = lambda x: x * 2",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following python code using a lambda expression\n\n### Input:\ndef function_name(x): \n    return x * 2\n\n### Output:\nfunction_name = lambda x: x * 2"
    },
    {
        "instruction": "Given a list of strings, write a python program to check if all of the strings are palindromes.",
        "input": "strings = ['abba', 'bob', 'acca']",
        "output": "def palindrome_checker(strings):\n    is_palindrome = True\n    for string in strings:\n        if string  != string[::-1]:\n            is_palindrome = False\n            break\n    return is_palindrome\n\nstrings = ['abba', 'bob', 'acca']\n\nprint(palindrome_checker(strings))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of strings, write a python program to check if all of the strings are palindromes.\n\n### Input:\nstrings = ['abba', 'bob', 'acca']\n\n### Output:\ndef palindrome_checker(strings):\n    is_palindrome = True\n    for string in strings:\n        if string  != string[::-1]:\n            is_palindrome = False\n            break\n    return is_palindrome\n\nstrings = ['abba', 'bob', 'acca']\n\nprint(palindrome_checker(strings))"
    },
    {
        "instruction": "Create a Python program to find the sum of the series - 1\u00b2 + 2\u00b2 + 3\u00b2 + ... + n\u00b2",
        "input": "n = 5",
        "output": "def series_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n\nprint(series_sum(5))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the sum of the series - 1\u00b2 + 2\u00b2 + 3\u00b2 + ... + n\u00b2\n\n### Input:\nn = 5\n\n### Output:\ndef series_sum(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum\n\nprint(series_sum(5))"
    },
    {
        "instruction": "Write an algorithm in Python that inputs a large dataset and clusters it into several groups using k-Means Clustering.",
        "input": "Not applicable",
        "output": "import pandas as pd\nfrom sklearn.cluster import KMeans\n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Train the model\nmodel = KMeans(n_clusters=6).fit(data)\n\n# Predict the clusters\nclusters = model.predict(data)\n\n# Visualize the clusters\nplt.scatter(data[:,0], data[:,1], c=clusters)\nplt.show()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python that inputs a large dataset and clusters it into several groups using k-Means Clustering.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nfrom sklearn.cluster import KMeans\n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Train the model\nmodel = KMeans(n_clusters=6).fit(data)\n\n# Predict the clusters\nclusters = model.predict(data)\n\n# Visualize the clusters\nplt.scatter(data[:,0], data[:,1], c=clusters)\nplt.show()"
    },
    {
        "instruction": "Write a python program to convert a given hexadecimal to binary.",
        "input": "Hexadecimal: 0x56",
        "output": "def hex_to_binary(h): \n    return bin(int(h, 16)) \n  \nprint(hex_to_binary('0x56'))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to convert a given hexadecimal to binary.\n\n### Input:\nHexadecimal: 0x56\n\n### Output:\ndef hex_to_binary(h): \n    return bin(int(h, 16)) \n  \nprint(hex_to_binary('0x56'))"
    },
    {
        "instruction": "Using an object-oriented approach, design a deck of cards class in Python.",
        "input": "",
        "output": "class Deck:\ndef __init__(self, suits, ranks):\n self.suits = suits\n self.ranks = ranks\n self.cards = [(suit, rank) for suit in self.suits for rank in self.ranks]\n \ndef draw_card(self):\n return self.cards.pop()\n \ndef shuffle_deck(self):\n random.shuffle(self.cards)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing an object-oriented approach, design a deck of cards class in Python.\n\n### Input:\n\n\n### Output:\nclass Deck:\ndef __init__(self, suits, ranks):\n self.suits = suits\n self.ranks = ranks\n self.cards = [(suit, rank) for suit in self.suits for rank in self.ranks]\n \ndef draw_card(self):\n return self.cards.pop()\n \ndef shuffle_deck(self):\n random.shuffle(self.cards)"
    },
    {
        "instruction": "Create a sentiment classifier using a linear regression algorithm in Python.",
        "input": "Sentences:\n1. I love this movie \n2. I hate this movie",
        "output": "import numpy as np\n\nX = np.array([[1, 0], [0, 1]])\ny = np.array([1, 0])\n\nfrom sklearn.linear_model import LinearRegression \n\nmodel = LinearRegression().fit(X, y) \n  \npredictions = model.predict(X) \n  \nprint(\"Sentiment:\", predictions)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sentiment classifier using a linear regression algorithm in Python.\n\n### Input:\nSentences:\n1. I love this movie \n2. I hate this movie\n\n### Output:\nimport numpy as np\n\nX = np.array([[1, 0], [0, 1]])\ny = np.array([1, 0])\n\nfrom sklearn.linear_model import LinearRegression \n\nmodel = LinearRegression().fit(X, y) \n  \npredictions = model.predict(X) \n  \nprint(\"Sentiment:\", predictions)"
    },
    {
        "instruction": "Design a class in Python that takes two dates as input and can tell you if the first date comes before the second or if they are equal.",
        "input": "",
        "output": "import datetime\n\nclass DateChecker:\n\n    def __init__(self,date1,date2):\n        self.date1 = date1\n        self.date2 = date2\n\n    def check_dates(self):\n        if self.date1 < self.date2:\n            return \"date1 is before date2\"\n        elif self.date1 == self.date2:\n            return \"date1 is equal to date2\"\n        else:\n            return \"date1 is after date2\"\n\nif __name__  ==  \"__main__\":\n    date1 = datetime.datetime(2020, 8, 3)\n    date2 = datetime.datetime(2020, 8, 10)\n\n    date_checker = DateChecker(date1, date2)\n    result  =  date_checker.check_dates()\n    print(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python that takes two dates as input and can tell you if the first date comes before the second or if they are equal.\n\n### Input:\n\n\n### Output:\nimport datetime\n\nclass DateChecker:\n\n    def __init__(self,date1,date2):\n        self.date1 = date1\n        self.date2 = date2\n\n    def check_dates(self):\n        if self.date1 < self.date2:\n            return \"date1 is before date2\"\n        elif self.date1 == self.date2:\n            return \"date1 is equal to date2\"\n        else:\n            return \"date1 is after date2\"\n\nif __name__  ==  \"__main__\":\n    date1 = datetime.datetime(2020, 8, 3)\n    date2 = datetime.datetime(2020, 8, 10)\n\n    date_checker = DateChecker(date1, date2)\n    result  =  date_checker.check_dates()\n    print(result)"
    },
    {
        "instruction": "Design a class in Python to store details of a person",
        "input": "Name: John\nAge: 34",
        "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nperson = Person('John', 34)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python to store details of a person\n\n### Input:\nName: John\nAge: 34\n\n### Output:\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\nperson = Person('John', 34)"
    },
    {
        "instruction": "Build a function in Python to calculate compound interest based on the input parameters.",
        "input": "",
        "output": "def compound_interest(principal, rate, time):\n    return principal * (1 + rate/100)**time",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a function in Python to calculate compound interest based on the input parameters.\n\n### Input:\n\n\n### Output:\ndef compound_interest(principal, rate, time):\n    return principal * (1 + rate/100)**time"
    },
    {
        "instruction": "Write a web scraper in Python to gather the content of all pages of a website",
        "input": "",
        "output": "def scrape_website(url):\n    page= requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    for link in soup.find_all('a'):\n        link_url= link.get('href')\n        if link_url.startswith('/'): \n            link_url= url + link_url # form absolute url\n        if '#' not in link_url and link_url.startswith(url): # check for navigation and fragment\n            page_to_get = requests.get(link_url)\n            soup = BeautifulSoup(page_to_get.content, 'html.parser')\n            # do something with the data",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a web scraper in Python to gather the content of all pages of a website\n\n### Input:\n\n\n### Output:\ndef scrape_website(url):\n    page= requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    for link in soup.find_all('a'):\n        link_url= link.get('href')\n        if link_url.startswith('/'): \n            link_url= url + link_url # form absolute url\n        if '#' not in link_url and link_url.startswith(url): # check for navigation and fragment\n            page_to_get = requests.get(link_url)\n            soup = BeautifulSoup(page_to_get.content, 'html.parser')\n            # do something with the data"
    },
    {
        "instruction": "Create a Python program to calculate the factorial of an integer",
        "input": "7",
        "output": "def factorial(n): \n    if n == 0 or n == 1: \n        return 1\n    else: \n       return n * factorial(n - 1)\n\nresult = factorial(7)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the factorial of an integer\n\n### Input:\n7\n\n### Output:\ndef factorial(n): \n    if n == 0 or n == 1: \n        return 1\n    else: \n       return n * factorial(n - 1)\n\nresult = factorial(7)\nprint(result)"
    },
    {
        "instruction": "Rewrite the following Java program in Python.",
        "input": "public class QuadraticEquation {\n    private double a;\n    private double b;\n    private double c;\n     \n    QuadraticEquation(double a, double b, double c) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n    }\n     \n    public double getDiscriminant() {\n        return (this.b*this.b) - 4*this.a*this.c;\n    }\n     \n    public double getRoot1() {\n        if (this.getDiscriminant() >= 0) {\n            return ((-this.b + Math.sqrt(this.getDiscriminant()))/(2*this.a));\n        }\n        else {\n            return 0;\n        }\n    }\n     \n    public double getRoot2() {\n        if (this.getDiscriminant() >= 0) {\n            return ((-this.b - Math.sqrt(this.getDiscriminant()))/(2*this.a));\n        }\n        else {\n            return 0;\n        }\n    }\n}",
        "output": "class QuadraticEquation:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n     \n    def getDiscriminant(self):\n        return (self.b**2) - 4*self.a*self.c\n     \n    def getRoot1(self):\n        if self.getDiscriminant() >= 0:\n            return ((-self.b + (self.getDiscriminant() ** 0.5))/(2*self.a))\n        else:\n            return 0\n     \n    def getRoot2(self):\n        if self.getDiscriminant() >= 0:\n            return ((-self.b - (self.getDiscriminant() ** 0.5))/(2*self.a))\n        else:\n            return 0",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following Java program in Python.\n\n### Input:\npublic class QuadraticEquation {\n    private double a;\n    private double b;\n    private double c;\n     \n    QuadraticEquation(double a, double b, double c) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n    }\n     \n    public double getDiscriminant() {\n        return (this.b*this.b) - 4*this.a*this.c;\n    }\n     \n    public double getRoot1() {\n        if (this.getDiscriminant() >= 0) {\n            return ((-this.b + Math.sqrt(this.getDiscriminant()))/(2*this.a));\n        }\n        else {\n            return 0;\n        }\n    }\n     \n    public double getRoot2() {\n        if (this.getDiscriminant() >= 0) {\n            return ((-this.b - Math.sqrt(this.getDiscriminant()))/(2*this.a));\n        }\n        else {\n            return 0;\n        }\n    }\n}\n\n### Output:\nclass QuadraticEquation:\n    def __init__(self, a, b, c):\n        self.a = a\n        self.b = b\n        self.c = c\n     \n    def getDiscriminant(self):\n        return (self.b**2) - 4*self.a*self.c\n     \n    def getRoot1(self):\n        if self.getDiscriminant() >= 0:\n            return ((-self.b + (self.getDiscriminant() ** 0.5))/(2*self.a))\n        else:\n            return 0\n     \n    def getRoot2(self):\n        if self.getDiscriminant() >= 0:\n            return ((-self.b - (self.getDiscriminant() ** 0.5))/(2*self.a))\n        else:\n            return 0"
    },
    {
        "instruction": "Design a numerical algorithm in Python that takes an input set of numbers and returns the maximum of this set.",
        "input": "[8, 15, 7, 6, 16]",
        "output": "def find_max(arr): \n  \n  max_value = arr[0] \n  \n  for i in range(1, len(arr)): \n      if arr[i]> max_value: \n          max_value = arr[i] \n          \n  return max_value \n  \n#Test Array \narr = [8, 15, 7, 6, 16] \n\n#Function call \nmaxvalue = find_max(arr) \n\nprint(\"Maximum value:\",maxvalue)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a numerical algorithm in Python that takes an input set of numbers and returns the maximum of this set.\n\n### Input:\n[8, 15, 7, 6, 16]\n\n### Output:\ndef find_max(arr): \n  \n  max_value = arr[0] \n  \n  for i in range(1, len(arr)): \n      if arr[i]> max_value: \n          max_value = arr[i] \n          \n  return max_value \n  \n#Test Array \narr = [8, 15, 7, 6, 16] \n\n#Function call \nmaxvalue = find_max(arr) \n\nprint(\"Maximum value:\",maxvalue)"
    },
    {
        "instruction": "Create a simple Python script that takes a single command-line parameter and prints out \"Hello <parameter>\" to the console.",
        "input": "John",
        "output": "import sys\n\nname = sys.argv[1]\nprint(\"Hello {}\".format(name)) # Output: Hello John",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple Python script that takes a single command-line parameter and prints out \"Hello <parameter>\" to the console.\n\n### Input:\nJohn\n\n### Output:\nimport sys\n\nname = sys.argv[1]\nprint(\"Hello {}\".format(name)) # Output: Hello John"
    },
    {
        "instruction": "Optimize the following Python code to reduce the complexity.",
        "input": "def find_shortest_word(words):\n    shortest_word = None\n    shortest_length = float('inf')\n    for word in words:\n        if len(word) < shortest_length:\n            shortest_word = word\n            shortest_length = len(word)\n\n    return shortest_word",
        "output": "def find_shortest_word(words):\n    shortest_length = float('inf')\n    for word in words:\n        if len(word) < shortest_length:\n            shortest_word = word\n            shortest_length = len(word)\n\n    return shortest_word",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python code to reduce the complexity.\n\n### Input:\ndef find_shortest_word(words):\n    shortest_word = None\n    shortest_length = float('inf')\n    for word in words:\n        if len(word) < shortest_length:\n            shortest_word = word\n            shortest_length = len(word)\n\n    return shortest_word\n\n### Output:\ndef find_shortest_word(words):\n    shortest_length = float('inf')\n    for word in words:\n        if len(word) < shortest_length:\n            shortest_word = word\n            shortest_length = len(word)\n\n    return shortest_word"
    },
    {
        "instruction": "Critique the given code for best coding practices.",
        "input": "def calculate_total_sum(list_num):\n    total_sum = 0\n    for num in list_num:\n        total_sum += num\n    return total_sum",
        "output": "The code could improve by using the built-in sum() from the Python library. Also, you should use a more meaningful variable name instead of list_num to better explain the intent of the code. Lastly, you could use type hinting to specify the type of variables passed into the function.",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCritique the given code for best coding practices.\n\n### Input:\ndef calculate_total_sum(list_num):\n    total_sum = 0\n    for num in list_num:\n        total_sum += num\n    return total_sum\n\n### Output:\nThe code could improve by using the built-in sum() from the Python library. Also, you should use a more meaningful variable name instead of list_num to better explain the intent of the code. Lastly, you could use type hinting to specify the type of variables passed into the function."
    },
    {
        "instruction": "Generate a program to calculate Fibonacci numbers recursively in Python.",
        "input": "Not applicable",
        "output": "def fibonacci(n):\n if n == 0:\n  return 0\n elif n == 1:\n  return 1\n else:\n  return fibonacci(n-1) + fibonacci(n-2)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program to calculate Fibonacci numbers recursively in Python.\n\n### Input:\nNot applicable\n\n### Output:\ndef fibonacci(n):\n if n == 0:\n  return 0\n elif n == 1:\n  return 1\n else:\n  return fibonacci(n-1) + fibonacci(n-2)"
    },
    {
        "instruction": "Create a web scraper in Python.",
        "input": "",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\n\n# function to scrape a page for information\ndef scrape_page(url): \n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    info = soup.find_all('div', class_='info') \n    for item in info:\n        headline = item.find('span', class_='headline') \n        print(headline.text) \n\n# main function to scrape multiple pages\ndef main(): \n    urls = [\n        'http://example.com/page1',\n        'http://example.com/page2',\n        'http://example.com/page3'\n        ] \n    for url in urls:\n        scrape_page(url)\n\n# call the main function \nif __name__ == '__main__': \n    main()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n\n# function to scrape a page for information\ndef scrape_page(url): \n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    info = soup.find_all('div', class_='info') \n    for item in info:\n        headline = item.find('span', class_='headline') \n        print(headline.text) \n\n# main function to scrape multiple pages\ndef main(): \n    urls = [\n        'http://example.com/page1',\n        'http://example.com/page2',\n        'http://example.com/page3'\n        ] \n    for url in urls:\n        scrape_page(url)\n\n# call the main function \nif __name__ == '__main__': \n    main()"
    },
    {
        "instruction": "Design a Python program to determine if a number is odd or even.",
        "input": "",
        "output": "def is_even(num):\n if num % 2 == 0:\n return True\n else:\n return False\n\nnumber = int(input(\"Enter a number: \"))\n\nif is_even(number):\n print(\"The number is even\")\nelse:\n print(\"The number is odd\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to determine if a number is odd or even.\n\n### Input:\n\n\n### Output:\ndef is_even(num):\n if num % 2 == 0:\n return True\n else:\n return False\n\nnumber = int(input(\"Enter a number: \"))\n\nif is_even(number):\n print(\"The number is even\")\nelse:\n print(\"The number is odd\")"
    },
    {
        "instruction": "Create a function in Python that checks whether a given string is a palindrome.",
        "input": "",
        "output": "def is_palindrome(string):\n    # convert the string to lowercase\n    str = string.lower()\n    # reverse the string\n    revStr = str[::-1]\n    # check for the condition\n    if str == revStr:\n        return True\n    return False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that checks whether a given string is a palindrome.\n\n### Input:\n\n\n### Output:\ndef is_palindrome(string):\n    # convert the string to lowercase\n    str = string.lower()\n    # reverse the string\n    revStr = str[::-1]\n    # check for the condition\n    if str == revStr:\n        return True\n    return False"
    },
    {
        "instruction": "Write a Python program to print the pyramid pattern.",
        "input": "N = 5",
        "output": "# Function to print the pyramid pattern\ndef print_pyramid(n):\n    k = 2*n - 2\n \n    # outer loop to print rows\n    for i in range(0, n):\n      \n        # inner loop to print columns\n        for j in range(0, k):\n            print(end=\" \")\n      \n        # decrementing k after each loop\n        k = k - 1\n     \n        # inner loop to print foo pattern\n        for j in range(0, i+1):       \n            print(\"* \", end=\"\")\n        print(\"\\r\")\n\n# Driver Code\nn = 5\nprint_pyramid(n)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print the pyramid pattern.\n\n### Input:\nN = 5\n\n### Output:\n# Function to print the pyramid pattern\ndef print_pyramid(n):\n    k = 2*n - 2\n \n    # outer loop to print rows\n    for i in range(0, n):\n      \n        # inner loop to print columns\n        for j in range(0, k):\n            print(end=\" \")\n      \n        # decrementing k after each loop\n        k = k - 1\n     \n        # inner loop to print foo pattern\n        for j in range(0, i+1):       \n            print(\"* \", end=\"\")\n        print(\"\\r\")\n\n# Driver Code\nn = 5\nprint_pyramid(n)"
    },
    {
        "instruction": "Write a Python program to split a string into a list of substrings.",
        "input": "String: hello world\nDelimiter: \" \"",
        "output": "words = str.split(\" \")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to split a string into a list of substrings.\n\n### Input:\nString: hello world\nDelimiter: \" \"\n\n### Output:\nwords = str.split(\" \")"
    },
    {
        "instruction": "Develop an algorithm in Python that reverses a given string.",
        "input": "\"hello world\"",
        "output": "def reverseString(s): \n    return s[::-1] \n  \nstring = \"hello world\"\n\nprint(\"Original String:\", string) \nprint(\"Reversed String:\", reverseString(string))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python that reverses a given string.\n\n### Input:\n\"hello world\"\n\n### Output:\ndef reverseString(s): \n    return s[::-1] \n  \nstring = \"hello world\"\n\nprint(\"Original String:\", string) \nprint(\"Reversed String:\", reverseString(string))"
    },
    {
        "instruction": "Edit the following code in Python and make it shorter.",
        "input": "def add(x, y):\n    z = x + y\n    return z\n\nsum = add(10, 20)\nprint(sum)",
        "output": "def add(x, y):\n    return x + y\n\nsum = add(10, 20)\nprint(sum)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following code in Python and make it shorter.\n\n### Input:\ndef add(x, y):\n    z = x + y\n    return z\n\nsum = add(10, 20)\nprint(sum)\n\n### Output:\ndef add(x, y):\n    return x + y\n\nsum = add(10, 20)\nprint(sum)"
    },
    {
        "instruction": "Implement a bubble sort algorithm in Python",
        "input": "<no input>",
        "output": "def bubble_sort(arr):\n    # Traverse through all array elements \n    for i in range(len(arr)): \n        # Last i elements are already in place \n        for j in range(0, len(arr)-i-1): \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n    return arr",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a bubble sort algorithm in Python\n\n### Input:\n<no input>\n\n### Output:\ndef bubble_sort(arr):\n    # Traverse through all array elements \n    for i in range(len(arr)): \n        # Last i elements are already in place \n        for j in range(0, len(arr)-i-1): \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n    return arr"
    },
    {
        "instruction": "Create a program in Python that will ask a user for three numbers, and then calculate the average of the numbers entered.",
        "input": "",
        "output": "# This program will ask the user to input three numbers and calculate the average\ndef main():\n    # Collect the input\n    num1 = float(input(\"Please enter a number: \"))\n    num2 = float(input(\"Please enter another number: \"))\n    num3 = float(input(\"Please enter a third number: \"))\n\n    # Calculate the average\n    average = (num1 + num2 + num3) / 3\n\n    # Print the result\n    print(\"Average of the three numbers is: \", average)\n\nmain()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that will ask a user for three numbers, and then calculate the average of the numbers entered.\n\n### Input:\n\n\n### Output:\n# This program will ask the user to input three numbers and calculate the average\ndef main():\n    # Collect the input\n    num1 = float(input(\"Please enter a number: \"))\n    num2 = float(input(\"Please enter another number: \"))\n    num3 = float(input(\"Please enter a third number: \"))\n\n    # Calculate the average\n    average = (num1 + num2 + num3) / 3\n\n    # Print the result\n    print(\"Average of the three numbers is: \", average)\n\nmain()"
    },
    {
        "instruction": "Generate a visual ASCII art in Python.",
        "input": "A drawing of a star",
        "output": "\"\"\"\nGenerate a visual ASCII art in Python\n\"\"\"\n\ndef generate_ascii(drawing): \n    height = len(drawing) + 2\n    width = len(drawing[0]) + 2\n\n    def get_ascii_cell(cell):\n        # Define the character in the ASCII art\n        if cell == '*':\n            return '*'\n        if cell == ' ':\n            return ' '\n        if cell == '.':\n            return '.'\n\n    # Render the picture as ASCII\n    result = ''\n    for row in range(height):\n        for col in range(width):\n            if row == 0 or row == height - 1 or col == 0 or col == width - 1:\n                result += '*'\n            else:\n                result += get_ascii_cell(drawing[row-1][col-1])\n        result += '\\n'\n    return result\n\nif __name__ == '__main__':\n    drawing = [['*', ' ', '*'],\n               [' ', '*', ' '],\n               ['*', ' ', '*']]\n    print(generate_ascii(drawing))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a visual ASCII art in Python.\n\n### Input:\nA drawing of a star\n\n### Output:\n\"\"\"\nGenerate a visual ASCII art in Python\n\"\"\"\n\ndef generate_ascii(drawing): \n    height = len(drawing) + 2\n    width = len(drawing[0]) + 2\n\n    def get_ascii_cell(cell):\n        # Define the character in the ASCII art\n        if cell == '*':\n            return '*'\n        if cell == ' ':\n            return ' '\n        if cell == '.':\n            return '.'\n\n    # Render the picture as ASCII\n    result = ''\n    for row in range(height):\n        for col in range(width):\n            if row == 0 or row == height - 1 or col == 0 or col == width - 1:\n                result += '*'\n            else:\n                result += get_ascii_cell(drawing[row-1][col-1])\n        result += '\\n'\n    return result\n\nif __name__ == '__main__':\n    drawing = [['*', ' ', '*'],\n               [' ', '*', ' '],\n               ['*', ' ', '*']]\n    print(generate_ascii(drawing))"
    },
    {
        "instruction": "Develop an algorithm in Python for inserting an element into a given sorted array.",
        "input": "sortedArray = [1, 5, 9, 12, 15]\nx = 7",
        "output": "def insertSort(sortedArray, x): \n    n = len(sortedArray) \n    sortedArray.append(x) \n    for i in range(n-1, -1, -1): \n        if sortedArray[i] > x: \n            sortedArray[i + 1] = sortedArray[i] \n            sortedArray[i] = x \n    return sortedArray\n\nprint(insertSort(sortedArray, x))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python for inserting an element into a given sorted array.\n\n### Input:\nsortedArray = [1, 5, 9, 12, 15]\nx = 7\n\n### Output:\ndef insertSort(sortedArray, x): \n    n = len(sortedArray) \n    sortedArray.append(x) \n    for i in range(n-1, -1, -1): \n        if sortedArray[i] > x: \n            sortedArray[i + 1] = sortedArray[i] \n            sortedArray[i] = x \n    return sortedArray\n\nprint(insertSort(sortedArray, x))"
    },
    {
        "instruction": "Create a class in Python that takes a string as a constructor argument and stores it in a list. The class should have a method that prints the string, followed by the phrase \u201cwas stored\u201d",
        "input": "Not applicable",
        "output": "class StringList:\n    def __init__(self, string):\n        self.stringlist = [string]\n    \n    def printString(self):\n        for s in self.stringlist:\n            print(s + ' was stored')\n\nmylist = StringList('Hello World')\nmylist.printString()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that takes a string as a constructor argument and stores it in a list. The class should have a method that prints the string, followed by the phrase \u201cwas stored\u201d\n\n### Input:\nNot applicable\n\n### Output:\nclass StringList:\n    def __init__(self, string):\n        self.stringlist = [string]\n    \n    def printString(self):\n        for s in self.stringlist:\n            print(s + ' was stored')\n\nmylist = StringList('Hello World')\nmylist.printString()"
    },
    {
        "instruction": "Generate a Python program that collects contact information from a given list of numbers.",
        "input": "[917, 732, 514, 614, 461, 201]",
        "output": "def collect_contact_information(numbers):\n    \n    results = []\n    \n    for number in numbers:\n        contact_info = {}\n        contact_info[\"number\"] = number\n        \n        # collect rest of contact info from number\n        # e.g. enter into database and look up address, etc.\n        \n        results.append(contact_info)\n        \n    return results",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that collects contact information from a given list of numbers.\n\n### Input:\n[917, 732, 514, 614, 461, 201]\n\n### Output:\ndef collect_contact_information(numbers):\n    \n    results = []\n    \n    for number in numbers:\n        contact_info = {}\n        contact_info[\"number\"] = number\n        \n        # collect rest of contact info from number\n        # e.g. enter into database and look up address, etc.\n        \n        results.append(contact_info)\n        \n    return results"
    },
    {
        "instruction": "Design a Python class to store and manipulate data from a tabular dataset.",
        "input": "",
        "output": "class TableData:\n    def __init__(self, data):\n        self.data = data\n        self.column_names = list(data[0].keys())\n        self.row_count = len(data)\n\n    def get_rows(self):\n        rows = []\n        for row in self.data:\n            rows.append(list(row.values()))\n\n        return rows\n\n    def get_columns(self):\n        columns = []\n        for name in self.column_names:\n            column = []\n            for row in self.data:\n                column.append(row[name])\n            \n            columns.append(column)\n\n        return columns\n\n    def get_column_names(self):\n        return self.column_names\n\n    def get_row_count(self):\n        return self.row_count",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class to store and manipulate data from a tabular dataset.\n\n### Input:\n\n\n### Output:\nclass TableData:\n    def __init__(self, data):\n        self.data = data\n        self.column_names = list(data[0].keys())\n        self.row_count = len(data)\n\n    def get_rows(self):\n        rows = []\n        for row in self.data:\n            rows.append(list(row.values()))\n\n        return rows\n\n    def get_columns(self):\n        columns = []\n        for name in self.column_names:\n            column = []\n            for row in self.data:\n                column.append(row[name])\n            \n            columns.append(column)\n\n        return columns\n\n    def get_column_names(self):\n        return self.column_names\n\n    def get_row_count(self):\n        return self.row_count"
    },
    {
        "instruction": "Suggest new lines of code to optimize a given Python algorithm?",
        "input": "def factorial(n):\n  if n == 1:\n    return 1\n  else:\n    return n * factorial(n-1)",
        "output": "\"\"\"\nSuggest new lines of code to optimize a given Python algorithm\n\"\"\"\n\ndef factorial(n):\n  # Use memoization to enable faster execution\n  memo = {}\n\n  def memo_factorial(n):\n    if n == 1:\n      return 1\n    try:\n      return memo[n]\n    except KeyError:\n      memo[n] = n * memo_factorial(n-1)\n      return memo[n]\n  \n  return memo_factorial(n)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest new lines of code to optimize a given Python algorithm?\n\n### Input:\ndef factorial(n):\n  if n == 1:\n    return 1\n  else:\n    return n * factorial(n-1)\n\n### Output:\n\"\"\"\nSuggest new lines of code to optimize a given Python algorithm\n\"\"\"\n\ndef factorial(n):\n  # Use memoization to enable faster execution\n  memo = {}\n\n  def memo_factorial(n):\n    if n == 1:\n      return 1\n    try:\n      return memo[n]\n    except KeyError:\n      memo[n] = n * memo_factorial(n-1)\n      return memo[n]\n  \n  return memo_factorial(n)"
    },
    {
        "instruction": "Write a Python program to find all unique triplets of number in an array that sums up to 0.",
        "input": "[-1, 0, 1, 2, -1, -4]",
        "output": "def threeSum(nums): \n # Find all unique triplets of number in an array that sums up to 0 \n \n res = [] \n nums.sort() \n for i in range(len(nums) - 2): \n # avoid duplicate triplets \n if i > 0 and nums[i] == nums[i - 1]: \n continue\n # two pointer \n l = i + 1 \n r = len(nums) - 1\n while l < r: \n s = nums[i] + nums[l] + nums[r] \n if s > 0: \n r -= 1 \n elif s < 0: \n l += 1 \n else: \n res.append((nums[i], nums[l], nums[r])) \n l += 1 \n r -= 1 \n # handle duplicate\n while l < r and nums[l] == nums[l + 1]: \n l += 1 \n while l < r and nums[r] == nums[r - 1]: \n r -= 1 \n return res\n\narray = [-1, 0, 1, 2, -1, -4]\n\nprint(threeSum(array))\n\n# Output: [(-1, 0, 1), (-1, -1, 2)]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find all unique triplets of number in an array that sums up to 0.\n\n### Input:\n[-1, 0, 1, 2, -1, -4]\n\n### Output:\ndef threeSum(nums): \n # Find all unique triplets of number in an array that sums up to 0 \n \n res = [] \n nums.sort() \n for i in range(len(nums) - 2): \n # avoid duplicate triplets \n if i > 0 and nums[i] == nums[i - 1]: \n continue\n # two pointer \n l = i + 1 \n r = len(nums) - 1\n while l < r: \n s = nums[i] + nums[l] + nums[r] \n if s > 0: \n r -= 1 \n elif s < 0: \n l += 1 \n else: \n res.append((nums[i], nums[l], nums[r])) \n l += 1 \n r -= 1 \n # handle duplicate\n while l < r and nums[l] == nums[l + 1]: \n l += 1 \n while l < r and nums[r] == nums[r - 1]: \n r -= 1 \n return res\n\narray = [-1, 0, 1, 2, -1, -4]\n\nprint(threeSum(array))\n\n# Output: [(-1, 0, 1), (-1, -1, 2)]"
    },
    {
        "instruction": "Create a python program which takes in a given list and finds the 3 most frequent elements in the list.",
        "input": "[3, 7, 5, 6, 2, 1, 5, 6, 3, 9]",
        "output": "from collections import Counter\n\ndef find_most_frequent(lst): \n    counter = Counter(lst) \n    topthree = counter.most_common(3)\n    return topthree\n\nfind_most_frequent([3, 7, 5, 6, 2, 1, 5, 6, 3, 9])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program which takes in a given list and finds the 3 most frequent elements in the list.\n\n### Input:\n[3, 7, 5, 6, 2, 1, 5, 6, 3, 9]\n\n### Output:\nfrom collections import Counter\n\ndef find_most_frequent(lst): \n    counter = Counter(lst) \n    topthree = counter.most_common(3)\n    return topthree\n\nfind_most_frequent([3, 7, 5, 6, 2, 1, 5, 6, 3, 9])"
    },
    {
        "instruction": "Optimize a given Python function to run faster.",
        "input": "def long_function(lst):\n    counter = 0\n    for i in lst:\n        inner_counter = 0\n        while inner_counter < i:\n            counter += 1\n            inner_counter += 1\n    return counter",
        "output": "def long_function(lst):\n    counter = 0\n    for i in lst:\n        counter += i\n    return counter",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a given Python function to run faster.\n\n### Input:\ndef long_function(lst):\n    counter = 0\n    for i in lst:\n        inner_counter = 0\n        while inner_counter < i:\n            counter += 1\n            inner_counter += 1\n    return counter\n\n### Output:\ndef long_function(lst):\n    counter = 0\n    for i in lst:\n        counter += i\n    return counter"
    },
    {
        "instruction": "Create a Python code to calculate the Slope of the line when two points are given.",
        "input": "(5, 9) and (15, 40)",
        "output": "#Calculate the Slope of the line\ndef findSlope(x1, y1, x2, y2):\n    m = (y2-y1)/(x2-x1)\n    return m\n\nx1 = 5\ny1 = 9\nx2 = 15\ny2 = 40\n\nresult = findSlope(x1, y1, x2, y2)\nprint(\"The slope of the line is\", result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code to calculate the Slope of the line when two points are given.\n\n### Input:\n(5, 9) and (15, 40)\n\n### Output:\n#Calculate the Slope of the line\ndef findSlope(x1, y1, x2, y2):\n    m = (y2-y1)/(x2-x1)\n    return m\n\nx1 = 5\ny1 = 9\nx2 = 15\ny2 = 40\n\nresult = findSlope(x1, y1, x2, y2)\nprint(\"The slope of the line is\", result)"
    },
    {
        "instruction": "Construct a function in Python to compare the two given dictionaries and return true if both of them contains the same elements.",
        "input": "dict1 = {'A':1, 'B':2, 'C':3 }\ndict2 = {'A':1, 'C':3, 'B':2 }",
        "output": "def compare_dicts(dict1, dict2):\n  # Iterate through keys in both dictionaries and compare values\n  for key, value in dict1.items():\n    if key not in dict2 or dict2[key] != value:\n      return False\n \n  # If all elements matched\n  return True",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function in Python to compare the two given dictionaries and return true if both of them contains the same elements.\n\n### Input:\ndict1 = {'A':1, 'B':2, 'C':3 }\ndict2 = {'A':1, 'C':3, 'B':2 }\n\n### Output:\ndef compare_dicts(dict1, dict2):\n  # Iterate through keys in both dictionaries and compare values\n  for key, value in dict1.items():\n    if key not in dict2 or dict2[key] != value:\n      return False\n \n  # If all elements matched\n  return True"
    },
    {
        "instruction": "Write a Python function that takes string input of two sentences and returns a boolean value if the sentences are anagrams or not.",
        "input": "sent1 = \"tabe\";\nsent2 = \"beat\"",
        "output": "def is_anagram(sent1, sent2):\n    sent1 = sent1.replace(\" \", \"\").lower()\n    sent2 = sent2.replace(\" \", \"\").lower()\n\n    if len(sent1) != len(sent2):\n        return False\n\n    counter = {}\n\n    for letter in sent1:\n        if letter in counter:\n            counter[letter] += 1\n        else:\n            counter[letter] = 1\n\n    for letter in sent2:\n        if letter in counter:\n            counter[letter] -= 1\n        else:\n            counter[letter] = 1\n\n    for k in counter:\n        if counter[k] != 0:\n            return False\n\n    return True",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes string input of two sentences and returns a boolean value if the sentences are anagrams or not.\n\n### Input:\nsent1 = \"tabe\";\nsent2 = \"beat\"\n\n### Output:\ndef is_anagram(sent1, sent2):\n    sent1 = sent1.replace(\" \", \"\").lower()\n    sent2 = sent2.replace(\" \", \"\").lower()\n\n    if len(sent1) != len(sent2):\n        return False\n\n    counter = {}\n\n    for letter in sent1:\n        if letter in counter:\n            counter[letter] += 1\n        else:\n            counter[letter] = 1\n\n    for letter in sent2:\n        if letter in counter:\n            counter[letter] -= 1\n        else:\n            counter[letter] = 1\n\n    for k in counter:\n        if counter[k] != 0:\n            return False\n\n    return True"
    },
    {
        "instruction": "Create a web application in Django that implements a blog system.",
        "input": "Not applicable",
        "output": "# Create the project\ndjango-admin startproject blog\n\n# Create the application\ncd blog\npython manage.py startapp posts\n\n# Add the application to the project\n# Edit the settings.py file\nINSTALLED_APPS = [\n 'posts',\n # ...\n]\n\n# Create the database\npython manage.py makemigrations\npython manage.py migrate\n\n# Create the models\n# Edit the models.py file\nfrom django.db import models\nclass Post(models.Model):\n title = models.CharField(max_length=200)\n body = models.TextField()\n\n# Create the Admin page\npython manage.py createsuperuser\n# Follow the prompts to create the superuser\n\n# Create the URLs\n# Edit the urls.py file\nfrom django.urls import path\nfrom django.contrib import admin\nfrom posts.views import HomePageView, CreatePost\n\nurlpatterns = [\n path('admin/', admin.site.urls),\n path('', HomePageView.as_view(), name=\"home\"),\n path('post/new/', CreatePost.as_view(), name=\"create_post\")\n]\n\n# Create Views\n# Edit the views.py file\nfrom django.views.generic.base import TemplateView\nfrom django.views.generic.edit import CreateView\nfrom posts.models import Post\n\nclass HomePageView(TemplateView):\n template_name = \"index.html\"\n\nclass CreatePost(CreateView):\n model = Post\n fields = ['title', 'body']\n template_name = \"create_post.html\"\n \n success_url = '/'\n\n# Create Templates\n# Create the templates directory\n# Create the index.html file\n<html>\n <head>\n <title>Blog</title>\n </head>\n <body>\n {% for post in posts %}\n <h1>{{ post.title }}</h1>\n <p>{{ post.body }}</p>\n {% endfor %}\n <a href=\"/post/new/\">Create a new post</a>\n </body>\n</html>\n\n# Create the create_post.html file\n<html>\n <head>\n <title>Create Post</title>\n </head>\n <body>\n <h1>Create a New Post</h1>\n <form method=\"post\">\n {% csrf-token %}\n {{ form.as_p }}\n <button type=submit>Create Post</button>\n </form>\n </body>\n</html>",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application in Django that implements a blog system.\n\n### Input:\nNot applicable\n\n### Output:\n# Create the project\ndjango-admin startproject blog\n\n# Create the application\ncd blog\npython manage.py startapp posts\n\n# Add the application to the project\n# Edit the settings.py file\nINSTALLED_APPS = [\n 'posts',\n # ...\n]\n\n# Create the database\npython manage.py makemigrations\npython manage.py migrate\n\n# Create the models\n# Edit the models.py file\nfrom django.db import models\nclass Post(models.Model):\n title = models.CharField(max_length=200)\n body = models.TextField()\n\n# Create the Admin page\npython manage.py createsuperuser\n# Follow the prompts to create the superuser\n\n# Create the URLs\n# Edit the urls.py file\nfrom django.urls import path\nfrom django.contrib import admin\nfrom posts.views import HomePageView, CreatePost\n\nurlpatterns = [\n path('admin/', admin.site.urls),\n path('', HomePageView.as_view(), name=\"home\"),\n path('post/new/', CreatePost.as_view(), name=\"create_post\")\n]\n\n# Create Views\n# Edit the views.py file\nfrom django.views.generic.base import TemplateView\nfrom django.views.generic.edit import CreateView\nfrom posts.models import Post\n\nclass HomePageView(TemplateView):\n template_name = \"index.html\"\n\nclass CreatePost(CreateView):\n model = Post\n fields = ['title', 'body']\n template_name = \"create_post.html\"\n \n success_url = '/'\n\n# Create Templates\n# Create the templates directory\n# Create the index.html file\n<html>\n <head>\n <title>Blog</title>\n </head>\n <body>\n {% for post in posts %}\n <h1>{{ post.title }}</h1>\n <p>{{ post.body }}</p>\n {% endfor %}\n <a href=\"/post/new/\">Create a new post</a>\n </body>\n</html>\n\n# Create the create_post.html file\n<html>\n <head>\n <title>Create Post</title>\n </head>\n <body>\n <h1>Create a New Post</h1>\n <form method=\"post\">\n {% csrf-token %}\n {{ form.as_p }}\n <button type=submit>Create Post</button>\n </form>\n </body>\n</html>"
    },
    {
        "instruction": "Create a program sudoku solver in Python.",
        "input": "[Sudoku board]\n\n[5, 3, 0, 0, 7, 0, 0, 0, 0]\n[6, 0, 0, 1, 9, 5, 0, 0, 0]\n[0, 9, 8, 0, 0, 0, 0, 6, 0]\n[8, 0, 0, 0, 6, 0, 0, 0, 3]\n[4, 0, 0, 8, 0, 3, 0, 0, 1]\n[7, 0, 0, 0, 2, 0, 0, 0, 6]\n[0, 6, 0, 0, 0, 0, 2, 8, 0]\n[0, 0, 0, 4, 1, 9, 0, 0, 5]\n[0, 0, 0, 0, 8, 0, 0, 7, 9]",
        "output": "def solve(bo):\n    find = find_empty(bo)\n    if not find:\n        return True\n    else:\n        row, col = find\n\n    for i in range(1,10):\n        if valid(bo, i, (row, col)):\n            bo[row][col] = i\n\n            if solve(bo):\n                return True\n\n            bo[row][col] = 0\n\n    return False\n\n\ndef valid(bo, num, pos):\n    # Check row\n    for i in range(len(bo[0])):\n        if bo[pos[0]][i] == num and pos[1] != i:\n            return False\n\n    # Check column\n    for i in range(len(bo)):\n        if bo[i][pos[1]] == num and pos[0] != i:\n            return False\n\n    # Check box\n    box_x = pos[1] // 3\n    box_y = pos[0] // 3\n\n    for i in range(box_y*3, box_y*3 + 3):\n        for j in range(box_x * 3, box_x*3 + 3):\n            if bo[i][j] == num and (i,j) != pos:\n                return False\n\nreturn True",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program sudoku solver in Python.\n\n### Input:\n[Sudoku board]\n\n[5, 3, 0, 0, 7, 0, 0, 0, 0]\n[6, 0, 0, 1, 9, 5, 0, 0, 0]\n[0, 9, 8, 0, 0, 0, 0, 6, 0]\n[8, 0, 0, 0, 6, 0, 0, 0, 3]\n[4, 0, 0, 8, 0, 3, 0, 0, 1]\n[7, 0, 0, 0, 2, 0, 0, 0, 6]\n[0, 6, 0, 0, 0, 0, 2, 8, 0]\n[0, 0, 0, 4, 1, 9, 0, 0, 5]\n[0, 0, 0, 0, 8, 0, 0, 7, 9]\n\n### Output:\ndef solve(bo):\n    find = find_empty(bo)\n    if not find:\n        return True\n    else:\n        row, col = find\n\n    for i in range(1,10):\n        if valid(bo, i, (row, col)):\n            bo[row][col] = i\n\n            if solve(bo):\n                return True\n\n            bo[row][col] = 0\n\n    return False\n\n\ndef valid(bo, num, pos):\n    # Check row\n    for i in range(len(bo[0])):\n        if bo[pos[0]][i] == num and pos[1] != i:\n            return False\n\n    # Check column\n    for i in range(len(bo)):\n        if bo[i][pos[1]] == num and pos[0] != i:\n            return False\n\n    # Check box\n    box_x = pos[1] // 3\n    box_y = pos[0] // 3\n\n    for i in range(box_y*3, box_y*3 + 3):\n        for j in range(box_x * 3, box_x*3 + 3):\n            if bo[i][j] == num and (i,j) != pos:\n                return False\n\nreturn True"
    },
    {
        "instruction": "Create a simple calculator program in Python.",
        "input": "",
        "output": "def simple_calculator():\n    num1 = float(input(\"Enter the first number: \")) \n    num2 = float(input(\"Enter the second number: \"))  \n    oper = input(\"Enter your operation (+, -, *, /): \")  \n      \n    if oper == \"+\":\n        print(\"Result:\", num1 + num2)  \n    elif oper == \"-\":\n        print(\"Result:\", num1 - num2)  \n    elif oper == \"*\":\n        print(\"Result:\", num1 * num2)  \n    elif oper == \"/\":\n        print(\"Result:\", num1 / num2)  \n    else:\n        print(\"Invalid operation\")\n\nsimple_calculator()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple calculator program in Python.\n\n### Input:\n\n\n### Output:\ndef simple_calculator():\n    num1 = float(input(\"Enter the first number: \")) \n    num2 = float(input(\"Enter the second number: \"))  \n    oper = input(\"Enter your operation (+, -, *, /): \")  \n      \n    if oper == \"+\":\n        print(\"Result:\", num1 + num2)  \n    elif oper == \"-\":\n        print(\"Result:\", num1 - num2)  \n    elif oper == \"*\":\n        print(\"Result:\", num1 * num2)  \n    elif oper == \"/\":\n        print(\"Result:\", num1 / num2)  \n    else:\n        print(\"Invalid operation\")\n\nsimple_calculator()"
    },
    {
        "instruction": "Write a code to figure out the most efficient way to navigate between two points in a two dimensional space in Python",
        "input": "",
        "output": "def solution(pointA, pointB):\n    graph = [[0, 10, 15, 20],\n             [5, 0, 9, 10],\n             [6, 13, 0, 12],\n             [8, 8, 9, 0]]\n    start = pointA\n    end = pointB\n \n    # Shortest Path\n    infinity = float(\"inf\")\n    distances = [infinity] * len(graph)\n    previous = [None] * len(graph)\n    visited = [False] * len(graph)\n    distances[start] = 0\n    for i in range(len(graph)):\n        minimum = infinity + 1\n        for j in range(len(graph)):\n            if visited[j] is False and distances[j] < minimum:\n                minimum = distances[j]\n                index = j\n        visited[index] = True\n        # If a shorter path is found\n        for j in range(len(graph)):\n            if graph[index][j] > 0 and visited[j] is False:\n                if distances[index] + graph[index][j] < distances[j]:\n                    distances[j] = distances[index] + graph[index][j]\n                    previous[j] = index\n    path = []\n    k = end\n    while k is not None:\n        path.append(k)\n        k = previous[k]\n    path = path[::-1] # reverse the path\n    return path",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to figure out the most efficient way to navigate between two points in a two dimensional space in Python\n\n### Input:\n\n\n### Output:\ndef solution(pointA, pointB):\n    graph = [[0, 10, 15, 20],\n             [5, 0, 9, 10],\n             [6, 13, 0, 12],\n             [8, 8, 9, 0]]\n    start = pointA\n    end = pointB\n \n    # Shortest Path\n    infinity = float(\"inf\")\n    distances = [infinity] * len(graph)\n    previous = [None] * len(graph)\n    visited = [False] * len(graph)\n    distances[start] = 0\n    for i in range(len(graph)):\n        minimum = infinity + 1\n        for j in range(len(graph)):\n            if visited[j] is False and distances[j] < minimum:\n                minimum = distances[j]\n                index = j\n        visited[index] = True\n        # If a shorter path is found\n        for j in range(len(graph)):\n            if graph[index][j] > 0 and visited[j] is False:\n                if distances[index] + graph[index][j] < distances[j]:\n                    distances[j] = distances[index] + graph[index][j]\n                    previous[j] = index\n    path = []\n    k = end\n    while k is not None:\n        path.append(k)\n        k = previous[k]\n    path = path[::-1] # reverse the path\n    return path"
    },
    {
        "instruction": "Design a sorting algorithm to sort an array of strings in lexicographical order.",
        "input": "arr = ['Python', 'Java', 'JavaScript', 'C', 'C++']",
        "output": "def sort_lexicographically(arr):\n    n = len(arr) \n    for i in range(n):\n        min_index = i\n        for j in range(i + 1, n):\n            if arr[min_index] > arr[j]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr\n \nprint(sort_lexicographically(arr)) # Output: ['C', 'C++', 'Java', 'JavaScript', 'Python']",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a sorting algorithm to sort an array of strings in lexicographical order.\n\n### Input:\narr = ['Python', 'Java', 'JavaScript', 'C', 'C++']\n\n### Output:\ndef sort_lexicographically(arr):\n    n = len(arr) \n    for i in range(n):\n        min_index = i\n        for j in range(i + 1, n):\n            if arr[min_index] > arr[j]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr\n \nprint(sort_lexicographically(arr)) # Output: ['C', 'C++', 'Java', 'JavaScript', 'Python']"
    },
    {
        "instruction": "Generate a Python program using a list comprehension that takes a 2D list of integers and computes the sum of integers at each row.",
        "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "output": "total_row_sum = [sum(row) for row in [[1, 2, 3], [4, 5, 6], [7, 8, 9]]]\n\nprint(total_row_sum)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program using a list comprehension that takes a 2D list of integers and computes the sum of integers at each row.\n\n### Input:\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n### Output:\ntotal_row_sum = [sum(row) for row in [[1, 2, 3], [4, 5, 6], [7, 8, 9]]]\n\nprint(total_row_sum)"
    },
    {
        "instruction": "Implement a code in Python for reversing a string.",
        "input": "",
        "output": "def reverse_string(string):\n  reversed_string = \"\"\n  \n  for char in string:\n    reversed_string = char + reversed_string\n  \n  return reversed_string",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a code in Python for reversing a string.\n\n### Input:\n\n\n### Output:\ndef reverse_string(string):\n  reversed_string = \"\"\n  \n  for char in string:\n    reversed_string = char + reversed_string\n  \n  return reversed_string"
    },
    {
        "instruction": "Create a program using Python to determine the prime factorization for a given number.",
        "input": "",
        "output": "\"\"\"\nThis program will use Python to determine the prime factorization for a given number.\n\"\"\"\ndef prime_factorization(n): \n    # Initialize the prime factor list\n    prime_factors = [] \n  \n    # Find the smallest prime factor of the number\n    while n % 2 == 0: \n        prime_factors.append(2) \n        n //= 2\n          \n    # Check the odd numbers to find the prime factors \n    for i in range(3, int(n**0.5)+1, 2): \n        while n % i == 0: \n            prime_factors.append(i) \n            n //= i\n  \n    # If the number is greater than 2, it is a prime factor \n    if n > 2: \n        prime_factors.append(n)\n  \n    return prime_factors",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program using Python to determine the prime factorization for a given number.\n\n### Input:\n\n\n### Output:\n\"\"\"\nThis program will use Python to determine the prime factorization for a given number.\n\"\"\"\ndef prime_factorization(n): \n    # Initialize the prime factor list\n    prime_factors = [] \n  \n    # Find the smallest prime factor of the number\n    while n % 2 == 0: \n        prime_factors.append(2) \n        n //= 2\n          \n    # Check the odd numbers to find the prime factors \n    for i in range(3, int(n**0.5)+1, 2): \n        while n % i == 0: \n            prime_factors.append(i) \n            n //= i\n  \n    # If the number is greater than 2, it is a prime factor \n    if n > 2: \n        prime_factors.append(n)\n  \n    return prime_factors"
    },
    {
        "instruction": "Create a Python class that sums up the results of a given array of numbers.",
        "input": "[3, 4, 5, 6, 7]",
        "output": "class SumArray:\n    def __init__(self, numbers):\n        self.numbers = numbers\n    \n    def get_sum(self):\n        sum = 0 \n        for number in self.numbers:\n            sum += number\n        return sum",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that sums up the results of a given array of numbers.\n\n### Input:\n[3, 4, 5, 6, 7]\n\n### Output:\nclass SumArray:\n    def __init__(self, numbers):\n        self.numbers = numbers\n    \n    def get_sum(self):\n        sum = 0 \n        for number in self.numbers:\n            sum += number\n        return sum"
    },
    {
        "instruction": "Write a Python program that takes a list of emails and verifies that the domain is valid.",
        "input": "Not applicable",
        "output": "import re\n\nemails = ['user@example.com', 'user@invalid']\n\ndef validate_email(email): \n regex = r\"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)\"\n if (re.search(regex, email)): \n return 1\n else: \n return 0\n\nfor email in emails: \n is_valid = validate_email(email)\n if is_valid: \n print(email, 'is valid')\n else: \n print(email, 'is invalid')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a list of emails and verifies that the domain is valid.\n\n### Input:\nNot applicable\n\n### Output:\nimport re\n\nemails = ['user@example.com', 'user@invalid']\n\ndef validate_email(email): \n regex = r\"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)\"\n if (re.search(regex, email)): \n return 1\n else: \n return 0\n\nfor email in emails: \n is_valid = validate_email(email)\n if is_valid: \n print(email, 'is valid')\n else: \n print(email, 'is invalid')"
    },
    {
        "instruction": "Develop a web scraper in Python to extract the list of companies from the \"Industries\" tab on the S&P 500 website.",
        "input": "",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\n# URL of the S&P 500 Website\nurl = 'https://en.wikipedia.org/wiki/List_of_S%26P_500_companies'\n\n# Send GET request \nresp = requests.get(url)\n\n# Parse response as HTML\nsoup = BeautifulSoup(resp.text, 'html.parser')\n\n# Find the table containing data\ntable = soup.find('table', {'class': 'wikitable sortable'})\n\n# Extract the companies from the table\ncompanies = []\nfor row in table.findAll(\"tr\"):\n    # Skip the headers\n    if not row.findAll(\"th\"): \n        tds = row.findAll(\"td\")\n        companies.append([td.text.strip() for td in tds[1:2]])\n\nprint(\"List of S&P 500 Companies:\")\nfor company in companies:\n    print(company[0])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a web scraper in Python to extract the list of companies from the \"Industries\" tab on the S&P 500 website.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# URL of the S&P 500 Website\nurl = 'https://en.wikipedia.org/wiki/List_of_S%26P_500_companies'\n\n# Send GET request \nresp = requests.get(url)\n\n# Parse response as HTML\nsoup = BeautifulSoup(resp.text, 'html.parser')\n\n# Find the table containing data\ntable = soup.find('table', {'class': 'wikitable sortable'})\n\n# Extract the companies from the table\ncompanies = []\nfor row in table.findAll(\"tr\"):\n    # Skip the headers\n    if not row.findAll(\"th\"): \n        tds = row.findAll(\"td\")\n        companies.append([td.text.strip() for td in tds[1:2]])\n\nprint(\"List of S&P 500 Companies:\")\nfor company in companies:\n    print(company[0])"
    },
    {
        "instruction": "Generate a Python program to search for a substring within a string.",
        "input": "text = \"This is a sample string.\" \nsubstring = \"sample\"",
        "output": "def search_substring(text, substring):\n    if substring in text:\n        return True\n    else:\n        return False\n\nresult = search_substring(text, substring)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to search for a substring within a string.\n\n### Input:\ntext = \"This is a sample string.\" \nsubstring = \"sample\"\n\n### Output:\ndef search_substring(text, substring):\n    if substring in text:\n        return True\n    else:\n        return False\n\nresult = search_substring(text, substring)\nprint(result)"
    },
    {
        "instruction": "Create a lambda expression to return the square of the given number in Python.",
        "input": "",
        "output": "# Lambda expression to return the square of the given number \nsquare = lambda x: x * x \n  \n# calling the lambda expression  \nresult = square(5) \n  \n#Printing the result \nprint(result) \n\n# Output: 25",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a lambda expression to return the square of the given number in Python.\n\n### Input:\n\n\n### Output:\n# Lambda expression to return the square of the given number \nsquare = lambda x: x * x \n  \n# calling the lambda expression  \nresult = square(5) \n  \n#Printing the result \nprint(result) \n\n# Output: 25"
    },
    {
        "instruction": "Design a class in Python to create a custom data structure.",
        "input": "",
        "output": "class CustomDataStructure:\n    def __init__(self):\n        self.data = []\n \n    def appendData(self, val):\n        self.data.append(val)\n \n    def getData(self):\n        return self.data\n \n    def removeData(self, index):\n        self.data.pop(index)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python to create a custom data structure.\n\n### Input:\n\n\n### Output:\nclass CustomDataStructure:\n    def __init__(self):\n        self.data = []\n \n    def appendData(self, val):\n        self.data.append(val)\n \n    def getData(self):\n        return self.data\n \n    def removeData(self, index):\n        self.data.pop(index)"
    },
    {
        "instruction": "Generate a Python program that computes the number of posible Binary Search Tree combinations that can be made from a given set of numbers.",
        "input": "numbers=[1,2,3]",
        "output": "def bin_search_tree(numbers): \n    if len(numbers) <= 1: \n        return 1\n  \n    num_of_combinations = 0\n  \n    for i in range(len(numbers)): \n        left_subtree = bin_search_tree(numbers[:i]) \n        right_subtree = bin_search_tree(numbers[i+1:]) \n        num_of_combinations += left_subtree * right_subtree \n  \n    return num_of_combinations",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that computes the number of posible Binary Search Tree combinations that can be made from a given set of numbers.\n\n### Input:\nnumbers=[1,2,3]\n\n### Output:\ndef bin_search_tree(numbers): \n    if len(numbers) <= 1: \n        return 1\n  \n    num_of_combinations = 0\n  \n    for i in range(len(numbers)): \n        left_subtree = bin_search_tree(numbers[:i]) \n        right_subtree = bin_search_tree(numbers[i+1:]) \n        num_of_combinations += left_subtree * right_subtree \n  \n    return num_of_combinations"
    },
    {
        "instruction": "Generate a machine learning model in Python using scikit-learn to predict the probability of a passenger surviving the Titanic disaster.",
        "input": "A comma-separated file of Titanic passenger records such as Age, Gender, Fare, etc",
        "output": "# Import necessary packages\nimport pandas as pd \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Read the data\ndata = pd.read_csv(input.csv)\n\n# Extract the features and labels from the data\nX = data.drop('Survived', axis=1)\ny = data['Survived']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Initialize the Random Forest model\nclf = RandomForestClassifier(n_estimators=1000, max_depth=10, random_state=0)\n\n# Train the model\nclf.fit(X_train, y_train)\n\n# Evaluate the model\naccuracy = clf.score(X_test, y_test)\nprint('Model accuracy:', accuracy)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a machine learning model in Python using scikit-learn to predict the probability of a passenger surviving the Titanic disaster.\n\n### Input:\nA comma-separated file of Titanic passenger records such as Age, Gender, Fare, etc\n\n### Output:\n# Import necessary packages\nimport pandas as pd \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Read the data\ndata = pd.read_csv(input.csv)\n\n# Extract the features and labels from the data\nX = data.drop('Survived', axis=1)\ny = data['Survived']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Initialize the Random Forest model\nclf = RandomForestClassifier(n_estimators=1000, max_depth=10, random_state=0)\n\n# Train the model\nclf.fit(X_train, y_train)\n\n# Evaluate the model\naccuracy = clf.score(X_test, y_test)\nprint('Model accuracy:', accuracy)"
    },
    {
        "instruction": "Can you develop a functioning website using Python with a database and a form for user input?",
        "input": "",
        "output": "# Import the necessary libraries\nimport webbrowser\nimport sqlite3\nfrom flask import Flask, render_template, request\n\n# Create the app object\napp = Flask(__name__)\n\n# Create the database\nconn = sqlite3.connect('data.db')\ncurs = conn.cursor()\n\ncurs.execute(\"CREATE TABLE IF NOT EXISTS data (name TEXT, age INTEGER)\")\nconn.commit()\n\n# Create the main route\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"GET\":\n        return render_template(\"index.html\")\n    else:\n        name = request.form.get(\"name\")\n        age = request.form.get(\"age\")\n        curs.execute(\"INSERT INTO data VALUES (?, ?)\", (name, age))\n        conn.commit()\n        return render_template(\"success.html\")\n\n# Run the app\nif __name__ == \"__main__\":\n    webbrowser.open(\"http://localhost:5000\")\n    app.run(debug=True)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you develop a functioning website using Python with a database and a form for user input?\n\n### Input:\n\n\n### Output:\n# Import the necessary libraries\nimport webbrowser\nimport sqlite3\nfrom flask import Flask, render_template, request\n\n# Create the app object\napp = Flask(__name__)\n\n# Create the database\nconn = sqlite3.connect('data.db')\ncurs = conn.cursor()\n\ncurs.execute(\"CREATE TABLE IF NOT EXISTS data (name TEXT, age INTEGER)\")\nconn.commit()\n\n# Create the main route\n@app.route(\"/\", methods=[\"GET\", \"POST\"])\ndef index():\n    if request.method == \"GET\":\n        return render_template(\"index.html\")\n    else:\n        name = request.form.get(\"name\")\n        age = request.form.get(\"age\")\n        curs.execute(\"INSERT INTO data VALUES (?, ?)\", (name, age))\n        conn.commit()\n        return render_template(\"success.html\")\n\n# Run the app\nif __name__ == \"__main__\":\n    webbrowser.open(\"http://localhost:5000\")\n    app.run(debug=True)"
    },
    {
        "instruction": "Write a Python program that prints out all possible words from a collection of letters.",
        "input": "letters = [\"a\", \"b\", \"t\"]",
        "output": "import itertools\n\nletters = [\"a\", \"b\", \"t\"]\nwords = []\n\n# we use itertool's permutations to generate all combinations of letters\nResult = itertools.permutations(letters, 3)\n\n# we iterate through the output of itertool's permutation\n# and append it to result list of words\nfor ele in list(Result):\n    words.append(''.join(ele))\n\n# printing the result\nprint(words)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that prints out all possible words from a collection of letters.\n\n### Input:\nletters = [\"a\", \"b\", \"t\"]\n\n### Output:\nimport itertools\n\nletters = [\"a\", \"b\", \"t\"]\nwords = []\n\n# we use itertool's permutations to generate all combinations of letters\nResult = itertools.permutations(letters, 3)\n\n# we iterate through the output of itertool's permutation\n# and append it to result list of words\nfor ele in list(Result):\n    words.append(''.join(ele))\n\n# printing the result\nprint(words)"
    },
    {
        "instruction": "Create a Python program that simulates a game of Tic-Tac-Toe.",
        "input": "",
        "output": "board = [[0, 0, 0],\n         [0, 0, 0],\n         [0, 0, 0]]\n\ndef start_game():\n    # Display the UI of the game\n    print(\"Let the game begin!\\n\")\n    print(\"1 | 2 | 3\")\n    print(\"---------\")\n    print(\"4 | 5 | 6\")\n    print(\"---------\")\n    print(\"7 | 8 | 9\")\n    print(\"\")\n\n\ndef draw_board(board):\n    print(\" \"+board[0][0]+\" | \"+board[0][1]+\" | \"+board[0][2]+\" \")\n    print(\" \"+\"---------\")\n    print(\" \"+board[1][0]+\" | \"+board[1][1]+\" | \"+board[1][2]+\" \")\n    print(\" \"+\"---------\")\n    print(\" \"+board[2][0]+\" | \"+board[2][1]+\" | \"+board[2][2]+\" \")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that simulates a game of Tic-Tac-Toe.\n\n### Input:\n\n\n### Output:\nboard = [[0, 0, 0],\n         [0, 0, 0],\n         [0, 0, 0]]\n\ndef start_game():\n    # Display the UI of the game\n    print(\"Let the game begin!\\n\")\n    print(\"1 | 2 | 3\")\n    print(\"---------\")\n    print(\"4 | 5 | 6\")\n    print(\"---------\")\n    print(\"7 | 8 | 9\")\n    print(\"\")\n\n\ndef draw_board(board):\n    print(\" \"+board[0][0]+\" | \"+board[0][1]+\" | \"+board[0][2]+\" \")\n    print(\" \"+\"---------\")\n    print(\" \"+board[1][0]+\" | \"+board[1][1]+\" | \"+board[1][2]+\" \")\n    print(\" \"+\"---------\")\n    print(\" \"+board[2][0]+\" | \"+board[2][1]+\" | \"+board[2][2]+\" \")"
    },
    {
        "instruction": "Develop a function in Python to convert a given number of days into seconds.",
        "input": "",
        "output": "def days_to_seconds(days):\n    return days * 86400\n\nresult = days_to_seconds(3)\nprint(result) # Outputs: 259200",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python to convert a given number of days into seconds.\n\n### Input:\n\n\n### Output:\ndef days_to_seconds(days):\n    return days * 86400\n\nresult = days_to_seconds(3)\nprint(result) # Outputs: 259200"
    },
    {
        "instruction": "Develop a class in Python to optimize the existing code.",
        "input": "def display_message(message):\n  print(message)\n\ndisplay_message('Hello World!')",
        "output": "class Display():\n  def __init__(self, message):\n    self.message = message\n    \n  def display_message(self):\n    print(self.message)\n    \nmessage = input('Enter a message: ')\ndisplay_obj = Display(message)\ndisplay_obj.display_message()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a class in Python to optimize the existing code.\n\n### Input:\ndef display_message(message):\n  print(message)\n\ndisplay_message('Hello World!')\n\n### Output:\nclass Display():\n  def __init__(self, message):\n    self.message = message\n    \n  def display_message(self):\n    print(self.message)\n    \nmessage = input('Enter a message: ')\ndisplay_obj = Display(message)\ndisplay_obj.display_message()"
    },
    {
        "instruction": "Write a distributed Python program which can generate the Fibonacci series using Spark.",
        "input": "Not applicable",
        "output": "import findspark\nfindspark.init()\n\nfrom pyspark import SparkContext\n\nsc = SparkContext('local', 'fibonacci-generator')\n\ndef generate_fibonacci():\n rdd = sc.parallelize([0,1])\n for _ in range(100):\n rdd = rdd.flatMap(lambda x: [x, x + rdd.takeSample(withReplacement=True)[0]])\n return rdd.collect()\n\nresult = generate_fibonacci()\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a distributed Python program which can generate the Fibonacci series using Spark.\n\n### Input:\nNot applicable\n\n### Output:\nimport findspark\nfindspark.init()\n\nfrom pyspark import SparkContext\n\nsc = SparkContext('local', 'fibonacci-generator')\n\ndef generate_fibonacci():\n rdd = sc.parallelize([0,1])\n for _ in range(100):\n rdd = rdd.flatMap(lambda x: [x, x + rdd.takeSample(withReplacement=True)[0]])\n return rdd.collect()\n\nresult = generate_fibonacci()\nprint(result)"
    },
    {
        "instruction": "Write a Python program to find the sum of all integers in a given list that are multiples of 8.",
        "input": "4, 8, 12, 17, 30",
        "output": "# Initializing list \nl = [4, 8, 12, 17, 30] \n\n# Function to calculate sum \ndef sum_multiples(l): \n\tsum = 0\n\t\n\t# iterating over list \n\tfor num in l: \n\t\t\n\t\t# checking for multiples of 8 \n\t\tif num % 8 == 0: \n\t\t\tsum += num \n\t\t\t\n\treturn sum\n\n# Driver code \nprint(sum_multiples(l)) \n# Output: 20",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the sum of all integers in a given list that are multiples of 8.\n\n### Input:\n4, 8, 12, 17, 30\n\n### Output:\n# Initializing list \nl = [4, 8, 12, 17, 30] \n\n# Function to calculate sum \ndef sum_multiples(l): \n\tsum = 0\n\t\n\t# iterating over list \n\tfor num in l: \n\t\t\n\t\t# checking for multiples of 8 \n\t\tif num % 8 == 0: \n\t\t\tsum += num \n\t\t\t\n\treturn sum\n\n# Driver code \nprint(sum_multiples(l)) \n# Output: 20"
    },
    {
        "instruction": "Create a GPT model to generate a Python program that carries out the following task",
        "input": "Find the sum of all the odd numbers in a list",
        "output": "def sumOdd(lst):\n    sum = 0\n    for ele in lst:\n        if ele%2 == 1:\n            sum+=ele\n    return sum",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a GPT model to generate a Python program that carries out the following task\n\n### Input:\nFind the sum of all the odd numbers in a list\n\n### Output:\ndef sumOdd(lst):\n    sum = 0\n    for ele in lst:\n        if ele%2 == 1:\n            sum+=ele\n    return sum"
    },
    {
        "instruction": "Write a python program to find the maximum value in the given list of numbers.",
        "input": "[-2, 6, 8, -10]",
        "output": "def find_max(nums):\n    max_val = nums[0]\n    for num in nums[1:]:\n        if num > max_val:\n            max_val = num\n    return max_val",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to find the maximum value in the given list of numbers.\n\n### Input:\n[-2, 6, 8, -10]\n\n### Output:\ndef find_max(nums):\n    max_val = nums[0]\n    for num in nums[1:]:\n        if num > max_val:\n            max_val = num\n    return max_val"
    },
    {
        "instruction": "Write a python script that extracts temperature data from a provided URL and prints the results.",
        "input": "https://www.wunderground.com/history/airport/KMYF/2017/12/20/DailyHistory.html?req_city=San+Diego&req_state=CA&req_statename=California",
        "output": "import requests\nimport bs4\n\nurl = 'https://www.wunderground.com/history/airport/KMYF/2017/12/20/DailyHistory.html?req_city=San+Diego&req_state=CA&req_statename=California'\nres = requests.get(url)\nsoup = bs4.BeautifulSoup(res.text, \"lxml\")\n\ntable = soup.find('table', { 'id': 'historyTable'})\n\ntemps = table.find_all('span', {'class': 'wx-value'})\n\nfor temp in temps:\n    print(temp.text)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script that extracts temperature data from a provided URL and prints the results.\n\n### Input:\nhttps://www.wunderground.com/history/airport/KMYF/2017/12/20/DailyHistory.html?req_city=San+Diego&req_state=CA&req_statename=California\n\n### Output:\nimport requests\nimport bs4\n\nurl = 'https://www.wunderground.com/history/airport/KMYF/2017/12/20/DailyHistory.html?req_city=San+Diego&req_state=CA&req_statename=California'\nres = requests.get(url)\nsoup = bs4.BeautifulSoup(res.text, \"lxml\")\n\ntable = soup.find('table', { 'id': 'historyTable'})\n\ntemps = table.find_all('span', {'class': 'wx-value'})\n\nfor temp in temps:\n    print(temp.text)"
    },
    {
        "instruction": "Develop a Python program to calculate the slope of a line using two given points",
        "input": "point1 = (1, 0) \npoint2 = (0, 1)",
        "output": "def slope(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n   \n    if x2 - x1 == 0:\n        return None\n    else:\n        return (y2 - y1) / (x2 - x1)\n\npoint1 = (1, 0)\npoint2 = (0, 1)\nslope = slope(point1, point2)\nprint(slope)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to calculate the slope of a line using two given points\n\n### Input:\npoint1 = (1, 0) \npoint2 = (0, 1)\n\n### Output:\ndef slope(point1, point2):\n    x1, y1 = point1\n    x2, y2 = point2\n   \n    if x2 - x1 == 0:\n        return None\n    else:\n        return (y2 - y1) / (x2 - x1)\n\npoint1 = (1, 0)\npoint2 = (0, 1)\nslope = slope(point1, point2)\nprint(slope)"
    },
    {
        "instruction": "Write a python loop to print all the numbers from 1 to 10.",
        "input": "",
        "output": "for i in range(1,11):\n    print(i)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python loop to print all the numbers from 1 to 10.\n\n### Input:\n\n\n### Output:\nfor i in range(1,11):\n    print(i)"
    },
    {
        "instruction": "Create a linear regression model in Python using Scikit-learn. The model should have single input variable and a single output variable and should be able to predict the output given the input.",
        "input": "Number of Hours [1000], Grade [78]",
        "output": "import numpy as np \nfrom sklearn.linear_model import LinearRegression \n\n# Input data\nX = np.array([1000]).reshape(-1, 1)\ny = np.array([78])\n\n# Creating the model\nmodel = LinearRegression().fit(X, y) \n\nprint(\"Predicted grade: \", model.predict([[1000]])[0]) # Output: 78.0",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a linear regression model in Python using Scikit-learn. The model should have single input variable and a single output variable and should be able to predict the output given the input.\n\n### Input:\nNumber of Hours [1000], Grade [78]\n\n### Output:\nimport numpy as np \nfrom sklearn.linear_model import LinearRegression \n\n# Input data\nX = np.array([1000]).reshape(-1, 1)\ny = np.array([78])\n\n# Creating the model\nmodel = LinearRegression().fit(X, y) \n\nprint(\"Predicted grade: \", model.predict([[1000]])[0]) # Output: 78.0"
    },
    {
        "instruction": "Construct a program in Python which reverses each word of a given sentence.",
        "input": "",
        "output": "# Function to reverse each word\ndef word_reverse(s) : \n    # Splitting each word\n    words = s.split() \n    rev_str = \"\" \n    for word in words: \n        # Reversing each word\n        rev_str += word[::-1] + \" \"\n    return rev_str",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program in Python which reverses each word of a given sentence.\n\n### Input:\n\n\n### Output:\n# Function to reverse each word\ndef word_reverse(s) : \n    # Splitting each word\n    words = s.split() \n    rev_str = \"\" \n    for word in words: \n        # Reversing each word\n        rev_str += word[::-1] + \" \"\n    return rev_str"
    },
    {
        "instruction": "Design an algorithm in Python that takes a list of meetings as input and produces a schedule that minimizes overall meeting duration.",
        "input": "list of meetings as a list of tuples [(start_time1, end_time1), (start_time2, end_time2), ...]\n\nExample: [(10,12), (11,13), (14,15)]",
        "output": "def minimize_meeting_duration(meetings):\n  # sort the meetings by start time\n  meetings.sort(key=lambda x: x[0])\n\n  # initialize cached_end_time as the end time of first meeting\n  cached_end_time = meetings[0][1]\n\n  # initialize the result\n  schedule = [meetings[0]]\n\n  # iterate through all the meetings\n  for m in meetings[1:]:\n    # if the current meeting starts after the cached_end_time\n    # then this meeting can be added to the schedule\n    if m[0] > cached_end_time:\n      schedule.append(m)\n      cached_end_time = m[1]\n\n  # return the result\n  return schedule",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that takes a list of meetings as input and produces a schedule that minimizes overall meeting duration.\n\n### Input:\nlist of meetings as a list of tuples [(start_time1, end_time1), (start_time2, end_time2), ...]\n\nExample: [(10,12), (11,13), (14,15)]\n\n### Output:\ndef minimize_meeting_duration(meetings):\n  # sort the meetings by start time\n  meetings.sort(key=lambda x: x[0])\n\n  # initialize cached_end_time as the end time of first meeting\n  cached_end_time = meetings[0][1]\n\n  # initialize the result\n  schedule = [meetings[0]]\n\n  # iterate through all the meetings\n  for m in meetings[1:]:\n    # if the current meeting starts after the cached_end_time\n    # then this meeting can be added to the schedule\n    if m[0] > cached_end_time:\n      schedule.append(m)\n      cached_end_time = m[1]\n\n  # return the result\n  return schedule"
    },
    {
        "instruction": "Create a web scraper using Python to extract data from a website.",
        "input": "https://www.example.com",
        "output": "# import library\nimport requests\nfrom bs4 import BeautifulSoup\n \n# create a variable with the target URL\nurl = \"https://www.example.com\"\n \n# use requests library to get website content\nr = requests.get(url) \n \n# parse html content\nsoup = BeautifulSoup(r.content, 'html.parser') \n \n# store all the data in a list\ndata_list = []\n \n# extract data\nfor div in soup.find_all('div'):\n    data = div.find_all('p')\n    for row in data:\n        data_list.append(row.text.strip())\n \n# print the data \nprint(data_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper using Python to extract data from a website.\n\n### Input:\nhttps://www.example.com\n\n### Output:\n# import library\nimport requests\nfrom bs4 import BeautifulSoup\n \n# create a variable with the target URL\nurl = \"https://www.example.com\"\n \n# use requests library to get website content\nr = requests.get(url) \n \n# parse html content\nsoup = BeautifulSoup(r.content, 'html.parser') \n \n# store all the data in a list\ndata_list = []\n \n# extract data\nfor div in soup.find_all('div'):\n    data = div.find_all('p')\n    for row in data:\n        data_list.append(row.text.strip())\n \n# print the data \nprint(data_list)"
    },
    {
        "instruction": "Create a program in Python that can count the frequency of each word in a text.",
        "input": "Text: The cat barked at the dog and ran away",
        "output": "def word_frequency(text):\n    # Create a dictionary to store word frequencies\n    freq = {}\n\n    # Split the text into words\n    words = text.split()\n\n    # Iterate through every word and add it to the dictionary\n    for word in words:\n        if word in freq:\n            freq[word] += 1\n        else:\n            freq[word] = 1\n\n    # Return the dictionary\n    return freq",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that can count the frequency of each word in a text.\n\n### Input:\nText: The cat barked at the dog and ran away\n\n### Output:\ndef word_frequency(text):\n    # Create a dictionary to store word frequencies\n    freq = {}\n\n    # Split the text into words\n    words = text.split()\n\n    # Iterate through every word and add it to the dictionary\n    for word in words:\n        if word in freq:\n            freq[word] += 1\n        else:\n            freq[word] = 1\n\n    # Return the dictionary\n    return freq"
    },
    {
        "instruction": "Create a predictive model in Python using an Artificial Neural Network to predict the price of a stock from the previous days closing prices.",
        "input": "Not applicable",
        "output": "import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Load data from CSV\ndf = pd.read_csv('data.csv')\n\n# Extract data\nX = df.iloc[:, 0:-1].values\ny = df.iloc[:, -1:].values\n\n# Build ANN model\nmodel = keras.Sequential()\nmodel.add(keras.layers.Dense(units = 4, activation = 'relu', input_dim = X.shape[1]))\nmodel.add(keras.layers.Dense(units = 4, activation = 'relu'))\nmodel.add(keras.layers.Dense(units = 1))\nmodel.compile(optimizer = 'Adam', loss = 'mean_squared_error')\n\n# Train the model\nmodel.fit(X, y, batch_size = 32, epochs = 100)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a predictive model in Python using an Artificial Neural Network to predict the price of a stock from the previous days closing prices.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Load data from CSV\ndf = pd.read_csv('data.csv')\n\n# Extract data\nX = df.iloc[:, 0:-1].values\ny = df.iloc[:, -1:].values\n\n# Build ANN model\nmodel = keras.Sequential()\nmodel.add(keras.layers.Dense(units = 4, activation = 'relu', input_dim = X.shape[1]))\nmodel.add(keras.layers.Dense(units = 4, activation = 'relu'))\nmodel.add(keras.layers.Dense(units = 1))\nmodel.compile(optimizer = 'Adam', loss = 'mean_squared_error')\n\n# Train the model\nmodel.fit(X, y, batch_size = 32, epochs = 100)"
    },
    {
        "instruction": "Write a python program to create an even number generator.",
        "input": "",
        "output": "def even_number_generator():\n    num = 0\n    while True:\n        if num % 2 == 0:\n            yield num\n        num += 1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to create an even number generator.\n\n### Input:\n\n\n### Output:\ndef even_number_generator():\n    num = 0\n    while True:\n        if num % 2 == 0:\n            yield num\n        num += 1"
    },
    {
        "instruction": "Write a Python program to parse the given HTML data and print out each HTML tag.",
        "input": "<html> \n <head> \n <title>Parse HTML</title> \n </head> \n <body> \n <h1>Header</h1> \n <p>This is a paragraph</p> \n <h2>Sub-header</h2> \n </body> \n  </html>",
        "output": "import re\n\n# Regex to match HTML tags\npattern = re.compile('<[^>]+>')\n\n# Input HTML data\nhtml = \"\"\"\n<html> \n <head> \n <title>Parse HTML</title> \n </head> \n <body> \n <h1>Header</h1> \n <p>This is a paragraph</p> \n <h2>Sub-header</h2> \n </body> \n  </html>\n\"\"\"\n\n# Match and print all HTML tags\nprint('HTML Tags:')\nfor tag in re.findall(pattern, html):\n  print(tag)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to parse the given HTML data and print out each HTML tag.\n\n### Input:\n<html> \n <head> \n <title>Parse HTML</title> \n </head> \n <body> \n <h1>Header</h1> \n <p>This is a paragraph</p> \n <h2>Sub-header</h2> \n </body> \n  </html>\n\n### Output:\nimport re\n\n# Regex to match HTML tags\npattern = re.compile('<[^>]+>')\n\n# Input HTML data\nhtml = \"\"\"\n<html> \n <head> \n <title>Parse HTML</title> \n </head> \n <body> \n <h1>Header</h1> \n <p>This is a paragraph</p> \n <h2>Sub-header</h2> \n </body> \n  </html>\n\"\"\"\n\n# Match and print all HTML tags\nprint('HTML Tags:')\nfor tag in re.findall(pattern, html):\n  print(tag)"
    },
    {
        "instruction": "Write a Python program to sort a given list of dictionaries by a specific key in the dictionary.",
        "input": "",
        "output": "def sort_dict_by_key(dict_list, key):\n    return sorted(dict_list, key=lambda k: k[key])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a given list of dictionaries by a specific key in the dictionary.\n\n### Input:\n\n\n### Output:\ndef sort_dict_by_key(dict_list, key):\n    return sorted(dict_list, key=lambda k: k[key])"
    },
    {
        "instruction": "Create a program in Python to generate a 12x12 multiplication table.",
        "input": "",
        "output": "# Function to print multiplication table\ndef print_multiplication_table(n):\n    # For loop to iterate multiplies from 1 to 12\n    for i in range(1,13):\n        print(f\"{n} * {i} = {n*i}\")\n \n# Iterate through the numbers from 1 to 12\nfor n in range(1,13):\n    # print the multiplication tables for each of the numbers from 1 to 12\n    print_multiplication_table(n)\n    print()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to generate a 12x12 multiplication table.\n\n### Input:\n\n\n### Output:\n# Function to print multiplication table\ndef print_multiplication_table(n):\n    # For loop to iterate multiplies from 1 to 12\n    for i in range(1,13):\n        print(f\"{n} * {i} = {n*i}\")\n \n# Iterate through the numbers from 1 to 12\nfor n in range(1,13):\n    # print the multiplication tables for each of the numbers from 1 to 12\n    print_multiplication_table(n)\n    print()"
    },
    {
        "instruction": "Create an API in Python using Flask with Basic Authentication that returns the current date and time.",
        "input": "Not applicable",
        "output": "from flask import Flask\nfrom flask_restplus import Api, Resource, reqparse\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\napp = Flask(name)\napi = Api(app)\nparser = reqparse.RequestParser()\n\n\n@api.route('/date-time')\nclass DateTime(Resource):\n    @api.doc(security='basicAuth')\n    def get(self):\n        if not api.user.verified:\n            api.abort(401)\n        else:\n            import datetime\n            return datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\nif name == 'main':\n app.run(debug=True)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API in Python using Flask with Basic Authentication that returns the current date and time.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask\nfrom flask_restplus import Api, Resource, reqparse\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\napp = Flask(name)\napi = Api(app)\nparser = reqparse.RequestParser()\n\n\n@api.route('/date-time')\nclass DateTime(Resource):\n    @api.doc(security='basicAuth')\n    def get(self):\n        if not api.user.verified:\n            api.abort(401)\n        else:\n            import datetime\n            return datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\nif name == 'main':\n app.run(debug=True)"
    },
    {
        "instruction": "Come up with a complex problem written in Python to be solved in a parallel fashion.",
        "input": "",
        "output": "import multiprocessing as mp\nfrom multiprocessing import Pool\n\n# Main function to process data\ndef process_data(data):\n    # Perform complex processing on data\n    processed_data = complex_processing(data)\n    return process_data \n\n# Function to be called in parallel\ndef parallel_fn(data):\n    # Split data\n    data_slice = np.array_split(data, num_procs)\n    # Define a pool of process\n    pool = Pool(processes=num_procs)\n    # Execute process_data in parallel\n    processed_data = pool.map(process_data, data_slice)\n    # Join list of results\n    results = np.concatenate(processed_data)\n    # Close the pool\n    pool.close()\n    # Return results\n    return results",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a complex problem written in Python to be solved in a parallel fashion.\n\n### Input:\n\n\n### Output:\nimport multiprocessing as mp\nfrom multiprocessing import Pool\n\n# Main function to process data\ndef process_data(data):\n    # Perform complex processing on data\n    processed_data = complex_processing(data)\n    return process_data \n\n# Function to be called in parallel\ndef parallel_fn(data):\n    # Split data\n    data_slice = np.array_split(data, num_procs)\n    # Define a pool of process\n    pool = Pool(processes=num_procs)\n    # Execute process_data in parallel\n    processed_data = pool.map(process_data, data_slice)\n    # Join list of results\n    results = np.concatenate(processed_data)\n    # Close the pool\n    pool.close()\n    # Return results\n    return results"
    },
    {
        "instruction": "Write a Python program to build a simple calculator. The calculator should be able to take two inputs and add, subtract, multiply, or divide them.",
        "input": "Not applicable",
        "output": "def calculate(x,y,op):\n if op == \"+\":\n  return x+y\n elif op == \"-\":\n  return x-y\n elif op == \"*\":\n  return x*y\n elif op == \"/\":\n  return x/y\n else:\n  return \"Invalid operator\"\n\n# Function call\nprint(calculate(4,8,\"*\"))\n# Output: 32",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to build a simple calculator. The calculator should be able to take two inputs and add, subtract, multiply, or divide them.\n\n### Input:\nNot applicable\n\n### Output:\ndef calculate(x,y,op):\n if op == \"+\":\n  return x+y\n elif op == \"-\":\n  return x-y\n elif op == \"*\":\n  return x*y\n elif op == \"/\":\n  return x/y\n else:\n  return \"Invalid operator\"\n\n# Function call\nprint(calculate(4,8,\"*\"))\n# Output: 32"
    },
    {
        "instruction": "Write a class in Python that processes a given String?",
        "input": "",
        "output": "class StringProcessor:\n    def __init__(self, s):\n        self.string = s\n        self.num_words = len(s.split())\n        self.uppercase = s.upper()\n        \n    def reverse_string(self):\n        return self.string[::-1]\n        \n    def remove_whitespace(self):\n        return self.string.replace(' ', '')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a class in Python that processes a given String?\n\n### Input:\n\n\n### Output:\nclass StringProcessor:\n    def __init__(self, s):\n        self.string = s\n        self.num_words = len(s.split())\n        self.uppercase = s.upper()\n        \n    def reverse_string(self):\n        return self.string[::-1]\n        \n    def remove_whitespace(self):\n        return self.string.replace(' ', '')"
    },
    {
        "instruction": "Write a Python program to check if an array contains a particular value.",
        "input": "Example array: [2, 3, 7, 8], Check for number: 7",
        "output": "def check_value(arr, val):\n\tfor i in arr:\n\t\tif i == val:\n\t\t\treturn True \n\treturn False \n\narr = [2, 3, 7, 8]\nval = 7\n\nif(check_value(arr, val)):\n\tprint(\"Array contains number \" + str(val))\nelse:\n\tprint(\"Array does not contain number \" + str(val))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to check if an array contains a particular value.\n\n### Input:\nExample array: [2, 3, 7, 8], Check for number: 7\n\n### Output:\ndef check_value(arr, val):\n\tfor i in arr:\n\t\tif i == val:\n\t\t\treturn True \n\treturn False \n\narr = [2, 3, 7, 8]\nval = 7\n\nif(check_value(arr, val)):\n\tprint(\"Array contains number \" + str(val))\nelse:\n\tprint(\"Array does not contain number \" + str(val))"
    },
    {
        "instruction": "Create a Python program to scrape data from a web page given an URL.",
        "input": "",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_webpage(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    return soup",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to scrape data from a web page given an URL.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef scrape_webpage(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    return soup"
    },
    {
        "instruction": "Create a Python program to add multiple items to a key-value list",
        "input": "",
        "output": "def add_multiple_items(data, key, items):\n  data[key] = items\n  \n  return data",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to add multiple items to a key-value list\n\n### Input:\n\n\n### Output:\ndef add_multiple_items(data, key, items):\n  data[key] = items\n  \n  return data"
    },
    {
        "instruction": "Design a Python class to represent a 3D vector (x, y, z).",
        "input": "",
        "output": "class Vector3:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n        \n    def __str__(self):\n        return \"x = {}, y = {}, z = {}\".format(self.x, self.y, self.z)\n        \n    def __add__(self, vector): \n        x = self.x + vector.x \n        y = self.y + vector.y \n        z = self.z + vector.z\n        return Vector3(x, y, z)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class to represent a 3D vector (x, y, z).\n\n### Input:\n\n\n### Output:\nclass Vector3:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n        \n    def __str__(self):\n        return \"x = {}, y = {}, z = {}\".format(self.x, self.y, self.z)\n        \n    def __add__(self, vector): \n        x = self.x + vector.x \n        y = self.y + vector.y \n        z = self.z + vector.z\n        return Vector3(x, y, z)"
    },
    {
        "instruction": "Modify the following Python function to get the first index of the keyword within the string.",
        "input": "def first_index(str, keyword):\n    for i in range(len(str)):\n        if str[i] == keyword:\n            return i",
        "output": "def first_index(str, keyword):\n    for i in range(len(str)):\n        if str[i] == keyword:\n            return i\n    return -1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following Python function to get the first index of the keyword within the string.\n\n### Input:\ndef first_index(str, keyword):\n    for i in range(len(str)):\n        if str[i] == keyword:\n            return i\n\n### Output:\ndef first_index(str, keyword):\n    for i in range(len(str)):\n        if str[i] == keyword:\n            return i\n    return -1"
    },
    {
        "instruction": "Given an array of integers, write a Python function to find the index of the largest element in that array.",
        "input": "nums = [10, 50, 20, 7, 55]",
        "output": "def find_largest_element_index(nums):\n        largest = nums[0]\n        largest_element_index = 0\n        for i in range(0, len(nums)):\n            if nums[i] > largest:\n                largest = nums[i]\n                largest_element_index = i\n        return largest_element_index",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of integers, write a Python function to find the index of the largest element in that array.\n\n### Input:\nnums = [10, 50, 20, 7, 55]\n\n### Output:\ndef find_largest_element_index(nums):\n        largest = nums[0]\n        largest_element_index = 0\n        for i in range(0, len(nums)):\n            if nums[i] > largest:\n                largest = nums[i]\n                largest_element_index = i\n        return largest_element_index"
    },
    {
        "instruction": "Develop a python program to calculate the average score of a student over the course of a semester.",
        "input": "[10,8,9,6,7]",
        "output": "def avg_score(scores):\n    \"\"\"\n    Calculate the average score of a student over the course of a semester\n    \"\"\"\n \n    avg = 0\n    for score in scores:\n        avg += score\n    return round(avg/len(scores),2)\n    \nif __name__ == '__main__':\n    scores = [10,8,9,6,7]\n    print(avg_score(scores))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python program to calculate the average score of a student over the course of a semester.\n\n### Input:\n[10,8,9,6,7]\n\n### Output:\ndef avg_score(scores):\n    \"\"\"\n    Calculate the average score of a student over the course of a semester\n    \"\"\"\n \n    avg = 0\n    for score in scores:\n        avg += score\n    return round(avg/len(scores),2)\n    \nif __name__ == '__main__':\n    scores = [10,8,9,6,7]\n    print(avg_score(scores))"
    },
    {
        "instruction": "Use Python to create a list of numbers from 1 to 10 and print the list.",
        "input": "",
        "output": "my_list = list(range(1, 11))\nprint(my_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse Python to create a list of numbers from 1 to 10 and print the list.\n\n### Input:\n\n\n### Output:\nmy_list = list(range(1, 11))\nprint(my_list)"
    },
    {
        "instruction": "Create a program in Python that visualizes the data given.",
        "input": "DataSet = [\n    [1,2,3,4,5],\n    [6,7,8,9,10],\n    [11,12,13,14,15]\n]",
        "output": "import matplotlib.pyplot as plt\n\ndata_set = [\n    [1,2,3,4,5],\n    [6,7,8,9,10],\n    [11,12,13,14,15]\n]\n\nfig, ax = plt.subplots()\nax.plot(data_set)\nax.legend([\"Group 1\", \"Group 2\", \"Group 3\"])\nplt.show()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that visualizes the data given.\n\n### Input:\nDataSet = [\n    [1,2,3,4,5],\n    [6,7,8,9,10],\n    [11,12,13,14,15]\n]\n\n### Output:\nimport matplotlib.pyplot as plt\n\ndata_set = [\n    [1,2,3,4,5],\n    [6,7,8,9,10],\n    [11,12,13,14,15]\n]\n\nfig, ax = plt.subplots()\nax.plot(data_set)\nax.legend([\"Group 1\", \"Group 2\", \"Group 3\"])\nplt.show()"
    },
    {
        "instruction": "Write a Python script to generate all the possible words for a given set of characters.",
        "input": "\"abc\"",
        "output": "import itertools\n\ncharacters = 'abc'\nwords = [''.join(word) for word in itertools.product(characters, repeat=3)]\n\nprint (words)\n\n# output: ['aaa', 'aab', 'aac', 'aba', 'abb', 'abc', 'aca', 'acb', 'acc', 'baa', 'bab', 'bac', 'bba', 'bbb', 'bbc', 'bca', 'bcb', 'bcc', 'caa', 'cab', 'cac', 'cba', 'cbb', 'cbc', 'cca', 'ccb', 'ccc']",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate all the possible words for a given set of characters.\n\n### Input:\n\"abc\"\n\n### Output:\nimport itertools\n\ncharacters = 'abc'\nwords = [''.join(word) for word in itertools.product(characters, repeat=3)]\n\nprint (words)\n\n# output: ['aaa', 'aab', 'aac', 'aba', 'abb', 'abc', 'aca', 'acb', 'acc', 'baa', 'bab', 'bac', 'bba', 'bbb', 'bbc', 'bca', 'bcb', 'bcc', 'caa', 'cab', 'cac', 'cba', 'cbb', 'cbc', 'cca', 'ccb', 'ccc']"
    },
    {
        "instruction": "Use natural language processing to create a sentiment analysis model in Python using the NLTK library.",
        "input": "Not applicable",
        "output": "import nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n# Initializing the sentiment analyser\nsia = SentimentIntensityAnalyzer()\n\n# Defining the sentiment analysis function\ndef sentiment_analyzer(text):\n    score = sia.polarity_scores(text)\n    neg = score['neg']\n    pos = score['pos']\n    if pos > neg:\n        print('Positive sentiment')\n    elif pos < neg:\n        print('Negative sentiment')\n    else:\n        print('Neutral sentiment')\n\n# Testing the sentiment analysis function\nsentiment_analyzer(\"That movie was great!\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse natural language processing to create a sentiment analysis model in Python using the NLTK library.\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n# Initializing the sentiment analyser\nsia = SentimentIntensityAnalyzer()\n\n# Defining the sentiment analysis function\ndef sentiment_analyzer(text):\n    score = sia.polarity_scores(text)\n    neg = score['neg']\n    pos = score['pos']\n    if pos > neg:\n        print('Positive sentiment')\n    elif pos < neg:\n        print('Negative sentiment')\n    else:\n        print('Neutral sentiment')\n\n# Testing the sentiment analysis function\nsentiment_analyzer(\"That movie was great!\")"
    },
    {
        "instruction": "Suggest a completion for the following method to reverse an array in python",
        "input": "arr = [1, 2, 3, 4, 5]\ndef reverse_array(arr):\n    for",
        "output": "def reverse_array(arr):\n    for i in range(len(arr)//2):\n        arr[i], arr[len(arr)-i-1] = arr[len(arr)-i-1], arr[i]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a completion for the following method to reverse an array in python\n\n### Input:\narr = [1, 2, 3, 4, 5]\ndef reverse_array(arr):\n    for\n\n### Output:\ndef reverse_array(arr):\n    for i in range(len(arr)//2):\n        arr[i], arr[len(arr)-i-1] = arr[len(arr)-i-1], arr[i]"
    },
    {
        "instruction": "Write a code to fetch the contents of a website using Python",
        "input": "",
        "output": "# Import the necessary packages \nimport requests \n  \n# Make an API call and store the response \nurl = 'https://example.com/'\nr = requests.get(url) \n  \n# Extract the content of the response \nhtml_content = r.content \n  \n# Print the response \nprint(html_content)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to fetch the contents of a website using Python\n\n### Input:\n\n\n### Output:\n# Import the necessary packages \nimport requests \n  \n# Make an API call and store the response \nurl = 'https://example.com/'\nr = requests.get(url) \n  \n# Extract the content of the response \nhtml_content = r.content \n  \n# Print the response \nprint(html_content)"
    },
    {
        "instruction": "Create a Python class named User, which should contain three attributes username, password and email.",
        "input": "",
        "output": "class User:\n    def __init__(self, username, password, email):\n        self.username = username\n        self.password = password\n        self.email = email",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class named User, which should contain three attributes username, password and email.\n\n### Input:\n\n\n### Output:\nclass User:\n    def __init__(self, username, password, email):\n        self.username = username\n        self.password = password\n        self.email = email"
    },
    {
        "instruction": "Write a Python class to represent a Dog with the following attributes: breed, weight and age.",
        "input": "",
        "output": "class Dog:\n  # Initialize the attributes \n  def __init__(self, breed='', weight=0, age=0):\n    self.breed = breed\n    self.weight = weight\n    self.age = age\n    \n  # Print the object values\n  def __str__(self):\n    return f\"{self.breed}, {self.weight}, {self.age}\"\n\n# Creating a new object\nmy_dog = Dog(\"Labrador\", 30, 5)\nprint(my_dog)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class to represent a Dog with the following attributes: breed, weight and age.\n\n### Input:\n\n\n### Output:\nclass Dog:\n  # Initialize the attributes \n  def __init__(self, breed='', weight=0, age=0):\n    self.breed = breed\n    self.weight = weight\n    self.age = age\n    \n  # Print the object values\n  def __str__(self):\n    return f\"{self.breed}, {self.weight}, {self.age}\"\n\n# Creating a new object\nmy_dog = Dog(\"Labrador\", 30, 5)\nprint(my_dog)"
    },
    {
        "instruction": "Write a python program to sort a list of dictionaries based on a particular key.",
        "input": "list_of_dicts = [{'name': 'Ajay', 'age': 15}, \n                 {'name': 'Bhavna', 'age': 10}, \n                 {'name': 'Cathy', 'age': 12}]",
        "output": "def sort_list_of_dicts(list_of_dicts, key):\n    sorted_list = sorted(list_of_dicts, key=lambda i: i[key])\n    return sorted_list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to sort a list of dictionaries based on a particular key.\n\n### Input:\nlist_of_dicts = [{'name': 'Ajay', 'age': 15}, \n                 {'name': 'Bhavna', 'age': 10}, \n                 {'name': 'Cathy', 'age': 12}]\n\n### Output:\ndef sort_list_of_dicts(list_of_dicts, key):\n    sorted_list = sorted(list_of_dicts, key=lambda i: i[key])\n    return sorted_list"
    },
    {
        "instruction": "Write a Python program to convert a list into a dictionary.",
        "input": "[1, 2, 3, 4]",
        "output": "input_list = [1, 2, 3, 4]\noutput_dict = {}\n\nfor item in input_list:\n  output_dict[item] = None\n\nprint(output_dict)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a list into a dictionary.\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\ninput_list = [1, 2, 3, 4]\noutput_dict = {}\n\nfor item in input_list:\n  output_dict[item] = None\n\nprint(output_dict)"
    },
    {
        "instruction": "How can you reduce the complexity of the following Python code?",
        "input": "def find_duplicates(data):\n    duplicates = []\n\n    for index in range(len(data)):\n        for j in range(index + 1, len(data)):\n            if data[index] == data[j]:\n                duplicates.append(data[index])\n    return duplicates",
        "output": "def find_duplicates(data):\n    seen = set()\n    duplicates = []\n    \n    for item in data:\n        if item not in seen:\n            seen.add(item)\n        else:\n            duplicates.append(item)\n    return duplicates",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow can you reduce the complexity of the following Python code?\n\n### Input:\ndef find_duplicates(data):\n    duplicates = []\n\n    for index in range(len(data)):\n        for j in range(index + 1, len(data)):\n            if data[index] == data[j]:\n                duplicates.append(data[index])\n    return duplicates\n\n### Output:\ndef find_duplicates(data):\n    seen = set()\n    duplicates = []\n    \n    for item in data:\n        if item not in seen:\n            seen.add(item)\n        else:\n            duplicates.append(item)\n    return duplicates"
    },
    {
        "instruction": "Develop a python program to filter a provided array of strings and return only those strings that are longer than 3 characters.",
        "input": "['Cat', 'Dog', 'Bird', 'Fish', 'Turtle']",
        "output": "def filter_long_words(words):\n filtered_words = []\n \n for word in words:\n  if len(word) > 3:\n   filtered_words.append(word)\n   \n return filtered_words\n \nwords = ['Cat', 'Dog', 'Bird', 'Fish', 'Turtle']\nlong_words = filter_long_words(words)\n \nprint(long_words) # Output: ['Bird', 'Fish', 'Turtle']",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python program to filter a provided array of strings and return only those strings that are longer than 3 characters.\n\n### Input:\n['Cat', 'Dog', 'Bird', 'Fish', 'Turtle']\n\n### Output:\ndef filter_long_words(words):\n filtered_words = []\n \n for word in words:\n  if len(word) > 3:\n   filtered_words.append(word)\n   \n return filtered_words\n \nwords = ['Cat', 'Dog', 'Bird', 'Fish', 'Turtle']\nlong_words = filter_long_words(words)\n \nprint(long_words) # Output: ['Bird', 'Fish', 'Turtle']"
    },
    {
        "instruction": "Rewrite the following code in Python to sort a given array of integers in ascending order.\nint arr[] = {2, 3, 4, 1, 5};",
        "input": "",
        "output": "def bubble_sort(arr): \n    n = len(arr) \n    for i in range(n-1):\n        for j in range(0, n-i-1):  \n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\narr = [2, 3, 4, 1, 5]\narr = bubble_sort(arr)\nprint(arr)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following code in Python to sort a given array of integers in ascending order.\nint arr[] = {2, 3, 4, 1, 5};\n\n### Input:\n\n\n### Output:\ndef bubble_sort(arr): \n    n = len(arr) \n    for i in range(n-1):\n        for j in range(0, n-i-1):  \n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\narr = [2, 3, 4, 1, 5]\narr = bubble_sort(arr)\nprint(arr)"
    },
    {
        "instruction": "Write a Python program to generate recurrence equation for a given sequence and initial condition.",
        "input": "[2, 4, 6, 8], 2",
        "output": "def generate_recurrence(sequence, initial_condition): \n if len(sequence) <= 1: \n return initial_condition \n \n a_i = sequence[-1] \n a_i_1 = sequence[-2] \n recurrence = a_i + initial_condition - a_i_1 \n return recurrence\n\nresult = generate_recurrence([2, 4, 6, 8], 2)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate recurrence equation for a given sequence and initial condition.\n\n### Input:\n[2, 4, 6, 8], 2\n\n### Output:\ndef generate_recurrence(sequence, initial_condition): \n if len(sequence) <= 1: \n return initial_condition \n \n a_i = sequence[-1] \n a_i_1 = sequence[-2] \n recurrence = a_i + initial_condition - a_i_1 \n return recurrence\n\nresult = generate_recurrence([2, 4, 6, 8], 2)\nprint(result)"
    },
    {
        "instruction": "Write a Python script that takes a list as an argument and prints each element of the list in a new line.",
        "input": "[1, 2, 3, 4]",
        "output": "for item in [1, 2, 3, 4]:\n    print(item)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that takes a list as an argument and prints each element of the list in a new line.\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\nfor item in [1, 2, 3, 4]:\n    print(item)"
    },
    {
        "instruction": "Write a Python program to multiply two given lists containing integers of the same size.",
        "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]",
        "output": "# Create a new list with the elements of both lists \nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n# Multipliy each element of 2 lists and store in the 3rd list \nlist3 = [] \nfor x, y in zip(list1, list2): \n    list3.append(x*y) \n\n# Print the result \nprint(list3)\n\n# Output \n[4, 10, 18]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to multiply two given lists containing integers of the same size.\n\n### Input:\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n### Output:\n# Create a new list with the elements of both lists \nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n# Multipliy each element of 2 lists and store in the 3rd list \nlist3 = [] \nfor x, y in zip(list1, list2): \n    list3.append(x*y) \n\n# Print the result \nprint(list3)\n\n# Output \n[4, 10, 18]"
    },
    {
        "instruction": "Write a Python program for finding the maximum of 3 numbers.",
        "input": "4, 7, 6",
        "output": "def max_of_three(a, b, c):\n  if (a > b) and (a > c):\n    greatest = a\n  elif (b > a) and (b > c):\n    greatest = b\n  else:\n    greatest = c\n  return greatest\n\nprint(\"Max is: \", max_of_three(4, 7, 6))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program for finding the maximum of 3 numbers.\n\n### Input:\n4, 7, 6\n\n### Output:\ndef max_of_three(a, b, c):\n  if (a > b) and (a > c):\n    greatest = a\n  elif (b > a) and (b > c):\n    greatest = b\n  else:\n    greatest = c\n  return greatest\n\nprint(\"Max is: \", max_of_three(4, 7, 6))"
    },
    {
        "instruction": "Design an algorithm in Python which performs clustering by taking two features from a dataset as inputs.",
        "input": "A pandas Dataframe containing features 'age' and 'height'",
        "output": "from sklearn import cluster\nimport pandas as pd\n\ndf = pd.read_csv('example.csv')\nX = df[['age', 'height']]\n\n# Create a k-means clustering model using 2 clusters\nkmeans = cluster.KMeans(n_clusters=2)\n# Fit the model with the data\nkmeans.fit(X)\n# Get the labels of the clusters\nlabels = kmeans.labels_\n# Print the clusters\nfor i in range(2):\n    print('Cluster {}:'.format(i))\n    print(df[labels==i])\n    print()\n# Visualize the clusters\nplt.scatter(df['age'], df['height'], c=labels)\nplt.show()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python which performs clustering by taking two features from a dataset as inputs.\n\n### Input:\nA pandas Dataframe containing features 'age' and 'height'\n\n### Output:\nfrom sklearn import cluster\nimport pandas as pd\n\ndf = pd.read_csv('example.csv')\nX = df[['age', 'height']]\n\n# Create a k-means clustering model using 2 clusters\nkmeans = cluster.KMeans(n_clusters=2)\n# Fit the model with the data\nkmeans.fit(X)\n# Get the labels of the clusters\nlabels = kmeans.labels_\n# Print the clusters\nfor i in range(2):\n    print('Cluster {}:'.format(i))\n    print(df[labels==i])\n    print()\n# Visualize the clusters\nplt.scatter(df['age'], df['height'], c=labels)\nplt.show()"
    },
    {
        "instruction": "Design a python program to find the maximum value of an array.",
        "input": "[2, 4, 7, 6]",
        "output": "def maxVal(arr):\n    maxVal = -float(\"inf\")\n    for num in arr:\n        if num > maxVal:\n            maxVal = num\n    return maxVal\n\nmaxVal([2, 4, 7, 6]) #returns 7",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program to find the maximum value of an array.\n\n### Input:\n[2, 4, 7, 6]\n\n### Output:\ndef maxVal(arr):\n    maxVal = -float(\"inf\")\n    for num in arr:\n        if num > maxVal:\n            maxVal = num\n    return maxVal\n\nmaxVal([2, 4, 7, 6]) #returns 7"
    },
    {
        "instruction": "Create a class in Python 3 which describes a rectangle in a two-dimensional plane.",
        "input": "",
        "output": "class Rectangle:\n    \n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n        \n    def get_area(self):\n        return self.length * self.width\n    \n    def get_perimeter(self):\n        return 2*(self.length + self.width)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python 3 which describes a rectangle in a two-dimensional plane.\n\n### Input:\n\n\n### Output:\nclass Rectangle:\n    \n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n        \n    def get_area(self):\n        return self.length * self.width\n    \n    def get_perimeter(self):\n        return 2*(self.length + self.width)"
    },
    {
        "instruction": "Design an algorithm using Python to select the kth largest element from a list.",
        "input": "[5, 10, 15, 20, 25]",
        "output": "def getKthLargest(arr, k): \n    arr.sort() \n  \n    # Return the k'th largest element\n    return arr[len(arr)-k]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm using Python to select the kth largest element from a list.\n\n### Input:\n[5, 10, 15, 20, 25]\n\n### Output:\ndef getKthLargest(arr, k): \n    arr.sort() \n  \n    # Return the k'th largest element\n    return arr[len(arr)-k]"
    },
    {
        "instruction": "Design a basic chatbot in Python, using the NLTK library for natural language processing.",
        "input": "Not applicable",
        "output": "import nltk\nimport re\n\n# define a function to tokenize words\ndef tokenize_words(words):\n tokens = nltk.word_tokenize(words)\n return tokens\n\n# define a function to remove special characters\ndef remove_special_characters(text):\n tokens = tokenize_words(text)\n pattern = re.compile('[{}]'.format(re.escape(',.!?@#$%^&*()')))\n filtered_tokens = filter(None, [pattern.sub('', token) for token in tokens])\n return ' '.join(filtered_tokens)\n\n# define a function to create a chat response\ndef generate_response(user_input):\n response = ''\n # preprocess the user input\n user_input = remove_special_characters(user_input.lower())\n \n # code for your bot goes here\n \n return response",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a basic chatbot in Python, using the NLTK library for natural language processing.\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk\nimport re\n\n# define a function to tokenize words\ndef tokenize_words(words):\n tokens = nltk.word_tokenize(words)\n return tokens\n\n# define a function to remove special characters\ndef remove_special_characters(text):\n tokens = tokenize_words(text)\n pattern = re.compile('[{}]'.format(re.escape(',.!?@#$%^&*()')))\n filtered_tokens = filter(None, [pattern.sub('', token) for token in tokens])\n return ' '.join(filtered_tokens)\n\n# define a function to create a chat response\ndef generate_response(user_input):\n response = ''\n # preprocess the user input\n user_input = remove_special_characters(user_input.lower())\n \n # code for your bot goes here\n \n return response"
    },
    {
        "instruction": "Create a basic search engine in Python using a TF-IDF algorithm. The search engine should take a query and a set of documents as input and return the document most relevant to the query.",
        "input": "Query: \"running shoes\"\nDocuments:\nDocument 1: \"New running shoes perfect for running\"\nDocument 2: \"The best fitting shoes for running\"\nDocument 3: \"Running is a great way to exercise\"",
        "output": "from sklearn.feature_extraction.text import TfidfVectorizer\n\n# documents to be indexed\ndocuments = ['New running shoes perfect for running',\n 'The best fitting shoes for running',\n 'Running is a great way to exercise']\n\n# query\nquery = 'running shoes'\n\n# vectorizer object\nvectorizer = TfidfVectorizer()\n\n# transform documents\nX = vectorizer.fit_transform(documents)\n\n# query vector\nquery_vector = vectorizer.transform([query])\n\n# compute similarity score between query and documents\nscores = np.dot(query_vector, X.T).toarray()\n\n# get most relevant document\nrelevant_document = documents[np.argmax(scores)]\n\nprint(relevant_document)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic search engine in Python using a TF-IDF algorithm. The search engine should take a query and a set of documents as input and return the document most relevant to the query.\n\n### Input:\nQuery: \"running shoes\"\nDocuments:\nDocument 1: \"New running shoes perfect for running\"\nDocument 2: \"The best fitting shoes for running\"\nDocument 3: \"Running is a great way to exercise\"\n\n### Output:\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# documents to be indexed\ndocuments = ['New running shoes perfect for running',\n 'The best fitting shoes for running',\n 'Running is a great way to exercise']\n\n# query\nquery = 'running shoes'\n\n# vectorizer object\nvectorizer = TfidfVectorizer()\n\n# transform documents\nX = vectorizer.fit_transform(documents)\n\n# query vector\nquery_vector = vectorizer.transform([query])\n\n# compute similarity score between query and documents\nscores = np.dot(query_vector, X.T).toarray()\n\n# get most relevant document\nrelevant_document = documents[np.argmax(scores)]\n\nprint(relevant_document)"
    },
    {
        "instruction": "Create a Python function to break a string into its component words.",
        "input": "",
        "output": "def break_string(string):\n string = string.lower()\n words = string.split(\" \")\n return words",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to break a string into its component words.\n\n### Input:\n\n\n### Output:\ndef break_string(string):\n string = string.lower()\n words = string.split(\" \")\n return words"
    },
    {
        "instruction": "Create a Python list comprehension to generate a list of the squares of first five positive integers",
        "input": "",
        "output": "lst=[x**2 for x in range(1,6)]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python list comprehension to generate a list of the squares of first five positive integers\n\n### Input:\n\n\n### Output:\nlst=[x**2 for x in range(1,6)]"
    },
    {
        "instruction": "Create a program to filter out words containing more than 5 characters in Python.",
        "input": "Not applicable",
        "output": "def filter_words(words):\n filtered_words = []\n for word in words:\n if len(word)<=5:\n filtered_words.append(word)\n return filtered_words\n\nwords = [\"hello\", \"world\", \"computer\"]\nprint(filter_words(words))\n# Output: ['hello', 'world']",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to filter out words containing more than 5 characters in Python.\n\n### Input:\nNot applicable\n\n### Output:\ndef filter_words(words):\n filtered_words = []\n for word in words:\n if len(word)<=5:\n filtered_words.append(word)\n return filtered_words\n\nwords = [\"hello\", \"world\", \"computer\"]\nprint(filter_words(words))\n# Output: ['hello', 'world']"
    },
    {
        "instruction": "Produce a Huffman tree visualisation in Python.",
        "input": "symbols = ['A', 'B', 'C', 'D', 'E', 'F']\nfrequences = [45, 13, 12, 16, 9, 5]",
        "output": "from collections import Counter\nimport pydot\nfrom collections import defaultdict \nfrom HuffmanTree import HuffmanTree\n\n# create a Huffman tree\nsymbols = ['A', 'B', 'C', 'D', 'E', 'F']\nfrequences = [45, 13, 12, 16, 9, 5]\nfrequency = Counter(zip(symbols, frequencies))\nht = HuffmanTree(frequency)\n\n# draw the tree\nnodes = defaultdict(list)\nedges = []\nfor node in ht:\n    label =  '%s\\n%s' % (node.character, node.frequency)\n    nodes[node.parent].append((node.identifier, label))\n    edges.append((node.parent, node.identifier))\n\ng = pydot.Dot(graph_type='graph')\nfor k, v in nodes.items():\n    for i, j in v:\n        n = pydot.Node(i, label=j)\n        g.add_node(n)\nfor e in edges:\n    g.add_edge(pydot.Edge(e[0], e[1]))\ng.write_png('HuffmanTree.png')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a Huffman tree visualisation in Python.\n\n### Input:\nsymbols = ['A', 'B', 'C', 'D', 'E', 'F']\nfrequences = [45, 13, 12, 16, 9, 5]\n\n### Output:\nfrom collections import Counter\nimport pydot\nfrom collections import defaultdict \nfrom HuffmanTree import HuffmanTree\n\n# create a Huffman tree\nsymbols = ['A', 'B', 'C', 'D', 'E', 'F']\nfrequences = [45, 13, 12, 16, 9, 5]\nfrequency = Counter(zip(symbols, frequencies))\nht = HuffmanTree(frequency)\n\n# draw the tree\nnodes = defaultdict(list)\nedges = []\nfor node in ht:\n    label =  '%s\\n%s' % (node.character, node.frequency)\n    nodes[node.parent].append((node.identifier, label))\n    edges.append((node.parent, node.identifier))\n\ng = pydot.Dot(graph_type='graph')\nfor k, v in nodes.items():\n    for i, j in v:\n        n = pydot.Node(i, label=j)\n        g.add_node(n)\nfor e in edges:\n    g.add_edge(pydot.Edge(e[0], e[1]))\ng.write_png('HuffmanTree.png')"
    },
    {
        "instruction": "Create a Python script that takes a list of numbers as an input, sorts the list using insertion sort, and returns the sorted list.",
        "input": "nums = [5, 3, 4, 6, 1, 2]",
        "output": "def insertion_sort(nums):\n for i in range(len(nums)):\n current_num = nums[i]\n position = i\n\n while position > 0 and nums[position - 1] > current_num:\n nums[position] = nums[position - 1]\n position -= 1\n\n nums[position] = current_num\n\n return nums\n\nnums = [5, 3, 4, 6, 1, 2]\nprint(insertion_sort(nums))\n# Output: [1, 2, 3, 4, 5, 6]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that takes a list of numbers as an input, sorts the list using insertion sort, and returns the sorted list.\n\n### Input:\nnums = [5, 3, 4, 6, 1, 2]\n\n### Output:\ndef insertion_sort(nums):\n for i in range(len(nums)):\n current_num = nums[i]\n position = i\n\n while position > 0 and nums[position - 1] > current_num:\n nums[position] = nums[position - 1]\n position -= 1\n\n nums[position] = current_num\n\n return nums\n\nnums = [5, 3, 4, 6, 1, 2]\nprint(insertion_sort(nums))\n# Output: [1, 2, 3, 4, 5, 6]"
    },
    {
        "instruction": "Generate a Python script to find the maximum and minimum element of a given list.",
        "input": "[23, 12, 56, 72, 9, 10]",
        "output": "def max_min(list):  \n    max_element = 0\n    min_element = list[0] \n     \n    for num in list:\n        if num > max_element: \n            max_element = num \n        if num < min_element:\n            min_element = num \n     \n    print(\"Max element is: \" + str(max_element)) \n    print(\"Min element is: \" + str(min_element)) \n     \n#test list \nlist = [23, 12, 56, 72, 9, 10]\nmax_min(list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to find the maximum and minimum element of a given list.\n\n### Input:\n[23, 12, 56, 72, 9, 10]\n\n### Output:\ndef max_min(list):  \n    max_element = 0\n    min_element = list[0] \n     \n    for num in list:\n        if num > max_element: \n            max_element = num \n        if num < min_element:\n            min_element = num \n     \n    print(\"Max element is: \" + str(max_element)) \n    print(\"Min element is: \" + str(min_element)) \n     \n#test list \nlist = [23, 12, 56, 72, 9, 10]\nmax_min(list)"
    },
    {
        "instruction": "Write a Python script that extracts information from a JSON object.",
        "input": "{\n   \"name\": \"John Doe\",\n   \"age\": 23,\n   \"address\": {\n      \"street\": \"123 Main Street\",\n      \"city\": \"Berkeley\",\n      \"state\": \"CA\"\n   }\n}",
        "output": "import json\n\ndata = json.loads('''\n{\n   \"name\": \"John Doe\",\n   \"age\": 23,\n   \"address\": {\n      \"street\": \"123 Main Street\",\n      \"city\": \"Berkeley\",\n      \"state\": \"CA\"\n   }\n}\n''')\n\nname = data['name']\nage = data['age']\nstreet = data['address']['street']\ncity = data['address']['city']\nstate = data['address']['state']\n\nprint(name)\nprint(age)\nprint(street)\nprint(city)\nprint(state)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that extracts information from a JSON object.\n\n### Input:\n{\n   \"name\": \"John Doe\",\n   \"age\": 23,\n   \"address\": {\n      \"street\": \"123 Main Street\",\n      \"city\": \"Berkeley\",\n      \"state\": \"CA\"\n   }\n}\n\n### Output:\nimport json\n\ndata = json.loads('''\n{\n   \"name\": \"John Doe\",\n   \"age\": 23,\n   \"address\": {\n      \"street\": \"123 Main Street\",\n      \"city\": \"Berkeley\",\n      \"state\": \"CA\"\n   }\n}\n''')\n\nname = data['name']\nage = data['age']\nstreet = data['address']['street']\ncity = data['address']['city']\nstate = data['address']['state']\n\nprint(name)\nprint(age)\nprint(street)\nprint(city)\nprint(state)"
    },
    {
        "instruction": "Generate a python program that removes all whitespace from a string.",
        "input": "\"This    is    a   string    with    whitespace\"",
        "output": "def remove_whitespace(x):\n   return x.replace(\" \", \"\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program that removes all whitespace from a string.\n\n### Input:\n\"This    is    a   string    with    whitespace\"\n\n### Output:\ndef remove_whitespace(x):\n   return x.replace(\" \", \"\")"
    },
    {
        "instruction": "Generate a Python program which use to generate an array of length N with random numbers based on the given seed.",
        "input": "N = 10\nSeed = 42",
        "output": "import random\n\ndef generate_array_with_random_numbers(n, seed):\n random.seed(seed)\n return [random.randint(0, 100) for _ in range(n)]\n\nn = 10\nseed = 42\narray = generate_array_with_random_numbers(n, seed)\n\nprint(array)\n# [19, 25, 44, 36, 33, 20, 72, 15, 85, 37]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program which use to generate an array of length N with random numbers based on the given seed.\n\n### Input:\nN = 10\nSeed = 42\n\n### Output:\nimport random\n\ndef generate_array_with_random_numbers(n, seed):\n random.seed(seed)\n return [random.randint(0, 100) for _ in range(n)]\n\nn = 10\nseed = 42\narray = generate_array_with_random_numbers(n, seed)\n\nprint(array)\n# [19, 25, 44, 36, 33, 20, 72, 15, 85, 37]"
    },
    {
        "instruction": "Build a Python program that predicts stock price movements.",
        "input": "",
        "output": "\"\"\"\nPredict stock price movements using a Python program\n\"\"\"\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, LSTM\n\ndef get_data(ticker):\n    # Get the historical data for the given ticker\n    df = pd.read_csv('data/{}.csv'.format(ticker))\n    \n    # Format the data\n    df = df.drop(['Adj Close'], axis=1)\n    df = df.rename(columns={'Close': 'y'})\n    df['Date'] = pd.to_datetime(df['Date'])\n    df.set_index('Date', inplace=True)\n    df = df.sort_index()\n    \n    return df\n\ndef preprocess_data(df, window_size=30):\n    # Scale the data\n    scaler = MinMaxScaler()\n    df = scaler.fit_transform(df)\n    \n    # Create windows of size window_size\n    X, y = [], []\n    for i in range(len(df) - window_size - 1):\n        X.append(df[i : (i + window_size)])\n        y.append(df[i + window_size + 1])\n    \n    X, y = np.array(X), np.array(y)\n    X_train, X_test, y_train, y_test = X[: - int(X.shape[0] * 0.2)], X[-int(X.shape[0] * 0.2):], y[: - int(X.shape[0] * 0.2)], y[-int(X.shape[0] * 0.2):]\n    \n    return X_train, X_test, y_train, y_test\n\ndef create_model(input_dim):\n    # Create a model\n    model = Sequential()\n    model.add(LSTM(64, input_shape=(input_dim, 1)))\n    model.add(Dense(64, activation='relu'))\n    model.add(Dense(1))\n    model.compile(loss='mse', optimizer='adam')\n    return model\n\ndef train_model(model, X_train, y_train):\n    # Fit the model\n    model.fit(X_train, y_train, epochs=20, batch_size=32, validation_split=0.1, shuffle=False)\n    \n    return model\n\ndef predict(model, X_test):\n    # Make predictions\n    predictions = model.predict(X_test)\n    predictions = scaler.inverse_transform(predictions)\n    \n    return predictions\n\ndef main(ticker):\n    # Get the data\n    df = get_data(ticker)\n    \n    # Preprocess the data\n    X_train, X_test, y_train, y_test = preprocess_data(df)\n    \n    # Create a model\n    model = create_model(X_train.shape[1])\n    \n    # Train the model\n    model = train_model(model, X_train, y_train)\n    \n    # Make predictions\n    predictions = predict(model, X_test)\n    \n    return predictions\n\nif __name__ == '__main__':\n    predictions = main('AAPL') # Replace 'AAPL' with your stock ticker\n    print(predictions)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python program that predicts stock price movements.\n\n### Input:\n\n\n### Output:\n\"\"\"\nPredict stock price movements using a Python program\n\"\"\"\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, LSTM\n\ndef get_data(ticker):\n    # Get the historical data for the given ticker\n    df = pd.read_csv('data/{}.csv'.format(ticker))\n    \n    # Format the data\n    df = df.drop(['Adj Close'], axis=1)\n    df = df.rename(columns={'Close': 'y'})\n    df['Date'] = pd.to_datetime(df['Date'])\n    df.set_index('Date', inplace=True)\n    df = df.sort_index()\n    \n    return df\n\ndef preprocess_data(df, window_size=30):\n    # Scale the data\n    scaler = MinMaxScaler()\n    df = scaler.fit_transform(df)\n    \n    # Create windows of size window_size\n    X, y = [], []\n    for i in range(len(df) - window_size - 1):\n        X.append(df[i : (i + window_size)])\n        y.append(df[i + window_size + 1])\n    \n    X, y = np.array(X), np.array(y)\n    X_train, X_test, y_train, y_test = X[: - int(X.shape[0] * 0.2)], X[-int(X.shape[0] * 0.2):], y[: - int(X.shape[0] * 0.2)], y[-int(X.shape[0] * 0.2):]\n    \n    return X_train, X_test, y_train, y_test\n\ndef create_model(input_dim):\n    # Create a model\n    model = Sequential()\n    model.add(LSTM(64, input_shape=(input_dim, 1)))\n    model.add(Dense(64, activation='relu'))\n    model.add(Dense(1))\n    model.compile(loss='mse', optimizer='adam')\n    return model\n\ndef train_model(model, X_train, y_train):\n    # Fit the model\n    model.fit(X_train, y_train, epochs=20, batch_size=32, validation_split=0.1, shuffle=False)\n    \n    return model\n\ndef predict(model, X_test):\n    # Make predictions\n    predictions = model.predict(X_test)\n    predictions = scaler.inverse_transform(predictions)\n    \n    return predictions\n\ndef main(ticker):\n    # Get the data\n    df = get_data(ticker)\n    \n    # Preprocess the data\n    X_train, X_test, y_train, y_test = preprocess_data(df)\n    \n    # Create a model\n    model = create_model(X_train.shape[1])\n    \n    # Train the model\n    model = train_model(model, X_train, y_train)\n    \n    # Make predictions\n    predictions = predict(model, X_test)\n    \n    return predictions\n\nif __name__ == '__main__':\n    predictions = main('AAPL') # Replace 'AAPL' with your stock ticker\n    print(predictions)"
    },
    {
        "instruction": "Out put the first 3 characters of a given string.",
        "input": "Python",
        "output": "string = \"Python\"\n\nprint(string[:3])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOut put the first 3 characters of a given string.\n\n### Input:\nPython\n\n### Output:\nstring = \"Python\"\n\nprint(string[:3])"
    },
    {
        "instruction": "Create a python program to convert a time from 12-hour to 24-hour format.",
        "input": "",
        "output": "def time24(a): \n\n    if len(a) == 4: \n        ampm = 'AM'\n        time = a \n    elif len(a) == 7: \n        ampm = a[5:7] \n        time = a[0:5]\n    time_split = time.split(':') \n\n    if ampm == 'PM': \n        if time_split[0] != '12': \n            time_split[0] = str(int(time_split[0])+ 12) \n  \n    elif ampm == 'AM': \n        if time_split[0] == '12': \n            time_split[0] = '00' \n          \n    time24 = ':'.join(time_split) \n  \n    return time24 \n  \n# Driver Code \na = '2:30:00PM'\nprint(time24(a)) \n  \n# Output: \n# 14:30:00",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to convert a time from 12-hour to 24-hour format.\n\n### Input:\n\n\n### Output:\ndef time24(a): \n\n    if len(a) == 4: \n        ampm = 'AM'\n        time = a \n    elif len(a) == 7: \n        ampm = a[5:7] \n        time = a[0:5]\n    time_split = time.split(':') \n\n    if ampm == 'PM': \n        if time_split[0] != '12': \n            time_split[0] = str(int(time_split[0])+ 12) \n  \n    elif ampm == 'AM': \n        if time_split[0] == '12': \n            time_split[0] = '00' \n          \n    time24 = ':'.join(time_split) \n  \n    return time24 \n  \n# Driver Code \na = '2:30:00PM'\nprint(time24(a)) \n  \n# Output: \n# 14:30:00"
    },
    {
        "instruction": "Create a Python class named 'Dog' that has a method which returns the name of a given dog.",
        "input": "",
        "output": "class Dog:\n    def __init__(self, name):\n        self.name = name\n\n    def get_name(self):\n        return self.name",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class named 'Dog' that has a method which returns the name of a given dog.\n\n### Input:\n\n\n### Output:\nclass Dog:\n    def __init__(self, name):\n        self.name = name\n\n    def get_name(self):\n        return self.name"
    },
    {
        "instruction": "Generate a Python program that inputs a sequence of numbers and returns the largest number in the sequence.",
        "input": "Not applicable",
        "output": "num_list = list() \nnum = input(\"Enter how many elements you want:\") \nprint ('Enter numbers in array: ') \n  \nfor i in range(int(num)): \n    n = input(\"num :\") \n    num_list.append(int(n)) \n  \nprint ('Largest number is:', max(num_list))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that inputs a sequence of numbers and returns the largest number in the sequence.\n\n### Input:\nNot applicable\n\n### Output:\nnum_list = list() \nnum = input(\"Enter how many elements you want:\") \nprint ('Enter numbers in array: ') \n  \nfor i in range(int(num)): \n    n = input(\"num :\") \n    num_list.append(int(n)) \n  \nprint ('Largest number is:', max(num_list))"
    },
    {
        "instruction": "Create a Python dictionary to store student and their grades.",
        "input": "Bob \u2013 A\nCarol\u2013 B\nTed \u2013 C\nAlice \u2013 A",
        "output": "student_grades = {\n    \"Bob\": \"A\",\n    \"Carol\": \"B\",\n    \"Ted\": \"C\",\n    \"Alice\": \"A\"\n}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python dictionary to store student and their grades.\n\n### Input:\nBob \u2013 A\nCarol\u2013 B\nTed \u2013 C\nAlice \u2013 A\n\n### Output:\nstudent_grades = {\n    \"Bob\": \"A\",\n    \"Carol\": \"B\",\n    \"Ted\": \"C\",\n    \"Alice\": \"A\"\n}"
    },
    {
        "instruction": "Construct a code in Python to remove the whitespaces in a given string.",
        "input": "",
        "output": "def remove_whitespaces(s):\n    return \"\".join(s.split())",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a code in Python to remove the whitespaces in a given string.\n\n### Input:\n\n\n### Output:\ndef remove_whitespaces(s):\n    return \"\".join(s.split())"
    },
    {
        "instruction": "Write a Python function to check if a given substring is contained in a string.",
        "input": "String = \"This is an example\"\nSubString = \"ex\"",
        "output": "def check_substring(String, SubString):\n    if SubString in String : \n        return True\n    else: \n        return False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to check if a given substring is contained in a string.\n\n### Input:\nString = \"This is an example\"\nSubString = \"ex\"\n\n### Output:\ndef check_substring(String, SubString):\n    if SubString in String : \n        return True\n    else: \n        return False"
    },
    {
        "instruction": "Generate a function in Python to populate a dictionary data-structure with a list of numerical values.",
        "input": "[1, 2, 3, 4, 5]",
        "output": "def populateDict(lst):\n    my_dict = {}\n    for i in lst:\n        my_dict[i] = i\n    return my_dict\n\nmy_numbers = [1, 2, 3, 4, 5]\nmy_dict = populateDict(my_numbers)\nprint(my_dict)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python to populate a dictionary data-structure with a list of numerical values.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef populateDict(lst):\n    my_dict = {}\n    for i in lst:\n        my_dict[i] = i\n    return my_dict\n\nmy_numbers = [1, 2, 3, 4, 5]\nmy_dict = populateDict(my_numbers)\nprint(my_dict)"
    },
    {
        "instruction": "Create a classifier in Python using scikit-learn to classify 500 text documents into ten different classes.",
        "input": "Not applicable",
        "output": "from sklearn.datasets import fetch_20newsgroups\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import metrics\n\n# Load the data\ndataset = fetch_20newsgroups(shuffle=True, random_state=1,\n subset='all')\nX_train, X_test, y_train, y_test = train_test_split(\n dataset.data, dataset.target, test_size=0.25, random_state=0)\n\n# Extract the features\nvectorizer = TfidfVectorizer()\nX_train = vectorizer.fit_transform(X_train)\nX_test = vectorizer.transform(X_test)\n\n# Train the model\nclf = MultinomialNB().fit(X_train, y_train)\n\n# Evaluate the model\npredicted = clf.predict(X_test)\nprint(\"Classification report:\n %s\" % metrics.classification_report(y_test, predicted))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a classifier in Python using scikit-learn to classify 500 text documents into ten different classes.\n\n### Input:\nNot applicable\n\n### Output:\nfrom sklearn.datasets import fetch_20newsgroups\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn import metrics\n\n# Load the data\ndataset = fetch_20newsgroups(shuffle=True, random_state=1,\n subset='all')\nX_train, X_test, y_train, y_test = train_test_split(\n dataset.data, dataset.target, test_size=0.25, random_state=0)\n\n# Extract the features\nvectorizer = TfidfVectorizer()\nX_train = vectorizer.fit_transform(X_train)\nX_test = vectorizer.transform(X_test)\n\n# Train the model\nclf = MultinomialNB().fit(X_train, y_train)\n\n# Evaluate the model\npredicted = clf.predict(X_test)\nprint(\"Classification report:\n %s\" % metrics.classification_report(y_test, predicted))"
    },
    {
        "instruction": "Generate a Python program that takes a number as input and prints the first n prime numbers.",
        "input": "Not applicable",
        "output": "def is_prime(num):\n    # Return True if given number is prime; false otherwise\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef generate_prime_numbers(n):\n    prime_list = []\n    number = 2\n\n    while len(prime_list) < n:\n        if is_prime(number):\n            prime_list.append(number)\n        number += 1\n    \n    return prime_list\n\nn = 8\nprint(generate_prime_numbers(n))\n\n# Output: [2, 3, 5, 7, 11, 13, 17, 19]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that takes a number as input and prints the first n prime numbers.\n\n### Input:\nNot applicable\n\n### Output:\ndef is_prime(num):\n    # Return True if given number is prime; false otherwise\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n\ndef generate_prime_numbers(n):\n    prime_list = []\n    number = 2\n\n    while len(prime_list) < n:\n        if is_prime(number):\n            prime_list.append(number)\n        number += 1\n    \n    return prime_list\n\nn = 8\nprint(generate_prime_numbers(n))\n\n# Output: [2, 3, 5, 7, 11, 13, 17, 19]"
    },
    {
        "instruction": "Write a Python program to classify an input text given a list of labels.",
        "input": "Text: \"I am going to the store to buy groceries.\"\nLabels: [\"grocery shopping\", \"shopping\", \"going to the store\"]",
        "output": "labels = [\"grocery shopping\", \"shopping\", \"going to the store\"]\n\ninput_text = \"I am going to the store to buy groceries.\"\n\ndef classify_input_text(input_text, labels):\n    for label in labels:\n        if label.lower() in input_text.lower():\n            return label\n\noutput_label = classify_input_text(input_text, labels)\nprint(output_label)\n# Output: grocery shopping",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify an input text given a list of labels.\n\n### Input:\nText: \"I am going to the store to buy groceries.\"\nLabels: [\"grocery shopping\", \"shopping\", \"going to the store\"]\n\n### Output:\nlabels = [\"grocery shopping\", \"shopping\", \"going to the store\"]\n\ninput_text = \"I am going to the store to buy groceries.\"\n\ndef classify_input_text(input_text, labels):\n    for label in labels:\n        if label.lower() in input_text.lower():\n            return label\n\noutput_label = classify_input_text(input_text, labels)\nprint(output_label)\n# Output: grocery shopping"
    },
    {
        "instruction": "Design a function in Python that sorts a list of strings in alphabetical order.",
        "input": "['red', 'green', 'orange']",
        "output": "def sort_list_alphabetically(input_list): \n    output_list = sorted(input_list) \n    return output_list \n  \ninput_list = ['red', 'green', 'orange']\nsorted_list = sort_list_alphabetically(input_list) \nprint(\"Sorted List in Alphabetical Order:\", sorted_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python that sorts a list of strings in alphabetical order.\n\n### Input:\n['red', 'green', 'orange']\n\n### Output:\ndef sort_list_alphabetically(input_list): \n    output_list = sorted(input_list) \n    return output_list \n  \ninput_list = ['red', 'green', 'orange']\nsorted_list = sort_list_alphabetically(input_list) \nprint(\"Sorted List in Alphabetical Order:\", sorted_list)"
    },
    {
        "instruction": "Create a python program to fetch data from the website http://example.com",
        "input": "",
        "output": "import requests\n\nurl = 'http://example.com'\nresp = requests.get(url)\ndata = resp.json()\nprint(data)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to fetch data from the website http://example.com\n\n### Input:\n\n\n### Output:\nimport requests\n\nurl = 'http://example.com'\nresp = requests.get(url)\ndata = resp.json()\nprint(data)"
    },
    {
        "instruction": "Create an API endpoint in Python with Flask that can take a JSON request and save the data into a database.",
        "input": "Sample JSON request:\n{\n \"name\": \"John Doe\",\n \"age\": 25,\n \"address\": \"123 Main St.\"\n}",
        "output": "from flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\nimport json\n\napp = Flask(name)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:////tmp/test.db\"\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(80))\n age = db.Column(db.Integer)\n address = db.Column(db.String(120))\n\ndb.create_all()\n\n@app.route('/users', methods=['POST'])\ndef create_user():\n data = request.get_json()\n user = User(name=data['name'], age=data['age'], address=data['address'])\n db.session.add(user)\n db.session.commit()\n return jsonify({'message': 'User created.'})\n\nif __name__ == '__main__':\n app.run(debug=True)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API endpoint in Python with Flask that can take a JSON request and save the data into a database.\n\n### Input:\nSample JSON request:\n{\n \"name\": \"John Doe\",\n \"age\": 25,\n \"address\": \"123 Main St.\"\n}\n\n### Output:\nfrom flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\nimport json\n\napp = Flask(name)\napp.config[\"SQLALCHEMY_DATABASE_URI\"] = \"sqlite:////tmp/test.db\"\ndb = SQLAlchemy(app)\n\nclass User(db.Model):\n id = db.Column(db.Integer, primary_key=True)\n name = db.Column(db.String(80))\n age = db.Column(db.Integer)\n address = db.Column(db.String(120))\n\ndb.create_all()\n\n@app.route('/users', methods=['POST'])\ndef create_user():\n data = request.get_json()\n user = User(name=data['name'], age=data['age'], address=data['address'])\n db.session.add(user)\n db.session.commit()\n return jsonify({'message': 'User created.'})\n\nif __name__ == '__main__':\n app.run(debug=True)"
    },
    {
        "instruction": "Develop a Python program to calculate the sum of natural numbers up to a given number.",
        "input": "7",
        "output": "def natural_sum(n):\n    if n < 0:\n        return 0\n    s = 0\n    for i in range(n+1):\n        s += i\n    return s\n \nnumber = 7\nresult = natural_sum(number)\nprint(result) # 28",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to calculate the sum of natural numbers up to a given number.\n\n### Input:\n7\n\n### Output:\ndef natural_sum(n):\n    if n < 0:\n        return 0\n    s = 0\n    for i in range(n+1):\n        s += i\n    return s\n \nnumber = 7\nresult = natural_sum(number)\nprint(result) # 28"
    },
    {
        "instruction": "Construct a Python program to add two matrices.",
        "input": "[[1,4,7], [2,5,8], [3,6,9]]",
        "output": "def add_matrix(m1, m2):\n    result = [[0] * len(m1[0]) for i in range(len(m1))]\n    \n    for i in range(len(m1)):\n        for j in range(len(m1[0])):\n            result[i][j] = m1[i][j] + m2[i][j]\n            \n    return result\n\nresult = add_matrix([[1,4,7], [2,5,8], [3,6,9]], [[9,1,2], [5,3,4], [1,8,7]])\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to add two matrices.\n\n### Input:\n[[1,4,7], [2,5,8], [3,6,9]]\n\n### Output:\ndef add_matrix(m1, m2):\n    result = [[0] * len(m1[0]) for i in range(len(m1))]\n    \n    for i in range(len(m1)):\n        for j in range(len(m1[0])):\n            result[i][j] = m1[i][j] + m2[i][j]\n            \n    return result\n\nresult = add_matrix([[1,4,7], [2,5,8], [3,6,9]], [[9,1,2], [5,3,4], [1,8,7]])\nprint(result)"
    },
    {
        "instruction": "Develop a Python program which takes two inputs and returns the minimum number that is evenly divisible by both numbers.",
        "input": "Ex: 6, 12",
        "output": "def lcm(m, n):\n    if m > n:\n        greater = m\n    else:\n        greater = n\n\n    while(True):\n        if((greater % m == 0) and (greater % n == 0)):\n            lcm = greater\n            break\n        greater += 1\n\n    return lcm\n\nM = 6\nN = 12\n\nlcm(M, N)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program which takes two inputs and returns the minimum number that is evenly divisible by both numbers.\n\n### Input:\nEx: 6, 12\n\n### Output:\ndef lcm(m, n):\n    if m > n:\n        greater = m\n    else:\n        greater = n\n\n    while(True):\n        if((greater % m == 0) and (greater % n == 0)):\n            lcm = greater\n            break\n        greater += 1\n\n    return lcm\n\nM = 6\nN = 12\n\nlcm(M, N)"
    },
    {
        "instruction": "Create a Python dictionary to store the details of different users with their names as the key.",
        "input": "",
        "output": "users = {\n  \"John\": {\n    \"age\": 28,\n    \"location\": \"New York\"\n  },\n  \"Mary\": {\n    \"age\": 34,\n    \"location\": \"London\"\n  },\n  \"David\": {\n    \"age\": 40,\n    \"location\": \"Berlin\"\n  }\n}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python dictionary to store the details of different users with their names as the key.\n\n### Input:\n\n\n### Output:\nusers = {\n  \"John\": {\n    \"age\": 28,\n    \"location\": \"New York\"\n  },\n  \"Mary\": {\n    \"age\": 34,\n    \"location\": \"London\"\n  },\n  \"David\": {\n    \"age\": 40,\n    \"location\": \"Berlin\"\n  }\n}"
    },
    {
        "instruction": "Create a web scraper using Python to extract a list of all the movie names from IMDb's Top 250 Movies page.",
        "input": "Not applicable",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.imdb.com/chart/top?sort=us,asc'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nmovie_names = []\nfor div in soup.find_all('div', {'class': 'lister-list'}):\n  for h3 in div.find_all('h3'):\n    movie_names.append(h3.find('a').text)\n\nprint(movie_names)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper using Python to extract a list of all the movie names from IMDb's Top 250 Movies page.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.imdb.com/chart/top?sort=us,asc'\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n\nmovie_names = []\nfor div in soup.find_all('div', {'class': 'lister-list'}):\n  for h3 in div.find_all('h3'):\n    movie_names.append(h3.find('a').text)\n\nprint(movie_names)"
    },
    {
        "instruction": "Create a web-crawler in Python to extract links from a web page.",
        "input": "Web page URL: http://www.example.com",
        "output": "import urllib.request \nfrom bs4 import BeautifulSoup\n\n#Providing the url as an argument to urlopen() \nurl = \"http://www.example.com\"\nhtml = urllib.request.urlopen(url).read() \nsoup = BeautifulSoup(html, features = 'html.parser') \n\n# extracting links from the web page \nlinks = [] \nfor link in soup.findAll('a'): \n    links.append(link.get('href')) \n\nprint(links)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web-crawler in Python to extract links from a web page.\n\n### Input:\nWeb page URL: http://www.example.com\n\n### Output:\nimport urllib.request \nfrom bs4 import BeautifulSoup\n\n#Providing the url as an argument to urlopen() \nurl = \"http://www.example.com\"\nhtml = urllib.request.urlopen(url).read() \nsoup = BeautifulSoup(html, features = 'html.parser') \n\n# extracting links from the web page \nlinks = [] \nfor link in soup.findAll('a'): \n    links.append(link.get('href')) \n\nprint(links)"
    },
    {
        "instruction": "Take an input string and write a python program to determine if it is a palindrome.",
        "input": "racecar",
        "output": "def isPalindrome(s):\n left, right = 0, len(s) - 1\n while left < right:\n if s[left] != s[right]:\n return False\n left += 1\n right -= 1\n return True\n\ns = \"racecar\"\nprint(isPalindrome(s))  # True",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTake an input string and write a python program to determine if it is a palindrome.\n\n### Input:\nracecar\n\n### Output:\ndef isPalindrome(s):\n left, right = 0, len(s) - 1\n while left < right:\n if s[left] != s[right]:\n return False\n left += 1\n right -= 1\n return True\n\ns = \"racecar\"\nprint(isPalindrome(s))  # True"
    },
    {
        "instruction": "Create a basic web scraper in Python to collect data from an e-commerce website.",
        "input": "www.example.com",
        "output": "import requests\nimport bs4\n\ndef get_data(url):\n    response = requests.get(url)\n    soup = bs4.BeautifulSoup(response.text, 'html.parser')\n\n    products = soup.find_all('div', {'class': 'product'})\n\n    for product in products:\n        name = product.find('h3', {'class': 'name'}).text \n        price = product.find('span', {'class': 'price'}).text\n\n        print(name, price)\n\nif __name__ == '__main__':\n    get_data('www.example.com')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic web scraper in Python to collect data from an e-commerce website.\n\n### Input:\nwww.example.com\n\n### Output:\nimport requests\nimport bs4\n\ndef get_data(url):\n    response = requests.get(url)\n    soup = bs4.BeautifulSoup(response.text, 'html.parser')\n\n    products = soup.find_all('div', {'class': 'product'})\n\n    for product in products:\n        name = product.find('h3', {'class': 'name'}).text \n        price = product.find('span', {'class': 'price'}).text\n\n        print(name, price)\n\nif __name__ == '__main__':\n    get_data('www.example.com')"
    },
    {
        "instruction": "Sort a list of numbers [5, 2, 8, 1] in Python.",
        "input": "",
        "output": "list = [5, 2, 8, 1]\nlist.sort() \nprint(list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSort a list of numbers [5, 2, 8, 1] in Python.\n\n### Input:\n\n\n### Output:\nlist = [5, 2, 8, 1]\nlist.sort() \nprint(list)"
    },
    {
        "instruction": "Create a function in Python that takes a list of strings and returns a dictionary containing a count of how many times each string appears in the list.",
        "input": "[\"foo\", \"bar\", \"foo\", \"baz\", \"foo\"]",
        "output": "def count_words(words):\n    counted_words = {}\n    for word in words:\n        if word not in counted_words:\n            counted_words[word] = 1\n        else:\n            counted_words[word] += 1\n    return counted_words\n\nwords = [\"foo\", \"bar\", \"foo\", \"baz\", \"foo\"]\nresult = count_words(words)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes a list of strings and returns a dictionary containing a count of how many times each string appears in the list.\n\n### Input:\n[\"foo\", \"bar\", \"foo\", \"baz\", \"foo\"]\n\n### Output:\ndef count_words(words):\n    counted_words = {}\n    for word in words:\n        if word not in counted_words:\n            counted_words[word] = 1\n        else:\n            counted_words[word] += 1\n    return counted_words\n\nwords = [\"foo\", \"bar\", \"foo\", \"baz\", \"foo\"]\nresult = count_words(words)\nprint(result)"
    },
    {
        "instruction": "Write a Python code snippet to generate a password with 8 characters consisting of a mix of lowercase and uppercase letters, numbers, and symbols.",
        "input": "",
        "output": "import random\n\ndef generate_password():\n    lowercase = 'abcdefghijklmnopqrstuvwxyz'\n    uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    numbers = '0123456789'\n    special_characters = '*_/+-.,'\n    total_chars = lowercase + uppercase + numbers + special_characters\n\n    password = ''\n    for i in range(8):\n        password += random.choice(list(total_chars))\n    return password\n\nconst result = generate_password();\nconsole.log(result);",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code snippet to generate a password with 8 characters consisting of a mix of lowercase and uppercase letters, numbers, and symbols.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_password():\n    lowercase = 'abcdefghijklmnopqrstuvwxyz'\n    uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    numbers = '0123456789'\n    special_characters = '*_/+-.,'\n    total_chars = lowercase + uppercase + numbers + special_characters\n\n    password = ''\n    for i in range(8):\n        password += random.choice(list(total_chars))\n    return password\n\nconst result = generate_password();\nconsole.log(result);"
    },
    {
        "instruction": "Create an AWS Lambda function in Python that accepts a JSON object as input, processes it, and returns the result.",
        "input": "{\n \"x\": 10,\n \"y\": 20\n}",
        "output": "import json\n\ndef handler(event, context):\n x = event[\"x\"]\n y = event[\"y\"]\n res = x + y\n return {\n \"statusCode\": 200,\n \"body\": json.dumps({\"result\": res})\n }",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AWS Lambda function in Python that accepts a JSON object as input, processes it, and returns the result.\n\n### Input:\n{\n \"x\": 10,\n \"y\": 20\n}\n\n### Output:\nimport json\n\ndef handler(event, context):\n x = event[\"x\"]\n y = event[\"y\"]\n res = x + y\n return {\n \"statusCode\": 200,\n \"body\": json.dumps({\"result\": res})\n }"
    },
    {
        "instruction": "Write a Python program to generate a random password of 10 characters. The password should include at least two uppercase characters, two lowercase characters, two digits, and two special characters.",
        "input": "Not applicable",
        "output": "import string\nimport random\n\nlength = 10\ncharacters = string.ascii_lowercase + string.ascii_uppercase + string.digits + '!\"#$%\\'&()*+,-./:;<=>?@[]^_`{|}~'\n\npassword = ''.join(random.choice(characters) for i in range(length))\n\nprint(password)  # Output: K>~L}U>Q#3",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a random password of 10 characters. The password should include at least two uppercase characters, two lowercase characters, two digits, and two special characters.\n\n### Input:\nNot applicable\n\n### Output:\nimport string\nimport random\n\nlength = 10\ncharacters = string.ascii_lowercase + string.ascii_uppercase + string.digits + '!\"#$%\\'&()*+,-./:;<=>?@[]^_`{|}~'\n\npassword = ''.join(random.choice(characters) for i in range(length))\n\nprint(password)  # Output: K>~L}U>Q#3"
    },
    {
        "instruction": "Create a Python program for generating and saving random passwords. (Input Field Required)",
        "input": "length=10",
        "output": "import random\nimport string\n\ndef generate_password(length):\n    password_characters = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_characters) for i in range(length))\n    return password\n\nlength = 10\npassword = generate_password(length)\n\n# save the password to a file \nwith open('password.txt', 'w') as f:\n    f.write(password)\n    f.close()\n\nprint(password)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for generating and saving random passwords. (Input Field Required)\n\n### Input:\nlength=10\n\n### Output:\nimport random\nimport string\n\ndef generate_password(length):\n    password_characters = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(password_characters) for i in range(length))\n    return password\n\nlength = 10\npassword = generate_password(length)\n\n# save the password to a file \nwith open('password.txt', 'w') as f:\n    f.write(password)\n    f.close()\n\nprint(password)"
    },
    {
        "instruction": "Write a web crawler in Python to collect job postings from a list of job boards.",
        "input": "Job Boards:\n1. Monster.com\n2. LinkedIn.com\n3. Stack Overflow",
        "output": "import requests\nimport bs4\nimport lxml\n\njob_boards = ['Monster.com', 'LinkedIn.com', 'Stack Overflow']\n\nfor board in job_boards:\n # Create a request object for the job board url\n r = requests.get(board)\n\n # Create a BeautifulSoup object from the response\n soup = bs4.BeautifulSoup(r.content, 'lxml')\n\n # Get all job postings on the page\n job_postings = soup.find_all('div', {'class': 'job-posting'})\n\n for job in job_postings:\n # Extract the job details (title, company, location, etc)\n # and store in a dictionary\n job_details = {}\n job_details['title'] = job.find('div', {'class': 'title'}).text\n job_details['company'] = job.find('div', {'class': 'company'}).text\n job_details['location'] = job.find('div', {'class': 'location'}).text\n # ... and so on\n\n# Store the extracted job postings in a database\n# ...",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a web crawler in Python to collect job postings from a list of job boards.\n\n### Input:\nJob Boards:\n1. Monster.com\n2. LinkedIn.com\n3. Stack Overflow\n\n### Output:\nimport requests\nimport bs4\nimport lxml\n\njob_boards = ['Monster.com', 'LinkedIn.com', 'Stack Overflow']\n\nfor board in job_boards:\n # Create a request object for the job board url\n r = requests.get(board)\n\n # Create a BeautifulSoup object from the response\n soup = bs4.BeautifulSoup(r.content, 'lxml')\n\n # Get all job postings on the page\n job_postings = soup.find_all('div', {'class': 'job-posting'})\n\n for job in job_postings:\n # Extract the job details (title, company, location, etc)\n # and store in a dictionary\n job_details = {}\n job_details['title'] = job.find('div', {'class': 'title'}).text\n job_details['company'] = job.find('div', {'class': 'company'}).text\n job_details['location'] = job.find('div', {'class': 'location'}).text\n # ... and so on\n\n# Store the extracted job postings in a database\n# ..."
    },
    {
        "instruction": "Write an algorithm in Python to identify anagrams in a given list of words.",
        "input": "Not applicable",
        "output": "def is_anagram(word1, word2):\n # split words into list of characters\n letters1 = list(word1)\n letters2 = list(word2)\n\n # sort lists\n letters1.sort()\n letters2.sort()\n\n # check if the sorted lists are equal\n return letters1 == letters2\n\n# main program\nwords = [ 'army', 'mary', 'cat', 'act', 'rat', 'tar' ]\n\nfor i in range(len(words)):\n for j in range(i + 1, len(words)):\n if is_anagram(words[i], words[j]):\n print('%s is an anagram of %s' % (words[i], words[j]))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to identify anagrams in a given list of words.\n\n### Input:\nNot applicable\n\n### Output:\ndef is_anagram(word1, word2):\n # split words into list of characters\n letters1 = list(word1)\n letters2 = list(word2)\n\n # sort lists\n letters1.sort()\n letters2.sort()\n\n # check if the sorted lists are equal\n return letters1 == letters2\n\n# main program\nwords = [ 'army', 'mary', 'cat', 'act', 'rat', 'tar' ]\n\nfor i in range(len(words)):\n for j in range(i + 1, len(words)):\n if is_anagram(words[i], words[j]):\n print('%s is an anagram of %s' % (words[i], words[j]))"
    },
    {
        "instruction": "Create a Python script to scrape a web page and output the title of the page.",
        "input": "Not applicable",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\n\nresp = requests.get(url)\nsoup = BeautifulSoup(resp.text, 'html.parser')\ntitle = soup.find('title').get_text()\n\nprint(title)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to scrape a web page and output the title of the page.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\n\nresp = requests.get(url)\nsoup = BeautifulSoup(resp.text, 'html.parser')\ntitle = soup.find('title').get_text()\n\nprint(title)"
    },
    {
        "instruction": "Generate a bash script to run a given python code.",
        "input": "filename: fib\n\ncontent:\n\ndef fib(n): \n    # F(n) = F(n-1) + F(n-2) \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==0: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==1: \n        return 1\n    else: \n        return fib(n-1)+fib(n-2)",
        "output": "#!/bin/bash\nif [[ $1 -lt 0  ]]\n   then echo \"Incorrect input\"\nfi\npython3 fib.py $1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a bash script to run a given python code.\n\n### Input:\nfilename: fib\n\ncontent:\n\ndef fib(n): \n    # F(n) = F(n-1) + F(n-2) \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==0: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==1: \n        return 1\n    else: \n        return fib(n-1)+fib(n-2)\n\n### Output:\n#!/bin/bash\nif [[ $1 -lt 0  ]]\n   then echo \"Incorrect input\"\nfi\npython3 fib.py $1"
    },
    {
        "instruction": "Produce a Python script to convert a given Unix timestamp into human readable date format.",
        "input": "1545732721",
        "output": "import time\n\n# Unix timestamp in seconds\nunix_timestamp = 1545732721\n\n# Convert to readable date format\ntimestamp = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(unix_timestamp))\n\nprint('Human readable date format:', timestamp)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a Python script to convert a given Unix timestamp into human readable date format.\n\n### Input:\n1545732721\n\n### Output:\nimport time\n\n# Unix timestamp in seconds\nunix_timestamp = 1545732721\n\n# Convert to readable date format\ntimestamp = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(unix_timestamp))\n\nprint('Human readable date format:', timestamp)"
    },
    {
        "instruction": "Convert the following equation into a Python program: y = x^2 - 3x + 2",
        "input": "",
        "output": "def equation(x):\n    return (x**2 - 3*x + 2)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following equation into a Python program: y = x^2 - 3x + 2\n\n### Input:\n\n\n### Output:\ndef equation(x):\n    return (x**2 - 3*x + 2)"
    },
    {
        "instruction": "Given a list of integers, write a Python program to filter out all numbers that are divisible by 5.",
        "input": "[11, 23, 7, 20, 44, 16, 9]",
        "output": "def filter_divisible_by_5(numbers):\n    res = []\n    for num in numbers:\n        if num % 5 != 0:\n            res.append(num)\n    return res\n\nfiltered_numbers = filter_divisible_by_5([11, 23, 7, 20, 44, 16, 9])\nprint(filtered_numbers)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of integers, write a Python program to filter out all numbers that are divisible by 5.\n\n### Input:\n[11, 23, 7, 20, 44, 16, 9]\n\n### Output:\ndef filter_divisible_by_5(numbers):\n    res = []\n    for num in numbers:\n        if num % 5 != 0:\n            res.append(num)\n    return res\n\nfiltered_numbers = filter_divisible_by_5([11, 23, 7, 20, 44, 16, 9])\nprint(filtered_numbers)"
    },
    {
        "instruction": "Create a Python script to calculate the Fibonacci sequence for a given integer n.",
        "input": "7",
        "output": "# Fibonacci sequence\ndef Fibonacci(n):\n a = 0\n b = 1\n if n < 0:\n print(\"Incorrect input\")\n elif n == 0:\n return a\n elif n == 1:\n return b\n else:\n for i in range(2,n):\n c = a + b\n a = b\n b = c\n return b\n\n# Driver Program\nprint(Fibonacci(7)) \n# Output: 13",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to calculate the Fibonacci sequence for a given integer n.\n\n### Input:\n7\n\n### Output:\n# Fibonacci sequence\ndef Fibonacci(n):\n a = 0\n b = 1\n if n < 0:\n print(\"Incorrect input\")\n elif n == 0:\n return a\n elif n == 1:\n return b\n else:\n for i in range(2,n):\n c = a + b\n a = b\n b = c\n return b\n\n# Driver Program\nprint(Fibonacci(7)) \n# Output: 13"
    },
    {
        "instruction": "Can you create a Python program to find prime numbers within a given range?",
        "input": "",
        "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef find_prime_numbers(a, b):\n    result = []\n    for num in range(a, b + 1):\n        if is_prime(num):\n            result.append(num)\n    return result\n\n\nstart = 2\nend = 20\nprint(find_prime_numbers(start, end))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you create a Python program to find prime numbers within a given range?\n\n### Input:\n\n\n### Output:\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef find_prime_numbers(a, b):\n    result = []\n    for num in range(a, b + 1):\n        if is_prime(num):\n            result.append(num)\n    return result\n\n\nstart = 2\nend = 20\nprint(find_prime_numbers(start, end))"
    },
    {
        "instruction": "Develop a class in Python to store 3D vectors.",
        "input": "",
        "output": "class Vector3D(object):\n    def __init__(self, x=0, y=0, z=0):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def magnitude(self):\n         return math.sqrt(self.x**2 + self.y**2 + self.z**2)\n\n    def __add__(self, other):\n        return Vector3D(self.x + other.x,\n                        self.y + other.y,\n                        self.z + other.z)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a class in Python to store 3D vectors.\n\n### Input:\n\n\n### Output:\nclass Vector3D(object):\n    def __init__(self, x=0, y=0, z=0):\n        self.x = x\n        self.y = y\n        self.z = z\n\n    def magnitude(self):\n         return math.sqrt(self.x**2 + self.y**2 + self.z**2)\n\n    def __add__(self, other):\n        return Vector3D(self.x + other.x,\n                        self.y + other.y,\n                        self.z + other.z)"
    },
    {
        "instruction": "Write a python program that adds all the elements in a given list",
        "input": "my_list = [2, 4, 6, 8]",
        "output": "def list_sum(list):\n    sum = 0\n    for num in list:\n        sum += num\n    return sum",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that adds all the elements in a given list\n\n### Input:\nmy_list = [2, 4, 6, 8]\n\n### Output:\ndef list_sum(list):\n    sum = 0\n    for num in list:\n        sum += num\n    return sum"
    },
    {
        "instruction": "Write a Python program to check an array if it contains consecutive integers.",
        "input": "[2, 3, 4, 5, 6]",
        "output": "def check_array_for_consecutive(arr):\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] != 1:\n            return False\n    return True\n\narr = [2, 3, 4, 5, 6]\nprint(check_array_for_consecutive(arr))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to check an array if it contains consecutive integers.\n\n### Input:\n[2, 3, 4, 5, 6]\n\n### Output:\ndef check_array_for_consecutive(arr):\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i+1] - arr[i] != 1:\n            return False\n    return True\n\narr = [2, 3, 4, 5, 6]\nprint(check_array_for_consecutive(arr))"
    },
    {
        "instruction": "Create a python program to print out the longest valid parentheses substrings.",
        "input": "s = '()(()())'",
        "output": "def longest_valid_parentheses(s):\n    # maintain a stack\n    stack = []\n    longest_valid_len = 0\n\n    # traverse through the string\n    for i in range(len(s)):\n        # if current char is an opening bracket, push it to the stack\n        if s[i] == '(':\n            stack.append(i)\n        else:\n            # if closing bracket, check if the stack is empty\n            if stack:\n                # pop an opening bracket from the stack and calculate the length \n                current_len = i - stack.pop() + 1\n\n                if stack:\n                    # if the stack is not empty, subtract the top element from the current length\n                    current_len -= (stack[-1] + 1)\n\n                longest_valid_len = max(longest_valid_len, current_len)\n            else:\n                # if the stack is empty, reset the longest_valid_len\n                longest_valid_len = max(longest_valid_len, current_len)\n\n    return longest_valid_len\n\ns = '()(()())'\nprint(longest_valid_parentheses(s)) # 6",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to print out the longest valid parentheses substrings.\n\n### Input:\ns = '()(()())'\n\n### Output:\ndef longest_valid_parentheses(s):\n    # maintain a stack\n    stack = []\n    longest_valid_len = 0\n\n    # traverse through the string\n    for i in range(len(s)):\n        # if current char is an opening bracket, push it to the stack\n        if s[i] == '(':\n            stack.append(i)\n        else:\n            # if closing bracket, check if the stack is empty\n            if stack:\n                # pop an opening bracket from the stack and calculate the length \n                current_len = i - stack.pop() + 1\n\n                if stack:\n                    # if the stack is not empty, subtract the top element from the current length\n                    current_len -= (stack[-1] + 1)\n\n                longest_valid_len = max(longest_valid_len, current_len)\n            else:\n                # if the stack is empty, reset the longest_valid_len\n                longest_valid_len = max(longest_valid_len, current_len)\n\n    return longest_valid_len\n\ns = '()(()())'\nprint(longest_valid_parentheses(s)) # 6"
    },
    {
        "instruction": "Write a function in Python to find an optimal set of parameters (p1,p2,p3) to maximize an evaluation metric.",
        "input": "The training dataset consists of 1000 datapoints. The evaluation metric is the mean squared error of the predictions on a separate test dataset consisting of 500 datapoints.",
        "output": "def findMaximizingParams(X_train,X_test,y_train,y_test):\n    best_score = float(\"-inf\")\n    best_params = None\n    p1s = [0,1,2]\n    p2s = [0.1,0.3,0.5]\n    p3s = [2,4,6]\n    for p1 in p1s:\n        for p2 in p2s:\n            for p3 in p3s:\n                curr_params = (p1,p2,p3)\n                model = Model(p1,p2,p3)\n                model.fit(X_train,y_train)\n                predictions = model.predict(X_test)\n                curr_score = mean_squared_error(y_test, predictions)\n                if curr_score > best_score:\n                    best_score = curr_score\n                    best_params = curr_params\n    return best_params",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to find an optimal set of parameters (p1,p2,p3) to maximize an evaluation metric.\n\n### Input:\nThe training dataset consists of 1000 datapoints. The evaluation metric is the mean squared error of the predictions on a separate test dataset consisting of 500 datapoints.\n\n### Output:\ndef findMaximizingParams(X_train,X_test,y_train,y_test):\n    best_score = float(\"-inf\")\n    best_params = None\n    p1s = [0,1,2]\n    p2s = [0.1,0.3,0.5]\n    p3s = [2,4,6]\n    for p1 in p1s:\n        for p2 in p2s:\n            for p3 in p3s:\n                curr_params = (p1,p2,p3)\n                model = Model(p1,p2,p3)\n                model.fit(X_train,y_train)\n                predictions = model.predict(X_test)\n                curr_score = mean_squared_error(y_test, predictions)\n                if curr_score > best_score:\n                    best_score = curr_score\n                    best_params = curr_params\n    return best_params"
    },
    {
        "instruction": "Modify the given function to sort a list of tuples based on the second index of each tuple in Python.",
        "input": "def sort_list_of_tuples(input_list):\n    pass",
        "output": "def sort_list_of_tuples(input_list):\n    sorted_list = sorted(input_list, key=lambda tup: tup[1])\n    return sorted_list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the given function to sort a list of tuples based on the second index of each tuple in Python.\n\n### Input:\ndef sort_list_of_tuples(input_list):\n    pass\n\n### Output:\ndef sort_list_of_tuples(input_list):\n    sorted_list = sorted(input_list, key=lambda tup: tup[1])\n    return sorted_list"
    },
    {
        "instruction": "Write an algorithm in Python to remove duplicates from an unsorted linked list.",
        "input": "",
        "output": "def remove_duplicates(head):\n    if head is None: \n        return None \n    current = head \n    while current.next: \n        if current.data == current.next.data: \n            current.next = current.next.next \n        else: \n            current = current.next\n    return head",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to remove duplicates from an unsorted linked list.\n\n### Input:\n\n\n### Output:\ndef remove_duplicates(head):\n    if head is None: \n        return None \n    current = head \n    while current.next: \n        if current.data == current.next.data: \n            current.next = current.next.next \n        else: \n            current = current.next\n    return head"
    },
    {
        "instruction": "Suggest a way to optimize the following Python code snippet.",
        "input": "def find_max(arr):\n    '''This function returns the maximum element in the given array.'''\n    maxval = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > maxval:\n            maxval = arr[i]\n    return maxval",
        "output": "def find_max(arr):\n    '''This function returns the maximum element in the given array.'''\n    maxval = arr[0]\n    for num in arr:\n        if num > maxval:\n            maxval = num\n    return maxval",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a way to optimize the following Python code snippet.\n\n### Input:\ndef find_max(arr):\n    '''This function returns the maximum element in the given array.'''\n    maxval = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > maxval:\n            maxval = arr[i]\n    return maxval\n\n### Output:\ndef find_max(arr):\n    '''This function returns the maximum element in the given array.'''\n    maxval = arr[0]\n    for num in arr:\n        if num > maxval:\n            maxval = num\n    return maxval"
    },
    {
        "instruction": "Create a Google App Engine application in Python that greets users with a \"Hello World\" message.",
        "input": "Not applicable",
        "output": "# app.py \nimport webapp2\n\nclass MainPage(webapp2.RequestHandler):\n    def get(self):\n        self.response.headers['Content-Type'] = 'text/plain'\n        self.response.write('Hello, World!')\n\n#app.yaml\nruntime: python27\napi_version: 1\nthreadsafe: true\n\nhandlers:\n- url: /.*\n  script: app.app",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Google App Engine application in Python that greets users with a \"Hello World\" message.\n\n### Input:\nNot applicable\n\n### Output:\n# app.py \nimport webapp2\n\nclass MainPage(webapp2.RequestHandler):\n    def get(self):\n        self.response.headers['Content-Type'] = 'text/plain'\n        self.response.write('Hello, World!')\n\n#app.yaml\nruntime: python27\napi_version: 1\nthreadsafe: true\n\nhandlers:\n- url: /.*\n  script: app.app"
    },
    {
        "instruction": "Create a function in Python to compute a Fibonacci sequence. The function should take as input a positive integer n and return the nth Fibonacci number",
        "input": "10",
        "output": "def fibonacci(n): \n if n < 0: \n  print(\"Incorrect input\") \n elif n == 0: \n  return 0\n elif n == 1: \n  return 1\n else: \n  return fibonacci(n-1) + fibonacci(n-2) \n\nprint(fibonacci(10))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to compute a Fibonacci sequence. The function should take as input a positive integer n and return the nth Fibonacci number\n\n### Input:\n10\n\n### Output:\ndef fibonacci(n): \n if n < 0: \n  print(\"Incorrect input\") \n elif n == 0: \n  return 0\n elif n == 1: \n  return 1\n else: \n  return fibonacci(n-1) + fibonacci(n-2) \n\nprint(fibonacci(10))"
    },
    {
        "instruction": "Develop an AI chatbot using Python that can answer simple questions.",
        "input": "Not applicable",
        "output": "import nltk\nimport numpy\nimport random\nimport string\nimport re\nf=open('chatbot.txt','r',errors = 'ignore')\nraw=f.read()\nraw=raw.lower()\n\n\n# Tokenization\nsent_tokens = nltk.sent_tokenize(raw) # converts to list of sentences \nword_tokens = nltk.word_tokenize(raw) # converts to list of words\n\n# Preprocessing\nlemmer = nltk.stem.WordNetLemmatizer()\ndef LemTokens(tokens):\n return [lemmer.lemmatize(token) for token in tokens]\nremove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)\ndef LemNormalize(text):\n return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))\n\n# Keyword Matching\nGREETING_INPUTS = (\"hello\", \"hi\", \"greetings\", \"sup\", \"what's up\",\"hey\",)\nGREETING_RESPONSES = [\"hi\", \"hey\", \"*nods*\", \"hi there\", \"hello\", \"I am glad! You are talking to me\"]\n\ndef greeting(sentence):\n\nfor word in sentence.split():\n if word.lower() in GREETING_INPUTS:\n return random.choice(GREETING_RESPONSES)\n\n# Generating Response\ndef response(user_response):\n robo_response=''\n sent_tokens.append(user_response)\n TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')\n tfidf = TfidfVec.fit_transform(sent_tokens)\n vals = cosine_similarity(tfidf[-1], tfidf)\n idx=vals.argsort()[0][-2]\n flat = vals.flatten()\n flat.sort()\n req_tfidf = flat[-2]\n if(req_tfidf==0):\n robo_response=robo_response+\"I am sorry! I don't understand you\"\n return robo_response\n else:\n robo_response = robo_response+sent_tokens[idx]\n return robo_response\n\nflag=True\nprint(\"ROBO: My name is Robo. I will answer your queries about Chatbots. If you want to exit, type Bye!\")\nwhile(flag==True):\n user_response = input()\n user_response=user_response.lower()\n if(user_response!='bye'):\n if(user_response=='thanks' or user_response=='thank you' ):\n flag=False\n print(\"ROBO: You are welcome..\")\n else:\n if(greeting(user_response)!=None):\n print(\"ROBO: \"+greeting(user_response))\n else:\n print(\"ROBO: \",end=\"\")\n print(response(user_response))\n sent_tokens.remove(user_response)\n else:\n flag=False\n print(\"ROBO: Bye! take care..\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an AI chatbot using Python that can answer simple questions.\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk\nimport numpy\nimport random\nimport string\nimport re\nf=open('chatbot.txt','r',errors = 'ignore')\nraw=f.read()\nraw=raw.lower()\n\n\n# Tokenization\nsent_tokens = nltk.sent_tokenize(raw) # converts to list of sentences \nword_tokens = nltk.word_tokenize(raw) # converts to list of words\n\n# Preprocessing\nlemmer = nltk.stem.WordNetLemmatizer()\ndef LemTokens(tokens):\n return [lemmer.lemmatize(token) for token in tokens]\nremove_punct_dict = dict((ord(punct), None) for punct in string.punctuation)\ndef LemNormalize(text):\n return LemTokens(nltk.word_tokenize(text.lower().translate(remove_punct_dict)))\n\n# Keyword Matching\nGREETING_INPUTS = (\"hello\", \"hi\", \"greetings\", \"sup\", \"what's up\",\"hey\",)\nGREETING_RESPONSES = [\"hi\", \"hey\", \"*nods*\", \"hi there\", \"hello\", \"I am glad! You are talking to me\"]\n\ndef greeting(sentence):\n\nfor word in sentence.split():\n if word.lower() in GREETING_INPUTS:\n return random.choice(GREETING_RESPONSES)\n\n# Generating Response\ndef response(user_response):\n robo_response=''\n sent_tokens.append(user_response)\n TfidfVec = TfidfVectorizer(tokenizer=LemNormalize, stop_words='english')\n tfidf = TfidfVec.fit_transform(sent_tokens)\n vals = cosine_similarity(tfidf[-1], tfidf)\n idx=vals.argsort()[0][-2]\n flat = vals.flatten()\n flat.sort()\n req_tfidf = flat[-2]\n if(req_tfidf==0):\n robo_response=robo_response+\"I am sorry! I don't understand you\"\n return robo_response\n else:\n robo_response = robo_response+sent_tokens[idx]\n return robo_response\n\nflag=True\nprint(\"ROBO: My name is Robo. I will answer your queries about Chatbots. If you want to exit, type Bye!\")\nwhile(flag==True):\n user_response = input()\n user_response=user_response.lower()\n if(user_response!='bye'):\n if(user_response=='thanks' or user_response=='thank you' ):\n flag=False\n print(\"ROBO: You are welcome..\")\n else:\n if(greeting(user_response)!=None):\n print(\"ROBO: \"+greeting(user_response))\n else:\n print(\"ROBO: \",end=\"\")\n print(response(user_response))\n sent_tokens.remove(user_response)\n else:\n flag=False\n print(\"ROBO: Bye! take care..\")"
    },
    {
        "instruction": "Create a Python program that takes two integers as inputs and prints the largest number of them.",
        "input": "First Integer: 12\nSecond Integer: 44",
        "output": "num1 = 12\nnum2 = 44\n\nif (num1 > num2):\n    print(num1)\nelif (num2 > num1):\n    print(num2)\nelse:\n    print(\"Both numbers are equal\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes two integers as inputs and prints the largest number of them.\n\n### Input:\nFirst Integer: 12\nSecond Integer: 44\n\n### Output:\nnum1 = 12\nnum2 = 44\n\nif (num1 > num2):\n    print(num1)\nelif (num2 > num1):\n    print(num2)\nelse:\n    print(\"Both numbers are equal\")"
    },
    {
        "instruction": "Create a web scrapper in Python that collects all the blog posts from the given website and stores them in a SQLite database.",
        "input": "Website URL: https://blog.floydhub.com/",
        "output": "import requests\nimport sqlite3\nfrom bs4 import BeautifulSoup\n\n# Get the web page content\nurl = 'https://blog.floydhub.com/'\npage = requests.get(url)\n\n# Parse the page\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Extract the posts\nposts = soup.find_all('div', {'class': 'post-content'})\n\n# Create a database connection\nconn = sqlite3.connect('blog_posts.db')\ncur = conn.cursor()\n\n# Create the table\ncur.execute('CREATE TABLE IF NOT EXISTS posts (title TEXT, content TEXT)')\n\n# Insert the posts into the database\nfor post in posts:\n title = post.find('h2').get_text()\n content = post.find('p').get_text()\n cur.execute('INSERT INTO posts VALUES (?,?)', (title,content))\n\n# Commit the changes\nconn.commit()\n\n# Close the connection\nconn.close()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scrapper in Python that collects all the blog posts from the given website and stores them in a SQLite database.\n\n### Input:\nWebsite URL: https://blog.floydhub.com/\n\n### Output:\nimport requests\nimport sqlite3\nfrom bs4 import BeautifulSoup\n\n# Get the web page content\nurl = 'https://blog.floydhub.com/'\npage = requests.get(url)\n\n# Parse the page\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Extract the posts\nposts = soup.find_all('div', {'class': 'post-content'})\n\n# Create a database connection\nconn = sqlite3.connect('blog_posts.db')\ncur = conn.cursor()\n\n# Create the table\ncur.execute('CREATE TABLE IF NOT EXISTS posts (title TEXT, content TEXT)')\n\n# Insert the posts into the database\nfor post in posts:\n title = post.find('h2').get_text()\n content = post.find('p').get_text()\n cur.execute('INSERT INTO posts VALUES (?,?)', (title,content))\n\n# Commit the changes\nconn.commit()\n\n# Close the connection\nconn.close()"
    },
    {
        "instruction": "Create a Python implementation of the bubble sort algorithm.",
        "input": "[12, 11, 13, 5, 6]",
        "output": "def bubble_sort(arr):\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\nresult = bubble_sort([12, 11, 13, 5, 6])\nprint(result) # Output: [5, 6, 11, 12, 13]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python implementation of the bubble sort algorithm.\n\n### Input:\n[12, 11, 13, 5, 6]\n\n### Output:\ndef bubble_sort(arr):\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\nresult = bubble_sort([12, 11, 13, 5, 6])\nprint(result) # Output: [5, 6, 11, 12, 13]"
    },
    {
        "instruction": "Generate a python script to extract a random subset of size 100 from a given list of items.",
        "input": "li = [1,2,3,4,5,6,7,8,9,10]",
        "output": "import random\n\ndef extract_random_subset(li, size=100): \n    subset = [] \n    while len(subset) < size: \n        rand_ele = random.choice(li)\n        if rand_ele not in subset: \n            subset.append(rand_ele) \n    return subset",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python script to extract a random subset of size 100 from a given list of items.\n\n### Input:\nli = [1,2,3,4,5,6,7,8,9,10]\n\n### Output:\nimport random\n\ndef extract_random_subset(li, size=100): \n    subset = [] \n    while len(subset) < size: \n        rand_ele = random.choice(li)\n        if rand_ele not in subset: \n            subset.append(rand_ele) \n    return subset"
    },
    {
        "instruction": "Write a python script to randomly generate an 8-character string which contains uppercase letters, lowercase letters and digits.",
        "input": "",
        "output": "import string \nimport random\n\ndef generate_code():\n    '''This function will generate an 8-character string with uppercase letters, lowercase letters and digits.'''\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    code = ''.join(random.choice(chars) for _ in range(8))\n    return code",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to randomly generate an 8-character string which contains uppercase letters, lowercase letters and digits.\n\n### Input:\n\n\n### Output:\nimport string \nimport random\n\ndef generate_code():\n    '''This function will generate an 8-character string with uppercase letters, lowercase letters and digits.'''\n    chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    code = ''.join(random.choice(chars) for _ in range(8))\n    return code"
    },
    {
        "instruction": "Edit the following Python program such that it prints out the multiplication table for the given number n.",
        "input": "n = 5",
        "output": "n = 5\n\n# printing the multiplication table\nfor i in range(1, 11): \n    print(n, 'x', i, '=', n * i)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python program such that it prints out the multiplication table for the given number n.\n\n### Input:\nn = 5\n\n### Output:\nn = 5\n\n# printing the multiplication table\nfor i in range(1, 11): \n    print(n, 'x', i, '=', n * i)"
    },
    {
        "instruction": "Write a Python script to clean a dataset containing stock market data for a company. The script should remove superfluous columns, normalize the values, and check for missing data.",
        "input": "Not applicable",
        "output": "import pandas as pd\n\n# Read in dataset \ndata = pd.read_csv('dataset.csv')\n\n# Remove any superfluous columns\ndata = data.drop(columns=['Unnamed', 'column'])\n\n# Normalize values \ndata['price'] = data['price'].apply(lambda x: x / max(data['price']))\n\n# Check for missing values\ndata = data.dropna()\n\n# Save cleaned dataset \ndata.to_csv('cleaned_dataset.csv', index=False)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to clean a dataset containing stock market data for a company. The script should remove superfluous columns, normalize the values, and check for missing data.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\n\n# Read in dataset \ndata = pd.read_csv('dataset.csv')\n\n# Remove any superfluous columns\ndata = data.drop(columns=['Unnamed', 'column'])\n\n# Normalize values \ndata['price'] = data['price'].apply(lambda x: x / max(data['price']))\n\n# Check for missing values\ndata = data.dropna()\n\n# Save cleaned dataset \ndata.to_csv('cleaned_dataset.csv', index=False)"
    },
    {
        "instruction": "Edit a Python program to make a simple quiz game. The program should ask 3 questions and when all of the questions have been answered it should provide feedback depending on the number of correct answers.",
        "input": "question_1_text = \"What color is the sky?\"\nquestion_1_possible_answers = [\"blue\", \"green\", \"red\"]\nquestion_1_correct_answer = \"blue\"\n\nquestion_2_text = \"What shape is the Earth?\"\nquestion_2_possible_answers = [\"square\", \"sphere\", \"triangle\"]\nquestion_2_correct_answer = \"sphere\"\n\nquestion_3_text = \"What is the capital of France?\"\nquestion_3_possible_answers = [\"Paris\", \"London\", \"Madrid\"]\nquestion_3_correct_answer = \"Paris\"",
        "output": "questions = [\n {\n 'question': question_1_text,\n 'possible_answers': question_1_possible_answers,\n 'correct_answer': question_1_correct_answer\n },\n {\n 'question': question_2_text,\n 'possible_answers': question_2_possible_answers,\n 'correct_answer': question_2_correct_answer\n },\n {\n  'question': question_3_text,\n  'possible_answers': question_3_possible_answers,\n  'correct_answer': question_3_correct_answer\n }\n]\n\ncorrect_answers = 0\n\nfor question in questions:\n print(question['question'])\n for answer in question['possible_answers']:\n print(answer)\n user_answer = input('Your answer: ')\n if user_answer == question['correct_answer']:\n correct_answers += 1\n\nif correct_answers == 3:\n print('You got all 3 questions right!')\nelif correct_answers == 2:\n print('You got 2 questions right!')\nelif correct_answers == 1:\n print('You got 1 question right!')\nelse:\n print('You got no questions right!')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit a Python program to make a simple quiz game. The program should ask 3 questions and when all of the questions have been answered it should provide feedback depending on the number of correct answers.\n\n### Input:\nquestion_1_text = \"What color is the sky?\"\nquestion_1_possible_answers = [\"blue\", \"green\", \"red\"]\nquestion_1_correct_answer = \"blue\"\n\nquestion_2_text = \"What shape is the Earth?\"\nquestion_2_possible_answers = [\"square\", \"sphere\", \"triangle\"]\nquestion_2_correct_answer = \"sphere\"\n\nquestion_3_text = \"What is the capital of France?\"\nquestion_3_possible_answers = [\"Paris\", \"London\", \"Madrid\"]\nquestion_3_correct_answer = \"Paris\"\n\n### Output:\nquestions = [\n {\n 'question': question_1_text,\n 'possible_answers': question_1_possible_answers,\n 'correct_answer': question_1_correct_answer\n },\n {\n 'question': question_2_text,\n 'possible_answers': question_2_possible_answers,\n 'correct_answer': question_2_correct_answer\n },\n {\n  'question': question_3_text,\n  'possible_answers': question_3_possible_answers,\n  'correct_answer': question_3_correct_answer\n }\n]\n\ncorrect_answers = 0\n\nfor question in questions:\n print(question['question'])\n for answer in question['possible_answers']:\n print(answer)\n user_answer = input('Your answer: ')\n if user_answer == question['correct_answer']:\n correct_answers += 1\n\nif correct_answers == 3:\n print('You got all 3 questions right!')\nelif correct_answers == 2:\n print('You got 2 questions right!')\nelif correct_answers == 1:\n print('You got 1 question right!')\nelse:\n print('You got no questions right!')"
    },
    {
        "instruction": "Generate a Python program that take a list y and a number n, and rotate y by n.",
        "input": "[1, 2, 3, 4, 5] and n = 2",
        "output": "def rotate(y , n):\n    temp = y[0:n]\n    for i in range (len(y) - n):\n        y[i] = y[n + i]\n    for i in range (n):\n        y[i + len(y) - n] = temp[i]\n    return y",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that take a list y and a number n, and rotate y by n.\n\n### Input:\n[1, 2, 3, 4, 5] and n = 2\n\n### Output:\ndef rotate(y , n):\n    temp = y[0:n]\n    for i in range (len(y) - n):\n        y[i] = y[n + i]\n    for i in range (n):\n        y[i + len(y) - n] = temp[i]\n    return y"
    },
    {
        "instruction": "Write a Python program to extract all the words from a given sentence that have more than 3 characters",
        "input": "Not applicable",
        "output": "sentence = 'This is an example sentence'\nwords = [word for word in sentence.split() if len(word) > 3]\nprint (words)\n# Output: ['This', 'example', 'sentence']",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to extract all the words from a given sentence that have more than 3 characters\n\n### Input:\nNot applicable\n\n### Output:\nsentence = 'This is an example sentence'\nwords = [word for word in sentence.split() if len(word) > 3]\nprint (words)\n# Output: ['This', 'example', 'sentence']"
    },
    {
        "instruction": "Write a Python Program to create a triangle of asterisks of a given height as shown below.",
        "input": "",
        "output": "def drawTriangle(n):\n    for i in range(n):\n        for j in range(i+1):\n            print(\"*\", end=\"\")\n        print(\"\\r\")\n\ndrawTriangle(5)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python Program to create a triangle of asterisks of a given height as shown below.\n\n### Input:\n\n\n### Output:\ndef drawTriangle(n):\n    for i in range(n):\n        for j in range(i+1):\n            print(\"*\", end=\"\")\n        print(\"\\r\")\n\ndrawTriangle(5)"
    },
    {
        "instruction": "Compress a given folder using GZip in Python.",
        "input": "folder /files",
        "output": "import gzip \nimport shutil \n\n# Source files to compress \nsource = '/files'\n  \n# Destination to store compressed files \ndestination = '/files/compressed'\n  \n# set the compression level \ncompression_level = 3\n\nshutil.make_archive(destination, 'gz', source, compression_level)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompress a given folder using GZip in Python.\n\n### Input:\nfolder /files\n\n### Output:\nimport gzip \nimport shutil \n\n# Source files to compress \nsource = '/files'\n  \n# Destination to store compressed files \ndestination = '/files/compressed'\n  \n# set the compression level \ncompression_level = 3\n\nshutil.make_archive(destination, 'gz', source, compression_level)"
    },
    {
        "instruction": "Write a Python program to find all unique triplets in the array which give the sum of zero.",
        "input": "nums = [-1, 0, 1, 2, -1, -4]",
        "output": "def threeSum(nums): \n\tres = [] \n\tnums.sort() \n\n\tfor i in range(len(nums)-2): \n\t\tif i > 0 and nums[i] == nums[i-1]: \n\t\t\tcontinue\n\t\t\t\n\t\tl, r = i+1, len(nums)-1\n\t\twhile l < r: \n\t\t\ts = nums[i] + nums[l] + nums[r]  \n\t\t\tif s > 0: \n\t\t\t\tr -= 1\n\t\t\telif s < 0: \n\t\t\t\tl += 1\n\t\t\telse: \n\t\t\t\tres.append([nums[i], nums[l], nums[r]]) \n\t\t\t\twhile l < r and nums[l] == nums[l+1]: \n\t\t\t\t\tl += 1\n\t\t\t\twhile l < r and nums[r] == nums[r-1]: \n\t\t\t\t\tr -= 1\n\t\t\t\tl += 1\n\t\t\t\tr -= 1\n\treturn res \n\nprint(threeSum(nums))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find all unique triplets in the array which give the sum of zero.\n\n### Input:\nnums = [-1, 0, 1, 2, -1, -4]\n\n### Output:\ndef threeSum(nums): \n\tres = [] \n\tnums.sort() \n\n\tfor i in range(len(nums)-2): \n\t\tif i > 0 and nums[i] == nums[i-1]: \n\t\t\tcontinue\n\t\t\t\n\t\tl, r = i+1, len(nums)-1\n\t\twhile l < r: \n\t\t\ts = nums[i] + nums[l] + nums[r]  \n\t\t\tif s > 0: \n\t\t\t\tr -= 1\n\t\t\telif s < 0: \n\t\t\t\tl += 1\n\t\t\telse: \n\t\t\t\tres.append([nums[i], nums[l], nums[r]]) \n\t\t\t\twhile l < r and nums[l] == nums[l+1]: \n\t\t\t\t\tl += 1\n\t\t\t\twhile l < r and nums[r] == nums[r-1]: \n\t\t\t\t\tr -= 1\n\t\t\t\tl += 1\n\t\t\t\tr -= 1\n\treturn res \n\nprint(threeSum(nums))"
    },
    {
        "instruction": "Fix the bug in the following Python program:",
        "input": "def prime_factorization(n):\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors",
        "output": "def prime_factorization(n):\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFix the bug in the following Python program:\n\n### Input:\ndef prime_factorization(n):\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors\n\n### Output:\ndef prime_factorization(n):\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors"
    },
    {
        "instruction": "Create a Python program that takes two strings as input, checks if the two strings are anagrams of each other, and prints the output.",
        "input": "listen, silent",
        "output": "def is_anagram(str1, str2):\n    str1 = str1.replace(\" \", \"\").lower()\n    str2 = str2.replace(\" \", \"\").lower()\n\n    if len(str1) != len(str2):\n        return False\n\n    count = {}\n\n    for letter in str1:\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n    \n    for letter in str2:\n        if letter in count:\n            count[letter] -= 1\n        else:\n            count[letter] = 1\n    \n    for k in count:\n        if count[k] != 0:\n            return False\n        \n    return True\n\nstr1 = input(\"Enter the first string: \")\nstr2 = input(\"Enter the second string: \")\n\nif is_anagram(str1, str2):\n    print(\"The strings are anagrams.\")\nelse:\n    print(\"The strings are not anagrams.\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes two strings as input, checks if the two strings are anagrams of each other, and prints the output.\n\n### Input:\nlisten, silent\n\n### Output:\ndef is_anagram(str1, str2):\n    str1 = str1.replace(\" \", \"\").lower()\n    str2 = str2.replace(\" \", \"\").lower()\n\n    if len(str1) != len(str2):\n        return False\n\n    count = {}\n\n    for letter in str1:\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n    \n    for letter in str2:\n        if letter in count:\n            count[letter] -= 1\n        else:\n            count[letter] = 1\n    \n    for k in count:\n        if count[k] != 0:\n            return False\n        \n    return True\n\nstr1 = input(\"Enter the first string: \")\nstr2 = input(\"Enter the second string: \")\n\nif is_anagram(str1, str2):\n    print(\"The strings are anagrams.\")\nelse:\n    print(\"The strings are not anagrams.\")"
    },
    {
        "instruction": "Create a program in Python that computes the n-th Fibonacci number.",
        "input": "15",
        "output": "def calculate_fibonacci(n):\n    \"\"\"\n    Calculates the n-th Fibonacci number.\n    Args:\n        n: the n-th Fibonacci number.\n    Returns:\n        The Fibonacci number at a given index.\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    # Calculate n-th Fibonacci number\n    return calculate_fibonacci(n-1) + calculate_fibonacci(n-2)\n\nfib = calculate_fibonacci(15)\nprint(fib)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that computes the n-th Fibonacci number.\n\n### Input:\n15\n\n### Output:\ndef calculate_fibonacci(n):\n    \"\"\"\n    Calculates the n-th Fibonacci number.\n    Args:\n        n: the n-th Fibonacci number.\n    Returns:\n        The Fibonacci number at a given index.\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n\n    # Calculate n-th Fibonacci number\n    return calculate_fibonacci(n-1) + calculate_fibonacci(n-2)\n\nfib = calculate_fibonacci(15)\nprint(fib)"
    },
    {
        "instruction": "Create an algorithm for linear regression using Stochastic Gradient Descent in Python.",
        "input": "Not applicable",
        "output": "import numpy as np\n\ndef gradient_descent(X, y, n_iter=100, learning_rate=0.01):\n    \"\"\"\n    Perform Linear Regression using Stochastic Gradient Descent\n    :param X: Train set\n    :param y: Label set\n    :param n_iter: number of iterations (default=100)\n    :param learning_rate: learning rate (default=0.01)\n    :return: coefficient\n    \"\"\"\n    n_samples, n_features = X.shape\n    # initialize coefficients\n    coef = np.zeros(n_features)\n    # gradient vector\n    grad = np.zeros(n_features)\n    # iterate for n_iter\n    for i in range(n_iter):\n        # compute gradient\n        for idx, xi in enumerate(X):\n            error = y[idx] - np.dot(xi, coef)\n            grad += xi * error\n        # update coefficients\n        coef += learning_rate * grad\n    return coef",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm for linear regression using Stochastic Gradient Descent in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\n\ndef gradient_descent(X, y, n_iter=100, learning_rate=0.01):\n    \"\"\"\n    Perform Linear Regression using Stochastic Gradient Descent\n    :param X: Train set\n    :param y: Label set\n    :param n_iter: number of iterations (default=100)\n    :param learning_rate: learning rate (default=0.01)\n    :return: coefficient\n    \"\"\"\n    n_samples, n_features = X.shape\n    # initialize coefficients\n    coef = np.zeros(n_features)\n    # gradient vector\n    grad = np.zeros(n_features)\n    # iterate for n_iter\n    for i in range(n_iter):\n        # compute gradient\n        for idx, xi in enumerate(X):\n            error = y[idx] - np.dot(xi, coef)\n            grad += xi * error\n        # update coefficients\n        coef += learning_rate * grad\n    return coef"
    },
    {
        "instruction": "Write a Python program to create a chatbot for customer service.",
        "input": "Not applicable",
        "output": "import random\n\nbot_template = \"BOT : {0}\"\nuser_template = \"USER : {0}\"\n\n# Define a dictionary with the predefined responses\nresponses = {\n  \"what's your name?\": \"My name is Chatbot.\",\n  \"what's the weather today?\": \"It's sunny today.\",\n  \"default\": \"Default message\"\n}\n\n# Return the matching response if there is one, default otherwise\ndef respond(message):\n    # Check if the message is in the responses\n    if message in responses:\n        # Return the matching message\n        bot_message = responses[message]\n    else:\n        # Return the \"default\" message\n        bot_message = responses[\"default\"]\n    return bot_message\n\n# Define a function that sends a message to the bot: send_message\ndef send_message(message):\n    # Print user_template including the user_message\n    print(user_template.format(message))\n    # Get the bot's response to the message\n    response = respond(message)\n    # Print the bot template including the bot's response.\n    print(bot_template.format(response))\n\n\n#\n# Send a message to the bot\nsend_message(\"what's your name?\")\nsend_message(\"what's the weather today?\")\nsend_message(\"some random message\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a chatbot for customer service.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\nbot_template = \"BOT : {0}\"\nuser_template = \"USER : {0}\"\n\n# Define a dictionary with the predefined responses\nresponses = {\n  \"what's your name?\": \"My name is Chatbot.\",\n  \"what's the weather today?\": \"It's sunny today.\",\n  \"default\": \"Default message\"\n}\n\n# Return the matching response if there is one, default otherwise\ndef respond(message):\n    # Check if the message is in the responses\n    if message in responses:\n        # Return the matching message\n        bot_message = responses[message]\n    else:\n        # Return the \"default\" message\n        bot_message = responses[\"default\"]\n    return bot_message\n\n# Define a function that sends a message to the bot: send_message\ndef send_message(message):\n    # Print user_template including the user_message\n    print(user_template.format(message))\n    # Get the bot's response to the message\n    response = respond(message)\n    # Print the bot template including the bot's response.\n    print(bot_template.format(response))\n\n\n#\n# Send a message to the bot\nsend_message(\"what's your name?\")\nsend_message(\"what's the weather today?\")\nsend_message(\"some random message\")"
    },
    {
        "instruction": "Develop a program in Python to delete a directory and all its content.",
        "input": "",
        "output": "import os, shutil\n\ndef delete_directory(path_to_dir):\n    # check if the path is a directory\n    if os.path.isdir(path_to_dir):\n        # delete the directory and all its content\n        shutil.rmtree(path_to_dir)\n        # print a message\n        print('The directory and all its content successfully deleted!')\n    else:\n        # if path is not a directory\n        print('ERROR: The path ' + path_to_dir + ' does not exist')\n\npath_to_dir = 'test_dir'\ndelete_directory(path_to_dir)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python to delete a directory and all its content.\n\n### Input:\n\n\n### Output:\nimport os, shutil\n\ndef delete_directory(path_to_dir):\n    # check if the path is a directory\n    if os.path.isdir(path_to_dir):\n        # delete the directory and all its content\n        shutil.rmtree(path_to_dir)\n        # print a message\n        print('The directory and all its content successfully deleted!')\n    else:\n        # if path is not a directory\n        print('ERROR: The path ' + path_to_dir + ' does not exist')\n\npath_to_dir = 'test_dir'\ndelete_directory(path_to_dir)"
    },
    {
        "instruction": "Design a Python script to calculate the count of words in a given sentence.",
        "input": "sentence = \"Hello World!\"",
        "output": "def word_count(sentence):\n    words = sentence.split(' ')\n    return len(words)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script to calculate the count of words in a given sentence.\n\n### Input:\nsentence = \"Hello World!\"\n\n### Output:\ndef word_count(sentence):\n    words = sentence.split(' ')\n    return len(words)"
    },
    {
        "instruction": "Write a Python program to optimize the following code snippet so that it runs faster",
        "input": "n = 10\narr = []\nfor i in range(n):\n  arr.append(i * i)\nprint(arr)",
        "output": "def optimizeCode():\n  n = 10\n  arr = [i * i for i in range(n)]\n  print(arr)\n\noptimizeCode()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize the following code snippet so that it runs faster\n\n### Input:\nn = 10\narr = []\nfor i in range(n):\n  arr.append(i * i)\nprint(arr)\n\n### Output:\ndef optimizeCode():\n  n = 10\n  arr = [i * i for i in range(n)]\n  print(arr)\n\noptimizeCode()"
    },
    {
        "instruction": "Compose an algorithm in Python that accepts a phone number and formats it in the (xxx) xxx-xxxx format.",
        "input": "1234567890",
        "output": "def format_phone_number(phone_num):\n    return f\"({phone_num[:3]}) {phone_num[3:6]}-{phone_num[6:]}\"\n\nnumber = \"1234567890\"\nformatted_number = format_phone_number(number)\nprint(formatted_number)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose an algorithm in Python that accepts a phone number and formats it in the (xxx) xxx-xxxx format.\n\n### Input:\n1234567890\n\n### Output:\ndef format_phone_number(phone_num):\n    return f\"({phone_num[:3]}) {phone_num[3:6]}-{phone_num[6:]}\"\n\nnumber = \"1234567890\"\nformatted_number = format_phone_number(number)\nprint(formatted_number)"
    },
    {
        "instruction": "Develop a Python program for a ring of sensors, where each sensor can detect whether its two neighbors are both active or not. The program should return the number of active sensors in the ring.",
        "input": "ringOfSensors = [1, 0, 1, 0, 1]",
        "output": "def countActiveSensors(ringOfSensors):\n    count = 0\n    for i in range(len(ringOfSensors)):\n        left_neighbor = ringOfSensors[(i - 1 + len(ringOfSensors)) % len(ringOfSensors)]\n        right_neighbor = ringOfSensors[(i + 1) % len(ringOfSensors)]\n        if left_neighbor == 1 and right_neighbor == 1:\n            count += 1\n\n    return count\n\nringOfSensors = [1, 0, 1, 0, 1]\nprint(countActiveSensors(ringOfSensors))\n\n// Output: 3",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program for a ring of sensors, where each sensor can detect whether its two neighbors are both active or not. The program should return the number of active sensors in the ring.\n\n### Input:\nringOfSensors = [1, 0, 1, 0, 1]\n\n### Output:\ndef countActiveSensors(ringOfSensors):\n    count = 0\n    for i in range(len(ringOfSensors)):\n        left_neighbor = ringOfSensors[(i - 1 + len(ringOfSensors)) % len(ringOfSensors)]\n        right_neighbor = ringOfSensors[(i + 1) % len(ringOfSensors)]\n        if left_neighbor == 1 and right_neighbor == 1:\n            count += 1\n\n    return count\n\nringOfSensors = [1, 0, 1, 0, 1]\nprint(countActiveSensors(ringOfSensors))\n\n// Output: 3"
    },
    {
        "instruction": "Generate a Python code to print all the animal types entered in a list",
        "input": "[\"dog\", \"cat\", \"mouse\", \"snake\"]",
        "output": "animal_list = [\"dog\", \"cat\", \"mouse\", \"snake\"] \n\nfor animal in animal_list:\n    print(animal)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code to print all the animal types entered in a list\n\n### Input:\n[\"dog\", \"cat\", \"mouse\", \"snake\"]\n\n### Output:\nanimal_list = [\"dog\", \"cat\", \"mouse\", \"snake\"] \n\nfor animal in animal_list:\n    print(animal)"
    },
    {
        "instruction": "Design a Python program to reduce a fraction to its lowest terms.",
        "input": "",
        "output": "def gcd(a, b): \n    if a == 0: \n        return b \n    return gcd(b % a, a) \n      \ndef reduceFraction(numerator, denominator): \n    common_divisor = gcd(numerator, denominator) \n      \n    reduced_numerator = numerator // common_divisor \n    reduced_denominator = denominator // common_divisor \n    return reduced_numerator, reduced_denominator \n\nnumerator = 12\ndenominator = 20\n\nreduced_numerator, reduced_denominator = reduceFraction(numerator, denominator) \nprint(f\"{numerator}/{denominator} is equivalent to {reduced_numerator}/{reduced_denominator}\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to reduce a fraction to its lowest terms.\n\n### Input:\n\n\n### Output:\ndef gcd(a, b): \n    if a == 0: \n        return b \n    return gcd(b % a, a) \n      \ndef reduceFraction(numerator, denominator): \n    common_divisor = gcd(numerator, denominator) \n      \n    reduced_numerator = numerator // common_divisor \n    reduced_denominator = denominator // common_divisor \n    return reduced_numerator, reduced_denominator \n\nnumerator = 12\ndenominator = 20\n\nreduced_numerator, reduced_denominator = reduceFraction(numerator, denominator) \nprint(f\"{numerator}/{denominator} is equivalent to {reduced_numerator}/{reduced_denominator}\")"
    },
    {
        "instruction": "Write a Python algorithm to convert the following text into a list of integers.",
        "input": "\"3, 17, 2, 9, 11\"",
        "output": "# convert a string to list of numbers\ndef convert_to_list(s):\n    numbers = s.split(',')\n    return [int(num) for num in numbers]\n\ntext = \"3, 17, 2, 9, 11\"\nint_list = convert_to_list(text)\nprint(int_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python algorithm to convert the following text into a list of integers.\n\n### Input:\n\"3, 17, 2, 9, 11\"\n\n### Output:\n# convert a string to list of numbers\ndef convert_to_list(s):\n    numbers = s.split(',')\n    return [int(num) for num in numbers]\n\ntext = \"3, 17, 2, 9, 11\"\nint_list = convert_to_list(text)\nprint(int_list)"
    },
    {
        "instruction": "Write a Python program to parse a JSON data and print the values.",
        "input": "{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}",
        "output": "\"\"\"\nWrite a Python program to parse a JSON data and print the values\n\"\"\"\n\nimport json\n\n# Load the input data as a json string\ndata = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\n\n# Parse the json string into a dictionary\nparsed_data = json.loads(data)\n\n# Print out the values\nfor key, value in parsed_data.items():\n    print(f'{key}: {value}')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to parse a JSON data and print the values.\n\n### Input:\n{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\n\n### Output:\n\"\"\"\nWrite a Python program to parse a JSON data and print the values\n\"\"\"\n\nimport json\n\n# Load the input data as a json string\ndata = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\n\n# Parse the json string into a dictionary\nparsed_data = json.loads(data)\n\n# Print out the values\nfor key, value in parsed_data.items():\n    print(f'{key}: {value}')"
    },
    {
        "instruction": "Design an algorithm in Python to search a number in an sorted array.",
        "input": "",
        "output": "def search(arr, x): \n    l = 0\n    r = len(arr) - 1\n    while l <= r: \n        mid = l + (r - l) // 2\n\n        if arr[mid] == x: \n            return mid \n        \n        elif arr[mid] < x: \n            l = mid + 1\n  \n        else: \n            r = mid - 1\n  \n    return -1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to search a number in an sorted array.\n\n### Input:\n\n\n### Output:\ndef search(arr, x): \n    l = 0\n    r = len(arr) - 1\n    while l <= r: \n        mid = l + (r - l) // 2\n\n        if arr[mid] == x: \n            return mid \n        \n        elif arr[mid] < x: \n            l = mid + 1\n  \n        else: \n            r = mid - 1\n  \n    return -1"
    },
    {
        "instruction": "Create a string matching algorithm in Python using Regular Expressions.",
        "input": "Not applicable",
        "output": "import re\n\n# Define the pattern\npattern = r'(apple|orange|banana)'\n\n# Test strings\nstrings = ['I ate an apple.',\n 'I love oranges!',\n 'This banana is delicious.',\n 'I cannot eat grapes.']\n\n# Create the regex object\nregex = re.compile(pattern, re.IGNORECASE)\n\n# Iterate through the strings\nfor string in strings:\n # Test if the regex matches\n if regex.search(string):\n print(f\"Matched: {string}\")\n# Output\n# Matched: I ate an apple.\n# Matched: I love oranges!\n# Matched: This banana is delicious.",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a string matching algorithm in Python using Regular Expressions.\n\n### Input:\nNot applicable\n\n### Output:\nimport re\n\n# Define the pattern\npattern = r'(apple|orange|banana)'\n\n# Test strings\nstrings = ['I ate an apple.',\n 'I love oranges!',\n 'This banana is delicious.',\n 'I cannot eat grapes.']\n\n# Create the regex object\nregex = re.compile(pattern, re.IGNORECASE)\n\n# Iterate through the strings\nfor string in strings:\n # Test if the regex matches\n if regex.search(string):\n print(f\"Matched: {string}\")\n# Output\n# Matched: I ate an apple.\n# Matched: I love oranges!\n# Matched: This banana is delicious."
    },
    {
        "instruction": "Create a fish shape using the given Python turtle library.",
        "input": "",
        "output": "import turtle\n\ndef draw_fish():\n    # draw the head\n    turtle.forward(40)\n    turtle.right(90)\n    turtle.forward(70) \n    turtle.left(150)\n    # draw the body\n    turtle.forward(100)\n    turtle.right(90)\n    turtle.forward(50)\n    # draw the tail\n    turtle.right(90)\n    turtle.forward(50)\n    turtle.right(130)\n    turtle.forward(90)\n    # draw the eyes\n    turtle.penup()\n    turtle.goto(30, 34)\n    turtle.pendown()\n    turtle.dot()\n    turtle.penup()\n    turtle.goto(70, 34)\n    turtle.pendown()\n    turtle.dot()\n\ndraw_fish()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a fish shape using the given Python turtle library.\n\n### Input:\n\n\n### Output:\nimport turtle\n\ndef draw_fish():\n    # draw the head\n    turtle.forward(40)\n    turtle.right(90)\n    turtle.forward(70) \n    turtle.left(150)\n    # draw the body\n    turtle.forward(100)\n    turtle.right(90)\n    turtle.forward(50)\n    # draw the tail\n    turtle.right(90)\n    turtle.forward(50)\n    turtle.right(130)\n    turtle.forward(90)\n    # draw the eyes\n    turtle.penup()\n    turtle.goto(30, 34)\n    turtle.pendown()\n    turtle.dot()\n    turtle.penup()\n    turtle.goto(70, 34)\n    turtle.pendown()\n    turtle.dot()\n\ndraw_fish()"
    },
    {
        "instruction": "Create a Python program to capitalize every word with more than 3 characters in a string",
        "input": "string = \"this is a test string\"",
        "output": "def capitalize_more_than_3_characters(string):\n    words = string.split()\n    new_string = []\n    \n    for word in words:\n        if len(word) > 3:\n            new_string.append(word.capitalize())\n        else:\n            new_string.append(word)\n    \n    return \" \".join(new_string)\n    \nstring = \"this is a test string\"\nprint(capitalize_more_than_3_characters(string))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to capitalize every word with more than 3 characters in a string\n\n### Input:\nstring = \"this is a test string\"\n\n### Output:\ndef capitalize_more_than_3_characters(string):\n    words = string.split()\n    new_string = []\n    \n    for word in words:\n        if len(word) > 3:\n            new_string.append(word.capitalize())\n        else:\n            new_string.append(word)\n    \n    return \" \".join(new_string)\n    \nstring = \"this is a test string\"\nprint(capitalize_more_than_3_characters(string))"
    },
    {
        "instruction": "Create a Python script to transform every item from a list into a string.",
        "input": "[1, 2, 3]",
        "output": "# Transform each item to a string \nlist_ = [1, 2, 3]\n\n# Transform the list\nstring_list = [str(item) for item in list_]\n\n# Print the transformed list\nprint(string_list)\n\n# Output\n['1', '2', '3']",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to transform every item from a list into a string.\n\n### Input:\n[1, 2, 3]\n\n### Output:\n# Transform each item to a string \nlist_ = [1, 2, 3]\n\n# Transform the list\nstring_list = [str(item) for item in list_]\n\n# Print the transformed list\nprint(string_list)\n\n# Output\n['1', '2', '3']"
    },
    {
        "instruction": "Write a Python code to display the area and volume of a cube with a given edge length.",
        "input": "3",
        "output": "def cube_info(edge_length):\n    area = 6 * edge_length**2\n    volume = edge_length**3\n    return area,volume\n\nedge_length = 3\narea, volume = cube_info(edge_length)\nprint(\"Area of the Cube:\", area)\nprint(\"Volume of the Cube:\", volume)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to display the area and volume of a cube with a given edge length.\n\n### Input:\n3\n\n### Output:\ndef cube_info(edge_length):\n    area = 6 * edge_length**2\n    volume = edge_length**3\n    return area,volume\n\nedge_length = 3\narea, volume = cube_info(edge_length)\nprint(\"Area of the Cube:\", area)\nprint(\"Volume of the Cube:\", volume)"
    },
    {
        "instruction": "Identify the output of the following Python expression:",
        "input": "(4+1)*20",
        "output": "100",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIdentify the output of the following Python expression:\n\n### Input:\n(4+1)*20\n\n### Output:\n100"
    },
    {
        "instruction": "This code contains various utility functions and classes for data processing and analysis. It includes functions for logging data to screen and file, file manipulation, plotting utilities, and math functions. It also includes a class for iterating over pairs of lists and tools for building with GSL and Cython. To use this code, simply import the necessary functions and classes into your own Python script.",
        "input": "",
        "output": "#!/usr/bin/env python3\n\n##ON APP MACHINE\n\nimport sys\n\nfrom os import listdir, mkdir\nfrom os.path import isdir, dirname, abspath\n\nimport os\nimport subprocess\n\nimport weakref\n\nfrom scipy import fftpack\nimport numpy as np\n\n## some global variables, this needs to be fixed at some point\ndefault_raw_data_loc = None#\"/exp_app2/appexp1/public/raw_data\"\ndefault_processed_data_loc = None#\"/home/brian/processed_files\"\n\nMetaData_directory =  dirname(abspath(__file__)) + '/data' ## change this if antenna_response_model is in a folder different from this module\n\n#### constants\nC = 299792458.0\nRTD = 180.0/3.1415926 ##radians to degrees\nn_air = 1.000293\nv_air = C/n_air\n\nlatlonCS002 = np.array([52.91512249, 6.869837540]) ## lattitude and longitude of CS002 in degrees\n\n#### log data to screen and to a file\n\nclass logger(object):\n    class std_writer(object):\n        def __init__(self, logger):\n            self.logger_ref = weakref.ref(logger)\n            \n        def write(self, msg):\n            logger=self.logger_ref()\n            logger.out_file.write(msg)\n            if logger.to_screen:\n                logger.old_stdout.write(msg)\n            \n        def flush(self):\n            logger=self.logger_ref()\n            logger.out_file.flush()\n    \n    \n    def __init__(self):\n        \n        self.has_stderr = False\n        self.has_stdout = False\n        \n        self.old_stderr = sys.stderr\n        self.old_stdout = sys.stdout\n        \n        self.set(\"out_log\")\n        \n    def set(self, fname, to_screen=True):\n        self.out_file = open(fname, 'w')\n        \n        self.set_to_screen( to_screen )\n        \n        \n    def __call__(self, *args):\n        for a in args:\n            if self.to_screen:\n                self.old_stdout.write(str(a))\n                self.old_stdout.write(\" \")\n                \n            self.out_file.write(str(a))\n            self.out_file.write(\" \")\n            \n        self.out_file.write(\"\\n\")\n        if self.to_screen:\n            self.old_stdout.write(\"\\n\")\n            \n        self.out_file.flush()\n        self.old_stdout.flush()\n        \n    def set_to_screen(self, to_screen=True):\n        self.to_screen = to_screen\n        \n    def take_stdout(self):\n        \n        if not self.has_stdout:\n            sys.stdout = self.std_writer(self)\n            self.has_stdout = True\n\t\t\t\t\t\t\t\n    def take_stderr(self):\n        \n        if not self.has_stderr:\n            sys.stderr = self.std_writer(self)\n            self.has_stderr = True\n            \n    def restore_stdout(self):\n        if self.has_stdout:\n            sys.stdout = self.old_stdout\n            self.has_stdout = False\n            \n    def restore_stderr(self):\n        if self.has_stderr:\n            sys.stderr = self.old_stderr\n            self.has_stderr = False\n            \n    def flush(self):\n        self.out_file.flush()\n            \n#    def __del__(self):\n#        self.restore_stderr()\n#        self.restore_stdout()\n        \n#log = logger()\n        \ndef iterate_pairs(list_one, list_two, list_one_avoid=[], list_two_avoid=[]):\n    \"\"\"returns an iterator that loops over all pairs of the two lists\"\"\"\n    for item_one in list_one:\n        if item_one in list_one_avoid:\n            continue\n        for item_two in list_two:\n            if item_two in list_two_avoid:\n                continue\n            yield (item_one, item_two)\n        \nimport re\nnatural_regex_pattern = re.compile('([0-9]+)')\ndef natural_sort( l ):\n    \"\"\" Sort the given iterable in the way that humans expect. Usefull for sorting station names.\"\"\"\n    convert = lambda text: int(text) if text.isdigit() else text\n    alphanum_key = lambda key: [ convert(c) for c in natural_regex_pattern.split(key) ]\n    return sorted(l, key = alphanum_key)\n        \n#### some file utils\n\ndef Fname_data(Fpath):\n    \"\"\" takes both pulse data file names and h5 file names and returns UTC_time, station_name, Fpath\"\"\"\n    Fname = Fpath.split('/')[-1]\n    data = Fname.split('_')\n    timeID = data[1]\n    station_name = data[2]\n    \n    if len(data[3][1:])==0:\n        file_number = 0\n    else:\n        file_number = int(data[3][1:])\n    \n    return timeID, station_name, Fpath, file_number\n\n\n##note that timeID is a string representing the datetime of a LOFAR trigger. such as:   D20130619T094846.507Z\n## the timeID is used to uniquely identify triggers\n\ndef get_timeID(fname):\n    data=fname.split(\"_\")\n    return data[1]\n\ndef year_from_timeID(timeID):\n    return timeID[1:5]\n\ndef raw_data_dir(timeID, data_loc=None):\n    \"\"\"gives path to the raw data folder for a particular timeID, given location of data structure. Defaults to  default_raw_data_loc\"\"\"\n    \n    if data_loc is None:\n        data_loc = default_raw_data_loc\n        if default_raw_data_loc is None:\n            print(\"ERROR: 'default_raw_data_loc' in utilities is not set.\")\n            quit()\n    \n    path = data_loc + '/' + year_from_timeID(timeID)+\"/\"+timeID\n    return path\n\ndef processed_data_dir(timeID, data_loc=None):\n    \"\"\"gives path to the analysis folders for a particular timeID, given location of data structure. Defaults to  default_processed_data_loc\n    makes the directory if it doesn't exist\"\"\"\n    \n    if data_loc is None:\n        data_loc = default_processed_data_loc\n        if default_processed_data_loc is None:\n            print(\"ERROR: 'default_processed_data_loc' in utilities is not set.\")\n            quit()\n    \n    path=data_loc + \"/\" + year_from_timeID(timeID)+\"/\"+timeID\n    if not isdir(path):\n        mkdir(path)\n    return path\n\n    \n## a python list where the keys are the number of a station and the values are the station name\nSId_to_Sname = [None]*209 #just to pre-initilize list, so syntax below is possible\nSId_to_Sname[1] = \"CS001\"\nSId_to_Sname[2] = \"CS002\"\nSId_to_Sname[3] = \"CS003\"\nSId_to_Sname[4] = \"CS004\"\nSId_to_Sname[5] = \"CS005\"\nSId_to_Sname[6] = \"CS006\"\nSId_to_Sname[7] = \"CS007\"\n#SId_to_Sname[8] = \"CS008\"\n#SId_to_Sname[9] = \"CS009\"\n#SId_to_Sname[10] = \"CS010\"\nSId_to_Sname[11] = \"CS011\"\n#SId_to_Sname[12] = \"CS012\"\nSId_to_Sname[13] = \"CS013\"\n#SId_to_Sname[14] = \"CS014\"\n#SId_to_Sname[15] = \"CS015\"\n#SId_to_Sname[16] = \"CS016\"\nSId_to_Sname[17] = \"CS017\"\n#SId_to_Sname[18] = \"CS018\"\n#SId_to_Sname[19] = \"CS019\"\n#SId_to_Sname[20] = \"CS020\"\nSId_to_Sname[21] = \"CS021\"\n#SId_to_Sname[22] = \"CS022\"\n#SId_to_Sname[23] = \"CS023\"\nSId_to_Sname[24] = \"CS024\"\n#SId_to_Sname[25] = \"CS025\"\nSId_to_Sname[26] = \"CS026\"\n#SId_to_Sname[27] = \"CS027\"\nSId_to_Sname[28] = \"CS028\"\n#SId_to_Sname[29] = \"CS029\"\nSId_to_Sname[30] = \"CS030\"\nSId_to_Sname[31] = \"CS031\"\nSId_to_Sname[32] = \"CS032\"\nSId_to_Sname[101] = \"CS101\"\n#SId_to_Sname[102] = \"CS102\"\nSId_to_Sname[103] = \"CS103\"\nSId_to_Sname[121] = \"CS201\"\nSId_to_Sname[141] = \"CS301\"\nSId_to_Sname[142] = \"CS302\"\nSId_to_Sname[161] = \"CS401\"\nSId_to_Sname[181] = \"CS501\"\n\n#SId_to_Sname[104] = \"RS104\"\n#SId_to_Sname[105] = \"RS105\"\nSId_to_Sname[106] = \"RS106\"\n#SId_to_Sname[107] = \"RS107\"\n#SId_to_Sname[108] = \"RS108\"\n#SId_to_Sname[109] = \"RS109\"\n#SId_to_Sname[122] = \"RS202\"\n#SId_to_Sname[123] = \"RS203\"\n#SId_to_Sname[124] = \"RS204\"\nSId_to_Sname[125] = \"RS205\"\n#SId_to_Sname[126] = \"RS206\"\n#SId_to_Sname[127] = \"RS207\"\nSId_to_Sname[128] = \"RS208\"\n#SId_to_Sname[129] = \"RS209\"\nSId_to_Sname[130] = \"RS210\"\n#SId_to_Sname[143] = \"RS303\"\n#SId_to_Sname[144] = \"RS304\"\nSId_to_Sname[145] = \"RS305\"\nSId_to_Sname[146] = \"RS306\"\nSId_to_Sname[147] = \"RS307\"\n#SId_to_Sname[148] = \"RS308\"\n#SId_to_Sname[149] = \"RS309\"\nSId_to_Sname[150] = \"RS310\"\nSId_to_Sname[166] = \"RS406\"\nSId_to_Sname[167] = \"RS407\"\nSId_to_Sname[169] = \"RS409\"\nSId_to_Sname[183] = \"RS503\"\nSId_to_Sname[188] = \"RS508\"\nSId_to_Sname[189] = \"RS509\"\n\nSId_to_Sname[201] = \"DE601\"\nSId_to_Sname[202] = \"DE602\"\nSId_to_Sname[203] = \"DE603\"\nSId_to_Sname[204] = \"DE604\"\nSId_to_Sname[205] = \"DE605\"\nSId_to_Sname[206] = \"FR606\"\nSId_to_Sname[207] = \"SE607\"\nSId_to_Sname[208] = \"UK608\"\n\n## this just \"inverts\" the previous list, discarding unused values\nSname_to_SId_dict = {name:ID for ID,name in enumerate(SId_to_Sname) if name is not None}\n\ndef even_antName_to_odd(even_ant_name):\n    even_num = int(even_ant_name)\n    odd_num = even_num + 1\n    return str( odd_num ).zfill( 9 )\n\ndef antName_is_even(ant_name):\n    return not int(ant_name)%2\n\ndef odd_antName_to_even(odd_ant_name):\n    odd_num = int(odd_ant_name)\n    even_num = odd_num + 1\n    return str( even_num ).zfill( 9 )\n    \n\n#### plotting utilities ####\ndef set_axes_equal(ax):\n    '''Make axes of 3D plot have equal scale so that spheres appear as spheres,\n    cubes as cubes, etc..  This is one possible solution to Matplotlib's\n    ax.set_aspect('equal') and ax.axis('equal') not working for 3D.\n    \n    \n\n    Input\n      ax: a matplotlib axis, e.g., as output from plt.gca().\n    '''\n\n    x_limits = ax.get_xlim3d()\n    y_limits = ax.get_ylim3d()\n    z_limits = ax.get_zlim3d()\n\n    x_range = abs(x_limits[1] - x_limits[0])\n    x_middle = np.mean(x_limits)\n    y_range = abs(y_limits[1] - y_limits[0])\n    y_middle = np.mean(y_limits)\n    z_range = abs(z_limits[1] - z_limits[0])\n    z_middle = np.mean(z_limits)\n\n    # The plot bounding box is a sphere in the sense of the infinity\n    # norm, hence I call half the max range the plot radius.\n    plot_radius = 0.5*max([x_range, y_range, z_range])\n\n    ax.set_xlim3d([x_middle - plot_radius, x_middle + plot_radius])\n    ax.set_ylim3d([y_middle - plot_radius, y_middle + plot_radius])\n    ax.set_zlim3d([z_middle - plot_radius, z_middle + plot_radius])\n\n    \n### some math functions? ###\n    \ndef normalize_angle_radians( angle_radians ):\n    \"\"\"For an angle in radians, return the equivalent angle that is garunteed be between -pi and pi\"\"\"\n    while angle_radians > np.pi:\n        angle_radians -= 2.0*np.pi\n    while angle_radians < -np.pi:\n        angle_radians += 2.0*np.pi\n    return angle_radians\n\ndef BoundingBox_collision(BB1, BB2):\n    \"\"\" return true if two N-D bounding boxes collide, False otherwise\"\"\"\n    for B1, B2 in zip(BB1,BB2):\n        if (B1[1] < B2[0]) or (B2[1] < B1[0]):\n            return False\n    return True\n\n### some build tools ####\ndef GSL_include():\n    \"\"\"return directory for location of GSL headers, useful when combining GSL and cython\"\"\"\n    \n    try:\n        gsl_include = subprocess.check_output('gsl-config --cflags', shell=True).decode('utf-8')[2:-1]\n    except subprocess.CalledProcessError:\n        gsl_include = os.getenv('LIB_GSL')\n        if gsl_include is None:\n            # Environmental variable LIB_GSL not set, use hardcoded path.\n            gsl_include = r\"c:\\Program Files\\GnuWin32\\include\"\n        else:\n            gsl_include += \"/include\"\n\n    assert gsl_include != '', \"Couldn't find gsl. Make sure it's installed and in the path.\"\n\n    return gsl_include\n\n\ndef GSL_library_dir():\n    \"\"\"return directory for location of GSL binaries, useful when combining GSL and cython\"\"\"\n    try:\n        lib_gsl_dir = subprocess.check_output('gsl-config --libs', shell=True).decode('utf-8').split()[0][2:]\n    except subprocess.CalledProcessError:\n        lib_gsl_dir = os.getenv('LIB_GSL')\n        if lib_gsl_dir is None:\n            # Environmental variable LIB_GSL not set, use hardcoded path.\n            lib_gsl_dir = r\"c:\\Program Files\\GnuWin32\\lib\"\n        else:\n            lib_gsl_dir += \"/lib\"\n\n    return lib_gsl_dir\n    \n    \n    \n    ",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code contains various utility functions and classes for data processing and analysis. It includes functions for logging data to screen and file, file manipulation, plotting utilities, and math functions. It also includes a class for iterating over pairs of lists and tools for building with GSL and Cython. To use this code, simply import the necessary functions and classes into your own Python script.\n\n### Input:\n\n\n### Output:\n#!/usr/bin/env python3\n\n##ON APP MACHINE\n\nimport sys\n\nfrom os import listdir, mkdir\nfrom os.path import isdir, dirname, abspath\n\nimport os\nimport subprocess\n\nimport weakref\n\nfrom scipy import fftpack\nimport numpy as np\n\n## some global variables, this needs to be fixed at some point\ndefault_raw_data_loc = None#\"/exp_app2/appexp1/public/raw_data\"\ndefault_processed_data_loc = None#\"/home/brian/processed_files\"\n\nMetaData_directory =  dirname(abspath(__file__)) + '/data' ## change this if antenna_response_model is in a folder different from this module\n\n#### constants\nC = 299792458.0\nRTD = 180.0/3.1415926 ##radians to degrees\nn_air = 1.000293\nv_air = C/n_air\n\nlatlonCS002 = np.array([52.91512249, 6.869837540]) ## lattitude and longitude of CS002 in degrees\n\n#### log data to screen and to a file\n\nclass logger(object):\n    class std_writer(object):\n        def __init__(self, logger):\n            self.logger_ref = weakref.ref(logger)\n            \n        def write(self, msg):\n            logger=self.logger_ref()\n            logger.out_file.write(msg)\n            if logger.to_screen:\n                logger.old_stdout.write(msg)\n            \n        def flush(self):\n            logger=self.logger_ref()\n            logger.out_file.flush()\n    \n    \n    def __init__(self):\n        \n        self.has_stderr = False\n        self.has_stdout = False\n        \n        self.old_stderr = sys.stderr\n        self.old_stdout = sys.stdout\n        \n        self.set(\"out_log\")\n        \n    def set(self, fname, to_screen=True):\n        self.out_file = open(fname, 'w')\n        \n        self.set_to_screen( to_screen )\n        \n        \n    def __call__(self, *args):\n        for a in args:\n            if self.to_screen:\n                self.old_stdout.write(str(a))\n                self.old_stdout.write(\" \")\n                \n            self.out_file.write(str(a))\n            self.out_file.write(\" \")\n            \n        self.out_file.write(\"\\n\")\n        if self.to_screen:\n            self.old_stdout.write(\"\\n\")\n            \n        self.out_file.flush()\n        self.old_stdout.flush()\n        \n    def set_to_screen(self, to_screen=True):\n        self.to_screen = to_screen\n        \n    def take_stdout(self):\n        \n        if not self.has_stdout:\n            sys.stdout = self.std_writer(self)\n            self.has_stdout = True\n\t\t\t\t\t\t\t\n    def take_stderr(self):\n        \n        if not self.has_stderr:\n            sys.stderr = self.std_writer(self)\n            self.has_stderr = True\n            \n    def restore_stdout(self):\n        if self.has_stdout:\n            sys.stdout = self.old_stdout\n            self.has_stdout = False\n            \n    def restore_stderr(self):\n        if self.has_stderr:\n            sys.stderr = self.old_stderr\n            self.has_stderr = False\n            \n    def flush(self):\n        self.out_file.flush()\n            \n#    def __del__(self):\n#        self.restore_stderr()\n#        self.restore_stdout()\n        \n#log = logger()\n        \ndef iterate_pairs(list_one, list_two, list_one_avoid=[], list_two_avoid=[]):\n    \"\"\"returns an iterator that loops over all pairs of the two lists\"\"\"\n    for item_one in list_one:\n        if item_one in list_one_avoid:\n            continue\n        for item_two in list_two:\n            if item_two in list_two_avoid:\n                continue\n            yield (item_one, item_two)\n        \nimport re\nnatural_regex_pattern = re.compile('([0-9]+)')\ndef natural_sort( l ):\n    \"\"\" Sort the given iterable in the way that humans expect. Usefull for sorting station names.\"\"\"\n    convert = lambda text: int(text) if text.isdigit() else text\n    alphanum_key = lambda key: [ convert(c) for c in natural_regex_pattern.split(key) ]\n    return sorted(l, key = alphanum_key)\n        \n#### some file utils\n\ndef Fname_data(Fpath):\n    \"\"\" takes both pulse data file names and h5 file names and returns UTC_time, station_name, Fpath\"\"\"\n    Fname = Fpath.split('/')[-1]\n    data = Fname.split('_')\n    timeID = data[1]\n    station_name = data[2]\n    \n    if len(data[3][1:])==0:\n        file_number = 0\n    else:\n        file_number = int(data[3][1:])\n    \n    return timeID, station_name, Fpath, file_number\n\n\n##note that timeID is a string representing the datetime of a LOFAR trigger. such as:   D20130619T094846.507Z\n## the timeID is used to uniquely identify triggers\n\ndef get_timeID(fname):\n    data=fname.split(\"_\")\n    return data[1]\n\ndef year_from_timeID(timeID):\n    return timeID[1:5]\n\ndef raw_data_dir(timeID, data_loc=None):\n    \"\"\"gives path to the raw data folder for a particular timeID, given location of data structure. Defaults to  default_raw_data_loc\"\"\"\n    \n    if data_loc is None:\n        data_loc = default_raw_data_loc\n        if default_raw_data_loc is None:\n            print(\"ERROR: 'default_raw_data_loc' in utilities is not set.\")\n            quit()\n    \n    path = data_loc + '/' + year_from_timeID(timeID)+\"/\"+timeID\n    return path\n\ndef processed_data_dir(timeID, data_loc=None):\n    \"\"\"gives path to the analysis folders for a particular timeID, given location of data structure. Defaults to  default_processed_data_loc\n    makes the directory if it doesn't exist\"\"\"\n    \n    if data_loc is None:\n        data_loc = default_processed_data_loc\n        if default_processed_data_loc is None:\n            print(\"ERROR: 'default_processed_data_loc' in utilities is not set.\")\n            quit()\n    \n    path=data_loc + \"/\" + year_from_timeID(timeID)+\"/\"+timeID\n    if not isdir(path):\n        mkdir(path)\n    return path\n\n    \n## a python list where the keys are the number of a station and the values are the station name\nSId_to_Sname = [None]*209 #just to pre-initilize list, so syntax below is possible\nSId_to_Sname[1] = \"CS001\"\nSId_to_Sname[2] = \"CS002\"\nSId_to_Sname[3] = \"CS003\"\nSId_to_Sname[4] = \"CS004\"\nSId_to_Sname[5] = \"CS005\"\nSId_to_Sname[6] = \"CS006\"\nSId_to_Sname[7] = \"CS007\"\n#SId_to_Sname[8] = \"CS008\"\n#SId_to_Sname[9] = \"CS009\"\n#SId_to_Sname[10] = \"CS010\"\nSId_to_Sname[11] = \"CS011\"\n#SId_to_Sname[12] = \"CS012\"\nSId_to_Sname[13] = \"CS013\"\n#SId_to_Sname[14] = \"CS014\"\n#SId_to_Sname[15] = \"CS015\"\n#SId_to_Sname[16] = \"CS016\"\nSId_to_Sname[17] = \"CS017\"\n#SId_to_Sname[18] = \"CS018\"\n#SId_to_Sname[19] = \"CS019\"\n#SId_to_Sname[20] = \"CS020\"\nSId_to_Sname[21] = \"CS021\"\n#SId_to_Sname[22] = \"CS022\"\n#SId_to_Sname[23] = \"CS023\"\nSId_to_Sname[24] = \"CS024\"\n#SId_to_Sname[25] = \"CS025\"\nSId_to_Sname[26] = \"CS026\"\n#SId_to_Sname[27] = \"CS027\"\nSId_to_Sname[28] = \"CS028\"\n#SId_to_Sname[29] = \"CS029\"\nSId_to_Sname[30] = \"CS030\"\nSId_to_Sname[31] = \"CS031\"\nSId_to_Sname[32] = \"CS032\"\nSId_to_Sname[101] = \"CS101\"\n#SId_to_Sname[102] = \"CS102\"\nSId_to_Sname[103] = \"CS103\"\nSId_to_Sname[121] = \"CS201\"\nSId_to_Sname[141] = \"CS301\"\nSId_to_Sname[142] = \"CS302\"\nSId_to_Sname[161] = \"CS401\"\nSId_to_Sname[181] = \"CS501\"\n\n#SId_to_Sname[104] = \"RS104\"\n#SId_to_Sname[105] = \"RS105\"\nSId_to_Sname[106] = \"RS106\"\n#SId_to_Sname[107] = \"RS107\"\n#SId_to_Sname[108] = \"RS108\"\n#SId_to_Sname[109] = \"RS109\"\n#SId_to_Sname[122] = \"RS202\"\n#SId_to_Sname[123] = \"RS203\"\n#SId_to_Sname[124] = \"RS204\"\nSId_to_Sname[125] = \"RS205\"\n#SId_to_Sname[126] = \"RS206\"\n#SId_to_Sname[127] = \"RS207\"\nSId_to_Sname[128] = \"RS208\"\n#SId_to_Sname[129] = \"RS209\"\nSId_to_Sname[130] = \"RS210\"\n#SId_to_Sname[143] = \"RS303\"\n#SId_to_Sname[144] = \"RS304\"\nSId_to_Sname[145] = \"RS305\"\nSId_to_Sname[146] = \"RS306\"\nSId_to_Sname[147] = \"RS307\"\n#SId_to_Sname[148] = \"RS308\"\n#SId_to_Sname[149] = \"RS309\"\nSId_to_Sname[150] = \"RS310\"\nSId_to_Sname[166] = \"RS406\"\nSId_to_Sname[167] = \"RS407\"\nSId_to_Sname[169] = \"RS409\"\nSId_to_Sname[183] = \"RS503\"\nSId_to_Sname[188] = \"RS508\"\nSId_to_Sname[189] = \"RS509\"\n\nSId_to_Sname[201] = \"DE601\"\nSId_to_Sname[202] = \"DE602\"\nSId_to_Sname[203] = \"DE603\"\nSId_to_Sname[204] = \"DE604\"\nSId_to_Sname[205] = \"DE605\"\nSId_to_Sname[206] = \"FR606\"\nSId_to_Sname[207] = \"SE607\"\nSId_to_Sname[208] = \"UK608\"\n\n## this just \"inverts\" the previous list, discarding unused values\nSname_to_SId_dict = {name:ID for ID,name in enumerate(SId_to_Sname) if name is not None}\n\ndef even_antName_to_odd(even_ant_name):\n    even_num = int(even_ant_name)\n    odd_num = even_num + 1\n    return str( odd_num ).zfill( 9 )\n\ndef antName_is_even(ant_name):\n    return not int(ant_name)%2\n\ndef odd_antName_to_even(odd_ant_name):\n    odd_num = int(odd_ant_name)\n    even_num = odd_num + 1\n    return str( even_num ).zfill( 9 )\n    \n\n#### plotting utilities ####\ndef set_axes_equal(ax):\n    '''Make axes of 3D plot have equal scale so that spheres appear as spheres,\n    cubes as cubes, etc..  This is one possible solution to Matplotlib's\n    ax.set_aspect('equal') and ax.axis('equal') not working for 3D.\n    \n    \n\n    Input\n      ax: a matplotlib axis, e.g., as output from plt.gca().\n    '''\n\n    x_limits = ax.get_xlim3d()\n    y_limits = ax.get_ylim3d()\n    z_limits = ax.get_zlim3d()\n\n    x_range = abs(x_limits[1] - x_limits[0])\n    x_middle = np.mean(x_limits)\n    y_range = abs(y_limits[1] - y_limits[0])\n    y_middle = np.mean(y_limits)\n    z_range = abs(z_limits[1] - z_limits[0])\n    z_middle = np.mean(z_limits)\n\n    # The plot bounding box is a sphere in the sense of the infinity\n    # norm, hence I call half the max range the plot radius.\n    plot_radius = 0.5*max([x_range, y_range, z_range])\n\n    ax.set_xlim3d([x_middle - plot_radius, x_middle + plot_radius])\n    ax.set_ylim3d([y_middle - plot_radius, y_middle + plot_radius])\n    ax.set_zlim3d([z_middle - plot_radius, z_middle + plot_radius])\n\n    \n### some math functions? ###\n    \ndef normalize_angle_radians( angle_radians ):\n    \"\"\"For an angle in radians, return the equivalent angle that is garunteed be between -pi and pi\"\"\"\n    while angle_radians > np.pi:\n        angle_radians -= 2.0*np.pi\n    while angle_radians < -np.pi:\n        angle_radians += 2.0*np.pi\n    return angle_radians\n\ndef BoundingBox_collision(BB1, BB2):\n    \"\"\" return true if two N-D bounding boxes collide, False otherwise\"\"\"\n    for B1, B2 in zip(BB1,BB2):\n        if (B1[1] < B2[0]) or (B2[1] < B1[0]):\n            return False\n    return True\n\n### some build tools ####\ndef GSL_include():\n    \"\"\"return directory for location of GSL headers, useful when combining GSL and cython\"\"\"\n    \n    try:\n        gsl_include = subprocess.check_output('gsl-config --cflags', shell=True).decode('utf-8')[2:-1]\n    except subprocess.CalledProcessError:\n        gsl_include = os.getenv('LIB_GSL')\n        if gsl_include is None:\n            # Environmental variable LIB_GSL not set, use hardcoded path.\n            gsl_include = r\"c:\\Program Files\\GnuWin32\\include\"\n        else:\n            gsl_include += \"/include\"\n\n    assert gsl_include != '', \"Couldn't find gsl. Make sure it's installed and in the path.\"\n\n    return gsl_include\n\n\ndef GSL_library_dir():\n    \"\"\"return directory for location of GSL binaries, useful when combining GSL and cython\"\"\"\n    try:\n        lib_gsl_dir = subprocess.check_output('gsl-config --libs', shell=True).decode('utf-8').split()[0][2:]\n    except subprocess.CalledProcessError:\n        lib_gsl_dir = os.getenv('LIB_GSL')\n        if lib_gsl_dir is None:\n            # Environmental variable LIB_GSL not set, use hardcoded path.\n            lib_gsl_dir = r\"c:\\Program Files\\GnuWin32\\lib\"\n        else:\n            lib_gsl_dir += \"/lib\"\n\n    return lib_gsl_dir\n    \n    \n    \n    "
    },
    {
        "instruction": "Write a Python program to remove the duplicate items from a list.",
        "input": "List: [10, 20, 30, 20, 10, 50, 60, 40, 80, 50, 40]",
        "output": "\"\"\"\nWrite a Python program to remove the duplicate items from a list\n\"\"\"\n\n# Function to remove duplicates \ndef remove_duplicates(list_with_duplicates): \n  \n    list_without_duplicates = [] \n    for item in list_with_duplicates:\n        if item not in list_without_duplicates: \n            list_without_duplicates.append(item)\n  \n    return list_without_duplicates \n\n# main \nif __name__==\"__main__\": \n    # Given List \n    list1 = [10, 20, 30, 20, 10, 50, 60, 40, 80, 50, 40] \n    print(\"Original List\", list1) \n  \n    list2 = remove_duplicates(list1) \n    print(\"List without duplicates\", list2)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to remove the duplicate items from a list.\n\n### Input:\nList: [10, 20, 30, 20, 10, 50, 60, 40, 80, 50, 40]\n\n### Output:\n\"\"\"\nWrite a Python program to remove the duplicate items from a list\n\"\"\"\n\n# Function to remove duplicates \ndef remove_duplicates(list_with_duplicates): \n  \n    list_without_duplicates = [] \n    for item in list_with_duplicates:\n        if item not in list_without_duplicates: \n            list_without_duplicates.append(item)\n  \n    return list_without_duplicates \n\n# main \nif __name__==\"__main__\": \n    # Given List \n    list1 = [10, 20, 30, 20, 10, 50, 60, 40, 80, 50, 40] \n    print(\"Original List\", list1) \n  \n    list2 = remove_duplicates(list1) \n    print(\"List without duplicates\", list2)"
    },
    {
        "instruction": "Add a sorting feature to this Python script.",
        "input": "my_list = [1, 5, 7, 2, 8]",
        "output": "my_list = [1, 5, 7, 2, 8]\nmy_list.sort()\nprint(my_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAdd a sorting feature to this Python script.\n\n### Input:\nmy_list = [1, 5, 7, 2, 8]\n\n### Output:\nmy_list = [1, 5, 7, 2, 8]\nmy_list.sort()\nprint(my_list)"
    },
    {
        "instruction": "Edit the following code to improve its readability given the Python coding standards.",
        "input": "def fact(num):\n     if num==0: return 1\n     else:\n       p=1\n       for i in range(1,num+1):\n        p*=i\n       return p",
        "output": "def factorial(num):\n    # Check for special cases\n    if num == 0:\n        return 1\n    else:\n        # Initialize the value of product\n        product = 1\n        # Multiply each number from 1 to num\n        for i in range(1, num + 1):\n            product *= i\n        # Return the product\n        return product",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following code to improve its readability given the Python coding standards.\n\n### Input:\ndef fact(num):\n     if num==0: return 1\n     else:\n       p=1\n       for i in range(1,num+1):\n        p*=i\n       return p\n\n### Output:\ndef factorial(num):\n    # Check for special cases\n    if num == 0:\n        return 1\n    else:\n        # Initialize the value of product\n        product = 1\n        # Multiply each number from 1 to num\n        for i in range(1, num + 1):\n            product *= i\n        # Return the product\n        return product"
    },
    {
        "instruction": "Write a function in Python for calculating the sum of squares of a list of elements.",
        "input": "[3, 5, 7]",
        "output": "def calculateSumSquare(lst):\n    sum = 0\n    for element in lst:\n        sum += element**2\n    return sum\n\nlst = [3, 5, 7]\nprint(calculateSumSquare(lst))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python for calculating the sum of squares of a list of elements.\n\n### Input:\n[3, 5, 7]\n\n### Output:\ndef calculateSumSquare(lst):\n    sum = 0\n    for element in lst:\n        sum += element**2\n    return sum\n\nlst = [3, 5, 7]\nprint(calculateSumSquare(lst))"
    },
    {
        "instruction": "Can you provide a Python function that sorts a given list of elements in descending order?",
        "input": "",
        "output": "def sort_list(lst):\n return sorted(lst, reverse=True)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you provide a Python function that sorts a given list of elements in descending order?\n\n### Input:\n\n\n### Output:\ndef sort_list(lst):\n return sorted(lst, reverse=True)"
    },
    {
        "instruction": "Write a Python program to merge two given dictionaries.",
        "input": "dict1 = {'a': 10, 'b': 20, 'c': 30}\ndict2 = {'d': 40, 'e': 50, 'f': 60}",
        "output": "def merge_dicts(dict1, dict2):\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    return new_dict\n\ndict1 = {'a': 10, 'b': 20, 'c': 30}\ndict2 = {'d': 40, 'e': 50, 'f': 60}\n\nprint(merge_dicts(dict1, dict2))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to merge two given dictionaries.\n\n### Input:\ndict1 = {'a': 10, 'b': 20, 'c': 30}\ndict2 = {'d': 40, 'e': 50, 'f': 60}\n\n### Output:\ndef merge_dicts(dict1, dict2):\n    new_dict = dict1.copy()\n    new_dict.update(dict2)\n    return new_dict\n\ndict1 = {'a': 10, 'b': 20, 'c': 30}\ndict2 = {'d': 40, 'e': 50, 'f': 60}\n\nprint(merge_dicts(dict1, dict2))"
    },
    {
        "instruction": "Develop a chatbot in Python which can answer basic questions about a company.",
        "input": "Company name: Acme Corporation",
        "output": "import random\n\nresponses = {\n\"What is Acme Corporation?\": \"Acme Corporation is a global leader in innovation and technology.\",\n\"What type of products does Acme Corporation sell?\": \"Acme Corporation offers a wide range of products and services, including hardware, software, and cloud-based solutions.\",\n\"How long has Acme Corporation been in business?\": \"Acme Corporation has been in business for over 50 years.\"\n}\n\ndef chatbot_response(user_input):\n if user_input in responses:\n return responses[user_input]\n else:\n return random.choice([\"I'm sorry, I don't understand.\", \"Can you provide more information?\", \"Can you rephrase your question?\"])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a chatbot in Python which can answer basic questions about a company.\n\n### Input:\nCompany name: Acme Corporation\n\n### Output:\nimport random\n\nresponses = {\n\"What is Acme Corporation?\": \"Acme Corporation is a global leader in innovation and technology.\",\n\"What type of products does Acme Corporation sell?\": \"Acme Corporation offers a wide range of products and services, including hardware, software, and cloud-based solutions.\",\n\"How long has Acme Corporation been in business?\": \"Acme Corporation has been in business for over 50 years.\"\n}\n\ndef chatbot_response(user_input):\n if user_input in responses:\n return responses[user_input]\n else:\n return random.choice([\"I'm sorry, I don't understand.\", \"Can you provide more information?\", \"Can you rephrase your question?\"])"
    },
    {
        "instruction": "Create a Python script to transform a list of strings into a list of integers, each integer representing the length of the corresponding string.",
        "input": "[\"Hello\", \"World\", \"Goodbye\"]",
        "output": "def string_to_length(list_strings):\n    return [len(string) for string in list_strings]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to transform a list of strings into a list of integers, each integer representing the length of the corresponding string.\n\n### Input:\n[\"Hello\", \"World\", \"Goodbye\"]\n\n### Output:\ndef string_to_length(list_strings):\n    return [len(string) for string in list_strings]"
    },
    {
        "instruction": "Generate a cluster of points in Python using numpy.",
        "input": "10 points",
        "output": "import numpy as np\n \n# Generating random points\npoints = np.random.rand(10, 2)\n \n# Calculating distance between points\ndist_matrix = np.sqrt(np.sum(points**2, axis=1, keepdims=True) + \\\n          np.sum(points**2, axis=1, keepdims=True).T - \\\n          2*np.dot(points, points.T))\n \n# Clustering\ncluster_indices = np.argmin(dist_matrix, axis=1)\ncluster_points = [points[cluster_indices == i] for i in range(points.shape[0])]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a cluster of points in Python using numpy.\n\n### Input:\n10 points\n\n### Output:\nimport numpy as np\n \n# Generating random points\npoints = np.random.rand(10, 2)\n \n# Calculating distance between points\ndist_matrix = np.sqrt(np.sum(points**2, axis=1, keepdims=True) + \\\n          np.sum(points**2, axis=1, keepdims=True).T - \\\n          2*np.dot(points, points.T))\n \n# Clustering\ncluster_indices = np.argmin(dist_matrix, axis=1)\ncluster_points = [points[cluster_indices == i] for i in range(points.shape[0])]"
    },
    {
        "instruction": "Write a Python program to parse an HTML document and extract text content from the document.",
        "input": "<div>\n\t<p>This is some text.</p>\n\t<p>This is another text.</p>\n\t<div>\n\t\t<span>Some more text.</span>\n\t</div>\n</div>",
        "output": "from bs4 import BeautifulSoup\n\nhtml_doc = \"\"\"\n<div>\n\t<p>This is some text.</p>\n\t<p>This is another text.</p>\n\t<div>\n\t\t<span>Some more text.</span>\n\t</div>\n</div>\n\"\"\"\n\nsoup = BeautifulSoup(html_doc)\n\ntext = soup.get_text()\n\n# Output\n# This is some text.\n# This is another text.\n# Some more text.",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to parse an HTML document and extract text content from the document.\n\n### Input:\n<div>\n\t<p>This is some text.</p>\n\t<p>This is another text.</p>\n\t<div>\n\t\t<span>Some more text.</span>\n\t</div>\n</div>\n\n### Output:\nfrom bs4 import BeautifulSoup\n\nhtml_doc = \"\"\"\n<div>\n\t<p>This is some text.</p>\n\t<p>This is another text.</p>\n\t<div>\n\t\t<span>Some more text.</span>\n\t</div>\n</div>\n\"\"\"\n\nsoup = BeautifulSoup(html_doc)\n\ntext = soup.get_text()\n\n# Output\n# This is some text.\n# This is another text.\n# Some more text."
    },
    {
        "instruction": "Create a Python program that extracts a set of keywords from a given text document.",
        "input": "Not applicable",
        "output": "# package imports\nimport nltk\nfrom nltk.corpus import stopwords \nfrom nltk.tokenize import word_tokenize, sent_tokenize \n\n# store the text document as a string\ntext = '''\nThis is a sample text document that will be used to find the keywords. \nIt has a few sentences that talk about different topics such as sports, \ntechnology, and entertainment.\n'''\n\n# tokenize sentences\nsentences = sent_tokenize(text) \n\n# store keyword set\nkeywords = set() \n\nfor i in sentences: \n\t\n\t# tokenize words\n\twords = word_tokenize(i) \n\t\n\t# remove stopwords\n\twords = [w for w in words if not w in stopwords.words('english')] \n\n\t# store keywords\n\tkeywords = keywords.union(set(words)) \n\nprint(keywords)\n\n# Output: \n{'different', 'sentences', 'sports', 'document', 'Technology', \n'entertainment', 'find', 'sample', 'text', 'topics'}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that extracts a set of keywords from a given text document.\n\n### Input:\nNot applicable\n\n### Output:\n# package imports\nimport nltk\nfrom nltk.corpus import stopwords \nfrom nltk.tokenize import word_tokenize, sent_tokenize \n\n# store the text document as a string\ntext = '''\nThis is a sample text document that will be used to find the keywords. \nIt has a few sentences that talk about different topics such as sports, \ntechnology, and entertainment.\n'''\n\n# tokenize sentences\nsentences = sent_tokenize(text) \n\n# store keyword set\nkeywords = set() \n\nfor i in sentences: \n\t\n\t# tokenize words\n\twords = word_tokenize(i) \n\t\n\t# remove stopwords\n\twords = [w for w in words if not w in stopwords.words('english')] \n\n\t# store keywords\n\tkeywords = keywords.union(set(words)) \n\nprint(keywords)\n\n# Output: \n{'different', 'sentences', 'sports', 'document', 'Technology', \n'entertainment', 'find', 'sample', 'text', 'topics'}"
    },
    {
        "instruction": "Generate a python program to compute the edit distance between two given strings",
        "input": "",
        "output": "def edit_distance(string1, string2):\n    m = len(string1)\n    n = len(string2)\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif string1[i-1] == string2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i][j-1], \n                        dp[i-1][j], \n                        dp[i-1][j-1]) \n    return dp[m][n]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to compute the edit distance between two given strings\n\n### Input:\n\n\n### Output:\ndef edit_distance(string1, string2):\n    m = len(string1)\n    n = len(string2)\n    dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif string1[i-1] == string2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i][j-1], \n                        dp[i-1][j], \n                        dp[i-1][j-1]) \n    return dp[m][n]"
    },
    {
        "instruction": "Write a Python program to remove all duplicates from a given list.",
        "input": "[2, 3, 4, 5, 2, 3, 6]",
        "output": "def remove_duplicates(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to remove all duplicates from a given list.\n\n### Input:\n[2, 3, 4, 5, 2, 3, 6]\n\n### Output:\ndef remove_duplicates(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result"
    },
    {
        "instruction": "Create a class in Python called \"Person\" with two properties, \"name\" and \"age\".",
        "input": "",
        "output": "class Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python called \"Person\" with two properties, \"name\" and \"age\".\n\n### Input:\n\n\n### Output:\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age"
    },
    {
        "instruction": "Design a Python program to create a list of randomized numbers.",
        "input": "",
        "output": "import random\n\ndef rand_list(n):\n\trand_num_list = []\n\tfor _ in range(n):\n\t\trand_num_list.append(random.randint(1,100))\n\treturn rand_num_list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to create a list of randomized numbers.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef rand_list(n):\n\trand_num_list = []\n\tfor _ in range(n):\n\t\trand_num_list.append(random.randint(1,100))\n\treturn rand_num_list"
    },
    {
        "instruction": "You need to write a program in Python that checks if a given number is a perfect square or not.",
        "input": "36",
        "output": "def isPerfectSquare(n):\n    root =  n ** 0.5\n    return root == int(root)\n\nresult = isPerfectSquare(36)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nYou need to write a program in Python that checks if a given number is a perfect square or not.\n\n### Input:\n36\n\n### Output:\ndef isPerfectSquare(n):\n    root =  n ** 0.5\n    return root == int(root)\n\nresult = isPerfectSquare(36)\nprint(result)"
    },
    {
        "instruction": "Write a Python function to merge two given sorted lists A and B into a single sorted list.",
        "input": "",
        "output": "def merge_sorted_lists(list1, list2):\n    result = []\n    i = 0  # Represents the index of list1\n    j = 0  # Represents the index of list2\n \n    # Compare elements of both lists and append the smaller one\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n \n    # List1 or List2's elements are not added to the result yet\n    result += list1[i:]\n    result += list2[j:]\n    return result",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to merge two given sorted lists A and B into a single sorted list.\n\n### Input:\n\n\n### Output:\ndef merge_sorted_lists(list1, list2):\n    result = []\n    i = 0  # Represents the index of list1\n    j = 0  # Represents the index of list2\n \n    # Compare elements of both lists and append the smaller one\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            result.append(list1[i])\n            i += 1\n        else:\n            result.append(list2[j])\n            j += 1\n \n    # List1 or List2's elements are not added to the result yet\n    result += list1[i:]\n    result += list2[j:]\n    return result"
    },
    {
        "instruction": "Create a program in Python to measure the performance of a code snippet. The program should measure the execution time for a piece of code and display the results in milliseconds.",
        "input": "def add(x,y):\n    return x+y",
        "output": "import time\ndef measure_performance(fn, data):\n start = time.perf_counter()\n result = fn(*data)\n elapsed = 1000 * (time.perf_counter() - start) \n return result, elapsed\n\ndef add(x, y):\n return x + y\n\ndata = (3, 5)\nresult, elapsed = measure_performance(add, data)\nprint('Result:', result)\nprint('Elapsed time (ms):', elapsed)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to measure the performance of a code snippet. The program should measure the execution time for a piece of code and display the results in milliseconds.\n\n### Input:\ndef add(x,y):\n    return x+y\n\n### Output:\nimport time\ndef measure_performance(fn, data):\n start = time.perf_counter()\n result = fn(*data)\n elapsed = 1000 * (time.perf_counter() - start) \n return result, elapsed\n\ndef add(x, y):\n return x + y\n\ndata = (3, 5)\nresult, elapsed = measure_performance(add, data)\nprint('Result:', result)\nprint('Elapsed time (ms):', elapsed)"
    },
    {
        "instruction": "Write a Python code snippet to sort a dictionary based on its key.",
        "input": "",
        "output": "sorted_dict = dict(sorted(dictionary.items(), key=lambda item: item[0]))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code snippet to sort a dictionary based on its key.\n\n### Input:\n\n\n### Output:\nsorted_dict = dict(sorted(dictionary.items(), key=lambda item: item[0]))"
    },
    {
        "instruction": "Create a function in Python that finds the shortest path between two points.",
        "input": "",
        "output": "def find_shortest_path(start, end):\n    # for holding visited and non visited vertices \n    visited = set()\n    unvisited = set([start])\n\n    # a dictionary of predecessor nodes to maintain the \n    # path between the start and the end node \n    predecessors = {}\n\n    # holds the distance between any two nodes\n    distance = {}\n    distance[start] = 0\n\n    while unvisited:\n        # pops the vertex with minimum distance \n        current_vertex = min(unvisited, key = distance.get)\n\n        # add the minimum distance vertex to the visited \n        visited.add(current_vertex)\n        \n        # remove it from the unvisited set \n        unvisited.remove(current_vertex)\n\n        # for every neighbour of the current node \n        for neighbour in current_vertex.neighbors:\n            if neighbour in visited:\n                continue\n            \n            # make sure each unvisited node is added to \n            # the unvisited set \n            if neighbour not in unvisited:\n                unvisited.add(neighbour)\n\n            # maintain the predecessor \n            predecessors[neighbour] = current_vertex\n\n            # calculate the new distance to the neighbour node \n            new_distance = distance[current_vertex] + current_vertex.distance(neighbour)\n            if new_distance < distance.get(neighbour, float('inf')):\n                # update the distance with the new distance \n                distance[neighbour] = new_distance\n\n    # for storing paths \n    path = []\n\n    # loop through the previous to start from end node \n    # and trace back the path from start to end node \n    while end != start:\n        path.append(end)\n        end = predecessors[end]\n    # return the shortest path\n    path.append(start) \n    return path[::-1]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that finds the shortest path between two points.\n\n### Input:\n\n\n### Output:\ndef find_shortest_path(start, end):\n    # for holding visited and non visited vertices \n    visited = set()\n    unvisited = set([start])\n\n    # a dictionary of predecessor nodes to maintain the \n    # path between the start and the end node \n    predecessors = {}\n\n    # holds the distance between any two nodes\n    distance = {}\n    distance[start] = 0\n\n    while unvisited:\n        # pops the vertex with minimum distance \n        current_vertex = min(unvisited, key = distance.get)\n\n        # add the minimum distance vertex to the visited \n        visited.add(current_vertex)\n        \n        # remove it from the unvisited set \n        unvisited.remove(current_vertex)\n\n        # for every neighbour of the current node \n        for neighbour in current_vertex.neighbors:\n            if neighbour in visited:\n                continue\n            \n            # make sure each unvisited node is added to \n            # the unvisited set \n            if neighbour not in unvisited:\n                unvisited.add(neighbour)\n\n            # maintain the predecessor \n            predecessors[neighbour] = current_vertex\n\n            # calculate the new distance to the neighbour node \n            new_distance = distance[current_vertex] + current_vertex.distance(neighbour)\n            if new_distance < distance.get(neighbour, float('inf')):\n                # update the distance with the new distance \n                distance[neighbour] = new_distance\n\n    # for storing paths \n    path = []\n\n    # loop through the previous to start from end node \n    # and trace back the path from start to end node \n    while end != start:\n        path.append(end)\n        end = predecessors[end]\n    # return the shortest path\n    path.append(start) \n    return path[::-1]"
    },
    {
        "instruction": "Create a heap data structure in Python using the heapq library.",
        "input": "No input",
        "output": "import heapq\n\ndef create_heap(items):\n heapq.heapify(items)\n\ndef add_item(items, item):\n heapq.heappush(items, item)\n\ndef pop_item(items):\n return heapq.heappop(items)\n\nitems = [4, 5, 2, 33, 1]\ncreate_heap(items)\nadd_item(items, 6)\npop_item(items)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a heap data structure in Python using the heapq library.\n\n### Input:\nNo input\n\n### Output:\nimport heapq\n\ndef create_heap(items):\n heapq.heapify(items)\n\ndef add_item(items, item):\n heapq.heappush(items, item)\n\ndef pop_item(items):\n return heapq.heappop(items)\n\nitems = [4, 5, 2, 33, 1]\ncreate_heap(items)\nadd_item(items, 6)\npop_item(items)"
    },
    {
        "instruction": "Create a simple game using Python",
        "input": "",
        "output": "import random\n\ntries = 0\ngoal = random.randint(1,100)\n\nwhile True:\n    guess = int(input('Enter a number: '))\n    tries += 1\n\n    if guess == goal:\n        print('You win! You guessed the number in {} tries.'.format(tries))\n        break\n    elif guess < goal:\n        print('Too low!')\n    else:\n        print('Too high!')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple game using Python\n\n### Input:\n\n\n### Output:\nimport random\n\ntries = 0\ngoal = random.randint(1,100)\n\nwhile True:\n    guess = int(input('Enter a number: '))\n    tries += 1\n\n    if guess == goal:\n        print('You win! You guessed the number in {} tries.'.format(tries))\n        break\n    elif guess < goal:\n        print('Too low!')\n    else:\n        print('Too high!')"
    },
    {
        "instruction": "Make a visual representation of the following data-set in Python using Matplotlib.",
        "input": "X = [2,4,6,8,10]\nY = [5,10,15,20,25]",
        "output": "import matplotlib.pyplot as plt\n\nX = [2,4,6,8,10]\nY = [5,10,15,20,25]\n\nplt.plot(X,Y)\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Visual Representation')\nplt.grid()\nplt.show()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a visual representation of the following data-set in Python using Matplotlib.\n\n### Input:\nX = [2,4,6,8,10]\nY = [5,10,15,20,25]\n\n### Output:\nimport matplotlib.pyplot as plt\n\nX = [2,4,6,8,10]\nY = [5,10,15,20,25]\n\nplt.plot(X,Y)\nplt.xlabel('X')\nplt.ylabel('Y')\nplt.title('Visual Representation')\nplt.grid()\nplt.show()"
    },
    {
        "instruction": "Implement a linear regression model in Python to predict the target value given features.",
        "input": "",
        "output": "# import necessary libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# load the dataset\ndf = pd.read_csv('data.csv')\n\n# separate the data into features (X) and target (y)\nX = df.drop('target', axis=1).values\ny = df['target'].values\n\n# split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# train the model\nregressor = LinearRegression()  \nregressor.fit(X_train, y_train)\n\n# evaluate the model\nscore = regressor.score(X_test, y_test)\nprint('Model accuracy on test set: ', score)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a linear regression model in Python to predict the target value given features.\n\n### Input:\n\n\n### Output:\n# import necessary libraries\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n# load the dataset\ndf = pd.read_csv('data.csv')\n\n# separate the data into features (X) and target (y)\nX = df.drop('target', axis=1).values\ny = df['target'].values\n\n# split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# train the model\nregressor = LinearRegression()  \nregressor.fit(X_train, y_train)\n\n# evaluate the model\nscore = regressor.score(X_test, y_test)\nprint('Model accuracy on test set: ', score)"
    },
    {
        "instruction": "Create an algorithm in Python for detecting anagrams. The algorithm should use a data structure for efficiently storing and finding anagrams.",
        "input": "Example words: [\"bat\", \"cats\", \"tab\", \"dog\", \"act\"]",
        "output": "from collections import defaultdict\n\ndef find_anagrams(words):\n   anagrams = defaultdict(list)\n\n   # Loop through each word and sort it\n   for word in words:\n    sorted_word = ''.join(sorted(word))\n\n    # Add to defaultdict\n    anagrams[sorted_word].append(word)\n\n   # Filter anagrams list by length > 1\n   anagrams = {k: v for k,v in anagrams.items() if len(v) > 1}\n\n   return anagrams\n\nprint(find_anagrams([\"bat\", \"cats\", \"tab\", \"dog\", \"act\"]))\n# Output: {'act': ['bat', 'tab'], 'act': ['cats', 'act']}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python for detecting anagrams. The algorithm should use a data structure for efficiently storing and finding anagrams.\n\n### Input:\nExample words: [\"bat\", \"cats\", \"tab\", \"dog\", \"act\"]\n\n### Output:\nfrom collections import defaultdict\n\ndef find_anagrams(words):\n   anagrams = defaultdict(list)\n\n   # Loop through each word and sort it\n   for word in words:\n    sorted_word = ''.join(sorted(word))\n\n    # Add to defaultdict\n    anagrams[sorted_word].append(word)\n\n   # Filter anagrams list by length > 1\n   anagrams = {k: v for k,v in anagrams.items() if len(v) > 1}\n\n   return anagrams\n\nprint(find_anagrams([\"bat\", \"cats\", \"tab\", \"dog\", \"act\"]))\n# Output: {'act': ['bat', 'tab'], 'act': ['cats', 'act']}"
    },
    {
        "instruction": "Write a Python program to detect duplicate values in a list.",
        "input": "my_list = [1, 3, 5, 6, 3, 4, 7, 5]",
        "output": "seen = set()\nduplicates = []\nfor item in my_list:\n if item in seen:\n duplicates.append(item)\n else:\n seen.add(item)\n\nprint(duplicates)\n# Output: [3, 5]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to detect duplicate values in a list.\n\n### Input:\nmy_list = [1, 3, 5, 6, 3, 4, 7, 5]\n\n### Output:\nseen = set()\nduplicates = []\nfor item in my_list:\n if item in seen:\n duplicates.append(item)\n else:\n seen.add(item)\n\nprint(duplicates)\n# Output: [3, 5]"
    },
    {
        "instruction": "Generate a random password using the Python function provided in the input.",
        "input": "def randomString(stringLength=8):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))",
        "output": "print(randomString())",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random password using the Python function provided in the input.\n\n### Input:\ndef randomString(stringLength=8):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\n\n### Output:\nprint(randomString())"
    },
    {
        "instruction": "This code implements a class called HappyProcessStart that starts a process within virtual nodes. To use it, create an instance of the class and pass in the required options as a dictionary. The options include the node ID, the process tag, the command to run, and whether to enable strace output. Call the \"run\" method to start the process. The class will perform pre-checks to ensure that the process is not a duplicate and that the command is provided. It will then start the process and update the state with the process information. Finally, it will",
        "input": "",
        "output": "#!/usr/bin/env python3\n\n#\n#    Copyright (c) 2015-2017 Nest Labs, Inc.\n#    All rights reserved.\n#\n#    Licensed under the Apache License, Version 2.0 (the \"License\");\n#    you may not use this file except in compliance with the License.\n#    You may obtain a copy of the License at\n#\n#        http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n#    distributed under the License is distributed on an \"AS IS\" BASIS,\n#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#    See the License for the specific language governing permissions and\n#    limitations under the License.\n#\n\n##\n#    @file\n#       Implements HappyProcessStart class that stars process within virtual nodes.\n#\n#       Process runs a command in a virtual node, which itself\n#       is a logical representation of a network namespace.\n#\n\nfrom __future__ import absolute_import\nimport os\nimport subprocess\nimport sys\nimport time\nimport psutil\nimport warnings\n\nfrom happy.ReturnMsg import ReturnMsg\nfrom happy.Utils import *\nfrom happy.HappyNode import HappyNode\nfrom happy.HappyProcess import HappyProcess\nimport happy.HappyProcessStop\n\noptions = {}\noptions[\"quiet\"] = False\noptions[\"node_id\"] = None\noptions[\"tag\"] = None\noptions[\"command\"] = None\noptions[\"strace\"] = False\noptions[\"env\"] = {}\noptions[\"sync_on_output\"] = None\noptions[\"rootMode\"] = False\n\ndef option():\n    return options.copy()\n\n\nclass HappyProcessStart(HappyNode, HappyProcess):\n    \"\"\"\n    Starts a happy process.\n\n    happy-process-start [-h --help] [-q --quiet] [-i --id <NODE_NAME>]\n                        [-t --tag <DAEMON_NAME>] [-s --strace]\n                        [-e --env <ENVIRONMENT>] <COMMAND>\n\n        -i --id     Optional. Node on which to run the process. Find using\n                    happy-node-list or happy-state.\n        -t --tag    Required. Name of the process.\n        -s --strace Optional. Enable strace output for the process.\n        -e --env    Optional. An environment variable to pass to the node\n                    for use by the process.\n        <COMMAND>   Required. The command to run as process <DAEMON_NAME>.\n\n    Example:\n    $ happy-process-start BorderRouter ContinuousPing ping 127.0.0.1\n        Starts a process within the BorderRouter node called ContinuousPing\n        that runs \"ping 127.0.0.1\" continuously.\n\n    return:\n        0    success\n        1    fail\n    \"\"\"\n\n    def __init__(self, opts=options):\n        HappyNode.__init__(self)\n        HappyProcess.__init__(self)\n\n        self.quiet = opts[\"quiet\"]\n        self.node_id = opts[\"node_id\"]\n        self.tag = opts[\"tag\"]\n        self.command = opts[\"command\"]\n        self.strace = opts[\"strace\"]\n        self.env = opts[\"env\"]\n        self.sync_on_output = opts[\"sync_on_output\"]\n        self.output_fileput_suffix = \".out\"\n        self.strace_suffix = \".strace\"\n        self.rootMode = opts[\"rootMode\"]\n\n    def __stopProcess(self):\n        emsg = \"Process %s stops itself.\" % (self.tag)\n        self.logger.debug(\"[%s] daemon [%s]: %s\" % (self.node_id, self.tag, emsg))\n\n        options = happy.HappyProcessStop.option()\n        options[\"node_id\"] = self.node_id\n        options[\"tag\"] = self.tag\n        options[\"quiet\"] = self.quiet\n        stopProcess = happy.HappyProcessStop.HappyProcessStop(options)\n        stopProcess.run()\n\n        self.readState()\n\n    def __pre_check(self):\n        # Check if the new process is given\n        if not self.tag:\n            emsg = \"Missing name of the new process to start.\"\n            self.logger.error(\"[localhost] HappyProcessStart: %s\" % (emsg))\n            self.exit()\n\n        # Check if the name of new process is not a duplicate (that it does not already exists).\n        if self.processExists(self.tag):\n            emsg = \"virtual process %s already exist.\" % (self.tag)\n            self.logger.info(\"[%s] HappyProcessStart: %s\" % (self.node_id, emsg))\n            self.__stopProcess()\n\n        # Check if the process command is given\n        if not self.command:\n            emsg = \"Missing process command.\"\n            self.logger.error(\"[localhost] HappyProcessStart: %s\" % (emsg))\n            self.exit()\n\n        timeStamp = \"%010.6f\" % time.time()\n        pid = \"%06d\" % os.getpid()\n        emsg = \"Tag: %s PID: %s timeStamp : %s\" % (self.tag, pid, timeStamp)\n        self.logger.debug(\"[%s] HappyProcessStart: %s\" % (self.node_id, emsg))\n\n        self.output_file = self.process_log_prefix + pid + \\\n            \"_\" + timeStamp + \"_\" + self.tag + self.output_fileput_suffix\n        self.strace_file = self.process_log_prefix + pid + \\\n            \"_\" + timeStamp + \"_\" + self.tag + self.strace_suffix\n\n    def __poll_for_output(self):\n        poll_interval_sec = 0.01\n        max_poll_time_sec = 180\n        time_slept = 0\n        tail = open(self.output_file, \"r\")\n        self.logger.debug(\"[%s] HappyProcessStart: polling for output: %s\" % (self.node_id, self.sync_on_output))\n        while (True):\n            line = tail.readline()\n            if not line:\n                time.sleep(poll_interval_sec)\n                time_slept += poll_interval_sec\n                poll_interval_sec *= 2\n                if (time_slept > max_poll_time_sec):\n                    self.logger.debug(\"[%s] HappyProcessStart: can't find the output requested: %s\" %\n                                      (self.node_id, self.sync_on_output))\n                    raise RuntimeError(\"Can't find the output requested\")\n\n            elif self.sync_on_output in line:\n                self.logger.debug(\"[%s] HappyProcessStart: found output: %s in %s secs\" %\n                                  (self.node_id, self.sync_on_output, str(time_slept)))\n                break\n            else:\n                continue\n\n        tail.close()\n        return\n\n    def __start_daemon(self):\n        cmd = self.command\n\n        # We need to support 8 combinations:\n        # Who: user or root\n        # strace: yes or not\n        # env: yes or not\n\n        # Given this script called sayhello.sh:\n        #     #!/bin/bash\n        #     echo Hello ${USER}!\n        #     echo You passed the following opts $1, $2, $3\n        #     echo MYENVVAR is $MYENVVAR\n\n        # a successful run with an environment variable prints:\n        #     Hello andreello!\n        #     You passed the following opts a, b, c\n        #     MYENVVAR is hello\n\n        # The goal is to use the simples command line possible; in particular, we don't\n        # want to call sudo unless strictly necessary (for performance reasons).\n\n        # Here is how the CLI looks like if you use \"ip netns exec\" directly:\n\n        # user without env:\n        # sudo ip netns exec happy000 sudo -u andreello                                            ./sayhello.sh a b c\n\n        # user with env:\n        # sudo ip netns exec happy000 sudo -u andreello                             MYENVVAR=hello ./sayhello.sh a b c\n\n        # root without env:\n        #      ip netns exec happy000                                                              ./sayhello.sh a b c\n\n        # root with env\n        #      ip netns exec happy000                   bash -c                    'MYENVVAR=hello ./sayhello.sh a b c'\n\n        # user with strace, without env\n        # sudo ip netns exec happy000 sudo -u andreello strace -tt -o strace.out                   ./sayhello.sh a b c\n\n        # user with strace, with env\n        # sudo ip netns exec happy000 sudo -u andreello strace -tt -o strace.out -E MYENVVAR=hello ./sayhello.sh a b c\n\n        # root with strace, without env\n        #      ip netns exec happy000                   strace -tt -o strace.out                   ./sayhello.sh a b c\n\n        # root with strace, with env\n        #      ip netns exec happy000                   strace -tt -o strace.out -E MYENVVAR=hello ./sayhello.sh a b c\n\n        # Highlights:\n        # - to pass environment variables, either 'strace -E' or 'bash -c'\n        # - but, 'bash -c' requires the command to be in one string, while 'strace -E' requires the opposite\n        # - the examples above show the argument to 'bash -c' in quotes, but they are not necessary when passing\n        #   the list of strings to Popen()\n        # - also, the examples above show only one env var; if passing more than one to strace, they need to have\n        #   a '-E' each\n        # In summary, it's easier to build the cmd as a full string, and then split it the right way depending\n        # on strace vs bash.\n\n        # Here are a few examples of how the string is split into a list:\n        #\n        # user without env:\n        # ./bin/happy-process-start.py -i node01 -t HELLO ./sayhello.sh a b c\n        # [u'sudo', u'ip', u'netns', u'exec', u'happy000', u'sudo', u'-u', u'andreello', u'./sayhello.sh', u'a', u'b', u'c']\n        #\n        # user with env:\n        # ./bin/happy-process-start.py -i node01 -e \"MYENVVAR=hello\" -t HELLO ./sayhello.sh a b c\n        # [u'sudo', u'ip', u'netns', u'exec', u'happy000', u'sudo', u'-u', u'andreello',\n        #       u'MYENVVAR=hello', u'./sayhello.sh', u'a', u'b', u'c']\n        #\n        # root without env:\n        # sudo ./bin/happy-process-start.py -i node01  -t HELLO ./sayhello.sh a b c\n        # [u'ip', u'netns', u'exec', u'happy000', u'./sayhello.sh', u'a', u'b', u'c']\n        #\n        # user with env and strace:\n        # ./bin/happy-process-start.py -i node01 -e \"MYENVVAR=hello\" -s  -t HELLO ./sayhello.sh a b c\n        # [u'sudo', u'ip', u'netns', u'exec', u'happy000', u'sudo', u'-u', u'andreello', u'strace', u'-tt', u'-o',\n        #       u'/tmp/happy_..._HELLO.strace', u'-E', u'MYENVVAR=hello', u'./sayhello.sh', u'a', u'b', u'c']\n        #\n        # root with env:\n        # [u'ip', u'netns', u'exec', u'happy000', 'bash', '-c', u' MYENVVAR=hello ./sayhello.sh a b c']\n        #\n        # root with strace no env:\n        # sudo ./bin/happy-process-start.py -i node01 -s  -t HELLO ./sayhello.sh a b c\n        #\n        # root with strace and env:\n        # [u'ip', u'netns', u'exec', u'happy000', u'strace', u'-tt', u'-o', u'/tmp/happy_..._HELLO.strace',\n        #       u'-E', u'MYENVVAR=hello', u'./sayhello.sh', u'a', u'b', u'c']\n\n        need_internal_sudo = False\n        if os.getuid() != 0:\n            need_internal_sudo = True\n\n        if \"sudo\" in cmd.split():\n            # The command already has the inner sudo; typical case is that\n            # a normal user started Happy, and the script needs to run\n            # a command in a node as root. If sudo is for root, remove it.\n            # TODO: properly support \"sudo -u\" with strace\n            cmd = self.stripRunAsRoot(cmd)\n            need_internal_sudo = False\n\n        env_vars_list = []\n        cmd_list_prefix = []\n        need_bash = False\n\n        if \"bash -c\" in cmd:\n            tmp = cmd.split(\"bash -c\")\n            need_bash = True\n            cmd_list_prefix = tmp[0].split()\n            cmd = tmp[1]\n\n        for key, value in self.env.items():\n            tmp = \"\"\n            try:\n                tmp = \"\" + key + \"=\" + value\n                env_vars_list.append(tmp)\n            except:\n                self.logger.error(\"Failed to serialize environment variable %s\" % (key));\n\n        self.logger.debug(\"HappyProcessStart with env: > %s\" % (env_vars_list))\n\n        if self.strace:\n            cmd_list_prefix = [\"strace\", \"-tt\", \"-o\", self.strace_file] + cmd_list_prefix\n            tmp = []\n            for i in env_vars_list:\n                tmp.append(\"-E\")\n                tmp.append(i)\n            env_vars_list = tmp\n\n        elif need_internal_sudo:\n            pass\n        elif len(env_vars_list):\n            need_bash = True\n\n        if need_internal_sudo:\n            if self.rootMode:\n                tmp = self.getRunAsRootPrefixList()\n            else:\n                tmp = self.getRunAsUserPrefixList()\n            cmd_list_prefix = tmp + cmd_list_prefix\n\n        if self.node_id:\n            cmd_list_prefix = [\"ip\", \"netns\", \"exec\", self.uniquePrefix(self.node_id)] + cmd_list_prefix\n\n        cmd_list_prefix = self.getRunAsRootPrefixList() + cmd_list_prefix\n\n        try:\n            self.fout = open(self.output_file, \"wb\", 0)\n        except Exception:\n            emsg = \"Failed to open file %s.\" % (self.output_file)\n            self.logger.error(\"[%s] HappyProcessStart: %s.\" % (self.node_id, emsg))\n            self.exit()\n\n        self.logger.debug(\"HappyProcessStart: > %s\" % (cmd))\n\n        popen = None\n\n        try:\n            cmd_list = []\n            if need_bash:\n                env_vars_list = []\n                for key, value in self.env.items():\n                  tmp = \"\"\n                  try:\n                      tmp = \"\" + key + '=\"' + value.replace('\\\\','\\\\\\\\').replace('\"','\\\\\"') +'\"'\n                      env_vars_list.append(tmp)\n                  except:\n                      self.logger.error(\"Failed to serialize environment variable %s\" % (key));\n                cmd = \" \".join(env_vars_list) + ' ' + cmd\n                cmd_list = cmd_list_prefix + [\"bash\", \"-c\", cmd]\n            else:\n                cmd_list = cmd_list_prefix + env_vars_list + cmd.split()\n\n            self.logger.debug(\"[%s] HappyProcessStart: executing command list %s\" % (self.node_id, cmd_list))\n            popen = subprocess.Popen(cmd_list, stdin=subprocess.PIPE, stdout=self.fout)\n            self.child_pid = popen.pid\n            emsg = \"running daemon %s (PID %d)\" % (self.tag, self.child_pid)\n            self.logger.debug(\"[%s] HappyProcessStart: %s\" % (self.node_id, emsg))\n\n            # The following is guaranteed to fetch info about the right process (i.e. the PID has\n            # no chance of being reused) because even if the child process terminates right away, it'll stay\n            # around in <defunct> until the popen object has been destroyed or popen.poll() has\n            # been called.\n            p = psutil.Process(self.child_pid)\n\n            # At python.psutil 2.0.0, create_time changed from a data\n            # member to a member function. Try to access the modern member\n            # function first. If that throws, try the old data member.\n\n            try:\n                self.create_time = p.create_time()\n            except Exception:\n                self.create_time = p.create_time\n\n            emsg = \"Create time: \" + str(self.create_time)\n            self.logger.debug(\"[%s] HappyProcessStart: %s.\" % (self.node_id, emsg))\n\n            if self.sync_on_output:\n                self.__poll_for_output()\n\n        except Exception as e:\n            if popen:\n                # We need to kill the process tree; if popen succeeded,\n                # we assume we were also able to get the create_time\n                self.TerminateProcessTree(popen.pid, self.create_time)\n\n            emsg = \"Starting process with command %s FAILED with %s.\" % (cmd, str(e))\n            self.logger.error(\"[%s] HappyProcessStart: %s.\" % (self.node_id, emsg))\n            self.exit()\n\n    def __post_check(self):\n        pass\n\n    def __update_state(self):\n        emsg = \"Update State with tag %s running command: %s\" % \\\n            (self.tag, self.command)\n        self.logger.debug(\"[%s] HappyProcessStart: %s .\" % (self.node_id, emsg))\n\n        new_process = {}\n        new_process[\"pid\"] = self.child_pid\n        new_process[\"out\"] = self.output_file\n        new_process[\"strace\"] = self.strace_file\n        new_process[\"command\"] = self.command\n        new_process[\"create_time\"] = self.create_time\n\n        self.setNodeProcess(new_process, self.tag, self.node_id)\n\n        self.writeState()\n\n    def run(self):\n        with self.getStateLockManager():\n\n            self.readState()\n\n            self.__pre_check()\n\n            self.__start_daemon()\n\n            self.__update_state()\n\n            self.__post_check()\n\n        return ReturnMsg(0)\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code implements a class called HappyProcessStart that starts a process within virtual nodes. To use it, create an instance of the class and pass in the required options as a dictionary. The options include the node ID, the process tag, the command to run, and whether to enable strace output. Call the \"run\" method to start the process. The class will perform pre-checks to ensure that the process is not a duplicate and that the command is provided. It will then start the process and update the state with the process information. Finally, it will\n\n### Input:\n\n\n### Output:\n#!/usr/bin/env python3\n\n#\n#    Copyright (c) 2015-2017 Nest Labs, Inc.\n#    All rights reserved.\n#\n#    Licensed under the Apache License, Version 2.0 (the \"License\");\n#    you may not use this file except in compliance with the License.\n#    You may obtain a copy of the License at\n#\n#        http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n#    distributed under the License is distributed on an \"AS IS\" BASIS,\n#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#    See the License for the specific language governing permissions and\n#    limitations under the License.\n#\n\n##\n#    @file\n#       Implements HappyProcessStart class that stars process within virtual nodes.\n#\n#       Process runs a command in a virtual node, which itself\n#       is a logical representation of a network namespace.\n#\n\nfrom __future__ import absolute_import\nimport os\nimport subprocess\nimport sys\nimport time\nimport psutil\nimport warnings\n\nfrom happy.ReturnMsg import ReturnMsg\nfrom happy.Utils import *\nfrom happy.HappyNode import HappyNode\nfrom happy.HappyProcess import HappyProcess\nimport happy.HappyProcessStop\n\noptions = {}\noptions[\"quiet\"] = False\noptions[\"node_id\"] = None\noptions[\"tag\"] = None\noptions[\"command\"] = None\noptions[\"strace\"] = False\noptions[\"env\"] = {}\noptions[\"sync_on_output\"] = None\noptions[\"rootMode\"] = False\n\ndef option():\n    return options.copy()\n\n\nclass HappyProcessStart(HappyNode, HappyProcess):\n    \"\"\"\n    Starts a happy process.\n\n    happy-process-start [-h --help] [-q --quiet] [-i --id <NODE_NAME>]\n                        [-t --tag <DAEMON_NAME>] [-s --strace]\n                        [-e --env <ENVIRONMENT>] <COMMAND>\n\n        -i --id     Optional. Node on which to run the process. Find using\n                    happy-node-list or happy-state.\n        -t --tag    Required. Name of the process.\n        -s --strace Optional. Enable strace output for the process.\n        -e --env    Optional. An environment variable to pass to the node\n                    for use by the process.\n        <COMMAND>   Required. The command to run as process <DAEMON_NAME>.\n\n    Example:\n    $ happy-process-start BorderRouter ContinuousPing ping 127.0.0.1\n        Starts a process within the BorderRouter node called ContinuousPing\n        that runs \"ping 127.0.0.1\" continuously.\n\n    return:\n        0    success\n        1    fail\n    \"\"\"\n\n    def __init__(self, opts=options):\n        HappyNode.__init__(self)\n        HappyProcess.__init__(self)\n\n        self.quiet = opts[\"quiet\"]\n        self.node_id = opts[\"node_id\"]\n        self.tag = opts[\"tag\"]\n        self.command = opts[\"command\"]\n        self.strace = opts[\"strace\"]\n        self.env = opts[\"env\"]\n        self.sync_on_output = opts[\"sync_on_output\"]\n        self.output_fileput_suffix = \".out\"\n        self.strace_suffix = \".strace\"\n        self.rootMode = opts[\"rootMode\"]\n\n    def __stopProcess(self):\n        emsg = \"Process %s stops itself.\" % (self.tag)\n        self.logger.debug(\"[%s] daemon [%s]: %s\" % (self.node_id, self.tag, emsg))\n\n        options = happy.HappyProcessStop.option()\n        options[\"node_id\"] = self.node_id\n        options[\"tag\"] = self.tag\n        options[\"quiet\"] = self.quiet\n        stopProcess = happy.HappyProcessStop.HappyProcessStop(options)\n        stopProcess.run()\n\n        self.readState()\n\n    def __pre_check(self):\n        # Check if the new process is given\n        if not self.tag:\n            emsg = \"Missing name of the new process to start.\"\n            self.logger.error(\"[localhost] HappyProcessStart: %s\" % (emsg))\n            self.exit()\n\n        # Check if the name of new process is not a duplicate (that it does not already exists).\n        if self.processExists(self.tag):\n            emsg = \"virtual process %s already exist.\" % (self.tag)\n            self.logger.info(\"[%s] HappyProcessStart: %s\" % (self.node_id, emsg))\n            self.__stopProcess()\n\n        # Check if the process command is given\n        if not self.command:\n            emsg = \"Missing process command.\"\n            self.logger.error(\"[localhost] HappyProcessStart: %s\" % (emsg))\n            self.exit()\n\n        timeStamp = \"%010.6f\" % time.time()\n        pid = \"%06d\" % os.getpid()\n        emsg = \"Tag: %s PID: %s timeStamp : %s\" % (self.tag, pid, timeStamp)\n        self.logger.debug(\"[%s] HappyProcessStart: %s\" % (self.node_id, emsg))\n\n        self.output_file = self.process_log_prefix + pid + \\\n            \"_\" + timeStamp + \"_\" + self.tag + self.output_fileput_suffix\n        self.strace_file = self.process_log_prefix + pid + \\\n            \"_\" + timeStamp + \"_\" + self.tag + self.strace_suffix\n\n    def __poll_for_output(self):\n        poll_interval_sec = 0.01\n        max_poll_time_sec = 180\n        time_slept = 0\n        tail = open(self.output_file, \"r\")\n        self.logger.debug(\"[%s] HappyProcessStart: polling for output: %s\" % (self.node_id, self.sync_on_output))\n        while (True):\n            line = tail.readline()\n            if not line:\n                time.sleep(poll_interval_sec)\n                time_slept += poll_interval_sec\n                poll_interval_sec *= 2\n                if (time_slept > max_poll_time_sec):\n                    self.logger.debug(\"[%s] HappyProcessStart: can't find the output requested: %s\" %\n                                      (self.node_id, self.sync_on_output))\n                    raise RuntimeError(\"Can't find the output requested\")\n\n            elif self.sync_on_output in line:\n                self.logger.debug(\"[%s] HappyProcessStart: found output: %s in %s secs\" %\n                                  (self.node_id, self.sync_on_output, str(time_slept)))\n                break\n            else:\n                continue\n\n        tail.close()\n        return\n\n    def __start_daemon(self):\n        cmd = self.command\n\n        # We need to support 8 combinations:\n        # Who: user or root\n        # strace: yes or not\n        # env: yes or not\n\n        # Given this script called sayhello.sh:\n        #     #!/bin/bash\n        #     echo Hello ${USER}!\n        #     echo You passed the following opts $1, $2, $3\n        #     echo MYENVVAR is $MYENVVAR\n\n        # a successful run with an environment variable prints:\n        #     Hello andreello!\n        #     You passed the following opts a, b, c\n        #     MYENVVAR is hello\n\n        # The goal is to use the simples command line possible; in particular, we don't\n        # want to call sudo unless strictly necessary (for performance reasons).\n\n        # Here is how the CLI looks like if you use \"ip netns exec\" directly:\n\n        # user without env:\n        # sudo ip netns exec happy000 sudo -u andreello                                            ./sayhello.sh a b c\n\n        # user with env:\n        # sudo ip netns exec happy000 sudo -u andreello                             MYENVVAR=hello ./sayhello.sh a b c\n\n        # root without env:\n        #      ip netns exec happy000                                                              ./sayhello.sh a b c\n\n        # root with env\n        #      ip netns exec happy000                   bash -c                    'MYENVVAR=hello ./sayhello.sh a b c'\n\n        # user with strace, without env\n        # sudo ip netns exec happy000 sudo -u andreello strace -tt -o strace.out                   ./sayhello.sh a b c\n\n        # user with strace, with env\n        # sudo ip netns exec happy000 sudo -u andreello strace -tt -o strace.out -E MYENVVAR=hello ./sayhello.sh a b c\n\n        # root with strace, without env\n        #      ip netns exec happy000                   strace -tt -o strace.out                   ./sayhello.sh a b c\n\n        # root with strace, with env\n        #      ip netns exec happy000                   strace -tt -o strace.out -E MYENVVAR=hello ./sayhello.sh a b c\n\n        # Highlights:\n        # - to pass environment variables, either 'strace -E' or 'bash -c'\n        # - but, 'bash -c' requires the command to be in one string, while 'strace -E' requires the opposite\n        # - the examples above show the argument to 'bash -c' in quotes, but they are not necessary when passing\n        #   the list of strings to Popen()\n        # - also, the examples above show only one env var; if passing more than one to strace, they need to have\n        #   a '-E' each\n        # In summary, it's easier to build the cmd as a full string, and then split it the right way depending\n        # on strace vs bash.\n\n        # Here are a few examples of how the string is split into a list:\n        #\n        # user without env:\n        # ./bin/happy-process-start.py -i node01 -t HELLO ./sayhello.sh a b c\n        # [u'sudo', u'ip', u'netns', u'exec', u'happy000', u'sudo', u'-u', u'andreello', u'./sayhello.sh', u'a', u'b', u'c']\n        #\n        # user with env:\n        # ./bin/happy-process-start.py -i node01 -e \"MYENVVAR=hello\" -t HELLO ./sayhello.sh a b c\n        # [u'sudo', u'ip', u'netns', u'exec', u'happy000', u'sudo', u'-u', u'andreello',\n        #       u'MYENVVAR=hello', u'./sayhello.sh', u'a', u'b', u'c']\n        #\n        # root without env:\n        # sudo ./bin/happy-process-start.py -i node01  -t HELLO ./sayhello.sh a b c\n        # [u'ip', u'netns', u'exec', u'happy000', u'./sayhello.sh', u'a', u'b', u'c']\n        #\n        # user with env and strace:\n        # ./bin/happy-process-start.py -i node01 -e \"MYENVVAR=hello\" -s  -t HELLO ./sayhello.sh a b c\n        # [u'sudo', u'ip', u'netns', u'exec', u'happy000', u'sudo', u'-u', u'andreello', u'strace', u'-tt', u'-o',\n        #       u'/tmp/happy_..._HELLO.strace', u'-E', u'MYENVVAR=hello', u'./sayhello.sh', u'a', u'b', u'c']\n        #\n        # root with env:\n        # [u'ip', u'netns', u'exec', u'happy000', 'bash', '-c', u' MYENVVAR=hello ./sayhello.sh a b c']\n        #\n        # root with strace no env:\n        # sudo ./bin/happy-process-start.py -i node01 -s  -t HELLO ./sayhello.sh a b c\n        #\n        # root with strace and env:\n        # [u'ip', u'netns', u'exec', u'happy000', u'strace', u'-tt', u'-o', u'/tmp/happy_..._HELLO.strace',\n        #       u'-E', u'MYENVVAR=hello', u'./sayhello.sh', u'a', u'b', u'c']\n\n        need_internal_sudo = False\n        if os.getuid() != 0:\n            need_internal_sudo = True\n\n        if \"sudo\" in cmd.split():\n            # The command already has the inner sudo; typical case is that\n            # a normal user started Happy, and the script needs to run\n            # a command in a node as root. If sudo is for root, remove it.\n            # TODO: properly support \"sudo -u\" with strace\n            cmd = self.stripRunAsRoot(cmd)\n            need_internal_sudo = False\n\n        env_vars_list = []\n        cmd_list_prefix = []\n        need_bash = False\n\n        if \"bash -c\" in cmd:\n            tmp = cmd.split(\"bash -c\")\n            need_bash = True\n            cmd_list_prefix = tmp[0].split()\n            cmd = tmp[1]\n\n        for key, value in self.env.items():\n            tmp = \"\"\n            try:\n                tmp = \"\" + key + \"=\" + value\n                env_vars_list.append(tmp)\n            except:\n                self.logger.error(\"Failed to serialize environment variable %s\" % (key));\n\n        self.logger.debug(\"HappyProcessStart with env: > %s\" % (env_vars_list))\n\n        if self.strace:\n            cmd_list_prefix = [\"strace\", \"-tt\", \"-o\", self.strace_file] + cmd_list_prefix\n            tmp = []\n            for i in env_vars_list:\n                tmp.append(\"-E\")\n                tmp.append(i)\n            env_vars_list = tmp\n\n        elif need_internal_sudo:\n            pass\n        elif len(env_vars_list):\n            need_bash = True\n\n        if need_internal_sudo:\n            if self.rootMode:\n                tmp = self.getRunAsRootPrefixList()\n            else:\n                tmp = self.getRunAsUserPrefixList()\n            cmd_list_prefix = tmp + cmd_list_prefix\n\n        if self.node_id:\n            cmd_list_prefix = [\"ip\", \"netns\", \"exec\", self.uniquePrefix(self.node_id)] + cmd_list_prefix\n\n        cmd_list_prefix = self.getRunAsRootPrefixList() + cmd_list_prefix\n\n        try:\n            self.fout = open(self.output_file, \"wb\", 0)\n        except Exception:\n            emsg = \"Failed to open file %s.\" % (self.output_file)\n            self.logger.error(\"[%s] HappyProcessStart: %s.\" % (self.node_id, emsg))\n            self.exit()\n\n        self.logger.debug(\"HappyProcessStart: > %s\" % (cmd))\n\n        popen = None\n\n        try:\n            cmd_list = []\n            if need_bash:\n                env_vars_list = []\n                for key, value in self.env.items():\n                  tmp = \"\"\n                  try:\n                      tmp = \"\" + key + '=\"' + value.replace('\\\\','\\\\\\\\').replace('\"','\\\\\"') +'\"'\n                      env_vars_list.append(tmp)\n                  except:\n                      self.logger.error(\"Failed to serialize environment variable %s\" % (key));\n                cmd = \" \".join(env_vars_list) + ' ' + cmd\n                cmd_list = cmd_list_prefix + [\"bash\", \"-c\", cmd]\n            else:\n                cmd_list = cmd_list_prefix + env_vars_list + cmd.split()\n\n            self.logger.debug(\"[%s] HappyProcessStart: executing command list %s\" % (self.node_id, cmd_list))\n            popen = subprocess.Popen(cmd_list, stdin=subprocess.PIPE, stdout=self.fout)\n            self.child_pid = popen.pid\n            emsg = \"running daemon %s (PID %d)\" % (self.tag, self.child_pid)\n            self.logger.debug(\"[%s] HappyProcessStart: %s\" % (self.node_id, emsg))\n\n            # The following is guaranteed to fetch info about the right process (i.e. the PID has\n            # no chance of being reused) because even if the child process terminates right away, it'll stay\n            # around in <defunct> until the popen object has been destroyed or popen.poll() has\n            # been called.\n            p = psutil.Process(self.child_pid)\n\n            # At python.psutil 2.0.0, create_time changed from a data\n            # member to a member function. Try to access the modern member\n            # function first. If that throws, try the old data member.\n\n            try:\n                self.create_time = p.create_time()\n            except Exception:\n                self.create_time = p.create_time\n\n            emsg = \"Create time: \" + str(self.create_time)\n            self.logger.debug(\"[%s] HappyProcessStart: %s.\" % (self.node_id, emsg))\n\n            if self.sync_on_output:\n                self.__poll_for_output()\n\n        except Exception as e:\n            if popen:\n                # We need to kill the process tree; if popen succeeded,\n                # we assume we were also able to get the create_time\n                self.TerminateProcessTree(popen.pid, self.create_time)\n\n            emsg = \"Starting process with command %s FAILED with %s.\" % (cmd, str(e))\n            self.logger.error(\"[%s] HappyProcessStart: %s.\" % (self.node_id, emsg))\n            self.exit()\n\n    def __post_check(self):\n        pass\n\n    def __update_state(self):\n        emsg = \"Update State with tag %s running command: %s\" % \\\n            (self.tag, self.command)\n        self.logger.debug(\"[%s] HappyProcessStart: %s .\" % (self.node_id, emsg))\n\n        new_process = {}\n        new_process[\"pid\"] = self.child_pid\n        new_process[\"out\"] = self.output_file\n        new_process[\"strace\"] = self.strace_file\n        new_process[\"command\"] = self.command\n        new_process[\"create_time\"] = self.create_time\n\n        self.setNodeProcess(new_process, self.tag, self.node_id)\n\n        self.writeState()\n\n    def run(self):\n        with self.getStateLockManager():\n\n            self.readState()\n\n            self.__pre_check()\n\n            self.__start_daemon()\n\n            self.__update_state()\n\n            self.__post_check()\n\n        return ReturnMsg(0)\n"
    },
    {
        "instruction": "Create a Python function to sort an array of numbers based on their size.",
        "input": "[5, 1, 2, 6, 4, 3]",
        "output": "def sort_array(arr):\n    arr.sort()\n    return arr",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to sort an array of numbers based on their size.\n\n### Input:\n[5, 1, 2, 6, 4, 3]\n\n### Output:\ndef sort_array(arr):\n    arr.sort()\n    return arr"
    },
    {
        "instruction": "Create a text-based web application with Python and Flask. The application should include pages for creating, editing, and viewing articles.",
        "input": "Not applicable",
        "output": "from flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n return render_template('home.html')\n\n@app.route('/create', methods=['GET', 'POST'])\ndef create():\n if request.method == 'GET':\n  return render_template('create.html')\n elif request.method == 'POST':\n  article = request.form['article']\n  # add article to database\n  return render_template('created.html')\n\n@app.route('/view')\ndef view():\n # get article from database\n return render_template('view.html', article=article)\n\n@app.route('/edit', methods=['GET', 'POST'])\ndef edit():\n if request.method == 'GET':\n  # get article from database\n  return render_template('edit.html', article=article)\n elif request.method == 'POST':\n  edited_article = request.form['edited_article']\n  # update article in database\n  return render_template('edited.html')\n\nif __name__ == '__main__':\n app.run(debug=True)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a text-based web application with Python and Flask. The application should include pages for creating, editing, and viewing articles.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n return render_template('home.html')\n\n@app.route('/create', methods=['GET', 'POST'])\ndef create():\n if request.method == 'GET':\n  return render_template('create.html')\n elif request.method == 'POST':\n  article = request.form['article']\n  # add article to database\n  return render_template('created.html')\n\n@app.route('/view')\ndef view():\n # get article from database\n return render_template('view.html', article=article)\n\n@app.route('/edit', methods=['GET', 'POST'])\ndef edit():\n if request.method == 'GET':\n  # get article from database\n  return render_template('edit.html', article=article)\n elif request.method == 'POST':\n  edited_article = request.form['edited_article']\n  # update article in database\n  return render_template('edited.html')\n\nif __name__ == '__main__':\n app.run(debug=True)"
    },
    {
        "instruction": "Build a machine learning model in Python which will take in a set of customer data with two features (age and gender) and predict whether or not the customer is likely to buy a product.",
        "input": "Name\tAge\tGender\nBrian\t37\tMale\nErin\t42\tFemale\nHannibal\t67\tMale",
        "output": "import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\ndata = pd.read_csv('data.csv')\n\nX = data[['Age', 'Gender']]\ny = data['Bought']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nmodel = RandomForestClassifier()\nmodel.fit(X_train, y_train)\n\nscore = model.score(X_test, y_test)\n\nprint(score)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a machine learning model in Python which will take in a set of customer data with two features (age and gender) and predict whether or not the customer is likely to buy a product.\n\n### Input:\nName\tAge\tGender\nBrian\t37\tMale\nErin\t42\tFemale\nHannibal\t67\tMale\n\n### Output:\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\ndata = pd.read_csv('data.csv')\n\nX = data[['Age', 'Gender']]\ny = data['Bought']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nmodel = RandomForestClassifier()\nmodel.fit(X_train, y_train)\n\nscore = model.score(X_test, y_test)\n\nprint(score)"
    },
    {
        "instruction": "Edit the existing Python program to append a new record with data programmatically.",
        "input": "people = [\n {\"name\": \"Alice\", \"age\": 8},\n {\"name\": \"Bob\", \"age\": 11},\n {\"name\": \"Charlie\", \"age\": 13},\n]",
        "output": "people = [\n {\"name\": \"Alice\", \"age\": 8},\n {\"name\": \"Bob\", \"age\": 11},\n {\"name\": \"Charlie\", \"age\": 13},\n {\"name\": \"John\", \"age\": 15},\n]\n\n# Append a new record with data programmatically:\nrecord = {\"name\": \"John\", \"age\": 15}\npeople.append(record)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the existing Python program to append a new record with data programmatically.\n\n### Input:\npeople = [\n {\"name\": \"Alice\", \"age\": 8},\n {\"name\": \"Bob\", \"age\": 11},\n {\"name\": \"Charlie\", \"age\": 13},\n]\n\n### Output:\npeople = [\n {\"name\": \"Alice\", \"age\": 8},\n {\"name\": \"Bob\", \"age\": 11},\n {\"name\": \"Charlie\", \"age\": 13},\n {\"name\": \"John\", \"age\": 15},\n]\n\n# Append a new record with data programmatically:\nrecord = {\"name\": \"John\", \"age\": 15}\npeople.append(record)"
    },
    {
        "instruction": "Generate a python function that computes the standard deviation of an array of numbers.",
        "input": "[12,14,11,20,13]",
        "output": "def compute_std_dev(values):\n  n = len(values)\n  mean = 0\n  for i in range(n):\n    mean += values[i]\n  mean /= n\n  std_dev = 0\n  for i in range(n):\n    std_dev += (values[i] - mean)**2\n  std_dev /= n\n  return std_dev**(1/2)\n#Example:\ncompute_std_dev([12,14,11,20,13])\n#Output: 3.067",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python function that computes the standard deviation of an array of numbers.\n\n### Input:\n[12,14,11,20,13]\n\n### Output:\ndef compute_std_dev(values):\n  n = len(values)\n  mean = 0\n  for i in range(n):\n    mean += values[i]\n  mean /= n\n  std_dev = 0\n  for i in range(n):\n    std_dev += (values[i] - mean)**2\n  std_dev /= n\n  return std_dev**(1/2)\n#Example:\ncompute_std_dev([12,14,11,20,13])\n#Output: 3.067"
    },
    {
        "instruction": "Implement a Python class to sort a given array of integers using Insertion Sort.",
        "input": "[5, 2, 4, 1, 3]",
        "output": "class InsertionSort:\n    def sort(self, arr): \n        for i in range(1, len(arr)): \n            key = arr[i] \n            j = i-1\n            while j >=0 and key < arr[j] : \n                    arr[j+1] = arr[j] \n                    j -= 1\n            arr[j+1] = key\n        return arr\n\nInsertionSort().sort([5, 2, 4, 1, 3])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python class to sort a given array of integers using Insertion Sort.\n\n### Input:\n[5, 2, 4, 1, 3]\n\n### Output:\nclass InsertionSort:\n    def sort(self, arr): \n        for i in range(1, len(arr)): \n            key = arr[i] \n            j = i-1\n            while j >=0 and key < arr[j] : \n                    arr[j+1] = arr[j] \n                    j -= 1\n            arr[j+1] = key\n        return arr\n\nInsertionSort().sort([5, 2, 4, 1, 3])"
    },
    {
        "instruction": "Create a web-scraping application with Python to extract the price of the top 10 books on Amazon.",
        "input": "Not applicable",
        "output": "import requests\nimport bs4\n\n# Make the request to Amazon\nurl = 'https://www.amazon.com/best-sellers-books-Amazon/zgbs/books/ref=zg_bs_nav_0'\nres = requests.get(url)\n\n# Use BeautifulSoup to parse the HTML\nsoup = bs4.BeautifulSoup(res.text, 'html.parser')\n# Extract the top 10 books\nbooks = soup.select('.aok-inline-block.zg-item')[:10]\n# Extract the price for each book\nprices = []\nfor book in books:\n price = book.select('.p13n-sc-price')[0].text.strip()\n prices.append(price)\n \nprint(prices)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web-scraping application with Python to extract the price of the top 10 books on Amazon.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nimport bs4\n\n# Make the request to Amazon\nurl = 'https://www.amazon.com/best-sellers-books-Amazon/zgbs/books/ref=zg_bs_nav_0'\nres = requests.get(url)\n\n# Use BeautifulSoup to parse the HTML\nsoup = bs4.BeautifulSoup(res.text, 'html.parser')\n# Extract the top 10 books\nbooks = soup.select('.aok-inline-block.zg-item')[:10]\n# Extract the price for each book\nprices = []\nfor book in books:\n price = book.select('.p13n-sc-price')[0].text.strip()\n prices.append(price)\n \nprint(prices)"
    },
    {
        "instruction": "Write a Python program to convert a given list to a dictionary with each item as a key-value pair.",
        "input": "list = [(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4)]",
        "output": "list = [(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4)]\n\nd = dict(list)\n\nprint(d)\n# Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a given list to a dictionary with each item as a key-value pair.\n\n### Input:\nlist = [(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4)]\n\n### Output:\nlist = [(\"a\", 1), (\"b\", 2), (\"c\", 3), (\"d\", 4)]\n\nd = dict(list)\n\nprint(d)\n# Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}"
    },
    {
        "instruction": "Create a mapping between the two objects in Python.",
        "input": "object1 = [\"a\", \"b\", \"c\", \"d\", \"e\"]\nobject2 = [\"apple\", \"banana\", \"carrot\", \"date\", \"eggplant\"]",
        "output": "objectMap = {\n\"a\": \"apple\",\n\"b\": \"banana\",\n\"c\": \"carrot\",\n\"d\": \"date\",\n\"e\": \"eggplant\"\n}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a mapping between the two objects in Python.\n\n### Input:\nobject1 = [\"a\", \"b\", \"c\", \"d\", \"e\"]\nobject2 = [\"apple\", \"banana\", \"carrot\", \"date\", \"eggplant\"]\n\n### Output:\nobjectMap = {\n\"a\": \"apple\",\n\"b\": \"banana\",\n\"c\": \"carrot\",\n\"d\": \"date\",\n\"e\": \"eggplant\"\n}"
    },
    {
        "instruction": "Analyze how fast a function runs through a given code chunk and suggest possible ways to speed it up.",
        "input": "def simple_func(arr):\n    s = 0\n    for item in arr:\n        s += item\n    return s",
        "output": "The function `simple_func` is running very slowly. To speed up the function, one possible way is to use the built-in Python `sum` function that already exists, instead of looping over the `arr` list to manually add up the elements. Another possible option is to use vectorization with NumPy to perform arithmetic operations on the entire array at once, thus avoiding loops and significantly reducing the computation time. And finally, using Cython to compile the code from Python to C code may improved the performance even further.",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAnalyze how fast a function runs through a given code chunk and suggest possible ways to speed it up.\n\n### Input:\ndef simple_func(arr):\n    s = 0\n    for item in arr:\n        s += item\n    return s\n\n### Output:\nThe function `simple_func` is running very slowly. To speed up the function, one possible way is to use the built-in Python `sum` function that already exists, instead of looping over the `arr` list to manually add up the elements. Another possible option is to use vectorization with NumPy to perform arithmetic operations on the entire array at once, thus avoiding loops and significantly reducing the computation time. And finally, using Cython to compile the code from Python to C code may improved the performance even further."
    },
    {
        "instruction": "Create a class in Python that has a single method which takes a string as an input and returns the reversed version of the string.",
        "input": "Not applicable",
        "output": "class ReverseString:\n def __init__(self, string):\n self.string = string\n\n def reverse(self):\n return self.string[::-1]\n\nstring_object = ReverseString('hello')\nreversed_string = string_object.reverse()\n\nprint(reversed_string) # olleh",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that has a single method which takes a string as an input and returns the reversed version of the string.\n\n### Input:\nNot applicable\n\n### Output:\nclass ReverseString:\n def __init__(self, string):\n self.string = string\n\n def reverse(self):\n return self.string[::-1]\n\nstring_object = ReverseString('hello')\nreversed_string = string_object.reverse()\n\nprint(reversed_string) # olleh"
    },
    {
        "instruction": "Create a Python program to detect the presence of outliers in a dataset.",
        "input": "Check for outliers in the following dataset: [30, 45, 12, 18, 32, 44, 25]",
        "output": "def find_outlier(arr):\n    mean = sum(arr)/len(arr)\n    stdev = (sum([(x-mean)**2 for x in arr])/len(arr))**(0.5)\n\n    for i in arr:\n        z_score = (i - mean)/stdev\n        if z_score >= 3 or z_score <= -3:\n            return i\n    \n    # no outliers found\n    return None\n    \narr = [30, 45, 12, 18, 32, 44, 25]\n \noutlier = find_outlier(arr)\nprint(outlier)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to detect the presence of outliers in a dataset.\n\n### Input:\nCheck for outliers in the following dataset: [30, 45, 12, 18, 32, 44, 25]\n\n### Output:\ndef find_outlier(arr):\n    mean = sum(arr)/len(arr)\n    stdev = (sum([(x-mean)**2 for x in arr])/len(arr))**(0.5)\n\n    for i in arr:\n        z_score = (i - mean)/stdev\n        if z_score >= 3 or z_score <= -3:\n            return i\n    \n    # no outliers found\n    return None\n    \narr = [30, 45, 12, 18, 32, 44, 25]\n \noutlier = find_outlier(arr)\nprint(outlier)"
    },
    {
        "instruction": "Create a function in Python for calculating the surface area of a cube.",
        "input": "The length of one of the sides of the cube",
        "output": "def cube_area(side):\n return 6 * (side ** 2)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python for calculating the surface area of a cube.\n\n### Input:\nThe length of one of the sides of the cube\n\n### Output:\ndef cube_area(side):\n return 6 * (side ** 2)"
    },
    {
        "instruction": "Create a sorting algorithm in Python that sorts a list of numbers from low to high.",
        "input": "[10, 6, 8, 4]",
        "output": "def bubble_sort(lst):\n    for i in range(len(lst) - 1): \n        for j in range (0, len(lst) - i - 1): \n            if lst[j] > lst[j + 1] : \n                lst[j], lst[j + 1] = lst[j + 1], lst[j] \n    return lst\n\nsorted_list = bubble_sort([10, 6, 8, 4])\nprint(sorted_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sorting algorithm in Python that sorts a list of numbers from low to high.\n\n### Input:\n[10, 6, 8, 4]\n\n### Output:\ndef bubble_sort(lst):\n    for i in range(len(lst) - 1): \n        for j in range (0, len(lst) - i - 1): \n            if lst[j] > lst[j + 1] : \n                lst[j], lst[j + 1] = lst[j + 1], lst[j] \n    return lst\n\nsorted_list = bubble_sort([10, 6, 8, 4])\nprint(sorted_list)"
    },
    {
        "instruction": "Create a Python function that prints out the permutations of a list of words.",
        "input": "words = ['cat', 'dog', 'bird']",
        "output": "def permutations(words):\n \n  if len(words) == 0:\n    return []\n  elif len(words) == 1: \n    return [words]\n  else:\n    perms = []\n    for word in words: \n      remaining_words = words[:] \n      remaining_words.remove(word)\n      z = permutations(remaining_words)   \n      for perm in z: \n        perms.append([word] + perm)\n    return perms\n \n# Test \nwords = ['cat', 'dog', 'bird']\nprint(permutations(words))\n\n# Output \n[['cat', 'dog', 'bird'], ['cat', 'bird', 'dog'], ['dog', 'cat', 'bird'], ['dog', 'bird', 'cat'], ['bird', 'cat', 'dog'], ['bird', 'dog', 'cat']]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that prints out the permutations of a list of words.\n\n### Input:\nwords = ['cat', 'dog', 'bird']\n\n### Output:\ndef permutations(words):\n \n  if len(words) == 0:\n    return []\n  elif len(words) == 1: \n    return [words]\n  else:\n    perms = []\n    for word in words: \n      remaining_words = words[:] \n      remaining_words.remove(word)\n      z = permutations(remaining_words)   \n      for perm in z: \n        perms.append([word] + perm)\n    return perms\n \n# Test \nwords = ['cat', 'dog', 'bird']\nprint(permutations(words))\n\n# Output \n[['cat', 'dog', 'bird'], ['cat', 'bird', 'dog'], ['dog', 'cat', 'bird'], ['dog', 'bird', 'cat'], ['bird', 'cat', 'dog'], ['bird', 'dog', 'cat']]"
    },
    {
        "instruction": "Create a Python program which takes a list of numbers as an input, counts the number of negative numbers in the list, and returns the sum.",
        "input": "[-2, 4, 3, -3, -4, 5]",
        "output": "def sumNegatives(list): \n    count = 0\n    total = 0\n    for number in list:\n        if number < 0:\n            count += 1\n            total += number\n    return count, total\n\nnumList = [-2, 4, 3, -3, -4, 5]\nnegativeCount, negativeSum = sumNegatives(numList)\n\nprint('Number of Negative Numbers:', negativeCount) \nprint('Sum of Negative Numbers:', negativeSum)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program which takes a list of numbers as an input, counts the number of negative numbers in the list, and returns the sum.\n\n### Input:\n[-2, 4, 3, -3, -4, 5]\n\n### Output:\ndef sumNegatives(list): \n    count = 0\n    total = 0\n    for number in list:\n        if number < 0:\n            count += 1\n            total += number\n    return count, total\n\nnumList = [-2, 4, 3, -3, -4, 5]\nnegativeCount, negativeSum = sumNegatives(numList)\n\nprint('Number of Negative Numbers:', negativeCount) \nprint('Sum of Negative Numbers:', negativeSum)"
    },
    {
        "instruction": "Optimize the following Python code by changing its structure and by incorporating efficient algorithms.",
        "input": "def factor_of_three(n):\n count = 0\n for i in range(1, n+1):\n  if i % 3 == 0:\n   count += 1\n return count\n\nfactor_of_three(50)",
        "output": "def factor_of_three(n):\n  return len([i for i in range(1, n+1) if i % 3 == 0])\n  \nfactor_of_three(50)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python code by changing its structure and by incorporating efficient algorithms.\n\n### Input:\ndef factor_of_three(n):\n count = 0\n for i in range(1, n+1):\n  if i % 3 == 0:\n   count += 1\n return count\n\nfactor_of_three(50)\n\n### Output:\ndef factor_of_three(n):\n  return len([i for i in range(1, n+1) if i % 3 == 0])\n  \nfactor_of_three(50)"
    },
    {
        "instruction": "Create a web scraper in Python that extracts data from a specific web page (e.g. blog posts, recipes, etc).",
        "input": "url = example.com",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com/'\nheaders = {'User-Agent': 'Mozilla/5.0'}\n\nresponse = requests.get(url, headers=headers)\nsoup = BeautifulSoup(response.text, 'lxml')\n\ndata = []\nfor item in soup.find_all('div', class_='blog-post'):\n    post_data = {\n        'title': item.h2.text,\n        'body': item.p.text,\n        'url': item.find('a')['href']\n    }\n    data.append(post_data)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python that extracts data from a specific web page (e.g. blog posts, recipes, etc).\n\n### Input:\nurl = example.com\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com/'\nheaders = {'User-Agent': 'Mozilla/5.0'}\n\nresponse = requests.get(url, headers=headers)\nsoup = BeautifulSoup(response.text, 'lxml')\n\ndata = []\nfor item in soup.find_all('div', class_='blog-post'):\n    post_data = {\n        'title': item.h2.text,\n        'body': item.p.text,\n        'url': item.find('a')['href']\n    }\n    data.append(post_data)"
    },
    {
        "instruction": "Write a Python program to perform sentiment analysis over a tweet corpus. The program should take in the tweets as input and output the sentiment of each tweet.",
        "input": "Tweets:\n\n1. \"I love playing basketball with my friends!\"\n2. \"I hate wearing masks in public places.\"\n3. \"I'm feeling really happy today!\"\n4. \"I find it hard to concentrate on my studies recently.\"",
        "output": "tweets = [\"I love playing basketball with my friends!\", \n          \"I hate wearing masks in public places.\",\n          \"I'm feeling really happy today!\",\n          \"I find it hard to concentrate on my studies recently.\"]\n\n#importing the necessary libraries\nfrom textblob import TextBlob\n\n#list to store the sentiment polarity and subjectivity\nsentiment_list = []\n\n#iterate through the tweets\nfor tweet in tweets:\n    # performing sentiment analysis\n    analysis = TextBlob(tweet) \n    #append sentiment polarity and subjectivity to the list\n    sentiment_list.append({'Polarity':analysis.sentiment.polarity,\n                           'Subjectivity':analysis.sentiment.subjectivity\n                          })\n\n#print output\nprint(f'Sentiment Analysis: {sentiment_list}')\n\nSentiment Analysis: [{'Polarity': 0.8, 'Subjectivity': 0.9}, {'Polarity': -0.8, 'Subjectivity': 0.9}, {'Polarity': 0.7, 'Subjectivity': 0.8}, {'Polarity': -0.2, 'Subjectivity': 0.5}]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to perform sentiment analysis over a tweet corpus. The program should take in the tweets as input and output the sentiment of each tweet.\n\n### Input:\nTweets:\n\n1. \"I love playing basketball with my friends!\"\n2. \"I hate wearing masks in public places.\"\n3. \"I'm feeling really happy today!\"\n4. \"I find it hard to concentrate on my studies recently.\"\n\n### Output:\ntweets = [\"I love playing basketball with my friends!\", \n          \"I hate wearing masks in public places.\",\n          \"I'm feeling really happy today!\",\n          \"I find it hard to concentrate on my studies recently.\"]\n\n#importing the necessary libraries\nfrom textblob import TextBlob\n\n#list to store the sentiment polarity and subjectivity\nsentiment_list = []\n\n#iterate through the tweets\nfor tweet in tweets:\n    # performing sentiment analysis\n    analysis = TextBlob(tweet) \n    #append sentiment polarity and subjectivity to the list\n    sentiment_list.append({'Polarity':analysis.sentiment.polarity,\n                           'Subjectivity':analysis.sentiment.subjectivity\n                          })\n\n#print output\nprint(f'Sentiment Analysis: {sentiment_list}')\n\nSentiment Analysis: [{'Polarity': 0.8, 'Subjectivity': 0.9}, {'Polarity': -0.8, 'Subjectivity': 0.9}, {'Polarity': 0.7, 'Subjectivity': 0.8}, {'Polarity': -0.2, 'Subjectivity': 0.5}]"
    },
    {
        "instruction": "Generate a neural network in Python for understanding and generating natural language.",
        "input": "No input",
        "output": "import numpy as np\nimport tensorflow as tf\n\n# Create neural network model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu', input_shape=(1000,)),\n    tf.keras.layers.Dense(32, activation='relu'),\n    tf.keras.layers.Dense(16, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(inputs, labels, epochs=100)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a neural network in Python for understanding and generating natural language.\n\n### Input:\nNo input\n\n### Output:\nimport numpy as np\nimport tensorflow as tf\n\n# Create neural network model\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(64, activation='relu', input_shape=(1000,)),\n    tf.keras.layers.Dense(32, activation='relu'),\n    tf.keras.layers.Dense(16, activation='relu'),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(inputs, labels, epochs=100)"
    },
    {
        "instruction": "Convert the following imperative statement into a Python function.",
        "input": "Return the sum of two numbers.",
        "output": "def add_numbers(a, b):\n    '''This function will return the sum of two numbers'''\n    return a + b",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following imperative statement into a Python function.\n\n### Input:\nReturn the sum of two numbers.\n\n### Output:\ndef add_numbers(a, b):\n    '''This function will return the sum of two numbers'''\n    return a + b"
    },
    {
        "instruction": "Create a Python script to generate random numbers with using a certain range.",
        "input": "Minimum = 5, Maximum = 15",
        "output": "import random\n\nmin_n = 5\nmax_n = 15\n\ndef random_number_generator(min_n, max_n):\n  return random.randint(min_n, max_n)\n\nfor num in range(0, 10):\n    print (random_number_generator(min_n, max_n))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to generate random numbers with using a certain range.\n\n### Input:\nMinimum = 5, Maximum = 15\n\n### Output:\nimport random\n\nmin_n = 5\nmax_n = 15\n\ndef random_number_generator(min_n, max_n):\n  return random.randint(min_n, max_n)\n\nfor num in range(0, 10):\n    print (random_number_generator(min_n, max_n))"
    },
    {
        "instruction": "Write a python program to find the largest of three given numbers.",
        "input": "num1 = 14\nnum2 = 25\nnum3 = 6",
        "output": "num1 = 14\nnum2 = 25\nnum3 = 6\n\nlargest = max(num1, num2, num3)\n\nprint(\"The largest number is\", largest)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to find the largest of three given numbers.\n\n### Input:\nnum1 = 14\nnum2 = 25\nnum3 = 6\n\n### Output:\nnum1 = 14\nnum2 = 25\nnum3 = 6\n\nlargest = max(num1, num2, num3)\n\nprint(\"The largest number is\", largest)"
    },
    {
        "instruction": "Write a Python script that randomly shuffles a list of strings.",
        "input": "[\"Apple\", \"Orange\", \"Banana\", \"Strawberry\"]",
        "output": "import random\n\nlist = [\"Apple\", \"Orange\", \"Banana\", \"Strawberry\"]\nrandom.shuffle(list)\n\nfor item in list:\n    print(item)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that randomly shuffles a list of strings.\n\n### Input:\n[\"Apple\", \"Orange\", \"Banana\", \"Strawberry\"]\n\n### Output:\nimport random\n\nlist = [\"Apple\", \"Orange\", \"Banana\", \"Strawberry\"]\nrandom.shuffle(list)\n\nfor item in list:\n    print(item)"
    },
    {
        "instruction": "Write a Python function to replace all occurrences of a pattern in a string with a specific string?",
        "input": "String: \"Today is a beautiful day\"\nPattern: \"a\"\nReplacement: \"the\"",
        "output": "def replace_all(orig_str, pattern, replacement):\n\treturn orig_str.replace(pattern, replacement)\n\nprint(replace_all(orig_str=\"Today is a beautiful day\", pattern=\"a\", replacement=\"the\"))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to replace all occurrences of a pattern in a string with a specific string?\n\n### Input:\nString: \"Today is a beautiful day\"\nPattern: \"a\"\nReplacement: \"the\"\n\n### Output:\ndef replace_all(orig_str, pattern, replacement):\n\treturn orig_str.replace(pattern, replacement)\n\nprint(replace_all(orig_str=\"Today is a beautiful day\", pattern=\"a\", replacement=\"the\"))"
    },
    {
        "instruction": "Generate a Python Sudoku solver. It should read the board (a list of 9x9 lists of the board's contents) as an input and output a list of 9x9 lists with all the numbers filled in.",
        "input": "board = [\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0]\n]",
        "output": "def check_valid(board, row, col, num):\n for i in range(0, 9):\n  if board[row][i] == num: \n   return False\n for i in range(0, 9):\n  if board[i][col] == num:\n   return False \n row_block = row//3\n col_block = col//3\n \n for i in range(row_block*3, row_block*3+3):\n  for j in range(col_block*3, col_block*3+3):\n   if board[i][j] == num:\n    return False\n return True\n\ndef solve(board):\n for row in range(9): \n  for col in range(9):\n   if board[row][col] == 0:\n    for num in range(1, 10):\n     if check_valid(board, row, col, num):\n      board[row][col] = num\n      if solve(board):\n       return True\n      else:\n       board[row][col] = 0\n    return False\n return True\n   \nsolve(board)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python Sudoku solver. It should read the board (a list of 9x9 lists of the board's contents) as an input and output a list of 9x9 lists with all the numbers filled in.\n\n### Input:\nboard = [\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0],\n [0, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0], \n [0, 0, 0, 0, 0, 0, 0, 0, 0]\n]\n\n### Output:\ndef check_valid(board, row, col, num):\n for i in range(0, 9):\n  if board[row][i] == num: \n   return False\n for i in range(0, 9):\n  if board[i][col] == num:\n   return False \n row_block = row//3\n col_block = col//3\n \n for i in range(row_block*3, row_block*3+3):\n  for j in range(col_block*3, col_block*3+3):\n   if board[i][j] == num:\n    return False\n return True\n\ndef solve(board):\n for row in range(9): \n  for col in range(9):\n   if board[row][col] == 0:\n    for num in range(1, 10):\n     if check_valid(board, row, col, num):\n      board[row][col] = num\n      if solve(board):\n       return True\n      else:\n       board[row][col] = 0\n    return False\n return True\n   \nsolve(board)"
    },
    {
        "instruction": "Rewrite a Python function to make it more efficient.",
        "input": "def binary_search(arr, x):\n    l = 0\n    r = len(arr)\n    while l < r:\n        m = (r + l) // 2\n        if x == arr[m]:\n            return m\n        elif x > arr[m]:\n            l = m + 1\n        else:\n            r = m       \n    return -1",
        "output": "def binary_search(arr, x):\n    l = 0\n    r = len(arr) - 1\n    while l <= r:\n        m = l + (r - l) // 2\n        if x == arr[m]:\n            return m\n        elif x > arr[m]:\n            l = m + 1\n        else:\n            r = m - 1\n    return -1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite a Python function to make it more efficient.\n\n### Input:\ndef binary_search(arr, x):\n    l = 0\n    r = len(arr)\n    while l < r:\n        m = (r + l) // 2\n        if x == arr[m]:\n            return m\n        elif x > arr[m]:\n            l = m + 1\n        else:\n            r = m       \n    return -1\n\n### Output:\ndef binary_search(arr, x):\n    l = 0\n    r = len(arr) - 1\n    while l <= r:\n        m = l + (r - l) // 2\n        if x == arr[m]:\n            return m\n        elif x > arr[m]:\n            l = m + 1\n        else:\n            r = m - 1\n    return -1"
    },
    {
        "instruction": "Generate a recursive Python function to compute the Fibonacci sequence.",
        "input": "",
        "output": "def fibonacci(n): \n    if n <= 1: \n        return n \n    else: \n        return(fibonacci(n-1) + fibonacci(n-2)) \n\nfor i in range(10): \n    print(fibonacci(i))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a recursive Python function to compute the Fibonacci sequence.\n\n### Input:\n\n\n### Output:\ndef fibonacci(n): \n    if n <= 1: \n        return n \n    else: \n        return(fibonacci(n-1) + fibonacci(n-2)) \n\nfor i in range(10): \n    print(fibonacci(i))"
    },
    {
        "instruction": "Generate a basic Machine Learning model in Python to classify the Iris flowers based on the provided dataset.",
        "input": "Not applicable",
        "output": "import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Load dataset\ndataset = pd.read_csv('iris.csv')\n\n# Define X and y values\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\n# Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# Create a KNeighborsClassifier model\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_train, y_train)\n\n# Predict a classification for test data\ny_pred = knn.predict(X_test)\n\n# Calculate accuracy\naccuracy = knn.score(X_test, y_test)\nprint(\"Accuracy:\", accuracy)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a basic Machine Learning model in Python to classify the Iris flowers based on the provided dataset.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Load dataset\ndataset = pd.read_csv('iris.csv')\n\n# Define X and y values\nX = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values\n\n# Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n\n# Create a KNeighborsClassifier model\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_train, y_train)\n\n# Predict a classification for test data\ny_pred = knn.predict(X_test)\n\n# Calculate accuracy\naccuracy = knn.score(X_test, y_test)\nprint(\"Accuracy:\", accuracy)"
    },
    {
        "instruction": "Create a Python function that returns the longest string from a given list.",
        "input": "[\"my\", \"cat\", \"is\", \"lazy\"]",
        "output": "def longest_string(strings):\n  max_length = 0\n  longest_string = \"\"\n  \n  for s in strings:\n    if len(s) > max_length:\n      max_length = len(s)\n      longest_string = s\n  \n  return longest_string\n\nresult = longest_string([\"my\", \"cat\", \"is\", \"lazy\"])\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that returns the longest string from a given list.\n\n### Input:\n[\"my\", \"cat\", \"is\", \"lazy\"]\n\n### Output:\ndef longest_string(strings):\n  max_length = 0\n  longest_string = \"\"\n  \n  for s in strings:\n    if len(s) > max_length:\n      max_length = len(s)\n      longest_string = s\n  \n  return longest_string\n\nresult = longest_string([\"my\", \"cat\", \"is\", \"lazy\"])\nprint(result)"
    },
    {
        "instruction": "Develop an API in Python for text sentiment analysis.",
        "input": "Not applicable",
        "output": "import nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n# create sentiment analyzer\nanalyzer = SentimentIntensityAnalyzer()\n\ndef sentiment_analysis(text):\n    # get sentiment score for text\n    score = analyzer.polarity_scores(text)\n    # analyze the score and determine sentiment\n    if score['compound'] >= 0.05:\n        sentiment = 'positive'\n    elif score['compound'] <= -0.05:\n        sentiment = 'negative'\n    else:\n        sentiment = 'neutral'\n    # return sentiment\n    return sentiment",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an API in Python for text sentiment analysis.\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n# create sentiment analyzer\nanalyzer = SentimentIntensityAnalyzer()\n\ndef sentiment_analysis(text):\n    # get sentiment score for text\n    score = analyzer.polarity_scores(text)\n    # analyze the score and determine sentiment\n    if score['compound'] >= 0.05:\n        sentiment = 'positive'\n    elif score['compound'] <= -0.05:\n        sentiment = 'negative'\n    else:\n        sentiment = 'neutral'\n    # return sentiment\n    return sentiment"
    },
    {
        "instruction": "Generate a complete python script to perform the following task:",
        "input": "Define a function that prints the first n lines of Pascal's Triangle.",
        "output": "def pascal(n): \n    # Iterate through lines\n    for line in range(0, n): \n        # Initialize composition of line\n        composition = 1 \n        for i in range(0, line+1): \n            # Print composition \n            print(composition, end=\" \") \n            composition = int(composition * (line - i) / (i + 1)) \n        # Move to the next line\n        print(\"\") \n  \n# Driver code \nn = 5\npascal(n)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a complete python script to perform the following task:\n\n### Input:\nDefine a function that prints the first n lines of Pascal's Triangle.\n\n### Output:\ndef pascal(n): \n    # Iterate through lines\n    for line in range(0, n): \n        # Initialize composition of line\n        composition = 1 \n        for i in range(0, line+1): \n            # Print composition \n            print(composition, end=\" \") \n            composition = int(composition * (line - i) / (i + 1)) \n        # Move to the next line\n        print(\"\") \n  \n# Driver code \nn = 5\npascal(n)"
    },
    {
        "instruction": "Design a Python code to detect and remove duplicate elements from a given array.",
        "input": "[12, 34, 11, 12, 23, 11]",
        "output": "def remove_duplicates(arr): \n    result = [] \n    for i in arr: \n        if i not in result: \n            result.append(i) \n    return result\n\narr = [12, 34, 11, 12, 23, 11]\nresult = remove_duplicates(arr)\nprint(result) // Prints [12, 34, 11, 23]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python code to detect and remove duplicate elements from a given array.\n\n### Input:\n[12, 34, 11, 12, 23, 11]\n\n### Output:\ndef remove_duplicates(arr): \n    result = [] \n    for i in arr: \n        if i not in result: \n            result.append(i) \n    return result\n\narr = [12, 34, 11, 12, 23, 11]\nresult = remove_duplicates(arr)\nprint(result) // Prints [12, 34, 11, 23]"
    },
    {
        "instruction": "Write a Python program to determine the sum of the elements of an array, after applying a given function to each array element.",
        "input": "def func(x):\n  return x * x\n\narr = [1, 2, 3, 4]",
        "output": "def element_wise_sum(func, arr):\n    sum = 0 \n    for elem in arr:\n        sum += func(elem)\n    return sum\n\nsum = element_wise_sum(func, arr)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to determine the sum of the elements of an array, after applying a given function to each array element.\n\n### Input:\ndef func(x):\n  return x * x\n\narr = [1, 2, 3, 4]\n\n### Output:\ndef element_wise_sum(func, arr):\n    sum = 0 \n    for elem in arr:\n        sum += func(elem)\n    return sum\n\nsum = element_wise_sum(func, arr)"
    },
    {
        "instruction": "Write a Python program that finds the most frequent letter in a string.",
        "input": "\"foo bar baz foo\"",
        "output": "def most_frequent_letter(str): \n  \n    # break string into characters\n    letters = list(str)\n  \n    # store max freq count\n    max_freq = 0\n  \n    # store character with max_freq\n    max_char = ''\n  \n    # iterate over each letter in the string\n    for letter in letters: \n      \n        # calculate frequency of this particular letter\n        freq = letters.count(letter) \n      \n        # compare and update variables\n        if(freq > max_freq): \n            max_freq = freq\n            max_char = letter\n\n    print(\"Most frequent character: \" + max_char + \" with frequency of: \" + str(max_freq)) \n  \n# test for input string\nstr = \"foo bar baz foo\"\n\nmost_frequent_letter(str)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that finds the most frequent letter in a string.\n\n### Input:\n\"foo bar baz foo\"\n\n### Output:\ndef most_frequent_letter(str): \n  \n    # break string into characters\n    letters = list(str)\n  \n    # store max freq count\n    max_freq = 0\n  \n    # store character with max_freq\n    max_char = ''\n  \n    # iterate over each letter in the string\n    for letter in letters: \n      \n        # calculate frequency of this particular letter\n        freq = letters.count(letter) \n      \n        # compare and update variables\n        if(freq > max_freq): \n            max_freq = freq\n            max_char = letter\n\n    print(\"Most frequent character: \" + max_char + \" with frequency of: \" + str(max_freq)) \n  \n# test for input string\nstr = \"foo bar baz foo\"\n\nmost_frequent_letter(str)"
    },
    {
        "instruction": "Using Python, can you create a function that sorts a list of strings into alphabetical order?",
        "input": "['apple', 'banana', 'pear', 'mango']",
        "output": "def sort_strings(s):\n    return sorted(s)\n\nprint(sort_strings(['apple', 'banana', 'pear', 'mango']))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, can you create a function that sorts a list of strings into alphabetical order?\n\n### Input:\n['apple', 'banana', 'pear', 'mango']\n\n### Output:\ndef sort_strings(s):\n    return sorted(s)\n\nprint(sort_strings(['apple', 'banana', 'pear', 'mango']))"
    },
    {
        "instruction": "Develop a python program to print the hollow diamond pattern given size as argument.",
        "input": "5",
        "output": "def print_hollow_diamond(n):\n    # top side\n    for i in range(n):\n        for j in range(n):\n            if j == i or j == n-i-1:\n                print('* ', end = '')\n            else:\n                print('  ', end = '')\n        print() \n  \n    # middle straight line\n    for j in range(n):\n        print('* ', end = '')\n    print()\n  \n    # bottom side\n    for i in range(n , 0 , -1):\n        for j in range(n):\n            if j == i - 1 or j == n-i:\n                print('* ', end = '')\n            else:\n                print('  ', end = '')\n        print()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python program to print the hollow diamond pattern given size as argument.\n\n### Input:\n5\n\n### Output:\ndef print_hollow_diamond(n):\n    # top side\n    for i in range(n):\n        for j in range(n):\n            if j == i or j == n-i-1:\n                print('* ', end = '')\n            else:\n                print('  ', end = '')\n        print() \n  \n    # middle straight line\n    for j in range(n):\n        print('* ', end = '')\n    print()\n  \n    # bottom side\n    for i in range(n , 0 , -1):\n        for j in range(n):\n            if j == i - 1 or j == n-i:\n                print('* ', end = '')\n            else:\n                print('  ', end = '')\n        print()"
    },
    {
        "instruction": "Create a Python class called 'Car' that contains three attributes, such as 'make', 'model' and 'year'.",
        "input": "",
        "output": "class Car():\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class called 'Car' that contains three attributes, such as 'make', 'model' and 'year'.\n\n### Input:\n\n\n### Output:\nclass Car():\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year"
    },
    {
        "instruction": "What is the purpose of the method in line 4 of the code?",
        "input": "def random_number_generator(min, max):\n  \"\"\"Return a random number between the given range.\"\"\"\n  rng = random.range(min, max)\n  return rng",
        "output": "The purpose of the method in line 4 is to generate a random number within the given range of min and max. It uses the Python's random.range() method which returns a random integer from the range of min to max, inclusive.",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat is the purpose of the method in line 4 of the code?\n\n### Input:\ndef random_number_generator(min, max):\n  \"\"\"Return a random number between the given range.\"\"\"\n  rng = random.range(min, max)\n  return rng\n\n### Output:\nThe purpose of the method in line 4 is to generate a random number within the given range of min and max. It uses the Python's random.range() method which returns a random integer from the range of min to max, inclusive."
    },
    {
        "instruction": "Create a python program to optimize a given function along a certain parameter range.",
        "input": "The function is f(x) = 2x^2 - 4x + 2 \n\nParameter range 0 <= x <= 5.",
        "output": "import numpy as np \nimport matplotlib.pyplot as plt \n\ndef f(x): \n\treturn 2*x*x - 4*x + 2\n\nx = np.arange(0, 5, 0.1) \ny = f(x) \n\n# Plotting the result\nplt.plot(x, y) \nplt.plot([0,5],[f(0),f(5)], 'ro') # indicates the optimal point\nplt.text(0,f(0),str(0), fontsize=12) # labels the x-axis points\nplt.text(5,f(5),str(5), fontsize=12) \nplt.title('Graph of f(x) = 2x^2 - 4x + 2') \nplt.ylabel('f(x)') \nplt.xlabel('x') \nplt.show() \n\n# Calculate and print the optimal point\nopt = 0\nfor x in range(0, 5):\n\tif f(x) < f(opt):\n\t\topt = x\n\nprint('The optimal point is x =', opt,'with a value of f(x) =', f(opt))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to optimize a given function along a certain parameter range.\n\n### Input:\nThe function is f(x) = 2x^2 - 4x + 2 \n\nParameter range 0 <= x <= 5.\n\n### Output:\nimport numpy as np \nimport matplotlib.pyplot as plt \n\ndef f(x): \n\treturn 2*x*x - 4*x + 2\n\nx = np.arange(0, 5, 0.1) \ny = f(x) \n\n# Plotting the result\nplt.plot(x, y) \nplt.plot([0,5],[f(0),f(5)], 'ro') # indicates the optimal point\nplt.text(0,f(0),str(0), fontsize=12) # labels the x-axis points\nplt.text(5,f(5),str(5), fontsize=12) \nplt.title('Graph of f(x) = 2x^2 - 4x + 2') \nplt.ylabel('f(x)') \nplt.xlabel('x') \nplt.show() \n\n# Calculate and print the optimal point\nopt = 0\nfor x in range(0, 5):\n\tif f(x) < f(opt):\n\t\topt = x\n\nprint('The optimal point is x =', opt,'with a value of f(x) =', f(opt))"
    },
    {
        "instruction": "Write a Python program to search for an item in a list.",
        "input": "",
        "output": "def search_list(lst, elem):\n  for i in range(len(lst)): \n    if lst[i] == elem: \n      return i \n  return -1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to search for an item in a list.\n\n### Input:\n\n\n### Output:\ndef search_list(lst, elem):\n  for i in range(len(lst)): \n    if lst[i] == elem: \n      return i \n  return -1"
    },
    {
        "instruction": "Create a Python class that contains methods to calculate the area of a square and a rectangle.",
        "input": "",
        "output": "class AreaCalculator:\n    def __init__(self):\n        pass\n    \n    def square_area(self, side_length):\n        return side_length * side_length\n\n    def rectangle_area(self, length, width):\n        return length * width",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that contains methods to calculate the area of a square and a rectangle.\n\n### Input:\n\n\n### Output:\nclass AreaCalculator:\n    def __init__(self):\n        pass\n    \n    def square_area(self, side_length):\n        return side_length * side_length\n\n    def rectangle_area(self, length, width):\n        return length * width"
    },
    {
        "instruction": "Write code to implement a basic calculator application in Python.",
        "input": "",
        "output": "def calculator():\n    while True:\n        operation = input('''\n        Please type in the math operation you would like to complete:\n        + for addition\n        - for subtraction\n        * for multiplication\n        / for division\n        ''')\n\n        number_1 = int(input('Please enter the first number: '))\n        number_2 = int(input('Please enter the second number: '))\n\n        if operation == '+':\n            print('{} + {} = '.format(number_1, number_2))\n            print(number_1 + number_2)\n\n        elif operation == '-':\n            print('{} - {} = '.format(number_1, number_2))\n            print(number_1 - number_2)\n\n        elif operation == '*':\n            print('{} * {} = '.format(number_1, number_2))\n            print(number_1 * number_2)\n\n        elif operation == '/':\n            print('{} / {} = '.format(number_1, number_2))\n            print(number_1 / number_2)\n\n        else:\n            print('You have not typed a valid operator, please run the program again.')\n            break\n\ncalculator()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code to implement a basic calculator application in Python.\n\n### Input:\n\n\n### Output:\ndef calculator():\n    while True:\n        operation = input('''\n        Please type in the math operation you would like to complete:\n        + for addition\n        - for subtraction\n        * for multiplication\n        / for division\n        ''')\n\n        number_1 = int(input('Please enter the first number: '))\n        number_2 = int(input('Please enter the second number: '))\n\n        if operation == '+':\n            print('{} + {} = '.format(number_1, number_2))\n            print(number_1 + number_2)\n\n        elif operation == '-':\n            print('{} - {} = '.format(number_1, number_2))\n            print(number_1 - number_2)\n\n        elif operation == '*':\n            print('{} * {} = '.format(number_1, number_2))\n            print(number_1 * number_2)\n\n        elif operation == '/':\n            print('{} / {} = '.format(number_1, number_2))\n            print(number_1 / number_2)\n\n        else:\n            print('You have not typed a valid operator, please run the program again.')\n            break\n\ncalculator()"
    },
    {
        "instruction": "Write a python script to print a table of squares and cubes of natural numbers upto 10.",
        "input": "",
        "output": "def print_squares_and_cubes_table():\n  # Print top of the table\n  print(\"n\\tSquare\\tCube\")\n\n  # Print the squares and cubes of natural numbers from 1 to 10\n  for n in range(1, 11):\n    print(n,\"\\t\", n*n,\"\\t\",n*n*n)\n\n# Driver code\nprint_squares_and_cubes_table()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to print a table of squares and cubes of natural numbers upto 10.\n\n### Input:\n\n\n### Output:\ndef print_squares_and_cubes_table():\n  # Print top of the table\n  print(\"n\\tSquare\\tCube\")\n\n  # Print the squares and cubes of natural numbers from 1 to 10\n  for n in range(1, 11):\n    print(n,\"\\t\", n*n,\"\\t\",n*n*n)\n\n# Driver code\nprint_squares_and_cubes_table()"
    },
    {
        "instruction": "Write a Python function to calculate the greatest common factor (GCF) of two numbers.",
        "input": "Number 1: 15 \nNumber 2: 25",
        "output": "def gcf(m, n):\n    while m != 0:\n        m, n = n % m, m \n    return n\n\nprint(gcf(15, 25))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to calculate the greatest common factor (GCF) of two numbers.\n\n### Input:\nNumber 1: 15 \nNumber 2: 25\n\n### Output:\ndef gcf(m, n):\n    while m != 0:\n        m, n = n % m, m \n    return n\n\nprint(gcf(15, 25))"
    },
    {
        "instruction": "Create a Python script that takes the two lists that are provided and combines them together.",
        "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]",
        "output": "def combine_lists(list1, list2):\n  combined_list = list1 + list2\n  return combined_list\ncombined_list = combine_lists(list1, list2)\nprint(combined_list) # [1, 2, 3, 4, 5, 6]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that takes the two lists that are provided and combines them together.\n\n### Input:\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n### Output:\ndef combine_lists(list1, list2):\n  combined_list = list1 + list2\n  return combined_list\ncombined_list = combine_lists(list1, list2)\nprint(combined_list) # [1, 2, 3, 4, 5, 6]"
    },
    {
        "instruction": "Construct a for loop in Python for printing the odd numbers from 1 to 10 (inclusively).",
        "input": "",
        "output": "for i in range(1, 11):\n    if i % 2 != 0:\n        print(i)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a for loop in Python for printing the odd numbers from 1 to 10 (inclusively).\n\n### Input:\n\n\n### Output:\nfor i in range(1, 11):\n    if i % 2 != 0:\n        print(i)"
    },
    {
        "instruction": "Using Python, create a sentence out of all the words entered in an array.",
        "input": "[\"hello\", \"world\", \"!\"]",
        "output": "sentence = \" \".join([\"hello\", \"world\", \"!\"])\nprint(sentence)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, create a sentence out of all the words entered in an array.\n\n### Input:\n[\"hello\", \"world\", \"!\"]\n\n### Output:\nsentence = \" \".join([\"hello\", \"world\", \"!\"])\nprint(sentence)"
    },
    {
        "instruction": "Create a Python function to remove a given item from a list.",
        "input": "[2, 3, 4], 4",
        "output": "def removeItem(lst, item):\n    if item in lst:\n        lst.remove(item)\n    return lst\n\nprint(removeItem([2, 3, 4], 4))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to remove a given item from a list.\n\n### Input:\n[2, 3, 4], 4\n\n### Output:\ndef removeItem(lst, item):\n    if item in lst:\n        lst.remove(item)\n    return lst\n\nprint(removeItem([2, 3, 4], 4))"
    },
    {
        "instruction": "Can you develop a Python script that takes in a URL and prints out the source code?",
        "input": "url = 'http://www.example.org/'",
        "output": "import urllib.request\n \nurl = 'http://www.example.org/'\n\nresponse = urllib.request.urlopen(url)\n\nprint(response.read())",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you develop a Python script that takes in a URL and prints out the source code?\n\n### Input:\nurl = 'http://www.example.org/'\n\n### Output:\nimport urllib.request\n \nurl = 'http://www.example.org/'\n\nresponse = urllib.request.urlopen(url)\n\nprint(response.read())"
    },
    {
        "instruction": "Design a Python function to define a set of rules to send emails",
        "input": "",
        "output": "\"\"\"\nDesign a Python function to define a set of rules to send emails\n\nThis function will take a conditional statement as an argument, and will return a function that will return a Boolean value depending on whether the condition is satisfied. The function will return true if the given condition is satisfied, and false otherwise.\n\n\"\"\"\n\ndef email_rule(condition):\n    def rule(data):\n        return eval(condition)\n    return rule\n\n# example\nsatisfied = email_rule(\"data['name'] == 'John'\")\nprint(satisfied({'name': 'John'})) # True",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python function to define a set of rules to send emails\n\n### Input:\n\n\n### Output:\n\"\"\"\nDesign a Python function to define a set of rules to send emails\n\nThis function will take a conditional statement as an argument, and will return a function that will return a Boolean value depending on whether the condition is satisfied. The function will return true if the given condition is satisfied, and false otherwise.\n\n\"\"\"\n\ndef email_rule(condition):\n    def rule(data):\n        return eval(condition)\n    return rule\n\n# example\nsatisfied = email_rule(\"data['name'] == 'John'\")\nprint(satisfied({'name': 'John'})) # True"
    },
    {
        "instruction": "Write a Python script to find the sum of all prime numbers in a given interval.",
        "input": "100 200",
        "output": "# Python program to find the sum of \n# all prime numbers in a given interval \n  \n# Fucntion to calculate the sum of all prime numbers in a given range \ndef prime_sum_in_range(start, end): \n  \n    # Initialize sum of primes \n    prime_sum = 0\n  \n    # loop through each number from start to end \n    for num in range(start, end + 1): \n  \n        # check if the number is prime \n        if is_prime(num): \n            # Add the prime numbers to the sum \n            prime_sum += num \n  \n    return prime_sum \n  \n# Function to check if a number is prime or not \ndef is_prime(n): \n  \n    # Check if the number is less than or equal to 1 \n    if n <= 1: \n        return False\n  \n    # Check if the number is a perfect square \n    sqr = int(math.sqrt(n)) + 1\n  \n    # Iterate through each value from 2 to the square root of the number \n    for divisor in range(2, sqr): \n        if n % divisor == 0: \n            return False\n  \n    # Return True for a prime number \n    return True\n\nstart =  100\nend = 200\n  \nprint(\"Sum of prime numbers in given range is\", prime_sum_in_range(start, end))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to find the sum of all prime numbers in a given interval.\n\n### Input:\n100 200\n\n### Output:\n# Python program to find the sum of \n# all prime numbers in a given interval \n  \n# Fucntion to calculate the sum of all prime numbers in a given range \ndef prime_sum_in_range(start, end): \n  \n    # Initialize sum of primes \n    prime_sum = 0\n  \n    # loop through each number from start to end \n    for num in range(start, end + 1): \n  \n        # check if the number is prime \n        if is_prime(num): \n            # Add the prime numbers to the sum \n            prime_sum += num \n  \n    return prime_sum \n  \n# Function to check if a number is prime or not \ndef is_prime(n): \n  \n    # Check if the number is less than or equal to 1 \n    if n <= 1: \n        return False\n  \n    # Check if the number is a perfect square \n    sqr = int(math.sqrt(n)) + 1\n  \n    # Iterate through each value from 2 to the square root of the number \n    for divisor in range(2, sqr): \n        if n % divisor == 0: \n            return False\n  \n    # Return True for a prime number \n    return True\n\nstart =  100\nend = 200\n  \nprint(\"Sum of prime numbers in given range is\", prime_sum_in_range(start, end))"
    },
    {
        "instruction": "Write a Python function that takes an array of numbers as an argument and returns the largest prime factor of the product of the numbers in the array.",
        "input": "[12, 10, 15]",
        "output": "def largest_prime_factor(arr):\n import math\n product = 1\n \n for num in arr:\n  product *= num \n \n largest_factor = -1 \n \n for i in range(2, math.floor(math.sqrt(product))+1): \n  while product % i == 0: \n   product = product / i \n   largest_factor = i \n \n if largest_factor == -1:\n  return product\n else:\n  return largest_factor",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes an array of numbers as an argument and returns the largest prime factor of the product of the numbers in the array.\n\n### Input:\n[12, 10, 15]\n\n### Output:\ndef largest_prime_factor(arr):\n import math\n product = 1\n \n for num in arr:\n  product *= num \n \n largest_factor = -1 \n \n for i in range(2, math.floor(math.sqrt(product))+1): \n  while product % i == 0: \n   product = product / i \n   largest_factor = i \n \n if largest_factor == -1:\n  return product\n else:\n  return largest_factor"
    },
    {
        "instruction": "This code downloads a file, gets host information, tests ping time latency to stash, and sends a record to a WSGI URL. To use this code, run the main function.",
        "input": "",
        "output": "#!/usr/bin/env python\nimport urllib\nimport urllib2\nimport time\nimport getopt\nimport sys\nimport os\nimport timeit\nimport platform\nimport subprocess\nimport re\n\nREFERENCE_URL = 'http://stash.osgconnect.net/+sthapa/100MB_ref'\nWSGI_URL = 'http://web-dev.ci-connect.net/~sthapa/record_network_test.wsgi'\n\ndef download_file():\n    \"\"\"\n    Download file and then remove it\n    \"\"\"  \n    webref = urllib2.urlopen(REFERENCE_URL)\n    foo = webref.read()\n\ndef get_host_info():\n    \"\"\"\n    GET host information\n    \"\"\"\n    host_info = {}\n    if 'OSG_SITE_NAME' in os.environ:\n        host_info['site'] = os.environ['OSG_SITE_NAME']\n    elif 'GLIDEIN_RESOURCE_NAME' in os.env:\n        host_info['site'] = os.envron['GLIDEIN_RESOURCE_NAME']\n    host_info['hostname']  =  platform.node()    \n    return host_info\n\ndef send_record(test_record = None):\n    \"\"\"\n    Send record to wsgi \n    \"\"\"\n    if test_record is None:\n        return\n    try:\n        temp = test_record.copy()\n        if 'latency' in temp:\n            del temp['latency']\n        bandwidth_req = WSGI_URL + '?' + urllib.urlencode(temp)\n        req = urllib2.urlopen(bandwidth_req)\n        temp = test_record.copy()\n        if 'bandwidth' in temp:\n            del temp['bandwidth']\n        latency_req = WSGI_URL + '?' + urllib.urlencode(temp)\n        req = urllib2.urlopen(latency_req)\n    except Exception, e:\n        pass\n\ndef get_latency():\n    \"\"\"\n    Test ping time latency to stash\n    \"\"\"\n    try:\n        ping_output = subprocess.check_output(['/bin/ping', '-c', '10', 'stash.osgconnect.net'])\n    except AttributeError:\n        process = subprocess.Popen(['/bin/ping', '-c', '10', 'stash.osgconnect.net'], stdout=subprocess.PIPE)\n        ping_output = process.communicate()[0]\n    ping_regex = re.compile(r'rtt.*=\\s+[\\d.]+/([\\d.]+)')\n    match = ping_regex.search(ping_output)\n    if match:\n        return float(match.group(1))\n    return 0.0\n\ndef main():\n    test_record = get_host_info()\n    test_record['date'] = time.time()\n    download_times = timeit.Timer('download_file()', \"from __main__ import download_file\").repeat(repeat = 5, number = 1)\n    avg_time = 0.0\n    records = 0\n    for x in download_times:\n        if x < 0.005:\n            continue\n        avg_time += x\n        records += 1\n    test_record['bandwidth']  = float(100 * 2**20) / (avg_time / float(records))\n    test_record['latency'] = get_latency()\n    send_record(test_record)\n\nif __name__ == \"__main__\":\n    main()\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code downloads a file, gets host information, tests ping time latency to stash, and sends a record to a WSGI URL. To use this code, run the main function.\n\n### Input:\n\n\n### Output:\n#!/usr/bin/env python\nimport urllib\nimport urllib2\nimport time\nimport getopt\nimport sys\nimport os\nimport timeit\nimport platform\nimport subprocess\nimport re\n\nREFERENCE_URL = 'http://stash.osgconnect.net/+sthapa/100MB_ref'\nWSGI_URL = 'http://web-dev.ci-connect.net/~sthapa/record_network_test.wsgi'\n\ndef download_file():\n    \"\"\"\n    Download file and then remove it\n    \"\"\"  \n    webref = urllib2.urlopen(REFERENCE_URL)\n    foo = webref.read()\n\ndef get_host_info():\n    \"\"\"\n    GET host information\n    \"\"\"\n    host_info = {}\n    if 'OSG_SITE_NAME' in os.environ:\n        host_info['site'] = os.environ['OSG_SITE_NAME']\n    elif 'GLIDEIN_RESOURCE_NAME' in os.env:\n        host_info['site'] = os.envron['GLIDEIN_RESOURCE_NAME']\n    host_info['hostname']  =  platform.node()    \n    return host_info\n\ndef send_record(test_record = None):\n    \"\"\"\n    Send record to wsgi \n    \"\"\"\n    if test_record is None:\n        return\n    try:\n        temp = test_record.copy()\n        if 'latency' in temp:\n            del temp['latency']\n        bandwidth_req = WSGI_URL + '?' + urllib.urlencode(temp)\n        req = urllib2.urlopen(bandwidth_req)\n        temp = test_record.copy()\n        if 'bandwidth' in temp:\n            del temp['bandwidth']\n        latency_req = WSGI_URL + '?' + urllib.urlencode(temp)\n        req = urllib2.urlopen(latency_req)\n    except Exception, e:\n        pass\n\ndef get_latency():\n    \"\"\"\n    Test ping time latency to stash\n    \"\"\"\n    try:\n        ping_output = subprocess.check_output(['/bin/ping', '-c', '10', 'stash.osgconnect.net'])\n    except AttributeError:\n        process = subprocess.Popen(['/bin/ping', '-c', '10', 'stash.osgconnect.net'], stdout=subprocess.PIPE)\n        ping_output = process.communicate()[0]\n    ping_regex = re.compile(r'rtt.*=\\s+[\\d.]+/([\\d.]+)')\n    match = ping_regex.search(ping_output)\n    if match:\n        return float(match.group(1))\n    return 0.0\n\ndef main():\n    test_record = get_host_info()\n    test_record['date'] = time.time()\n    download_times = timeit.Timer('download_file()', \"from __main__ import download_file\").repeat(repeat = 5, number = 1)\n    avg_time = 0.0\n    records = 0\n    for x in download_times:\n        if x < 0.005:\n            continue\n        avg_time += x\n        records += 1\n    test_record['bandwidth']  = float(100 * 2**20) / (avg_time / float(records))\n    test_record['latency'] = get_latency()\n    send_record(test_record)\n\nif __name__ == \"__main__\":\n    main()\n"
    },
    {
        "instruction": "Create a command line tool that takes a string argument and prints the reversed version of that string.",
        "input": "Not applicable",
        "output": "import sys\n\ndef reverse_string(string):\n return string[::-1]\n\ndef main():\n if len(sys.argv) != 2:\n print(\"Usage: python reverse_string.py <string>\")\n return\n\n print(reverse_string(sys.argv[1]))\n\nif __name__ == \"__main__\":\n main()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a command line tool that takes a string argument and prints the reversed version of that string.\n\n### Input:\nNot applicable\n\n### Output:\nimport sys\n\ndef reverse_string(string):\n return string[::-1]\n\ndef main():\n if len(sys.argv) != 2:\n print(\"Usage: python reverse_string.py <string>\")\n return\n\n print(reverse_string(sys.argv[1]))\n\nif __name__ == \"__main__\":\n main()"
    },
    {
        "instruction": "Create a Python code to find the second smallest number in an array.",
        "input": "array = [5, 3, 4, 6, 1, 8]",
        "output": "def second_smallest(array):\n    smallest = None\n    second_smallest = None\n\n    for e in array:\n        if smallest is None or e < smallest:\n            second_smallest = smallest\n            smallest = e\n        elif second_smallest is None or e < second_smallest:\n            second_smallest = e\n\n    return second_smallest\n\narray = [5, 3, 4, 6, 1, 8]\nresult = second_smallest(array)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code to find the second smallest number in an array.\n\n### Input:\narray = [5, 3, 4, 6, 1, 8]\n\n### Output:\ndef second_smallest(array):\n    smallest = None\n    second_smallest = None\n\n    for e in array:\n        if smallest is None or e < smallest:\n            second_smallest = smallest\n            smallest = e\n        elif second_smallest is None or e < second_smallest:\n            second_smallest = e\n\n    return second_smallest\n\narray = [5, 3, 4, 6, 1, 8]\nresult = second_smallest(array)\nprint(result)"
    },
    {
        "instruction": "Compose a Python program to convert a list of multiple integers into a single integer.",
        "input": "",
        "output": "def convert_to_integer(my_list):\n    my_integer = int(\"\".join(map(str, my_list))) \n    return my_integer",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python program to convert a list of multiple integers into a single integer.\n\n### Input:\n\n\n### Output:\ndef convert_to_integer(my_list):\n    my_integer = int(\"\".join(map(str, my_list))) \n    return my_integer"
    },
    {
        "instruction": "Build a code-classification model in Keras to classify a given code snippet into various programming languages like Java, Python, and C++.",
        "input": "Not applicable",
        "output": "import numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Input, Dense, Dropout\nfrom keras.utils import to_categorical\n\nnum_classes = 3 # number of languages to classify\n\n# Define the model architecture\nmodel = Sequential()\nmodel.add(Input(shape=(1000,)))\nmodel.add(Dense(2000, activation='relu'))\nmodel.add(Dense(1000, activation='relu'))\nmodel.add(Dense(500, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(train_data, train_labels)\n\n# Evaluate the model\nval_loss, val_acc = model.evaluate(val_data, val_labels)\n\n# Make predictions on test data\npredictions = model.predict([test_data])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a code-classification model in Keras to classify a given code snippet into various programming languages like Java, Python, and C++.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Input, Dense, Dropout\nfrom keras.utils import to_categorical\n\nnum_classes = 3 # number of languages to classify\n\n# Define the model architecture\nmodel = Sequential()\nmodel.add(Input(shape=(1000,)))\nmodel.add(Dense(2000, activation='relu'))\nmodel.add(Dense(1000, activation='relu'))\nmodel.add(Dense(500, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(train_data, train_labels)\n\n# Evaluate the model\nval_loss, val_acc = model.evaluate(val_data, val_labels)\n\n# Make predictions on test data\npredictions = model.predict([test_data])"
    },
    {
        "instruction": "Design a Python script to print out a list of unique numbers from 0 to N.",
        "input": "N = 10",
        "output": "numbers = [i for i in range(0, N+1)]\nunique_numbers = list(set(numbers))\n\nprint(unique_numbers)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script to print out a list of unique numbers from 0 to N.\n\n### Input:\nN = 10\n\n### Output:\nnumbers = [i for i in range(0, N+1)]\nunique_numbers = list(set(numbers))\n\nprint(unique_numbers)"
    },
    {
        "instruction": "Write an algorithm to find the root of a given number using the Newton-Raphson method.",
        "input": "x = 3",
        "output": "# Python code for Newton-Raphson Method for \n# solving equations \n\n# An example function whose solution is determined using \n# Newton-Raphson method. The function is x^3 - x^2 + 2 \ndef func(x): \n\treturn x * x * x - x * x + 2\n\n# Derivative of the above function which is 3*x^x - 2*x \ndef derivFunc(x): \n\treturn 3 * x * x - 2 * x \n\n# Function to find the root \ndef newtonRaphson(x): \n\th = func(x) / derivFunc(x) \n\twhile abs(h) >= 0.0001: \n\t\th = func(x) / derivFunc(x) \n\t\t\n\t\t# x(i+1) = x(i) - f(x) / f'(x) \n\t\tx = x - h \n\t\n\tprint(\"The value of the root is : \", \n\t\t\t\t\t\t\"%.4f\"% x) \n\n# Driver program to test above \nx = 3 # Initial values assumed \nnewtonRaphson(x)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to find the root of a given number using the Newton-Raphson method.\n\n### Input:\nx = 3\n\n### Output:\n# Python code for Newton-Raphson Method for \n# solving equations \n\n# An example function whose solution is determined using \n# Newton-Raphson method. The function is x^3 - x^2 + 2 \ndef func(x): \n\treturn x * x * x - x * x + 2\n\n# Derivative of the above function which is 3*x^x - 2*x \ndef derivFunc(x): \n\treturn 3 * x * x - 2 * x \n\n# Function to find the root \ndef newtonRaphson(x): \n\th = func(x) / derivFunc(x) \n\twhile abs(h) >= 0.0001: \n\t\th = func(x) / derivFunc(x) \n\t\t\n\t\t# x(i+1) = x(i) - f(x) / f'(x) \n\t\tx = x - h \n\t\n\tprint(\"The value of the root is : \", \n\t\t\t\t\t\t\"%.4f\"% x) \n\n# Driver program to test above \nx = 3 # Initial values assumed \nnewtonRaphson(x)"
    },
    {
        "instruction": "Construct a program in Python to optimize a given complex function by using particle swarm optimization.",
        "input": "",
        "output": "\"\"\"\nConstruct a program in Python to optimize a given complex function by using particle swarm optimization\n\"\"\"\nimport numpy as np\nfrom pyswarm import pso\n\n#Define the objective function\ndef objective_function(x):\n    return np.sum(x**2)\n\n#Set the lower and upper bounds of each dimension\nlb = [-5, -5]\nub = [5, 5]\n\n# Call pso to optimize the function\nopt = pso(objective_function, lb, ub)\n\n# Print the optimal solution\nprint(\"The optimal solution is {}\".format(opt[0]))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program in Python to optimize a given complex function by using particle swarm optimization.\n\n### Input:\n\n\n### Output:\n\"\"\"\nConstruct a program in Python to optimize a given complex function by using particle swarm optimization\n\"\"\"\nimport numpy as np\nfrom pyswarm import pso\n\n#Define the objective function\ndef objective_function(x):\n    return np.sum(x**2)\n\n#Set the lower and upper bounds of each dimension\nlb = [-5, -5]\nub = [5, 5]\n\n# Call pso to optimize the function\nopt = pso(objective_function, lb, ub)\n\n# Print the optimal solution\nprint(\"The optimal solution is {}\".format(opt[0]))"
    },
    {
        "instruction": "Create a Python program that finds the low and high stock prices from a given array of stock prices.",
        "input": "Example array: [9, 15, 7, 8, 13, 5]",
        "output": "def min_max_stock_price(arr):\n low = float('inf')\n high = float('-inf')\n \n for price in arr:\n low = min(low, price)\n high = max(high, price)\n \n return [low, high]\n \nprint(min_max_stock_price([9, 15, 7, 8, 13, 5])) # Output: [5, 15]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that finds the low and high stock prices from a given array of stock prices.\n\n### Input:\nExample array: [9, 15, 7, 8, 13, 5]\n\n### Output:\ndef min_max_stock_price(arr):\n low = float('inf')\n high = float('-inf')\n \n for price in arr:\n low = min(low, price)\n high = max(high, price)\n \n return [low, high]\n \nprint(min_max_stock_price([9, 15, 7, 8, 13, 5])) # Output: [5, 15]"
    },
    {
        "instruction": "Write a Python program to concatenate two strings and print the combined string.",
        "input": "The two strings are - \"I love\", \"Programming\".",
        "output": "string1 = 'I love'\nstring2 = 'Programming'\n\noutput = string1 + string2\n\nprint(output)\n\n# Output\nI love Programming",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to concatenate two strings and print the combined string.\n\n### Input:\nThe two strings are - \"I love\", \"Programming\".\n\n### Output:\nstring1 = 'I love'\nstring2 = 'Programming'\n\noutput = string1 + string2\n\nprint(output)\n\n# Output\nI love Programming"
    },
    {
        "instruction": "Create a Python Flask application to implement a RESTful API for a given data set.",
        "input": "",
        "output": "from flask import Flask, request, jsonify\nimport json \n\napp = Flask(__name__)\n\n# Load the data set \nwith open('data.json', 'r') as f:\n data = json.load(f)\n\n@app.route('/data', methods=['GET', 'POST'])\ndef data_handler():\n if request.method == 'GET':\n  return jsonify(data)\n elif request.method == 'POST':\n  content = request.get_json(silent=True)\n  data.append(content)\n  return jsonify(data)\n\nif __name__ == '__main__':\n app.run()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python Flask application to implement a RESTful API for a given data set.\n\n### Input:\n\n\n### Output:\nfrom flask import Flask, request, jsonify\nimport json \n\napp = Flask(__name__)\n\n# Load the data set \nwith open('data.json', 'r') as f:\n data = json.load(f)\n\n@app.route('/data', methods=['GET', 'POST'])\ndef data_handler():\n if request.method == 'GET':\n  return jsonify(data)\n elif request.method == 'POST':\n  content = request.get_json(silent=True)\n  data.append(content)\n  return jsonify(data)\n\nif __name__ == '__main__':\n app.run()"
    },
    {
        "instruction": "Write an algorithm in Python that finds the minimal number in an array.",
        "input": "arr = [1, 5, 4, 12, 8]",
        "output": "def find_min(arr):\n    min_num = arr[0]\n    for num in arr:\n        if num < min_num:\n            min_num = num\n    return min_num\n\nmin_num = find_min(arr)\nprint(min_num)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python that finds the minimal number in an array.\n\n### Input:\narr = [1, 5, 4, 12, 8]\n\n### Output:\ndef find_min(arr):\n    min_num = arr[0]\n    for num in arr:\n        if num < min_num:\n            min_num = num\n    return min_num\n\nmin_num = find_min(arr)\nprint(min_num)"
    },
    {
        "instruction": "Write a Python program to sort a list of strings by the length of each string.",
        "input": "",
        "output": "def sort_by_length(strings):\n  return sorted(strings, key=len)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a list of strings by the length of each string.\n\n### Input:\n\n\n### Output:\ndef sort_by_length(strings):\n  return sorted(strings, key=len)"
    },
    {
        "instruction": "Design a function in Python for filtering out unique elements in a list.",
        "input": "list = [1, 2, 2, 3, 3, 4]",
        "output": "def filter_list(list): \n  filtered_list = [] \n\n  for i in list: \n    if i not in filtered_list: \n      filtered_list.append(i) \n  \n  return filtered_list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python for filtering out unique elements in a list.\n\n### Input:\nlist = [1, 2, 2, 3, 3, 4]\n\n### Output:\ndef filter_list(list): \n  filtered_list = [] \n\n  for i in list: \n    if i not in filtered_list: \n      filtered_list.append(i) \n  \n  return filtered_list"
    },
    {
        "instruction": "code a recursive function in Python that accepts a list of integers and prints the sum of all even numbers.",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8]",
        "output": "def print_even_sum(L): \n    if len(L) == 0: \n        return 0\n  \n    if L[0] % 2 == 0: \n        return L[0] + print_even_sum(L[1:]) \n    else: \n        return print_even_sum(L[1:]) \n  \nL = [1, 2, 3, 4, 5, 6, 7, 8] \nprint(\"Sum of even numbers in the list:\", print_even_sum(L))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ncode a recursive function in Python that accepts a list of integers and prints the sum of all even numbers.\n\n### Input:\n[1, 2, 3, 4, 5, 6, 7, 8]\n\n### Output:\ndef print_even_sum(L): \n    if len(L) == 0: \n        return 0\n  \n    if L[0] % 2 == 0: \n        return L[0] + print_even_sum(L[1:]) \n    else: \n        return print_even_sum(L[1:]) \n  \nL = [1, 2, 3, 4, 5, 6, 7, 8] \nprint(\"Sum of even numbers in the list:\", print_even_sum(L))"
    },
    {
        "instruction": "Develop a Python script to find the maximum number of consecutive 1's in a given binary number.",
        "input": "\"101101111\"",
        "output": "def countMaxOnes(inpString):\n  maxLength = 0\n  count = 0\n\n # Iterate through all elements of input string\n for i in range(len(inpString)):\n     # If element is '1', increment the count\n     if (inpString[i] == '1'):\n         count += 1\n\n     # If element is '0', check if count is greater\n     # than the maximum length found so far\n     else:\n         if (count > maxLength):\n             maxLength = count\n         count = 0\n  \n  # Check if last sequence of 1's if more\n  # than the maximum length found so far\n  if (count > maxLength):\n      maxLength = count\n  return maxLength\n\ninpString = \"101101111\"\nprint(\"Length of the longest contiguous 1's is\", countMaxOnes(inpString))\n\n# Output: Length of the longest contiguous 1's is 3",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to find the maximum number of consecutive 1's in a given binary number.\n\n### Input:\n\"101101111\"\n\n### Output:\ndef countMaxOnes(inpString):\n  maxLength = 0\n  count = 0\n\n # Iterate through all elements of input string\n for i in range(len(inpString)):\n     # If element is '1', increment the count\n     if (inpString[i] == '1'):\n         count += 1\n\n     # If element is '0', check if count is greater\n     # than the maximum length found so far\n     else:\n         if (count > maxLength):\n             maxLength = count\n         count = 0\n  \n  # Check if last sequence of 1's if more\n  # than the maximum length found so far\n  if (count > maxLength):\n      maxLength = count\n  return maxLength\n\ninpString = \"101101111\"\nprint(\"Length of the longest contiguous 1's is\", countMaxOnes(inpString))\n\n# Output: Length of the longest contiguous 1's is 3"
    },
    {
        "instruction": "Edit the following code to create a web service in Python which returns data from a PostgreSQL database.",
        "input": "import psycopg2\n\nconn = psycopg2.connect(dbname='testdb', user='username', password='password')\n\ncur = conn.cursor()\n\ncur.execute(\"SELECT * FROM table_name\")\n\nrows = cur.fetchall()\n\ncur.close()\nconn.close()",
        "output": "import psycopg2\nfrom flask import Flask\nfrom flask import jsonify\n\nconn = psycopg2.connect(dbname='testdb', user='username', password='password')\n\napp = Flask(__name__)\n\n@app.route('/data')\ndef get_data():\n    \n    cur = conn.cursor()\n    \n    cur.execute(\"SELECT * FROM table_name\")\n    \n    rows = cur.fetchall()\n    \n    cur.close()\n    conn.close()\n    \n    return jsonify(rows)\n    \nif __name__ == \"__main__\":\n    app.run()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following code to create a web service in Python which returns data from a PostgreSQL database.\n\n### Input:\nimport psycopg2\n\nconn = psycopg2.connect(dbname='testdb', user='username', password='password')\n\ncur = conn.cursor()\n\ncur.execute(\"SELECT * FROM table_name\")\n\nrows = cur.fetchall()\n\ncur.close()\nconn.close()\n\n### Output:\nimport psycopg2\nfrom flask import Flask\nfrom flask import jsonify\n\nconn = psycopg2.connect(dbname='testdb', user='username', password='password')\n\napp = Flask(__name__)\n\n@app.route('/data')\ndef get_data():\n    \n    cur = conn.cursor()\n    \n    cur.execute(\"SELECT * FROM table_name\")\n    \n    rows = cur.fetchall()\n    \n    cur.close()\n    conn.close()\n    \n    return jsonify(rows)\n    \nif __name__ == \"__main__\":\n    app.run()"
    },
    {
        "instruction": "Create a Python program for predicting the stock price of a company given the past 5 days of its stock price history.",
        "input": "Stock Price History:\n[17.4, 17.3, 17.5, 17.2, 17.3]",
        "output": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n#Define and reshape the data\nstock_price = np.array([17.4, 17.3, 17.5, 17.2, 17.3]).reshape(-1, 1)\n\n#Train the model\nmodel = LinearRegression()\nmodel.fit(stock_price[:4], stock_price[1:])\n\n#Predict the next day's price\npredicted_price = model.predict([stock_price[4]])\nprint(f'Predicted price is: {predicted_price[0][0]}')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for predicting the stock price of a company given the past 5 days of its stock price history.\n\n### Input:\nStock Price History:\n[17.4, 17.3, 17.5, 17.2, 17.3]\n\n### Output:\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n#Define and reshape the data\nstock_price = np.array([17.4, 17.3, 17.5, 17.2, 17.3]).reshape(-1, 1)\n\n#Train the model\nmodel = LinearRegression()\nmodel.fit(stock_price[:4], stock_price[1:])\n\n#Predict the next day's price\npredicted_price = model.predict([stock_price[4]])\nprint(f'Predicted price is: {predicted_price[0][0]}')"
    },
    {
        "instruction": "Write a Python program to compute the number of valid binary search trees for a given integer N.",
        "input": "N = 5",
        "output": "# Function to calculate the number of binary trees\n# for a given number of nodes 'n'\ndef num_bst(n):\n \n # base case\n if n == 0 or n == 1:\n  return 1\n \n # Initialize the number of BST \n num = 0\n \n # Iterate through the N values\n for i in range(1, n+1):\n  # Calculate the number of BST of left sub-tree\n  num_left_subtrees = num_bst(i-1)\n \n  # Calculate the number of BST of right sub-tree\n  num_right_subtrees = num_bst(n-i)\n \n  # Add the number of BST of left and right sub-tree\n  num += num_left_subtrees * num_right_subtrees\n \n return num\n \n# Driver code\nN = 5\nprint(num_bst(N)) # 42",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compute the number of valid binary search trees for a given integer N.\n\n### Input:\nN = 5\n\n### Output:\n# Function to calculate the number of binary trees\n# for a given number of nodes 'n'\ndef num_bst(n):\n \n # base case\n if n == 0 or n == 1:\n  return 1\n \n # Initialize the number of BST \n num = 0\n \n # Iterate through the N values\n for i in range(1, n+1):\n  # Calculate the number of BST of left sub-tree\n  num_left_subtrees = num_bst(i-1)\n \n  # Calculate the number of BST of right sub-tree\n  num_right_subtrees = num_bst(n-i)\n \n  # Add the number of BST of left and right sub-tree\n  num += num_left_subtrees * num_right_subtrees\n \n return num\n \n# Driver code\nN = 5\nprint(num_bst(N)) # 42"
    },
    {
        "instruction": "Write a Python program that simulates a text-based adventure game.",
        "input": "",
        "output": "# This is a text-based adventure game written in Python \n# You will have to explore the world, find items, and complete quests\ndef main():\n    print(\"Welcome to the world of adventure! \\n\")\n\n    # Initialize the world \n    rooms, items, quests = initialize_world()\n    \n    while True:\n        # Print the current room description \n        print(rooms[current_room]['description'])\n\n        # Print the current items and quests that are available\n        print_items(current_room)\n        print_quests(current_room)\n\n        # Get user input \n        command = input(\"What would you like to do? \\n\")\n        \n        # Call the appropriate action based on the user input. \n        process_command(command, rooms, items, quests)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that simulates a text-based adventure game.\n\n### Input:\n\n\n### Output:\n# This is a text-based adventure game written in Python \n# You will have to explore the world, find items, and complete quests\ndef main():\n    print(\"Welcome to the world of adventure! \\n\")\n\n    # Initialize the world \n    rooms, items, quests = initialize_world()\n    \n    while True:\n        # Print the current room description \n        print(rooms[current_room]['description'])\n\n        # Print the current items and quests that are available\n        print_items(current_room)\n        print_quests(current_room)\n\n        # Get user input \n        command = input(\"What would you like to do? \\n\")\n        \n        # Call the appropriate action based on the user input. \n        process_command(command, rooms, items, quests)"
    },
    {
        "instruction": "Create a Python program to filter a list of strings and return only the strings that contain a given substring.",
        "input": "The list [\"cat\", \"dog\", \"elephant\", \"rabbit\", \"duck\"] and the substring \"ra\".",
        "output": "def filter_list(lst, sub):\n filtered = [s for s in lst if sub in s]\n return filtered\n\nlst = [\"cat\", \"dog\", \"elephant\", \"rabbit\", \"duck\"]\nsub = \"ra\"\n\nresult = filter_list(lst, sub)\nprint(result)\n\n# Output: ['rabbit']",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to filter a list of strings and return only the strings that contain a given substring.\n\n### Input:\nThe list [\"cat\", \"dog\", \"elephant\", \"rabbit\", \"duck\"] and the substring \"ra\".\n\n### Output:\ndef filter_list(lst, sub):\n filtered = [s for s in lst if sub in s]\n return filtered\n\nlst = [\"cat\", \"dog\", \"elephant\", \"rabbit\", \"duck\"]\nsub = \"ra\"\n\nresult = filter_list(lst, sub)\nprint(result)\n\n# Output: ['rabbit']"
    },
    {
        "instruction": "Create an AI assistant in Python to remind users to take an umbrella when it is raining.",
        "input": "Not applicable",
        "output": "import requests\nimport datetime\n\n# Get the weather for the current day\ndate = datetime.datetime.now().strftime(\"%Y-%m-%d\")\nr = requests.get(\"http://api.openweathermap.org/data/2.5/weather?q=New York,US&appid=xxxxxxxxxxxxxxxxxxxxx&date=\" + date)\ndata = r.json()\n\n# Check the temperature\nif data[\"main\"][\"temp\"] <= 282.15:\n # Check if it is raining\n if data[\"weather\"][0][\"main\"] == \"Rain\":\n print(\"It's raining outside! Don't forget to take an umbrella with you!\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI assistant in Python to remind users to take an umbrella when it is raining.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nimport datetime\n\n# Get the weather for the current day\ndate = datetime.datetime.now().strftime(\"%Y-%m-%d\")\nr = requests.get(\"http://api.openweathermap.org/data/2.5/weather?q=New York,US&appid=xxxxxxxxxxxxxxxxxxxxx&date=\" + date)\ndata = r.json()\n\n# Check the temperature\nif data[\"main\"][\"temp\"] <= 282.15:\n # Check if it is raining\n if data[\"weather\"][0][\"main\"] == \"Rain\":\n print(\"It's raining outside! Don't forget to take an umbrella with you!\")"
    },
    {
        "instruction": "Write a basic Python web server that outputs \"Hello, World!\" when GET request to '/' path is sent.",
        "input": "Not applicable",
        "output": "import http.server\n \nclass HelloHandler(http.server.BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type','text/html')\n        self.end_headers()\n        self.wfile.write(b\"Hello, World!\")\n \nhttpd = http.server.HTTPServer(('localhost', 8000), HelloHandler)\nhttpd.serve_forever()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a basic Python web server that outputs \"Hello, World!\" when GET request to '/' path is sent.\n\n### Input:\nNot applicable\n\n### Output:\nimport http.server\n \nclass HelloHandler(http.server.BaseHTTPRequestHandler):\n    def do_GET(self):\n        self.send_response(200)\n        self.send_header('Content-type','text/html')\n        self.end_headers()\n        self.wfile.write(b\"Hello, World!\")\n \nhttpd = http.server.HTTPServer(('localhost', 8000), HelloHandler)\nhttpd.serve_forever()"
    },
    {
        "instruction": "Create a Python code to convert a given integer to binary",
        "input": "",
        "output": "def to_binary(n):\n    return bin(n).replace(\"0b\", \"\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code to convert a given integer to binary\n\n### Input:\n\n\n### Output:\ndef to_binary(n):\n    return bin(n).replace(\"0b\", \"\")"
    },
    {
        "instruction": "Create a basic game of Hangman in Python. The game should have a prompt for the player to enter a word, store the word, display a series of underscores corresponding to the number of letters in the word, and prompt the player to enter guesses for letters in the word.",
        "input": "Not applicable",
        "output": "# Initialize state\nword = ''\nguesses = []\n\n# Hangman board:\nhangman_board = [\n '''\n    +---+\n    |   |\n        |\n        |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n        |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n    |   |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n   /|   |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n   /|\\  |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n   /|\\  |\n   /    |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n   /|\\  |\n   / \\  |\n        |\n =========\n '''\n]\n\n# Function to collect word from player\ndef collect_word():\n global word\n word = input(\"Enter a word for the other player to guess: \")\n\n# Function to collect guesses\ndef collect_guesses():\n global guesses\n while True:\n guess = input(\"Guess a letter: \")\n if len(guess) != 1 or not guess.isalpha():\n print('A single letter is required!')\n continue\n guesses.append(guess)\n break\n\n # Print out the hangman board\ndef display_hangman():\n for board in hangman_board:\n print(board)\n\n # Function to print out the status of the game\ndef display_status():\n uncompleted_word = ''\n wrong_count = 0\n for letter in word:\n if letter in guesses:\n uncompleted_word += letter\n else:\n uncompleted_word += '_'\n if letter not in guesses:\n wrong_count += 1\n print(uncompleted_word)\n print('Wrong Guesses:', wrong_count)\n\n# Main game logic\ndef main():\n collect_word()\n while True:\n display_hangman()\n display_status()\n collect_guesses()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic game of Hangman in Python. The game should have a prompt for the player to enter a word, store the word, display a series of underscores corresponding to the number of letters in the word, and prompt the player to enter guesses for letters in the word.\n\n### Input:\nNot applicable\n\n### Output:\n# Initialize state\nword = ''\nguesses = []\n\n# Hangman board:\nhangman_board = [\n '''\n    +---+\n    |   |\n        |\n        |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n        |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n    |   |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n   /|   |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n   /|\\  |\n        |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n   /|\\  |\n   /    |\n        |\n =========\n ''',\n '''\n    +---+\n    |   |\n    O   |\n   /|\\  |\n   / \\  |\n        |\n =========\n '''\n]\n\n# Function to collect word from player\ndef collect_word():\n global word\n word = input(\"Enter a word for the other player to guess: \")\n\n# Function to collect guesses\ndef collect_guesses():\n global guesses\n while True:\n guess = input(\"Guess a letter: \")\n if len(guess) != 1 or not guess.isalpha():\n print('A single letter is required!')\n continue\n guesses.append(guess)\n break\n\n # Print out the hangman board\ndef display_hangman():\n for board in hangman_board:\n print(board)\n\n # Function to print out the status of the game\ndef display_status():\n uncompleted_word = ''\n wrong_count = 0\n for letter in word:\n if letter in guesses:\n uncompleted_word += letter\n else:\n uncompleted_word += '_'\n if letter not in guesses:\n wrong_count += 1\n print(uncompleted_word)\n print('Wrong Guesses:', wrong_count)\n\n# Main game logic\ndef main():\n collect_word()\n while True:\n display_hangman()\n display_status()\n collect_guesses()"
    },
    {
        "instruction": "Create a program in Python that converts an integer number to a Roman Numeral.",
        "input": "",
        "output": "def convert_to_roman(num):\n    val = [\n    1000, 900, 500, 400,\n    100, 90, 50, 40,\n    10, 9, 5, 4,\n    1\n    ]\n    syb = [\n    \"M\", \"CM\", \"D\", \"CD\",\n    \"C\", \"XC\", \"L\", \"XL\",\n    \"X\", \"IX\", \"V\", \"IV\",\n    \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a positive integer: \"))\n    roman_num = convert_to_roman(num)\n    print('The Roman numeral for the given number is: ', roman_num)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that converts an integer number to a Roman Numeral.\n\n### Input:\n\n\n### Output:\ndef convert_to_roman(num):\n    val = [\n    1000, 900, 500, 400,\n    100, 90, 50, 40,\n    10, 9, 5, 4,\n    1\n    ]\n    syb = [\n    \"M\", \"CM\", \"D\", \"CD\",\n    \"C\", \"XC\", \"L\", \"XL\",\n    \"X\", \"IX\", \"V\", \"IV\",\n    \"I\"\n    ]\n    roman_num = ''\n    i = 0\n    while  num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num\n\nif __name__ == \"__main__\":\n    num = int(input(\"Enter a positive integer: \"))\n    roman_num = convert_to_roman(num)\n    print('The Roman numeral for the given number is: ', roman_num)"
    },
    {
        "instruction": "Change the following Python code to work with python 3 and print output \u201cMy name is Mary\u201d.",
        "input": "print 'My name is Mary'",
        "output": "print('My name is Mary')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nChange the following Python code to work with python 3 and print output \u201cMy name is Mary\u201d.\n\n### Input:\nprint 'My name is Mary'\n\n### Output:\nprint('My name is Mary')"
    },
    {
        "instruction": "Generate a Python program that finds the most frequent element in a list and returns a dictionary containing the element and the number of occurrences.",
        "input": "Example list: [1, 1, 2, 3, 3, 3, 4, 4, 4, 4]",
        "output": "def find_frequent(list):\n  dictionary = {}\n  for element in list:\n    if element not in dictionary:\n      dictionary[element] = 1\n    else:\n      dictionary[element] += 1\n\n  frequency = max(dictionary.values())\n\n  most_frequent = [key for key in dictionary if dictionary[key] == frequency]\n\n  return { most_frequent[0] : frequency }\n\nprint(find_frequent([1, 1, 2, 3, 3, 3, 4, 4, 4, 4]))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that finds the most frequent element in a list and returns a dictionary containing the element and the number of occurrences.\n\n### Input:\nExample list: [1, 1, 2, 3, 3, 3, 4, 4, 4, 4]\n\n### Output:\ndef find_frequent(list):\n  dictionary = {}\n  for element in list:\n    if element not in dictionary:\n      dictionary[element] = 1\n    else:\n      dictionary[element] += 1\n\n  frequency = max(dictionary.values())\n\n  most_frequent = [key for key in dictionary if dictionary[key] == frequency]\n\n  return { most_frequent[0] : frequency }\n\nprint(find_frequent([1, 1, 2, 3, 3, 3, 4, 4, 4, 4]))"
    },
    {
        "instruction": "Rewrite the following Python function without using loop.",
        "input": "def multiply_list(l): \n\tresult = 1\n\t# Iterate through the list \n\tfor i in l: \n\t\tresult = result * i \n\treturn result",
        "output": "def multiply_list(l): \n\tfrom functools import reduce\n\treturn reduce((lambda x, y: x * y), l)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following Python function without using loop.\n\n### Input:\ndef multiply_list(l): \n\tresult = 1\n\t# Iterate through the list \n\tfor i in l: \n\t\tresult = result * i \n\treturn result\n\n### Output:\ndef multiply_list(l): \n\tfrom functools import reduce\n\treturn reduce((lambda x, y: x * y), l)"
    },
    {
        "instruction": "Create a code generator that creates a simple API using Django Rest Framework.",
        "input": "Model name: Item\nModel fields: name (string), amount (integer)",
        "output": "# create a new Django project\ndjango-admin startproject sample_project\n\n# creating a new app\npython manage.py startapp items\n\n# add app to project\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'items',\n]\n\n# create models\nclass Item(models.Model):\n    name = models.CharField(max_length=100)\n    amount = models.IntegerField()\n\n# create serializer\nclass ItemSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Item\n        fields = ('name', 'amount')\n\n# create views\nclass ItemList(APIView):\n    def get(self, request):\n        items = Item.objects.all()\n        serializer = ItemSerializer(items, many=True)\n        return Response(serializer.data)\n\n    def post(self, request):\n        serializer = ItemSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n# urls route\nurlpatterns = [\n    path('items/', ItemList.as_view()),\n]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code generator that creates a simple API using Django Rest Framework.\n\n### Input:\nModel name: Item\nModel fields: name (string), amount (integer)\n\n### Output:\n# create a new Django project\ndjango-admin startproject sample_project\n\n# creating a new app\npython manage.py startapp items\n\n# add app to project\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'items',\n]\n\n# create models\nclass Item(models.Model):\n    name = models.CharField(max_length=100)\n    amount = models.IntegerField()\n\n# create serializer\nclass ItemSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Item\n        fields = ('name', 'amount')\n\n# create views\nclass ItemList(APIView):\n    def get(self, request):\n        items = Item.objects.all()\n        serializer = ItemSerializer(items, many=True)\n        return Response(serializer.data)\n\n    def post(self, request):\n        serializer = ItemSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n# urls route\nurlpatterns = [\n    path('items/', ItemList.as_view()),\n]+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)"
    },
    {
        "instruction": "Implement a Python class to represent a sentence.",
        "input": "",
        "output": "class Sentence:\n  def __init__(self, text):\n    self.text = text\n    self.words = self.text.split()\n    \n  def get_num_words(self):\n    return len(self.words)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python class to represent a sentence.\n\n### Input:\n\n\n### Output:\nclass Sentence:\n  def __init__(self, text):\n    self.text = text\n    self.words = self.text.split()\n    \n  def get_num_words(self):\n    return len(self.words)"
    },
    {
        "instruction": "Design a function in Python to sort the given list of numbers in descending order.",
        "input": "The given list of numbers is: [2, 4, 1, 6, 9, 8]",
        "output": "def descendingSort(nums):\n    # sort list in reverse order\n    nums.sort(reverse=True)\n    return nums\n\nprint(descendingSort([2, 4, 1, 6, 9, 8]))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to sort the given list of numbers in descending order.\n\n### Input:\nThe given list of numbers is: [2, 4, 1, 6, 9, 8]\n\n### Output:\ndef descendingSort(nums):\n    # sort list in reverse order\n    nums.sort(reverse=True)\n    return nums\n\nprint(descendingSort([2, 4, 1, 6, 9, 8]))"
    },
    {
        "instruction": "Design a function in Python that computes the area of a triangle given its base length and height.",
        "input": "base_length = 8",
        "output": "def triangle_area(base_length, height):\n    area = 0.5 * base_length * height\n    return area",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python that computes the area of a triangle given its base length and height.\n\n### Input:\nbase_length = 8\n\n### Output:\ndef triangle_area(base_length, height):\n    area = 0.5 * base_length * height\n    return area"
    },
    {
        "instruction": "Perform validation of a given username and password in Python.",
        "input": "Username: john123\nPassword: 12#Abc",
        "output": "def validate(username, password):\n    if len(password) < 8:\n        print('Password must be at least 8 characters')\n        return False\n    elif (not any(x.isupper() for x in password)\n          or not any(x.islower() for x in password)):\n        print('Password must contains both uppercase and lowercase')\n        return False\n    elif not any(x.isdigit() for x in password):\n        print('Password must contain at least 1 number.')\n        return False\n    return True\nvalidate(username, password)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPerform validation of a given username and password in Python.\n\n### Input:\nUsername: john123\nPassword: 12#Abc\n\n### Output:\ndef validate(username, password):\n    if len(password) < 8:\n        print('Password must be at least 8 characters')\n        return False\n    elif (not any(x.isupper() for x in password)\n          or not any(x.islower() for x in password)):\n        print('Password must contains both uppercase and lowercase')\n        return False\n    elif not any(x.isdigit() for x in password):\n        print('Password must contain at least 1 number.')\n        return False\n    return True\nvalidate(username, password)"
    },
    {
        "instruction": "Sort an array in ascending order using Python.",
        "input": "8, 16, 7, 15, 1",
        "output": "def myFunc(arr): \n    arr.sort()\n    return arr\n  \narr = [8, 16, 7, 15, 1]\nx = myFunc(arr)\nprint(x)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSort an array in ascending order using Python.\n\n### Input:\n8, 16, 7, 15, 1\n\n### Output:\ndef myFunc(arr): \n    arr.sort()\n    return arr\n  \narr = [8, 16, 7, 15, 1]\nx = myFunc(arr)\nprint(x)"
    },
    {
        "instruction": "Create a program that counts the number of words in a given sentence using the split() method.",
        "input": "",
        "output": "sentence = \"I am learning Python\"\n\ndef count_words(sentence):\n    words = sentence.split()\n    return len(words)\n\nword_count = count_words(sentence)\nprint(word_count)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that counts the number of words in a given sentence using the split() method.\n\n### Input:\n\n\n### Output:\nsentence = \"I am learning Python\"\n\ndef count_words(sentence):\n    words = sentence.split()\n    return len(words)\n\nword_count = count_words(sentence)\nprint(word_count)"
    },
    {
        "instruction": "Using Python, create a function to convert HTML to plain text.",
        "input": "Input HTML:\n```\n<p>Hello world!</p>\n<div>\n    <p>This is a test.</p>\n</div>\n```",
        "output": "import lxml.html as lh\n\ndef html_to_text(html):\n    tree = lh.fromstring(html)\n    return tree.text_content()\n\nhtml = \"<p>Hello world!</p><div><p>This is a test.</p></div>\"\n\nprint(html_to_text(html))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, create a function to convert HTML to plain text.\n\n### Input:\nInput HTML:\n```\n<p>Hello world!</p>\n<div>\n    <p>This is a test.</p>\n</div>\n```\n\n### Output:\nimport lxml.html as lh\n\ndef html_to_text(html):\n    tree = lh.fromstring(html)\n    return tree.text_content()\n\nhtml = \"<p>Hello world!</p><div><p>This is a test.</p></div>\"\n\nprint(html_to_text(html))"
    },
    {
        "instruction": "Construct a Python dictionary based on the following data",
        "input": "keys = [\"car\", \"bike\"]\nvalues = [\"Ford\", \"Honda\"]",
        "output": "dict = {\n    \"car\" : \"Ford\", \n    \"bike\" : \"Honda\"\n}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python dictionary based on the following data\n\n### Input:\nkeys = [\"car\", \"bike\"]\nvalues = [\"Ford\", \"Honda\"]\n\n### Output:\ndict = {\n    \"car\" : \"Ford\", \n    \"bike\" : \"Honda\"\n}"
    },
    {
        "instruction": "Write a python program to build a social media platform that stores users and posts.",
        "input": "",
        "output": "class User:\n    def __init__(self, username):\n        self.username = username\n\nclass Post:\n    def __init__(self, user, text):\n        self.user = user\n        self.text = text\n\nclass SocialMediaPlatform:\n    def __init__(self):\n        self.users = []\n        self.posts = []\n\n    def create_user(self, username):\n        new_user = User(username)\n        self.users.append(new_user)\n\n    def create_post(self, username, text):\n        user = self.find_user_by_name(username)\n        if not user:\n            return None\n        post = Post(user, text)\n        self.posts.append(post)\n        return post\n\n    def find_user_by_name(self, username):\n        for user in self.users:\n            if user.username == username:\n                return user\n        return None",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to build a social media platform that stores users and posts.\n\n### Input:\n\n\n### Output:\nclass User:\n    def __init__(self, username):\n        self.username = username\n\nclass Post:\n    def __init__(self, user, text):\n        self.user = user\n        self.text = text\n\nclass SocialMediaPlatform:\n    def __init__(self):\n        self.users = []\n        self.posts = []\n\n    def create_user(self, username):\n        new_user = User(username)\n        self.users.append(new_user)\n\n    def create_post(self, username, text):\n        user = self.find_user_by_name(username)\n        if not user:\n            return None\n        post = Post(user, text)\n        self.posts.append(post)\n        return post\n\n    def find_user_by_name(self, username):\n        for user in self.users:\n            if user.username == username:\n                return user\n        return None"
    },
    {
        "instruction": "Write a Python program to classify the given words as valid or invalid.",
        "input": "word_list = [\"code\", \"data\", \"text\", \"test\"]",
        "output": "word_list = [\"code\", \"data\", \"text\", \"test\"]\n\ndef classify_words(word_list):\n    valid_words = []\n    invalid_words = []\n    for word in word_list:\n        if len(word) >= 4:\n            valid_words.append(word)\n        else:\n            invalid_words.append(word)\n    return valid_words, invalid_words\n\nvalid_words, invalid_words = classify_words(word_list)\n\nprint(\"Valid Words:\", valid_words)\nprint(\"Invalid Words:\", invalid_words)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify the given words as valid or invalid.\n\n### Input:\nword_list = [\"code\", \"data\", \"text\", \"test\"]\n\n### Output:\nword_list = [\"code\", \"data\", \"text\", \"test\"]\n\ndef classify_words(word_list):\n    valid_words = []\n    invalid_words = []\n    for word in word_list:\n        if len(word) >= 4:\n            valid_words.append(word)\n        else:\n            invalid_words.append(word)\n    return valid_words, invalid_words\n\nvalid_words, invalid_words = classify_words(word_list)\n\nprint(\"Valid Words:\", valid_words)\nprint(\"Invalid Words:\", invalid_words)"
    },
    {
        "instruction": "Create a class for representing a Job object in Python.",
        "input": "",
        "output": "class Job:\n    def __init__(self, title, company, pay):\n        self.title = title\n        self.company = company\n        self.pay = pay\n\n    def __str__(self):\n        return f'Job: {self.title}, Company: {self.company}, Pay: {self.pay}'",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class for representing a Job object in Python.\n\n### Input:\n\n\n### Output:\nclass Job:\n    def __init__(self, title, company, pay):\n        self.title = title\n        self.company = company\n        self.pay = pay\n\n    def __str__(self):\n        return f'Job: {self.title}, Company: {self.company}, Pay: {self.pay}'"
    },
    {
        "instruction": "Explain the purpose of the following Python class.",
        "input": "class Stopwatch:\n    def __init__(self):\n        self._start_time = None\n        self._end_time = None",
        "output": "The class Stopwatch is used to measure elapsed time. The __init__ method initializes two variables, self._start_time and self._end_time which are used to store the start and end times of the elapsed time measurement. The methods start() and stop() are then used to mark the beginning and end of the measurement respectively. The get_elapsed_time() method then calculates the elapsed time by subtracting the start time from the end time.",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain the purpose of the following Python class.\n\n### Input:\nclass Stopwatch:\n    def __init__(self):\n        self._start_time = None\n        self._end_time = None\n\n### Output:\nThe class Stopwatch is used to measure elapsed time. The __init__ method initializes two variables, self._start_time and self._end_time which are used to store the start and end times of the elapsed time measurement. The methods start() and stop() are then used to mark the beginning and end of the measurement respectively. The get_elapsed_time() method then calculates the elapsed time by subtracting the start time from the end time."
    },
    {
        "instruction": "This code defines several functions to transfer files from a USB device to a specified location. To use it, call the `main()` function, which will continuously monitor for USB devices being inserted or removed. When a new device is inserted, it will attempt to mount the device and transfer any files with accepted extensions to the specified location. When a device is removed, it will attempt to remove any temporary files created during the transfer process.",
        "input": "",
        "output": "import os, inspect, json, re                                                                              #needed for os files\nfrom django.conf import settings\nfrom glob import glob                                                                           #Needed for directories\nimport subprocess                                                                               #Running lsusb\nimport getpass                                                                                  #used for getuser()\nimport time                                                                                     #temp fix; used to sleep\nfrom stat import *                                                                              #imports stats like ST_SIZE\nimport threading                                                                                #Multithreading         \nfrom shutil import copy2                                                                        #Copies files\n\nprocess = None\n\nstaticFileLocRoot = settings.CONTENT_ROOT\ndata_folder = settings.USB_DIR\nextns = settings.ACCEPTED_EXTNS\n\ndef get_usb_name():\n    lsblk_out = subprocess.check_output(\"lsblk\", shell=True)\n    lsblk_list = lsblk_out.split('\\n')\n    media_dir = None\n    for line in lsblk_list:\n        if '/media/' in line:\n            media_loc = line.index('/media/')\n            media_dir = line[media_loc:].strip()\n    return media_dir\n\ndef verify(device_mnt):\n    blkid_out = subprocess.check_output(\"blkid\", shell=True)\n    blkid_list = blkid_out.split('\\n')\n    for line in blkid_list:\n        if (\"/dev/\" + device_mnt) in line:\n            return check_if_line_usb(line)\n\ndef check_if_line_usb(line):\n    UUID_beg = line.index('UUID') + 5\n    UUID_end = line.find('\\\"', UUID_beg+1)\n    print str(UUID_end - UUID_beg)\n    if UUID_end - UUID_beg == 10:\n        return True\n    return False\n\ndef transfer_file(file):\n        print \"file \" + file + \"staticFileLocRoot \" + staticFileLocRoot\n        index=file.rfind('/')\n        file_name=file[index+1:]\n        print \"file_name \" + file_name + \"staticFileLocRoot \" + staticFileLocRoot\n        sendString = \"cp \" + file + \" \" + staticFileLocRoot + file_name\n        proc = subprocess.Popen (sendString, shell=True)                                    \n        proc.communicate()[0]\n        return proc.returncode  \n\ndef attemptMount():     \n    lsblk_out = subprocess.check_output(\"lsblk\", shell=True)\n    lsblk_list = lsblk_out.split('\\n')\n    media_dir = None\n    devmnt_regex = r'([s][d][a-zA-Z][0-9]+)'\n    for line in lsblk_list:\n        if '/media/' in line:\n            media_loc = line.index('/media/')\n            media_dir = line[media_loc:].strip()\n            try:\n                media_mntpnt = re.findall(devmnt_regex, line)[0]\n            except:\n                return None\n            is_needed = verify(media_mntpnt)\n            if is_needed:\n                break\n    if media_dir is None:\n        return None\n    try:\n        os.chdir(media_dir + '/' + data_folder)\n    except:\n        return None\n    temps = [name for name in os.listdir(\".\")]\n    print 'Temporary files are ' + str(temps)\n    files = []\n    for root, subfolders, usb_files in os.walk(\".\"):\n        for name in usb_files:\n            if (not os.path.isdir(name)):\n                if(name.endswith(tuple(extns))):\n                    #if (not os.path.isdir(name)) and (name[-5:] == '.data' or name == 'content.json'):\n                    files.append(os.path.join(root, name))\n    return files\n\ndef main():\n    #enableAutoMount()\n    df = subprocess.check_output(\"lsusb\", stderr=subprocess.STDOUT)                             #subprocess prints to stderr for some reason, making it think stdout is stderr\n    oldDeviceList = df.split(\"\\n\")                                                              #gets list of previously connected usb devices\n    while True:\n        df = subprocess.check_output(\"lsusb\", stderr=subprocess.STDOUT)                         #do it again\n        newDeviceList = df.split('\\n')                                                          #store in a NEW list\n\n        if len(newDeviceList) > len(oldDeviceList):                                             #new usb device inserted!\n            for line in newDeviceList:\n                if line not in oldDeviceList:                                                   #this points to the newer device we have attached\n                    IDAnchor = line.index(\"ID\")                                                     \n                    line = line[IDAnchor:]                                                      #slice off unwanted line info [such as bus information]\n                    print (\"You have attached \" + line)                                         #debug purposes \n                    time.sleep(3)                                                               #prevents python from attempting to access the files before the OS itself, might need to be increased \n                    attemptMount()                                                              #attempt mounting the device    \n\n        if len(newDeviceList) < len(oldDeviceList):                                             #some USB device has been removed!\n            for line in oldDeviceList:\n                if line not in newDeviceList:\n                    IDAnchor = line.index(\"ID\")\n                    line = line[IDAnchor:]\n                    print (\"You have removed \" + line)\n                    attemptRemoval()\n        oldDeviceList = list(newDeviceList)                                                     #allows for the loop to function properly\n\nif __name__ == '__main__':\n    main()\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code defines several functions to transfer files from a USB device to a specified location. To use it, call the `main()` function, which will continuously monitor for USB devices being inserted or removed. When a new device is inserted, it will attempt to mount the device and transfer any files with accepted extensions to the specified location. When a device is removed, it will attempt to remove any temporary files created during the transfer process.\n\n### Input:\n\n\n### Output:\nimport os, inspect, json, re                                                                              #needed for os files\nfrom django.conf import settings\nfrom glob import glob                                                                           #Needed for directories\nimport subprocess                                                                               #Running lsusb\nimport getpass                                                                                  #used for getuser()\nimport time                                                                                     #temp fix; used to sleep\nfrom stat import *                                                                              #imports stats like ST_SIZE\nimport threading                                                                                #Multithreading         \nfrom shutil import copy2                                                                        #Copies files\n\nprocess = None\n\nstaticFileLocRoot = settings.CONTENT_ROOT\ndata_folder = settings.USB_DIR\nextns = settings.ACCEPTED_EXTNS\n\ndef get_usb_name():\n    lsblk_out = subprocess.check_output(\"lsblk\", shell=True)\n    lsblk_list = lsblk_out.split('\\n')\n    media_dir = None\n    for line in lsblk_list:\n        if '/media/' in line:\n            media_loc = line.index('/media/')\n            media_dir = line[media_loc:].strip()\n    return media_dir\n\ndef verify(device_mnt):\n    blkid_out = subprocess.check_output(\"blkid\", shell=True)\n    blkid_list = blkid_out.split('\\n')\n    for line in blkid_list:\n        if (\"/dev/\" + device_mnt) in line:\n            return check_if_line_usb(line)\n\ndef check_if_line_usb(line):\n    UUID_beg = line.index('UUID') + 5\n    UUID_end = line.find('\\\"', UUID_beg+1)\n    print str(UUID_end - UUID_beg)\n    if UUID_end - UUID_beg == 10:\n        return True\n    return False\n\ndef transfer_file(file):\n        print \"file \" + file + \"staticFileLocRoot \" + staticFileLocRoot\n        index=file.rfind('/')\n        file_name=file[index+1:]\n        print \"file_name \" + file_name + \"staticFileLocRoot \" + staticFileLocRoot\n        sendString = \"cp \" + file + \" \" + staticFileLocRoot + file_name\n        proc = subprocess.Popen (sendString, shell=True)                                    \n        proc.communicate()[0]\n        return proc.returncode  \n\ndef attemptMount():     \n    lsblk_out = subprocess.check_output(\"lsblk\", shell=True)\n    lsblk_list = lsblk_out.split('\\n')\n    media_dir = None\n    devmnt_regex = r'([s][d][a-zA-Z][0-9]+)'\n    for line in lsblk_list:\n        if '/media/' in line:\n            media_loc = line.index('/media/')\n            media_dir = line[media_loc:].strip()\n            try:\n                media_mntpnt = re.findall(devmnt_regex, line)[0]\n            except:\n                return None\n            is_needed = verify(media_mntpnt)\n            if is_needed:\n                break\n    if media_dir is None:\n        return None\n    try:\n        os.chdir(media_dir + '/' + data_folder)\n    except:\n        return None\n    temps = [name for name in os.listdir(\".\")]\n    print 'Temporary files are ' + str(temps)\n    files = []\n    for root, subfolders, usb_files in os.walk(\".\"):\n        for name in usb_files:\n            if (not os.path.isdir(name)):\n                if(name.endswith(tuple(extns))):\n                    #if (not os.path.isdir(name)) and (name[-5:] == '.data' or name == 'content.json'):\n                    files.append(os.path.join(root, name))\n    return files\n\ndef main():\n    #enableAutoMount()\n    df = subprocess.check_output(\"lsusb\", stderr=subprocess.STDOUT)                             #subprocess prints to stderr for some reason, making it think stdout is stderr\n    oldDeviceList = df.split(\"\\n\")                                                              #gets list of previously connected usb devices\n    while True:\n        df = subprocess.check_output(\"lsusb\", stderr=subprocess.STDOUT)                         #do it again\n        newDeviceList = df.split('\\n')                                                          #store in a NEW list\n\n        if len(newDeviceList) > len(oldDeviceList):                                             #new usb device inserted!\n            for line in newDeviceList:\n                if line not in oldDeviceList:                                                   #this points to the newer device we have attached\n                    IDAnchor = line.index(\"ID\")                                                     \n                    line = line[IDAnchor:]                                                      #slice off unwanted line info [such as bus information]\n                    print (\"You have attached \" + line)                                         #debug purposes \n                    time.sleep(3)                                                               #prevents python from attempting to access the files before the OS itself, might need to be increased \n                    attemptMount()                                                              #attempt mounting the device    \n\n        if len(newDeviceList) < len(oldDeviceList):                                             #some USB device has been removed!\n            for line in oldDeviceList:\n                if line not in newDeviceList:\n                    IDAnchor = line.index(\"ID\")\n                    line = line[IDAnchor:]\n                    print (\"You have removed \" + line)\n                    attemptRemoval()\n        oldDeviceList = list(newDeviceList)                                                     #allows for the loop to function properly\n\nif __name__ == '__main__':\n    main()\n"
    },
    {
        "instruction": "Write a function in Python that will take a string as input, reverse the order of the words, and return the new string.",
        "input": "string = \"Hello World\"",
        "output": "def reverseString(string):\n  words = string.split(' ')\n  reversedString = []\n  for i in range(len(words)-1, -1, -1):\n    reversedString.append(words[i])\n  return ' '.join(reversedString)\n  \nprint(reverseString(\"Hello World\")) # Output: World Hello",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that will take a string as input, reverse the order of the words, and return the new string.\n\n### Input:\nstring = \"Hello World\"\n\n### Output:\ndef reverseString(string):\n  words = string.split(' ')\n  reversedString = []\n  for i in range(len(words)-1, -1, -1):\n    reversedString.append(words[i])\n  return ' '.join(reversedString)\n  \nprint(reverseString(\"Hello World\")) # Output: World Hello"
    },
    {
        "instruction": "Create a Python script to perform sentiment analysis on a given text. The application should use a pre-trained machine learning model to analyze the sentiment and output either 'positive', 'negative', 'neutral', or 'mixed' sentiment.",
        "input": "The product was amazing and I highly recommend it!",
        "output": "import nltk\nimport sklearn\nnltk.download('vader_lexicon')\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ntext = \"The product was amazing and I highly recommend it!\"\n\nanalyzer = SentimentIntensityAnalyzer()\nsentiment = analyzer.polarity_scores(text)\n\nif sentiment['compound'] > 0.05:\n sentiment_text = \"positive\"\nelif sentiment['compound'] < -0.05:\n sentiment_text = \"negative\"\nelse:\n sentiment_text = \"neutral\"\n\nprint(sentiment_text)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to perform sentiment analysis on a given text. The application should use a pre-trained machine learning model to analyze the sentiment and output either 'positive', 'negative', 'neutral', or 'mixed' sentiment.\n\n### Input:\nThe product was amazing and I highly recommend it!\n\n### Output:\nimport nltk\nimport sklearn\nnltk.download('vader_lexicon')\n\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\ntext = \"The product was amazing and I highly recommend it!\"\n\nanalyzer = SentimentIntensityAnalyzer()\nsentiment = analyzer.polarity_scores(text)\n\nif sentiment['compound'] > 0.05:\n sentiment_text = \"positive\"\nelif sentiment['compound'] < -0.05:\n sentiment_text = \"negative\"\nelse:\n sentiment_text = \"neutral\"\n\nprint(sentiment_text)"
    },
    {
        "instruction": "Write a Python program to get a slice of elements from a list.",
        "input": "mylist = [1,2,3,4,5,6]",
        "output": "def get_slice(mylist, start, end):\n    return mylist[start:end]\n\nresult = get_slice([1,2,3,4,5,6], 2, 5)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to get a slice of elements from a list.\n\n### Input:\nmylist = [1,2,3,4,5,6]\n\n### Output:\ndef get_slice(mylist, start, end):\n    return mylist[start:end]\n\nresult = get_slice([1,2,3,4,5,6], 2, 5)\nprint(result)"
    },
    {
        "instruction": "This code defines a ContentType model and a ContentTypeManager that provides methods for retrieving ContentType objects for models. To use this code, import the necessary modules and create a ContentType object for each model you want to associate with a content type. You can then use the methods provided by the ContentTypeManager to retrieve ContentType objects for your models.",
        "input": "",
        "output": "from __future__ import unicode_literals\n\nfrom django.apps import apps\nfrom django.db import models\nfrom django.db.utils import OperationalError, ProgrammingError\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.utils.encoding import force_text\nfrom django.utils.encoding import python_2_unicode_compatible\n\n\nclass ContentTypeManager(models.Manager):\n    use_in_migrations = True\n\n    # Cache to avoid re-looking up ContentType objects all over the place.\n    # This cache is shared by all the get_for_* methods.\n    _cache = {}\n\n    def get_by_natural_key(self, app_label, model):\n        try:\n            ct = self.__class__._cache[self.db][(app_label, model)]\n        except KeyError:\n            ct = self.get(app_label=app_label, model=model)\n            self._add_to_cache(self.db, ct)\n        return ct\n\n    def _get_opts(self, model, for_concrete_model):\n        if for_concrete_model:\n            model = model._meta.concrete_model\n        elif model._deferred:\n            model = model._meta.proxy_for_model\n        return model._meta\n\n    def _get_from_cache(self, opts):\n        key = (opts.app_label, opts.model_name)\n        return self.__class__._cache[self.db][key]\n\n    def get_for_model(self, model, for_concrete_model=True):\n        \"\"\"\n        Returns the ContentType object for a given model, creating the\n        ContentType if necessary. Lookups are cached so that subsequent lookups\n        for the same model don't hit the database.\n        \"\"\"\n        opts = self._get_opts(model, for_concrete_model)\n        try:\n            return self._get_from_cache(opts)\n        except KeyError:\n            pass\n\n        # The ContentType entry was not found in the cache, therefore we\n        # proceed to load or create it.\n        try:\n            # We start with get() and not get_or_create() in order to use\n            # the db_for_read (see #20401).\n            ct = self.get(app_label=opts.app_label, model=opts.model_name)\n        except (OperationalError, ProgrammingError):\n            # It's possible to migrate a single app before contenttypes,\n            # as it's not a required initial dependency (it's contrib!)\n            # Have a nice error for this.\n            raise RuntimeError(\n                \"Error creating new content types. Please make sure contenttypes \"\n                \"is migrated before trying to migrate apps individually.\"\n            )\n        except self.model.DoesNotExist:\n            # Not found in the database; we proceed to create it.  This time we\n            # use get_or_create to take care of any race conditions.\n            ct, created = self.get_or_create(\n                app_label=opts.app_label,\n                model=opts.model_name,\n                defaults={'name': opts.verbose_name_raw},\n            )\n        self._add_to_cache(self.db, ct)\n        return ct\n\n    def get_for_models(self, *models, **kwargs):\n        \"\"\"\n        Given *models, returns a dictionary mapping {model: content_type}.\n        \"\"\"\n        for_concrete_models = kwargs.pop('for_concrete_models', True)\n        # Final results\n        results = {}\n        # models that aren't already in the cache\n        needed_app_labels = set()\n        needed_models = set()\n        needed_opts = set()\n        for model in models:\n            opts = self._get_opts(model, for_concrete_models)\n            try:\n                ct = self._get_from_cache(opts)\n            except KeyError:\n                needed_app_labels.add(opts.app_label)\n                needed_models.add(opts.model_name)\n                needed_opts.add(opts)\n            else:\n                results[model] = ct\n        if needed_opts:\n            cts = self.filter(\n                app_label__in=needed_app_labels,\n                model__in=needed_models\n            )\n            for ct in cts:\n                model = ct.model_class()\n                if model._meta in needed_opts:\n                    results[model] = ct\n                    needed_opts.remove(model._meta)\n                self._add_to_cache(self.db, ct)\n        for opts in needed_opts:\n            # These weren't in the cache, or the DB, create them.\n            ct = self.create(\n                app_label=opts.app_label,\n                model=opts.model_name,\n                name=opts.verbose_name_raw,\n            )\n            self._add_to_cache(self.db, ct)\n            results[ct.model_class()] = ct\n        return results\n\n    def get_for_id(self, id):\n        \"\"\"\n        Lookup a ContentType by ID. Uses the same shared cache as get_for_model\n        (though ContentTypes are obviously not created on-the-fly by get_by_id).\n        \"\"\"\n        try:\n            ct = self.__class__._cache[self.db][id]\n        except KeyError:\n            # This could raise a DoesNotExist; that's correct behavior and will\n            # make sure that only correct ctypes get stored in the cache dict.\n            ct = self.get(pk=id)\n            self._add_to_cache(self.db, ct)\n        return ct\n\n    def clear_cache(self):\n        \"\"\"\n        Clear out the content-type cache. This needs to happen during database\n        flushes to prevent caching of \"stale\" content type IDs (see\n        django.contrib.contenttypes.management.update_contenttypes for where\n        this gets called).\n        \"\"\"\n        self.__class__._cache.clear()\n\n    def _add_to_cache(self, using, ct):\n        \"\"\"Insert a ContentType into the cache.\"\"\"\n        # Note it's possible for ContentType objects to be stale; model_class() will return None.\n        # Hence, there is no reliance on model._meta.app_label here, just using the model fields instead.\n        key = (ct.app_label, ct.model)\n        self.__class__._cache.setdefault(using, {})[key] = ct\n        self.__class__._cache.setdefault(using, {})[ct.id] = ct\n\n\n@python_2_unicode_compatible\nclass ContentType(models.Model):\n    name = models.CharField(max_length=100)\n    app_label = models.CharField(max_length=100)\n    model = models.CharField(_('python model class name'), max_length=100)\n    objects = ContentTypeManager()\n\n    class Meta:\n        verbose_name = _('content type')\n        verbose_name_plural = _('content types')\n        db_table = 'django_content_type'\n        ordering = ('name',)\n        unique_together = (('app_label', 'model'),)\n\n    def __str__(self):\n        # self.name is deprecated in favor of using model's verbose_name, which\n        # can be translated. Formal deprecation is delayed until we have DB\n        # migration to be able to remove the field from the database along with\n        # the attribute.\n        #\n        # We return self.name only when users have changed its value from the\n        # initial verbose_name_raw and might rely on it.\n        model = self.model_class()\n        if not model or self.name != model._meta.verbose_name_raw:\n            return self.name\n        else:\n            return force_text(model._meta.verbose_name)\n\n    def model_class(self):\n        \"Returns the Python model class for this type of content.\"\n        try:\n            return apps.get_model(self.app_label, self.model)\n        except LookupError:\n            return None\n\n    def get_object_for_this_type(self, **kwargs):\n        \"\"\"\n        Returns an object of this type for the keyword arguments given.\n        Basically, this is a proxy around this object_type's get_object() model\n        method. The ObjectNotExist exception, if thrown, will not be caught,\n        so code that calls this method should catch it.\n        \"\"\"\n        return self.model_class()._base_manager.using(self._state.db).get(**kwargs)\n\n    def get_all_objects_for_this_type(self, **kwargs):\n        \"\"\"\n        Returns all objects of this type for the keyword arguments given.\n        \"\"\"\n        return self.model_class()._base_manager.using(self._state.db).filter(**kwargs)\n\n    def natural_key(self):\n        return (self.app_label, self.model)\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code defines a ContentType model and a ContentTypeManager that provides methods for retrieving ContentType objects for models. To use this code, import the necessary modules and create a ContentType object for each model you want to associate with a content type. You can then use the methods provided by the ContentTypeManager to retrieve ContentType objects for your models.\n\n### Input:\n\n\n### Output:\nfrom __future__ import unicode_literals\n\nfrom django.apps import apps\nfrom django.db import models\nfrom django.db.utils import OperationalError, ProgrammingError\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.utils.encoding import force_text\nfrom django.utils.encoding import python_2_unicode_compatible\n\n\nclass ContentTypeManager(models.Manager):\n    use_in_migrations = True\n\n    # Cache to avoid re-looking up ContentType objects all over the place.\n    # This cache is shared by all the get_for_* methods.\n    _cache = {}\n\n    def get_by_natural_key(self, app_label, model):\n        try:\n            ct = self.__class__._cache[self.db][(app_label, model)]\n        except KeyError:\n            ct = self.get(app_label=app_label, model=model)\n            self._add_to_cache(self.db, ct)\n        return ct\n\n    def _get_opts(self, model, for_concrete_model):\n        if for_concrete_model:\n            model = model._meta.concrete_model\n        elif model._deferred:\n            model = model._meta.proxy_for_model\n        return model._meta\n\n    def _get_from_cache(self, opts):\n        key = (opts.app_label, opts.model_name)\n        return self.__class__._cache[self.db][key]\n\n    def get_for_model(self, model, for_concrete_model=True):\n        \"\"\"\n        Returns the ContentType object for a given model, creating the\n        ContentType if necessary. Lookups are cached so that subsequent lookups\n        for the same model don't hit the database.\n        \"\"\"\n        opts = self._get_opts(model, for_concrete_model)\n        try:\n            return self._get_from_cache(opts)\n        except KeyError:\n            pass\n\n        # The ContentType entry was not found in the cache, therefore we\n        # proceed to load or create it.\n        try:\n            # We start with get() and not get_or_create() in order to use\n            # the db_for_read (see #20401).\n            ct = self.get(app_label=opts.app_label, model=opts.model_name)\n        except (OperationalError, ProgrammingError):\n            # It's possible to migrate a single app before contenttypes,\n            # as it's not a required initial dependency (it's contrib!)\n            # Have a nice error for this.\n            raise RuntimeError(\n                \"Error creating new content types. Please make sure contenttypes \"\n                \"is migrated before trying to migrate apps individually.\"\n            )\n        except self.model.DoesNotExist:\n            # Not found in the database; we proceed to create it.  This time we\n            # use get_or_create to take care of any race conditions.\n            ct, created = self.get_or_create(\n                app_label=opts.app_label,\n                model=opts.model_name,\n                defaults={'name': opts.verbose_name_raw},\n            )\n        self._add_to_cache(self.db, ct)\n        return ct\n\n    def get_for_models(self, *models, **kwargs):\n        \"\"\"\n        Given *models, returns a dictionary mapping {model: content_type}.\n        \"\"\"\n        for_concrete_models = kwargs.pop('for_concrete_models', True)\n        # Final results\n        results = {}\n        # models that aren't already in the cache\n        needed_app_labels = set()\n        needed_models = set()\n        needed_opts = set()\n        for model in models:\n            opts = self._get_opts(model, for_concrete_models)\n            try:\n                ct = self._get_from_cache(opts)\n            except KeyError:\n                needed_app_labels.add(opts.app_label)\n                needed_models.add(opts.model_name)\n                needed_opts.add(opts)\n            else:\n                results[model] = ct\n        if needed_opts:\n            cts = self.filter(\n                app_label__in=needed_app_labels,\n                model__in=needed_models\n            )\n            for ct in cts:\n                model = ct.model_class()\n                if model._meta in needed_opts:\n                    results[model] = ct\n                    needed_opts.remove(model._meta)\n                self._add_to_cache(self.db, ct)\n        for opts in needed_opts:\n            # These weren't in the cache, or the DB, create them.\n            ct = self.create(\n                app_label=opts.app_label,\n                model=opts.model_name,\n                name=opts.verbose_name_raw,\n            )\n            self._add_to_cache(self.db, ct)\n            results[ct.model_class()] = ct\n        return results\n\n    def get_for_id(self, id):\n        \"\"\"\n        Lookup a ContentType by ID. Uses the same shared cache as get_for_model\n        (though ContentTypes are obviously not created on-the-fly by get_by_id).\n        \"\"\"\n        try:\n            ct = self.__class__._cache[self.db][id]\n        except KeyError:\n            # This could raise a DoesNotExist; that's correct behavior and will\n            # make sure that only correct ctypes get stored in the cache dict.\n            ct = self.get(pk=id)\n            self._add_to_cache(self.db, ct)\n        return ct\n\n    def clear_cache(self):\n        \"\"\"\n        Clear out the content-type cache. This needs to happen during database\n        flushes to prevent caching of \"stale\" content type IDs (see\n        django.contrib.contenttypes.management.update_contenttypes for where\n        this gets called).\n        \"\"\"\n        self.__class__._cache.clear()\n\n    def _add_to_cache(self, using, ct):\n        \"\"\"Insert a ContentType into the cache.\"\"\"\n        # Note it's possible for ContentType objects to be stale; model_class() will return None.\n        # Hence, there is no reliance on model._meta.app_label here, just using the model fields instead.\n        key = (ct.app_label, ct.model)\n        self.__class__._cache.setdefault(using, {})[key] = ct\n        self.__class__._cache.setdefault(using, {})[ct.id] = ct\n\n\n@python_2_unicode_compatible\nclass ContentType(models.Model):\n    name = models.CharField(max_length=100)\n    app_label = models.CharField(max_length=100)\n    model = models.CharField(_('python model class name'), max_length=100)\n    objects = ContentTypeManager()\n\n    class Meta:\n        verbose_name = _('content type')\n        verbose_name_plural = _('content types')\n        db_table = 'django_content_type'\n        ordering = ('name',)\n        unique_together = (('app_label', 'model'),)\n\n    def __str__(self):\n        # self.name is deprecated in favor of using model's verbose_name, which\n        # can be translated. Formal deprecation is delayed until we have DB\n        # migration to be able to remove the field from the database along with\n        # the attribute.\n        #\n        # We return self.name only when users have changed its value from the\n        # initial verbose_name_raw and might rely on it.\n        model = self.model_class()\n        if not model or self.name != model._meta.verbose_name_raw:\n            return self.name\n        else:\n            return force_text(model._meta.verbose_name)\n\n    def model_class(self):\n        \"Returns the Python model class for this type of content.\"\n        try:\n            return apps.get_model(self.app_label, self.model)\n        except LookupError:\n            return None\n\n    def get_object_for_this_type(self, **kwargs):\n        \"\"\"\n        Returns an object of this type for the keyword arguments given.\n        Basically, this is a proxy around this object_type's get_object() model\n        method. The ObjectNotExist exception, if thrown, will not be caught,\n        so code that calls this method should catch it.\n        \"\"\"\n        return self.model_class()._base_manager.using(self._state.db).get(**kwargs)\n\n    def get_all_objects_for_this_type(self, **kwargs):\n        \"\"\"\n        Returns all objects of this type for the keyword arguments given.\n        \"\"\"\n        return self.model_class()._base_manager.using(self._state.db).filter(**kwargs)\n\n    def natural_key(self):\n        return (self.app_label, self.model)\n"
    },
    {
        "instruction": "Create a Python script to make an API request to an online store's API. The script should query for all available products, and print a summary of the results.",
        "input": "Not applicable",
        "output": "import requests\n \n# Make an API request\nurl = 'https://example.com/api/products'\ndata = requests.get(url).json()\n \n# Show results\nprint('Available Products')\nfor item in data['products']:\n    print(f'{item[\"name\"]} - {item[\"price\"]}')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to make an API request to an online store's API. The script should query for all available products, and print a summary of the results.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\n \n# Make an API request\nurl = 'https://example.com/api/products'\ndata = requests.get(url).json()\n \n# Show results\nprint('Available Products')\nfor item in data['products']:\n    print(f'{item[\"name\"]} - {item[\"price\"]}')"
    },
    {
        "instruction": "Convert this SQL query to Python.",
        "input": "SELECT *\nFROM customers\nWHERE customer_name LIKE '%John%'",
        "output": "import pydb\n\ndef query_customer_name(name):\n    query = \"\"\"\n    SELECT *\n    FROM customers\n    WHERE customer_name LIKE %s\"\"\"\n    name_wildcard = '%' + name + '%'\n    query_result = pydb.query(query, name_wildcard)\n    return query_result\n    \nif __name__ == '__main__':\n    query_customer_name('John')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert this SQL query to Python.\n\n### Input:\nSELECT *\nFROM customers\nWHERE customer_name LIKE '%John%'\n\n### Output:\nimport pydb\n\ndef query_customer_name(name):\n    query = \"\"\"\n    SELECT *\n    FROM customers\n    WHERE customer_name LIKE %s\"\"\"\n    name_wildcard = '%' + name + '%'\n    query_result = pydb.query(query, name_wildcard)\n    return query_result\n    \nif __name__ == '__main__':\n    query_customer_name('John')"
    },
    {
        "instruction": "Create a Python program that takes in a list of strings and prints out the items that appear more than once.",
        "input": "[\"red\", \"green\", \"blue\", \"red\", \"yellow\"]",
        "output": "from collections import Counter\n\ndef duplicates(items):\n    c = Counter(items)\n    for k, v in c.items():\n        if v > 1:\n            print(k)\n\nitems = [\"red\", \"green\", \"blue\", \"red\", \"yellow\"]\nduplicates(items)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes in a list of strings and prints out the items that appear more than once.\n\n### Input:\n[\"red\", \"green\", \"blue\", \"red\", \"yellow\"]\n\n### Output:\nfrom collections import Counter\n\ndef duplicates(items):\n    c = Counter(items)\n    for k, v in c.items():\n        if v > 1:\n            print(k)\n\nitems = [\"red\", \"green\", \"blue\", \"red\", \"yellow\"]\nduplicates(items)"
    },
    {
        "instruction": "Write a Python function for encrypting a string of plaintext.",
        "input": "plaintext = \"Hello World!\"",
        "output": "import base64\nfrom cryptography.fernet import Fernet\n\ndef encrypt(plaintext):\n key = Fernet.generate_key()\n f = Fernet(key)\n encrypted_data = f.encrypt(plaintext.encode())\n return base64.b64encode(encrypted_data)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function for encrypting a string of plaintext.\n\n### Input:\nplaintext = \"Hello World!\"\n\n### Output:\nimport base64\nfrom cryptography.fernet import Fernet\n\ndef encrypt(plaintext):\n key = Fernet.generate_key()\n f = Fernet(key)\n encrypted_data = f.encrypt(plaintext.encode())\n return base64.b64encode(encrypted_data)"
    },
    {
        "instruction": "Write a function in Python to validate a given email address given strings of type \"email@example.com\".",
        "input": "Not applicable",
        "output": "import re\n\ndef validate_email(email):\n regex = '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n if(re.search(regex,email)): \n  return True\n else:  \n  return False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to validate a given email address given strings of type \"email@example.com\".\n\n### Input:\nNot applicable\n\n### Output:\nimport re\n\ndef validate_email(email):\n regex = '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n if(re.search(regex,email)): \n  return True\n else:  \n  return False"
    },
    {
        "instruction": "Create a Python program to remove all trailing zeroes from a given number.",
        "input": "123.4500",
        "output": "def remove_trailing_zeros(num): \n  num = str(num) \n  return float(num.rstrip('0').rstrip('.')) \n  \nresult = remove_trailing_zeros(123.4500) \nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to remove all trailing zeroes from a given number.\n\n### Input:\n123.4500\n\n### Output:\ndef remove_trailing_zeros(num): \n  num = str(num) \n  return float(num.rstrip('0').rstrip('.')) \n  \nresult = remove_trailing_zeros(123.4500) \nprint(result)"
    },
    {
        "instruction": "Write a Python program to assign every character in a given string a unique number (e.g. a=1, b=2, c=3 and so on).",
        "input": "string = \"Hello, World!\"",
        "output": "char_dictionary = {}\n\ncounter = 1\n\nfor char in string:\n if char in char_dictionary.keys():\n continue\n else:\n char_dictionary[char] = counter\n counter += 1\n\nprint(char_dictionary)\n# Output: {'H': 1, 'e': 2, 'l': 3, 'o': 4, ', ': 5, 'W': 6, 'r': 7, 'd': 8, '!': 9}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to assign every character in a given string a unique number (e.g. a=1, b=2, c=3 and so on).\n\n### Input:\nstring = \"Hello, World!\"\n\n### Output:\nchar_dictionary = {}\n\ncounter = 1\n\nfor char in string:\n if char in char_dictionary.keys():\n continue\n else:\n char_dictionary[char] = counter\n counter += 1\n\nprint(char_dictionary)\n# Output: {'H': 1, 'e': 2, 'l': 3, 'o': 4, ', ': 5, 'W': 6, 'r': 7, 'd': 8, '!': 9}"
    },
    {
        "instruction": "Omit any incomplete code from a given Python program by supplying correct expressions and indentation.",
        "input": "if \n  a<20:\n  b = c \n   c = b",
        "output": "if a < 20:\n    b = c\n    c = b",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOmit any incomplete code from a given Python program by supplying correct expressions and indentation.\n\n### Input:\nif \n  a<20:\n  b = c \n   c = b\n\n### Output:\nif a < 20:\n    b = c\n    c = b"
    },
    {
        "instruction": "Vectorize a given Python function using the Numpy library",
        "input": "def add_lists(list1, list2):\n    result = []\n\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n        \n    return result",
        "output": "\"\"\"\nVectorized version of the add_lists function using Numpy library\n\"\"\"\n\nimport numpy as np\n\ndef np_add_lists(list1, list2):\n    # Convert the lists to Numpy arrays\n    array1 = np.array(list1)\n    array2 = np.array(list2)\n\n    # Perform the element-wise addition\n    result = array1 + array2\n    \n    # Return the result as a list\n    return list(result)\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = [4, 5, 6]\n    print(np_add_lists(list1, list2))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nVectorize a given Python function using the Numpy library\n\n### Input:\ndef add_lists(list1, list2):\n    result = []\n\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n        \n    return result\n\n### Output:\n\"\"\"\nVectorized version of the add_lists function using Numpy library\n\"\"\"\n\nimport numpy as np\n\ndef np_add_lists(list1, list2):\n    # Convert the lists to Numpy arrays\n    array1 = np.array(list1)\n    array2 = np.array(list2)\n\n    # Perform the element-wise addition\n    result = array1 + array2\n    \n    # Return the result as a list\n    return list(result)\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = [4, 5, 6]\n    print(np_add_lists(list1, list2))"
    },
    {
        "instruction": "Design a Python program for generating a random alphanumeric string",
        "input": "",
        "output": "import random\nimport string\n\ndef generateRandomString(stringLength=8):\n    lettersAndDigits = string.ascii_letters + string.digits\n    return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))\n\nprint (\"Random alphanumeric string is:\", generateRandomString())",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program for generating a random alphanumeric string\n\n### Input:\n\n\n### Output:\nimport random\nimport string\n\ndef generateRandomString(stringLength=8):\n    lettersAndDigits = string.ascii_letters + string.digits\n    return ''.join(random.choice(lettersAndDigits) for i in range(stringLength))\n\nprint (\"Random alphanumeric string is:\", generateRandomString())"
    },
    {
        "instruction": "Write a Python program to calculate the harmonic mean of three numbers.",
        "input": "",
        "output": "def harmonic_mean(x, y, z):\n return 3/((1/x + 1/y + 1/z))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the harmonic mean of three numbers.\n\n### Input:\n\n\n### Output:\ndef harmonic_mean(x, y, z):\n return 3/((1/x + 1/y + 1/z))"
    },
    {
        "instruction": "Generate a program in Python which takes a list of integers as an argument and prints the odd numbers in ascending order.",
        "input": "list = [1, 2, 3, 4, 5, 6, 7]",
        "output": "def print_odd_numbers(numbers):\n    for num in sorted(numbers):\n        if num % 2 != 0:\n            print(num)\n\nprint_odd_numbers([1, 2, 3, 4, 5, 6, 7])\n# Output: 1, 3, 5, 7",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python which takes a list of integers as an argument and prints the odd numbers in ascending order.\n\n### Input:\nlist = [1, 2, 3, 4, 5, 6, 7]\n\n### Output:\ndef print_odd_numbers(numbers):\n    for num in sorted(numbers):\n        if num % 2 != 0:\n            print(num)\n\nprint_odd_numbers([1, 2, 3, 4, 5, 6, 7])\n# Output: 1, 3, 5, 7"
    },
    {
        "instruction": "Write a Python program to convert a string to a list of characters.",
        "input": "String \"Hello\".",
        "output": "def str_to_list(str):\n    char_list = []\n    for c in str:\n        char_list.append(c)\n    return char_list\n\nprint(str_to_list(\"Hello\")) #prints ['H', 'e', 'l', 'l', 'o']",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a string to a list of characters.\n\n### Input:\nString \"Hello\".\n\n### Output:\ndef str_to_list(str):\n    char_list = []\n    for c in str:\n        char_list.append(c)\n    return char_list\n\nprint(str_to_list(\"Hello\")) #prints ['H', 'e', 'l', 'l', 'o']"
    },
    {
        "instruction": "Write a Python function that takes three numbers as arguments and returns the maximum value.",
        "input": "2, 5, 3",
        "output": "def max_val(a, b, c):\n    if (a > b and a > c): \n        return a\n    elif (b > a and b > c):\n        return b\n    else: \n        return c\n\nresult = max_val(2, 5, 3)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes three numbers as arguments and returns the maximum value.\n\n### Input:\n2, 5, 3\n\n### Output:\ndef max_val(a, b, c):\n    if (a > b and a > c): \n        return a\n    elif (b > a and b > c):\n        return b\n    else: \n        return c\n\nresult = max_val(2, 5, 3)\nprint(result)"
    },
    {
        "instruction": "Write a Python program to find the two smallest elements in a given array.",
        "input": "array = [4, 7, 2, 9, 1.5, 8]",
        "output": "def findSmallest(array):\n    smallest = array[0]\n    smallest_2 = array[1]\n\n    for i in range(2, len(array)):\n        if array[i] <= smallest:\n            smallest_2 = smallest\n            smallest = array[i]\n        elif array[i] < smallest_2:\n            smallest_2 = array[i]\n\n    return (smallest, smallest_2)\n\narray = [4, 7, 2, 9, 1.5, 8]\n\nprint(findSmallest(array))\n\n# Output: (1.5, 2)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the two smallest elements in a given array.\n\n### Input:\narray = [4, 7, 2, 9, 1.5, 8]\n\n### Output:\ndef findSmallest(array):\n    smallest = array[0]\n    smallest_2 = array[1]\n\n    for i in range(2, len(array)):\n        if array[i] <= smallest:\n            smallest_2 = smallest\n            smallest = array[i]\n        elif array[i] < smallest_2:\n            smallest_2 = array[i]\n\n    return (smallest, smallest_2)\n\narray = [4, 7, 2, 9, 1.5, 8]\n\nprint(findSmallest(array))\n\n# Output: (1.5, 2)"
    },
    {
        "instruction": "Generate a Python program that takes an integer N and outputs the sum of 1 to N.",
        "input": "",
        "output": "def sum_1_to_n(n):\n  sum = 0\n  for i in range(1, n+1):\n    sum += i\n  return sum",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that takes an integer N and outputs the sum of 1 to N.\n\n### Input:\n\n\n### Output:\ndef sum_1_to_n(n):\n  sum = 0\n  for i in range(1, n+1):\n    sum += i\n  return sum"
    },
    {
        "instruction": "To use property decorators in Python, define a class with a method that has the @property decorator, and return the desired value from that method. This will allow users to access the value as if it were an attribute of the class, without needing to make any additional changes to their code.",
        "input": "",
        "output": "#This shows the usage of property decorators\n\n#Python @property is one of the built-in decorators. The main purpose of any decorator is to change your class methods or attributes in such a way so that the users neeed not make any additional changes in their code.\n\n#Without property decorators\n\nclass BankAccount:\n    def __init__(self,name,balance):\n        self.name=name\n        self.balance=balance\n        self.total= self.name+ \" has \"+self.balance+ \" dollars in the account\"\n\nuser1=BankAccount(\"Elon Musk\",\"10000\")\nuser1.name=\"Tim cook\"\nprint(user1.name)\nprint(user1.total)\n\n# Output: Tim cook\n#         Elon Musk has 10000 dollars in the account\n\n\n#With property decorators\n\nclass BankAccount:\n    def __init__(self,name,balance):\n        self.name=name\n        self.balance=balance\n    @property\n    def total(self):\n        return self.name+ \" has \"+self.balance+ \" dollars in the account\"\n\nuser1=BankAccount(\"Elon Musk\",\"10000\")\nuser1.name=\"Tim cook\"\nprint(user1.name)\nprint(user1.total)\n\n#Output: Tim cook\n#        Tim cook has 10000 dollars in the account\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTo use property decorators in Python, define a class with a method that has the @property decorator, and return the desired value from that method. This will allow users to access the value as if it were an attribute of the class, without needing to make any additional changes to their code.\n\n### Input:\n\n\n### Output:\n#This shows the usage of property decorators\n\n#Python @property is one of the built-in decorators. The main purpose of any decorator is to change your class methods or attributes in such a way so that the users neeed not make any additional changes in their code.\n\n#Without property decorators\n\nclass BankAccount:\n    def __init__(self,name,balance):\n        self.name=name\n        self.balance=balance\n        self.total= self.name+ \" has \"+self.balance+ \" dollars in the account\"\n\nuser1=BankAccount(\"Elon Musk\",\"10000\")\nuser1.name=\"Tim cook\"\nprint(user1.name)\nprint(user1.total)\n\n# Output: Tim cook\n#         Elon Musk has 10000 dollars in the account\n\n\n#With property decorators\n\nclass BankAccount:\n    def __init__(self,name,balance):\n        self.name=name\n        self.balance=balance\n    @property\n    def total(self):\n        return self.name+ \" has \"+self.balance+ \" dollars in the account\"\n\nuser1=BankAccount(\"Elon Musk\",\"10000\")\nuser1.name=\"Tim cook\"\nprint(user1.name)\nprint(user1.total)\n\n#Output: Tim cook\n#        Tim cook has 10000 dollars in the account\n"
    },
    {
        "instruction": "Evaluate a given mathematical expression using Python.",
        "input": "2 + (3 * 5)",
        "output": "def eval_expr(expr):\n  return eval(expr)\n\nprint(eval_expr(\"2 + (3 * 5)\"))\n\n# Output\n# 17",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEvaluate a given mathematical expression using Python.\n\n### Input:\n2 + (3 * 5)\n\n### Output:\ndef eval_expr(expr):\n  return eval(expr)\n\nprint(eval_expr(\"2 + (3 * 5)\"))\n\n# Output\n# 17"
    },
    {
        "instruction": "Which of the following options is the best way to declare a constant variable in Python?",
        "input": "",
        "output": "The best way to declare a constant variable in Python is by using the `const` keyword. For example:\n\n```\nconst MAX_VAL = 100\n```",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhich of the following options is the best way to declare a constant variable in Python?\n\n### Input:\n\n\n### Output:\nThe best way to declare a constant variable in Python is by using the `const` keyword. For example:\n\n```\nconst MAX_VAL = 100\n```"
    },
    {
        "instruction": "Generate Python code to calculate the average of a given list of numbers.",
        "input": "",
        "output": "def calc_avg(nums):\n    total = 0\n    for item in nums:\n        total += item\n    avg = total / len(nums)\n    return avg",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to calculate the average of a given list of numbers.\n\n### Input:\n\n\n### Output:\ndef calc_avg(nums):\n    total = 0\n    for item in nums:\n        total += item\n    avg = total / len(nums)\n    return avg"
    },
    {
        "instruction": "Generate a Python program to insert an element into a given sorted array.",
        "input": "The sorted array is [1, 2, 3, 5] and the new element is 4.",
        "output": "def insert(arr, x):\n    i = len(arr)-1\n    while (i >= 0 and x < arr[i]):\n        arr[i+1] = arr[i]\n        i = i-1\n    arr[i+1] = x\n    return arr\n  \n# Input array and element \narr = [1, 2, 3, 5] \nx = 4\n  \n# Calling Insert Function \narr = insert(arr, x) \n  \n# Print the modified array \nprint(arr)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to insert an element into a given sorted array.\n\n### Input:\nThe sorted array is [1, 2, 3, 5] and the new element is 4.\n\n### Output:\ndef insert(arr, x):\n    i = len(arr)-1\n    while (i >= 0 and x < arr[i]):\n        arr[i+1] = arr[i]\n        i = i-1\n    arr[i+1] = x\n    return arr\n  \n# Input array and element \narr = [1, 2, 3, 5] \nx = 4\n  \n# Calling Insert Function \narr = insert(arr, x) \n  \n# Print the modified array \nprint(arr)"
    },
    {
        "instruction": "Create a REST API endpoint in Python that takes a text input and returns a list of the most frequent words.",
        "input": "Not applicable",
        "output": "import re\nfrom collections import Counter\n\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/api/frequent_words', methods=['POST'])\ndef frequent_words():\n    text = request.json['text']\n    words = re.findall(r'\\w+', text.lower())\n    count = Counter(words).most_common(10)\n    return jsonify(count)\n\nif __name__ == '__main__':\n    app.run()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a REST API endpoint in Python that takes a text input and returns a list of the most frequent words.\n\n### Input:\nNot applicable\n\n### Output:\nimport re\nfrom collections import Counter\n\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/api/frequent_words', methods=['POST'])\ndef frequent_words():\n    text = request.json['text']\n    words = re.findall(r'\\w+', text.lower())\n    count = Counter(words).most_common(10)\n    return jsonify(count)\n\nif __name__ == '__main__':\n    app.run()"
    },
    {
        "instruction": "Write a Python program to turn a string into Pig Latin.",
        "input": "string = \"Hello World\"",
        "output": "def toPigLatin(s):\n   vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n   if s[0] in vowels:\n      return s + 'way'\n   else:\n      return s[1:] + s[0] + 'ay'\n      \nprint(toPigLatin(\"Hello World\"))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to turn a string into Pig Latin.\n\n### Input:\nstring = \"Hello World\"\n\n### Output:\ndef toPigLatin(s):\n   vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n   if s[0] in vowels:\n      return s + 'way'\n   else:\n      return s[1:] + s[0] + 'ay'\n      \nprint(toPigLatin(\"Hello World\"))"
    },
    {
        "instruction": "Implement the A* algorithm in Python to find a path from a starting position to a goal.",
        "input": "start_position = (1, 1)  \ngoal_position = (5, 5)  \nobstacles = [(2, 2), (3, 3)]",
        "output": "def get_valid_neighbors(current_position):\n neighbors = []\n x, y = current_position\n moves = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n \n for move in moves:\n new_x = x + move[0]\n new_y = y + move[1]\n \n if (0 <= new_x < GRID_SIZE) and (0 <= new_y < GRID_SIZE) and (new_x, new_y) not in obstacles:\n neighbors.append((new_x, new_y))\n \n return neighbors\n \ndef reconstruct_path(current_node):\n path = []\n \n while current_node is not None:\n current_node = parents[current_node]\n if current_node is not None:\n path.append(current_node)\n \n return path\n\n\ndef a_star(start_position, goal_position, obstacles):\n parents = {}\n visited = set() \n open_set = set()\n open_set.add(start_position)\n\n while open_set:\n current_position = min(open_set, key=lambda pos: heuristic(pos, goal_position))\n visited.add(current_position)\n\n if current_position == goal_position:\n return reconstruct_path(current_position)\n\n for neighbor in get_valid_neighbors(current_position):\n gScore = current_position[0] + 1 \n if neighbor in open_set:\n if gScore < gScore[neighbor]: \n parents[neighbor] = current_position \n else:\n open_set.add(neighbor)\n parents[neighbor] = current_position\n \n return None",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement the A* algorithm in Python to find a path from a starting position to a goal.\n\n### Input:\nstart_position = (1, 1)  \ngoal_position = (5, 5)  \nobstacles = [(2, 2), (3, 3)]\n\n### Output:\ndef get_valid_neighbors(current_position):\n neighbors = []\n x, y = current_position\n moves = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n \n for move in moves:\n new_x = x + move[0]\n new_y = y + move[1]\n \n if (0 <= new_x < GRID_SIZE) and (0 <= new_y < GRID_SIZE) and (new_x, new_y) not in obstacles:\n neighbors.append((new_x, new_y))\n \n return neighbors\n \ndef reconstruct_path(current_node):\n path = []\n \n while current_node is not None:\n current_node = parents[current_node]\n if current_node is not None:\n path.append(current_node)\n \n return path\n\n\ndef a_star(start_position, goal_position, obstacles):\n parents = {}\n visited = set() \n open_set = set()\n open_set.add(start_position)\n\n while open_set:\n current_position = min(open_set, key=lambda pos: heuristic(pos, goal_position))\n visited.add(current_position)\n\n if current_position == goal_position:\n return reconstruct_path(current_position)\n\n for neighbor in get_valid_neighbors(current_position):\n gScore = current_position[0] + 1 \n if neighbor in open_set:\n if gScore < gScore[neighbor]: \n parents[neighbor] = current_position \n else:\n open_set.add(neighbor)\n parents[neighbor] = current_position\n \n return None"
    },
    {
        "instruction": "Split the Python code below into simpler functions.",
        "input": "def add_two_numbers(a, b):\n  c = a + b\n  d = a * b\n  return c, d",
        "output": "# Function to add two numbers\ndef add_two_numbers(a, b):\n  return a + b\n\n# Function to multiply two numbers\ndef multiply_two_numbers(a, b):\n  return a * b\n\n# Function to return the sum and product of two numbers\ndef sum_and_product(a, b):\n  c = add_two_numbers(a, b)\n  d = multiply_two_numbers(a, b)\n  return c, d",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSplit the Python code below into simpler functions.\n\n### Input:\ndef add_two_numbers(a, b):\n  c = a + b\n  d = a * b\n  return c, d\n\n### Output:\n# Function to add two numbers\ndef add_two_numbers(a, b):\n  return a + b\n\n# Function to multiply two numbers\ndef multiply_two_numbers(a, b):\n  return a * b\n\n# Function to return the sum and product of two numbers\ndef sum_and_product(a, b):\n  c = add_two_numbers(a, b)\n  d = multiply_two_numbers(a, b)\n  return c, d"
    },
    {
        "instruction": "Generate a Python program to return the index of the last occurrence of an item in a given list",
        "input": "",
        "output": "def last_occurrence(arr, item):\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i] == item:\n            return i\n    return -1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to return the index of the last occurrence of an item in a given list\n\n### Input:\n\n\n### Output:\ndef last_occurrence(arr, item):\n    for i in range(len(arr)-1,-1,-1):\n        if arr[i] == item:\n            return i\n    return -1"
    },
    {
        "instruction": "Create a basic REST API endpoint with Python's Flask-Restful library that returns the sum of two numbers when the endpoint is visited.",
        "input": "Not applicable",
        "output": "from flask import Flask\nfrom flask_restful import Resource, Api\n\napp = Flask(__name__)\napi = Api(app)\n\nclass Sum(Resource):\n def get(self, a, b):\n return {'sum': a + b}\n\napi.add_resource(Sum, '/sum/<int:a>/<int:b>')\n\nif __name__ == '__main__':\n app.run()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic REST API endpoint with Python's Flask-Restful library that returns the sum of two numbers when the endpoint is visited.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask\nfrom flask_restful import Resource, Api\n\napp = Flask(__name__)\napi = Api(app)\n\nclass Sum(Resource):\n def get(self, a, b):\n return {'sum': a + b}\n\napi.add_resource(Sum, '/sum/<int:a>/<int:b>')\n\nif __name__ == '__main__':\n app.run()"
    },
    {
        "instruction": "Create a program in Python that takes two lists and checks for common elements between them.",
        "input": "list1 = [1,2,3,4]\nlist2 = [3,4,5,6]",
        "output": "list1 = [1,2,3,4]\nlist2 = [3,4,5,6] \n\ndef check_common(list1, list2): \n    result = False\n    for x in list1: \n        for y in list2: \n            if x == y: \n                result = True\n                return result  \n    return result \n  \nprint(check_common(list1, list2))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes two lists and checks for common elements between them.\n\n### Input:\nlist1 = [1,2,3,4]\nlist2 = [3,4,5,6]\n\n### Output:\nlist1 = [1,2,3,4]\nlist2 = [3,4,5,6] \n\ndef check_common(list1, list2): \n    result = False\n    for x in list1: \n        for y in list2: \n            if x == y: \n                result = True\n                return result  \n    return result \n  \nprint(check_common(list1, list2))"
    },
    {
        "instruction": "Create a ML pipeline using Python to predict the sentiment of a given sentence.",
        "input": "Not applicable",
        "output": "import numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\n\n# load data\ntrain_data = [{'text': 'good morning', 'sentiment': 'positive'}, {'text': 'bad news', 'sentiment': 'negative'}] \n\n# process data\nX_train = np.array([x['text'] for x in train_data]) \ny_train = np.array([x['sentiment'] for x in train_data])\n\n# tokenize words\ntokenizer = Tokenizer(num_words=1000) \ntokenizer.fit_on_texts(X_train) \nX_train = tokenizer.texts_to_sequences(X_train) \nX_train = pad_sequences(X_train, padding='post', maxlen=64) \n\n# create model\nmodel = Sequential([\n Embedding(input_dim=1000, output_dim=128, input_length=64), \n Bidirectional(LSTM(128)), \n Dense(128, activation='relu'), \n Dense(2, activation='softmax') \n]) \n\n# compile model\nmodel.compile(\n optimizer=Adam(learning_rate=0.001), \n loss='sparse_categorical_crossentropy', \n metrics=['accuracy']\n)\n\n# fit model\nmodel.fit(X_train, y_train, epochs=10, batch_size=32)\n\n# evaluate\nloss, accuracy = model.evaluate(X_train, y_train)\nprint('Accuracy: %f' % (accuracy*100))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a ML pipeline using Python to predict the sentiment of a given sentence.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\n\n# load data\ntrain_data = [{'text': 'good morning', 'sentiment': 'positive'}, {'text': 'bad news', 'sentiment': 'negative'}] \n\n# process data\nX_train = np.array([x['text'] for x in train_data]) \ny_train = np.array([x['sentiment'] for x in train_data])\n\n# tokenize words\ntokenizer = Tokenizer(num_words=1000) \ntokenizer.fit_on_texts(X_train) \nX_train = tokenizer.texts_to_sequences(X_train) \nX_train = pad_sequences(X_train, padding='post', maxlen=64) \n\n# create model\nmodel = Sequential([\n Embedding(input_dim=1000, output_dim=128, input_length=64), \n Bidirectional(LSTM(128)), \n Dense(128, activation='relu'), \n Dense(2, activation='softmax') \n]) \n\n# compile model\nmodel.compile(\n optimizer=Adam(learning_rate=0.001), \n loss='sparse_categorical_crossentropy', \n metrics=['accuracy']\n)\n\n# fit model\nmodel.fit(X_train, y_train, epochs=10, batch_size=32)\n\n# evaluate\nloss, accuracy = model.evaluate(X_train, y_train)\nprint('Accuracy: %f' % (accuracy*100))"
    },
    {
        "instruction": "Create a Python program to generate random passwords that contains numbers, alphabets (upper and lower) and special characters",
        "input": "",
        "output": "import random\n \n# define string of all characters\nstring = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+~<>?'\n \n# specify length of random password\nlength = 8\n \n# generate random password\nrandom_password = \"\"\nfor i in range(length):\n    random_password = random_password + random.choice(string)\n\nprint(random_password)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate random passwords that contains numbers, alphabets (upper and lower) and special characters\n\n### Input:\n\n\n### Output:\nimport random\n \n# define string of all characters\nstring = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+~<>?'\n \n# specify length of random password\nlength = 8\n \n# generate random password\nrandom_password = \"\"\nfor i in range(length):\n    random_password = random_password + random.choice(string)\n\nprint(random_password)"
    },
    {
        "instruction": "Write a Python code snippet to find the words which are at least 4 characters long in a given string.",
        "input": "string = \"This is a sample sentence\"",
        "output": "def find_words(string):\n    words = string.split()\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code snippet to find the words which are at least 4 characters long in a given string.\n\n### Input:\nstring = \"This is a sample sentence\"\n\n### Output:\ndef find_words(string):\n    words = string.split()\n    result = []\n    for word in words:\n        if len(word) >= 4:\n            result.append(word)\n    return result"
    },
    {
        "instruction": "Given a list of numbers, write a Python program to compute the average of all numbers.",
        "input": "[10, 20, 45, 60]",
        "output": "def compute_average(numbers):\n sum = 0\n for number in numbers:\n sum += number\n return sum/len(numbers)\n\nnumbers = [10, 20, 45, 60]\nresult = compute_average(numbers)\nprint(result)\n\n# Output:\n31.25",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of numbers, write a Python program to compute the average of all numbers.\n\n### Input:\n[10, 20, 45, 60]\n\n### Output:\ndef compute_average(numbers):\n sum = 0\n for number in numbers:\n sum += number\n return sum/len(numbers)\n\nnumbers = [10, 20, 45, 60]\nresult = compute_average(numbers)\nprint(result)\n\n# Output:\n31.25"
    },
    {
        "instruction": "Generate a complete machine learning pipeline code in Python given some inputs.",
        "input": "Dataset (CSV Format): \n-Features: Loan_amount, Interest_Rate, Loan_Duration\n- Target Variable: Loan_Status (0 or 1)",
        "output": "# Imports\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline\nimport pandas as pd\n\n# Data Loading\ndata = pd.read_csv('loan_data.csv')\n\n# Feature and Target Variable\nX = data.drop('Loan_Status', axis=1)\ny = data['Loan_Status']\n\n# Preprocessors and Estimator in the pipeline\npreprocessors = [\n        ('imputer', SimpleImputer(strategy='mean')),\n        ('scaler', MinMaxScaler())\n    ]\n\npipeline = Pipeline([\n    ('transformer', ColumnTransformer(transformers=preprocessors)),\n    ('estimator', LogisticRegression())\n])\n\n# Fitting the model\npipeline.fit(X, y)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a complete machine learning pipeline code in Python given some inputs.\n\n### Input:\nDataset (CSV Format): \n-Features: Loan_amount, Interest_Rate, Loan_Duration\n- Target Variable: Loan_Status (0 or 1)\n\n### Output:\n# Imports\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline\nimport pandas as pd\n\n# Data Loading\ndata = pd.read_csv('loan_data.csv')\n\n# Feature and Target Variable\nX = data.drop('Loan_Status', axis=1)\ny = data['Loan_Status']\n\n# Preprocessors and Estimator in the pipeline\npreprocessors = [\n        ('imputer', SimpleImputer(strategy='mean')),\n        ('scaler', MinMaxScaler())\n    ]\n\npipeline = Pipeline([\n    ('transformer', ColumnTransformer(transformers=preprocessors)),\n    ('estimator', LogisticRegression())\n])\n\n# Fitting the model\npipeline.fit(X, y)"
    },
    {
        "instruction": "Create a function in Python that takes 2 numbers as parameters and returns their sum.",
        "input": "",
        "output": "def add(a, b):\n    return a + b",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes 2 numbers as parameters and returns their sum.\n\n### Input:\n\n\n### Output:\ndef add(a, b):\n    return a + b"
    },
    {
        "instruction": "Create a Python program to convert a given number in binary.",
        "input": "9",
        "output": "def binary_converter(num):\n    # to convert to binary base\n    base = 2\n    # initializing result as empty string\n    result = \"\"\n\n    while(num > 0):\n        # get the remainder when divided by base\n        rem = num % base\n        # add it to the result\n        result += str(rem)\n        # divide the number by base\n        num = num//base\n\n    # reverse the string\n    result = result[::-1]\n    return result\n\nnum = 9\nprint(binary_converter(num))\n\n// Output: 1001",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to convert a given number in binary.\n\n### Input:\n9\n\n### Output:\ndef binary_converter(num):\n    # to convert to binary base\n    base = 2\n    # initializing result as empty string\n    result = \"\"\n\n    while(num > 0):\n        # get the remainder when divided by base\n        rem = num % base\n        # add it to the result\n        result += str(rem)\n        # divide the number by base\n        num = num//base\n\n    # reverse the string\n    result = result[::-1]\n    return result\n\nnum = 9\nprint(binary_converter(num))\n\n// Output: 1001"
    },
    {
        "instruction": "Create a program that implements a basic spell checker using a dictionary in Python.",
        "input": "Dictionary Words:\napple, banana, orange",
        "output": "# Function to check the spelling of a word\ndef spell_checker(word, dictionary):\n  # Convert the word to lowercase\n  word = word.lower()\n\n  # Return True if the word is in the dictionary, False otherwise\n  if word in dictionary:\n    return True\n  else:\n    return False\n\n# Test\ndictionary = ['apple', 'banana', 'orange']\n\nword1 = 'Apple'\nprint(spell_checker(word1, dictionary))\n\nword2 = 'Baboon'\nprint(spell_checker(word2, dictionary))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that implements a basic spell checker using a dictionary in Python.\n\n### Input:\nDictionary Words:\napple, banana, orange\n\n### Output:\n# Function to check the spelling of a word\ndef spell_checker(word, dictionary):\n  # Convert the word to lowercase\n  word = word.lower()\n\n  # Return True if the word is in the dictionary, False otherwise\n  if word in dictionary:\n    return True\n  else:\n    return False\n\n# Test\ndictionary = ['apple', 'banana', 'orange']\n\nword1 = 'Apple'\nprint(spell_checker(word1, dictionary))\n\nword2 = 'Baboon'\nprint(spell_checker(word2, dictionary))"
    },
    {
        "instruction": "Write a Python program to create a 1D array of random numbers from 1 to 100.",
        "input": "5",
        "output": "import random\n\n# Create a 1-dimensional array of size 5\narray = [0] * 5\n\n# Fill the array with random numbers\nfor i in range(len(array)):\n array[i] = random.randint(1,100)\n\nprint(array)\n\n# Output:\n# [83, 5, 46, 69, 89]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a 1D array of random numbers from 1 to 100.\n\n### Input:\n5\n\n### Output:\nimport random\n\n# Create a 1-dimensional array of size 5\narray = [0] * 5\n\n# Fill the array with random numbers\nfor i in range(len(array)):\n array[i] = random.randint(1,100)\n\nprint(array)\n\n# Output:\n# [83, 5, 46, 69, 89]"
    },
    {
        "instruction": "Create a Python function that takes in two strings and returns True if they are anagrams (they contain the same letters).",
        "input": "string1 = \"pizza\"\nstring2 = \"appaiz\"",
        "output": "def isAnagram(string1, string2):\n s1 = sorted(string1.lower())\n s2 = sorted(string2.lower())\n\n if s1 == s2:\n return True\n else:\n return False\n\nstring1 = \"pizza\";\nstring2 = \"appaiz\";\n\nisAnagram(string1, string2); // True",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes in two strings and returns True if they are anagrams (they contain the same letters).\n\n### Input:\nstring1 = \"pizza\"\nstring2 = \"appaiz\"\n\n### Output:\ndef isAnagram(string1, string2):\n s1 = sorted(string1.lower())\n s2 = sorted(string2.lower())\n\n if s1 == s2:\n return True\n else:\n return False\n\nstring1 = \"pizza\";\nstring2 = \"appaiz\";\n\nisAnagram(string1, string2); // True"
    },
    {
        "instruction": "Design a reinforcement learning agent for a given game using Python.",
        "input": "A game description.",
        "output": "import numpy as np \n\n# Create the agent class\nclass ReinforcementLearningAgent:\n    def __init__(self, environment, alpha=0.1, gamma=0.9):\n        self.env = environment \n        self.q_table = np.zeros(self.env.state_space + (self.env.action_space,))\n        self.alpha = alpha \n        self.gamma = gamma\n\n    def get_best_action(self, state):\n        return np.argmax(self.q_table[state])\n\n    def update_q_table(self, state, action, next_state, reward):\n        q_update = reward + self.gamma * np.max(self.q_table[next_state]) - self.q_table[state][action]\n        self.q_table[state][action] += self.alpha * q_update",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a reinforcement learning agent for a given game using Python.\n\n### Input:\nA game description.\n\n### Output:\nimport numpy as np \n\n# Create the agent class\nclass ReinforcementLearningAgent:\n    def __init__(self, environment, alpha=0.1, gamma=0.9):\n        self.env = environment \n        self.q_table = np.zeros(self.env.state_space + (self.env.action_space,))\n        self.alpha = alpha \n        self.gamma = gamma\n\n    def get_best_action(self, state):\n        return np.argmax(self.q_table[state])\n\n    def update_q_table(self, state, action, next_state, reward):\n        q_update = reward + self.gamma * np.max(self.q_table[next_state]) - self.q_table[state][action]\n        self.q_table[state][action] += self.alpha * q_update"
    },
    {
        "instruction": "Create a machine learning model in Python to predict whether a stock will rise or fall based on its previous day close price.",
        "input": "```\nsample_input_data = [#Previous day close values\n\t\t\t\t\t\t803.14, \n\t\t\t\t\t\t671.3, \n\t\t\t\t\t\t772.53, \n\t\t\t\t\t\t662.16, \n\t\t\t\t\t\t707.08\n\t\t\t\t\t\t]\n```",
        "output": "import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Prepare data\ndf = pd.DataFrame(sample_input_data)\ndf['Target'] = np.where(df.shift(-1) > df, 'Increase', 'Decrease')\n\nX = df.iloc[:, 0:-1]\ny = df.iloc[:, -1]\n\n# Train model\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(X, y)\n\n# Predict stock change\npredictions = clf.predict(X)\nprint(predictions)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python to predict whether a stock will rise or fall based on its previous day close price.\n\n### Input:\n```\nsample_input_data = [#Previous day close values\n\t\t\t\t\t\t803.14, \n\t\t\t\t\t\t671.3, \n\t\t\t\t\t\t772.53, \n\t\t\t\t\t\t662.16, \n\t\t\t\t\t\t707.08\n\t\t\t\t\t\t]\n```\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Prepare data\ndf = pd.DataFrame(sample_input_data)\ndf['Target'] = np.where(df.shift(-1) > df, 'Increase', 'Decrease')\n\nX = df.iloc[:, 0:-1]\ny = df.iloc[:, -1]\n\n# Train model\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(X, y)\n\n# Predict stock change\npredictions = clf.predict(X)\nprint(predictions)"
    },
    {
        "instruction": "Generate code to implement quick sort in Python.",
        "input": "Not applicable",
        "output": "def quicksort(arr):\n if len(arr) <= 1:\n return arr\n pivot = arr[len(arr) // 2]\n left = [x for x in arr if x < pivot]\n middle = [x for x in arr if x == pivot]\n right = [x for x in arr if x > pivot]\n \nreturn quicksort(left) + middle + quicksort(right)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code to implement quick sort in Python.\n\n### Input:\nNot applicable\n\n### Output:\ndef quicksort(arr):\n if len(arr) <= 1:\n return arr\n pivot = arr[len(arr) // 2]\n left = [x for x in arr if x < pivot]\n middle = [x for x in arr if x == pivot]\n right = [x for x in arr if x > pivot]\n \nreturn quicksort(left) + middle + quicksort(right)"
    },
    {
        "instruction": "Create a Python dictionary of 5 key-value pairs with the keys being strings and the values being integers.",
        "input": "",
        "output": "sample_dict = {\"key1\": 1, \"key2\": 2, \"key3\": 3, \"key4\": 4, \"key5\": 5}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python dictionary of 5 key-value pairs with the keys being strings and the values being integers.\n\n### Input:\n\n\n### Output:\nsample_dict = {\"key1\": 1, \"key2\": 2, \"key3\": 3, \"key4\": 4, \"key5\": 5}"
    },
    {
        "instruction": "Create a recursive function for generating a Fibonacci sequence in Python.",
        "input": "",
        "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\nprint(Fibonacci(5)) # Output: 3",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a recursive function for generating a Fibonacci sequence in Python.\n\n### Input:\n\n\n### Output:\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \n\nprint(Fibonacci(5)) # Output: 3"
    },
    {
        "instruction": "Create a Python program for a restaurant ordering system. The system should contain a class called Order that contains methods to add items, calculate the subtotal, calculate tax, and calculate the total.",
        "input": "Not applicable",
        "output": "class Order:\n # Initialize order\n def __init__(self):\n self.items = []\n\n# Add item to order\n def add_item(self, item):\n self.items.append(item)\n\n# Calculate subtotal\n def calc_subtotal(self):\n subtotal = 0\n for item in self.items:\n subtotal += item.price\n return subtotal\n\n# Calculate tax\n def calc_tax(self):\n return self.calc_subtotal() * 0.08\n\n# Calculate total\n def calc_total(self):\n return self.calc_subtotal() + self.calc_tax()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for a restaurant ordering system. The system should contain a class called Order that contains methods to add items, calculate the subtotal, calculate tax, and calculate the total.\n\n### Input:\nNot applicable\n\n### Output:\nclass Order:\n # Initialize order\n def __init__(self):\n self.items = []\n\n# Add item to order\n def add_item(self, item):\n self.items.append(item)\n\n# Calculate subtotal\n def calc_subtotal(self):\n subtotal = 0\n for item in self.items:\n subtotal += item.price\n return subtotal\n\n# Calculate tax\n def calc_tax(self):\n return self.calc_subtotal() * 0.08\n\n# Calculate total\n def calc_total(self):\n return self.calc_subtotal() + self.calc_tax()"
    },
    {
        "instruction": "Design a machine learning model for predicting the stock market in Python.",
        "input": "Not applicable",
        "output": "import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\n\n#Load the dataset into a dataframe\ndf = pd.read_csv(\"stock_data.csv\")\n \n#Split the dataset into training and test sets\nX = df.drop(columns=['target'])\ny = df['target']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n \n#Create and fit the model\nmodel = RandomForestRegressor(n_estimators=100, random_state=42)\nmodel.fit(X_train, y_train)\n \n#Pass the test set to the model for prediction\ny_pred = model.predict(X_test)\n\n#Calculate the accuracy of the model\naccuracy = model.score(X_test, y_test)\n\n# Print the accuracy\nprint('Model accuracy: ', accuracy)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a machine learning model for predicting the stock market in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\n\n#Load the dataset into a dataframe\ndf = pd.read_csv(\"stock_data.csv\")\n \n#Split the dataset into training and test sets\nX = df.drop(columns=['target'])\ny = df['target']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n \n#Create and fit the model\nmodel = RandomForestRegressor(n_estimators=100, random_state=42)\nmodel.fit(X_train, y_train)\n \n#Pass the test set to the model for prediction\ny_pred = model.predict(X_test)\n\n#Calculate the accuracy of the model\naccuracy = model.score(X_test, y_test)\n\n# Print the accuracy\nprint('Model accuracy: ', accuracy)"
    },
    {
        "instruction": "Create a Flask web app that generates an HTML wordcloud of words collected from a website, paragraph input, or file upload. The app should have an index router function that receives a POST request and displays the HTML wordcloud. The app should also have a function to get top keywords from an article. The app should reset everything and start over when the startover function is called. The app should run on debug mode.",
        "input": "",
        "output": "'''\n\nPython implementation of HTML wordcloud of words collected from\na website, Paragraph Input or File Upload. Flask Web App implementation\nof the same.\n\nAuthor: Shivam Bansal\nEmail: shivam5992@gmail.com\nWebsite: www.shivambansal.com \nVersion: 0.1\n\n'''\n\nfrom flask import Flask, render_template, request, flash, redirect, url_for\nfrom BeautifulSoup import BeautifulSoup\nimport urllib, random, re, string, stopwords\n\napp = Flask(__name__)\napp.secret_key = 'You will never guess'\n\n'''\nIndex router function, Receive post request and displays the html wordcloud\n'''\n@app.route('/', methods = ['GET','POST'])\n@app.route('/index', methods = ['GET','POST'])\ndef index():\n\n\tif request.method == 'POST':\n\t\t\n\t\t''' Store post variables '''\n\t\turl = request.form['urllink']\n\t\tcase = request.form['case']\n\t\tshow_freq = request.form['show_freq']\n\t\t\n\t\t''' Try to connect with the URL '''\n\t\ttry:\n\t\t\tif not url.startswith(\"http\"):\n\t\t\t\turl = \"http://\" + url\n\t\t\thtmltext = urllib.urlopen(url).read()\n\t\texcept:\n\t\t\tflash(\"Cannot connect to the requested url\")\n\t\t\treturn redirect(url_for('startover'))\t\n\t\t\n\t\t''' Get all text from the html repsonse ''' \n\t\tsoup = BeautifulSoup(htmltext)\t\t\n\t\ttexts = soup.findAll(text=True)\n\t\tvisible_texts = filter(visible, texts)\n\t\tarticle = \"\"\n\t\tfor text in visible_texts:\n\t\t\tarticle += text.encode(\"utf-8\")\n\t\tarticle = str(article)\n\t\tarticle = BeautifulSoup(article, convertEntities=BeautifulSoup.HTML_ENTITIES)\n\t\t\n\t\t#exclude = set(string.punctuation)\n\t\t#article = str(article)\n\t\t#article = ''.join(ch for ch in article if ch not in exclude)\n\t\t\n\t\tarticle = str(article).replace(\"\\n\",\" \")\n\n\t\t''' Get top keywords '''\n\t\tfreq = 50\n\t\ta = getKeywords(article, case, freq)\n\t\t\n\t\trandom.shuffle(a)\n\t\tb = [x[1] for x in a]\n\t\tminFreq = min(b)\n\t\tmaxFreq = max(b)\n\n\t\t''' Create html span tags and corresponding css '''\n\t\tspan = \"\"\n\t\tcss  = \"\"\"#box{font-family:'calibri';border:2px solid black;}\n\t\t#box a{text-decoration : none}\n\t\t\"\"\"\n\t\t\n\t\t''' Colors for words in wordcloud '''\n\t\tcolors = ['#607ec5','#002a8b','#86a0dc','#4c6db9']\n\t\tcolsize = len(colors)\n\t\tk = 0\n\t\tfor index,item in enumerate(a):\n\t\t\tindex += 1\n\t\t\tif case == \"upper\":\n\t\t\t\ttag = str(item[0]).upper()\n\t\t\telse:\n\t\t\t\ttag = str(item[0])\n\n\t\t\tif show_freq == \"yes\":\n\t\t\t\tspan += '<a href=#><span class=\"word'+str(index)+'\" id=\"tag'+str(index)+'\">&nbsp;' + tag + \" (\" + str(item[1]) + \") \" + \"&nbsp;</span></a>\\n\"\n\t\t\telse:\n\t\t\t\tspan += '<a href=#><span class=\"word'+str(index)+'\" id=\"tag'+str(index)+'\">&nbsp;' + tag + \"&nbsp;</span></a>\\n\"\t\n\t\t\t\n\t\t\t''' Algorithm to scale sizes'''\n\t\t\tfreqTag = int(item[1])\n\t\t\tfontMax = 5.5\n\t\t\tfontMin = 1.5\n\t\t\tK = (freqTag - minFreq)/(maxFreq - minFreq)\n\t\t\tfrange = fontMax - fontMin\n\t\t\tC = 4\n\t\t\t\n\t\t\tK = float(freqTag - minFreq)/(maxFreq - minFreq)\n\t\t\tsize = fontMin + (C*float(K*frange/C))\n\n\t\t\tcss += '#tag'+str(index)+'{font-size: '+ str(size) +'em;color: '+colors[int(k%colsize)]+'}\\n'\n\t\t \tcss += '#tag'+str(index)+':hover{color: red}\\n'\n\t\t \tk += 1\n\t\t\n\n\t\t''' Write the HTML and CSS into seperate files ''' \n\n\t\tf = open('templates/wordcloud.html', 'w')\n\t\tmessage = \"\"\"\n\t\t<style type=\"text/css\">\n\t\t\"\"\" + css +\"\"\"\n\t\t</style>\n\t\t<div id='box'>\n\t\t\t\"\"\" + span +  \"\"\"\n\t\t</div>\n\t\t\"\"\"\n\t\tf.write(message)\n\t\tf.close\n\t\tf.flush()\n\t\treturn render_template('index.html')\n\n\tstartover()\n\treturn render_template('index.html')\n\n''' \nFunction to get top keywords from an article \n'''\ndef getKeywords(articletext, case, freq):\n\n\t''' Create the dictionary for output response '''\n\tword_dict = {}\n\tword_list = articletext.lower().split()\n\tfiltered_words = word_list\n\n\tfor word in filtered_words:\n\t\tif word not in stopwords.stopwords and word.isalnum() and not word.isdigit() and not len(word) == 1:\n\t\t\tif word not in word_dict:\n\t\t\t\tword_dict[word] = 1\n\t\t\tif word in word_dict:\n\t\t\t\tword_dict[word] += 1\n\n\ttop_words =  sorted(word_dict.items(),key=lambda(k,v):(v,k),reverse=True)[0:freq]\n\n\t'''  Return a list of dictionaies, dictionaies contains word and their frequencies '''\t\n\ttop = []\n\tfor w in top_words:\n\t\ttop.append(w)\n\treturn top\n\n'''\nFunction to reset everthing and startover\n'''\n@app.route('/startover')\ndef startover():\n\tf = open(\"templates/wordcloud.html\",'w')\n\tf.write(\"\")\n\tf.close\n\treturn redirect(url_for('index'))\n\ndef visible(element):\n\t\t    if element.parent.name in ['style', 'script', '[document]', 'head', 'title']:\n\t\t        return False\n\t\t    elif re.match('<!--.*-->', str(element)):\n\t\t        return False\n\t\t    return True\n\n'''\nRun the Flask Application\n'''\nif __name__ == '__main__':\n\tapp.run(debug = True)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Flask web app that generates an HTML wordcloud of words collected from a website, paragraph input, or file upload. The app should have an index router function that receives a POST request and displays the HTML wordcloud. The app should also have a function to get top keywords from an article. The app should reset everything and start over when the startover function is called. The app should run on debug mode.\n\n### Input:\n\n\n### Output:\n'''\n\nPython implementation of HTML wordcloud of words collected from\na website, Paragraph Input or File Upload. Flask Web App implementation\nof the same.\n\nAuthor: Shivam Bansal\nEmail: shivam5992@gmail.com\nWebsite: www.shivambansal.com \nVersion: 0.1\n\n'''\n\nfrom flask import Flask, render_template, request, flash, redirect, url_for\nfrom BeautifulSoup import BeautifulSoup\nimport urllib, random, re, string, stopwords\n\napp = Flask(__name__)\napp.secret_key = 'You will never guess'\n\n'''\nIndex router function, Receive post request and displays the html wordcloud\n'''\n@app.route('/', methods = ['GET','POST'])\n@app.route('/index', methods = ['GET','POST'])\ndef index():\n\n\tif request.method == 'POST':\n\t\t\n\t\t''' Store post variables '''\n\t\turl = request.form['urllink']\n\t\tcase = request.form['case']\n\t\tshow_freq = request.form['show_freq']\n\t\t\n\t\t''' Try to connect with the URL '''\n\t\ttry:\n\t\t\tif not url.startswith(\"http\"):\n\t\t\t\turl = \"http://\" + url\n\t\t\thtmltext = urllib.urlopen(url).read()\n\t\texcept:\n\t\t\tflash(\"Cannot connect to the requested url\")\n\t\t\treturn redirect(url_for('startover'))\t\n\t\t\n\t\t''' Get all text from the html repsonse ''' \n\t\tsoup = BeautifulSoup(htmltext)\t\t\n\t\ttexts = soup.findAll(text=True)\n\t\tvisible_texts = filter(visible, texts)\n\t\tarticle = \"\"\n\t\tfor text in visible_texts:\n\t\t\tarticle += text.encode(\"utf-8\")\n\t\tarticle = str(article)\n\t\tarticle = BeautifulSoup(article, convertEntities=BeautifulSoup.HTML_ENTITIES)\n\t\t\n\t\t#exclude = set(string.punctuation)\n\t\t#article = str(article)\n\t\t#article = ''.join(ch for ch in article if ch not in exclude)\n\t\t\n\t\tarticle = str(article).replace(\"\\n\",\" \")\n\n\t\t''' Get top keywords '''\n\t\tfreq = 50\n\t\ta = getKeywords(article, case, freq)\n\t\t\n\t\trandom.shuffle(a)\n\t\tb = [x[1] for x in a]\n\t\tminFreq = min(b)\n\t\tmaxFreq = max(b)\n\n\t\t''' Create html span tags and corresponding css '''\n\t\tspan = \"\"\n\t\tcss  = \"\"\"#box{font-family:'calibri';border:2px solid black;}\n\t\t#box a{text-decoration : none}\n\t\t\"\"\"\n\t\t\n\t\t''' Colors for words in wordcloud '''\n\t\tcolors = ['#607ec5','#002a8b','#86a0dc','#4c6db9']\n\t\tcolsize = len(colors)\n\t\tk = 0\n\t\tfor index,item in enumerate(a):\n\t\t\tindex += 1\n\t\t\tif case == \"upper\":\n\t\t\t\ttag = str(item[0]).upper()\n\t\t\telse:\n\t\t\t\ttag = str(item[0])\n\n\t\t\tif show_freq == \"yes\":\n\t\t\t\tspan += '<a href=#><span class=\"word'+str(index)+'\" id=\"tag'+str(index)+'\">&nbsp;' + tag + \" (\" + str(item[1]) + \") \" + \"&nbsp;</span></a>\\n\"\n\t\t\telse:\n\t\t\t\tspan += '<a href=#><span class=\"word'+str(index)+'\" id=\"tag'+str(index)+'\">&nbsp;' + tag + \"&nbsp;</span></a>\\n\"\t\n\t\t\t\n\t\t\t''' Algorithm to scale sizes'''\n\t\t\tfreqTag = int(item[1])\n\t\t\tfontMax = 5.5\n\t\t\tfontMin = 1.5\n\t\t\tK = (freqTag - minFreq)/(maxFreq - minFreq)\n\t\t\tfrange = fontMax - fontMin\n\t\t\tC = 4\n\t\t\t\n\t\t\tK = float(freqTag - minFreq)/(maxFreq - minFreq)\n\t\t\tsize = fontMin + (C*float(K*frange/C))\n\n\t\t\tcss += '#tag'+str(index)+'{font-size: '+ str(size) +'em;color: '+colors[int(k%colsize)]+'}\\n'\n\t\t \tcss += '#tag'+str(index)+':hover{color: red}\\n'\n\t\t \tk += 1\n\t\t\n\n\t\t''' Write the HTML and CSS into seperate files ''' \n\n\t\tf = open('templates/wordcloud.html', 'w')\n\t\tmessage = \"\"\"\n\t\t<style type=\"text/css\">\n\t\t\"\"\" + css +\"\"\"\n\t\t</style>\n\t\t<div id='box'>\n\t\t\t\"\"\" + span +  \"\"\"\n\t\t</div>\n\t\t\"\"\"\n\t\tf.write(message)\n\t\tf.close\n\t\tf.flush()\n\t\treturn render_template('index.html')\n\n\tstartover()\n\treturn render_template('index.html')\n\n''' \nFunction to get top keywords from an article \n'''\ndef getKeywords(articletext, case, freq):\n\n\t''' Create the dictionary for output response '''\n\tword_dict = {}\n\tword_list = articletext.lower().split()\n\tfiltered_words = word_list\n\n\tfor word in filtered_words:\n\t\tif word not in stopwords.stopwords and word.isalnum() and not word.isdigit() and not len(word) == 1:\n\t\t\tif word not in word_dict:\n\t\t\t\tword_dict[word] = 1\n\t\t\tif word in word_dict:\n\t\t\t\tword_dict[word] += 1\n\n\ttop_words =  sorted(word_dict.items(),key=lambda(k,v):(v,k),reverse=True)[0:freq]\n\n\t'''  Return a list of dictionaies, dictionaies contains word and their frequencies '''\t\n\ttop = []\n\tfor w in top_words:\n\t\ttop.append(w)\n\treturn top\n\n'''\nFunction to reset everthing and startover\n'''\n@app.route('/startover')\ndef startover():\n\tf = open(\"templates/wordcloud.html\",'w')\n\tf.write(\"\")\n\tf.close\n\treturn redirect(url_for('index'))\n\ndef visible(element):\n\t\t    if element.parent.name in ['style', 'script', '[document]', 'head', 'title']:\n\t\t        return False\n\t\t    elif re.match('<!--.*-->', str(element)):\n\t\t        return False\n\t\t    return True\n\n'''\nRun the Flask Application\n'''\nif __name__ == '__main__':\n\tapp.run(debug = True)"
    },
    {
        "instruction": "Construct a Python program to sort a list of strings by their length in ascending order.",
        "input": "",
        "output": "def sort_by_length(string_list):\n    return sorted(string_list, key=len)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to sort a list of strings by their length in ascending order.\n\n### Input:\n\n\n### Output:\ndef sort_by_length(string_list):\n    return sorted(string_list, key=len)"
    },
    {
        "instruction": "Generate a Python source code to print the last element from a given list.",
        "input": "['Apple', 'Orange', 'Banana']",
        "output": "arr = ['Apple', 'Orange', 'Banana']\nlast_element = arr[-1]\nprint(last_element)  # Result: Banana",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python source code to print the last element from a given list.\n\n### Input:\n['Apple', 'Orange', 'Banana']\n\n### Output:\narr = ['Apple', 'Orange', 'Banana']\nlast_element = arr[-1]\nprint(last_element)  # Result: Banana"
    },
    {
        "instruction": "Create a Python function which takes a list of numbers and returns a list of median values.",
        "input": "list = [1, 2, 4, 16, 8, 10]",
        "output": "def get_medians(input_list):\n    '''Returns list of median values of the list of numbers given.'''   \n    medians = []\n    l = len(input_list)\n    for i in range(l):\n        tuple_l = input_list[:i]+input_list[i+1:] # Exclude the current element while calculating median.\n        tuple_l.sort()\n        l_1 = len(tuple_l)\n        if l_1%2==0:\n            median = (tuple_l[int(l_1/2)-1] + tuple_l[int(l_1/2)])/2\n        else:\n            median = tuple_l[int((l_1-1)/2)]\n        medians.append(median)\n    return medians\n\nlist = [1, 2, 4, 16, 8, 10]\nprint(get_medians(list))\n# Output: [1.5, 2, 5, 8, 6.5]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function which takes a list of numbers and returns a list of median values.\n\n### Input:\nlist = [1, 2, 4, 16, 8, 10]\n\n### Output:\ndef get_medians(input_list):\n    '''Returns list of median values of the list of numbers given.'''   \n    medians = []\n    l = len(input_list)\n    for i in range(l):\n        tuple_l = input_list[:i]+input_list[i+1:] # Exclude the current element while calculating median.\n        tuple_l.sort()\n        l_1 = len(tuple_l)\n        if l_1%2==0:\n            median = (tuple_l[int(l_1/2)-1] + tuple_l[int(l_1/2)])/2\n        else:\n            median = tuple_l[int((l_1-1)/2)]\n        medians.append(median)\n    return medians\n\nlist = [1, 2, 4, 16, 8, 10]\nprint(get_medians(list))\n# Output: [1.5, 2, 5, 8, 6.5]"
    },
    {
        "instruction": "Write a basic distributed scheduling algorithm with Python.",
        "input": "Not applicable",
        "output": "def schedule(jobs):\n # Select the job with the minimum duration\n current_job = min(jobs, key = lambda job: job['duration'])\n jobs.remove(current_job)\n \n # Set up the lower and upper bounds for scheduling\n lower_bound = 0\n upper_bound = current_job['duration']\n \n # Iterate through jobs and assign each job to an appropriate time window\n for job in jobs:\n if job['duration'] + lower_bound <= upper_bound:\n job['time_window'] = [lower_bound, job['duration'] + lower_bound]\n else:\n job['time_window'] = [upper_bound, job['duration'] + upper_bound]\n \n lower_bound = job['time_window'][1]\n upper_bound = lower_bound + current_job['duration']\n \n # Append the current job to the schedule\n jobs.append(current_job)\n return jobs",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a basic distributed scheduling algorithm with Python.\n\n### Input:\nNot applicable\n\n### Output:\ndef schedule(jobs):\n # Select the job with the minimum duration\n current_job = min(jobs, key = lambda job: job['duration'])\n jobs.remove(current_job)\n \n # Set up the lower and upper bounds for scheduling\n lower_bound = 0\n upper_bound = current_job['duration']\n \n # Iterate through jobs and assign each job to an appropriate time window\n for job in jobs:\n if job['duration'] + lower_bound <= upper_bound:\n job['time_window'] = [lower_bound, job['duration'] + lower_bound]\n else:\n job['time_window'] = [upper_bound, job['duration'] + upper_bound]\n \n lower_bound = job['time_window'][1]\n upper_bound = lower_bound + current_job['duration']\n \n # Append the current job to the schedule\n jobs.append(current_job)\n return jobs"
    },
    {
        "instruction": "Write a function in Python which will take an array of numbers and return the numbers in descending order.",
        "input": "Example Array: [1, 12, 3, 8]",
        "output": "def sortDescending(arr):\n    return sorted(arr, reverse=True)\n\nprint(sortDescending([1, 12, 3, 8]))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python which will take an array of numbers and return the numbers in descending order.\n\n### Input:\nExample Array: [1, 12, 3, 8]\n\n### Output:\ndef sortDescending(arr):\n    return sorted(arr, reverse=True)\n\nprint(sortDescending([1, 12, 3, 8]))"
    },
    {
        "instruction": "Create a web app in Python and Flask that searches for a given string in a given list and returns whether the string exists or not.",
        "input": "list = [\"apple\",\"banana\",\"pear\"]\nsearch_term = \"orange\"",
        "output": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/search\", methods=[\"POST\"])\ndef search():\n data = request.get_json()\n list = data.get(\"list\")\n search_term = data.get(\"search_term\")\n \n if search_term in list:\n resp = {\n \"exists\": True\n }\n else:\n resp = {\n \"exists\": False\n }\n \n return resp\n\nif __name__ == \"__main__\":\n app.run()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web app in Python and Flask that searches for a given string in a given list and returns whether the string exists or not.\n\n### Input:\nlist = [\"apple\",\"banana\",\"pear\"]\nsearch_term = \"orange\"\n\n### Output:\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/search\", methods=[\"POST\"])\ndef search():\n data = request.get_json()\n list = data.get(\"list\")\n search_term = data.get(\"search_term\")\n \n if search_term in list:\n resp = {\n \"exists\": True\n }\n else:\n resp = {\n \"exists\": False\n }\n \n return resp\n\nif __name__ == \"__main__\":\n app.run()"
    },
    {
        "instruction": "Write a function in Python to split a string into a list containing each word from the string.",
        "input": "",
        "output": "def split_string_into_list(string):\n    return string.split(' ')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to split a string into a list containing each word from the string.\n\n### Input:\n\n\n### Output:\ndef split_string_into_list(string):\n    return string.split(' ')"
    },
    {
        "instruction": "Write a python script that transforms the data from a news article into a structured format.",
        "input": "A revered American Nobel laureate, Bob Dylan, has won the 2016 Nobel Prize for Literature for \"having created new poetic expressions within the great American song tradition\".",
        "output": "import json\n\narticle_data = {\n    'name': 'Bob Dylan', \n    'prize': 'Nobel Prize for Literature',\n    'year': 2016,\n    'description': 'having created new poetic expressions within the great American song tradition'\n}\n\nwith open('article_data.json', 'w') as outfile:  \n    json.dump(article_data, outfile)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script that transforms the data from a news article into a structured format.\n\n### Input:\nA revered American Nobel laureate, Bob Dylan, has won the 2016 Nobel Prize for Literature for \"having created new poetic expressions within the great American song tradition\".\n\n### Output:\nimport json\n\narticle_data = {\n    'name': 'Bob Dylan', \n    'prize': 'Nobel Prize for Literature',\n    'year': 2016,\n    'description': 'having created new poetic expressions within the great American song tradition'\n}\n\nwith open('article_data.json', 'w') as outfile:  \n    json.dump(article_data, outfile)"
    },
    {
        "instruction": "Create a function in Python to remove a specified element from a string of words.",
        "input": "def remove_elem(string, elem):",
        "output": "def remove_elem(string, elem):\n    \"\"\"This function removes a specified element from the given string of words\"\"\"\n    return ' '.join([word for word in string.split() if word != elem])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to remove a specified element from a string of words.\n\n### Input:\ndef remove_elem(string, elem):\n\n### Output:\ndef remove_elem(string, elem):\n    \"\"\"This function removes a specified element from the given string of words\"\"\"\n    return ' '.join([word for word in string.split() if word != elem])"
    },
    {
        "instruction": "Given an array and a target value, write a Python program to find theIndex of the target value in the array.",
        "input": "[1, 2, 3, 4, 5], 3",
        "output": "def find_index(arr, target):\n for i in range(len(arr)):\n  if arr[i] == target:\n   return i\n return -1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array and a target value, write a Python program to find theIndex of the target value in the array.\n\n### Input:\n[1, 2, 3, 4, 5], 3\n\n### Output:\ndef find_index(arr, target):\n for i in range(len(arr)):\n  if arr[i] == target:\n   return i\n return -1"
    },
    {
        "instruction": "Edit the following python program to ensure that it runs correctly.",
        "input": "def addNumbers(a, b):\n    prop = 10 * a + b\n    return product",
        "output": "def addNumbers(a, b):\n    product = 10 * a + b\n    return product",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following python program to ensure that it runs correctly.\n\n### Input:\ndef addNumbers(a, b):\n    prop = 10 * a + b\n    return product\n\n### Output:\ndef addNumbers(a, b):\n    product = 10 * a + b\n    return product"
    },
    {
        "instruction": "What is a list comprehension in Python?",
        "input": "",
        "output": "A list comprehension in Python is a quick and concise way to create a list from an existing list or iterable. A list comprehension consists of brackets containing an expression, followed by a for clause, then by zero or more additional clauses. The result is a new list resulting from the evaluation of the expression in the context of the for and additional clauses.",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat is a list comprehension in Python?\n\n### Input:\n\n\n### Output:\nA list comprehension in Python is a quick and concise way to create a list from an existing list or iterable. A list comprehension consists of brackets containing an expression, followed by a for clause, then by zero or more additional clauses. The result is a new list resulting from the evaluation of the expression in the context of the for and additional clauses."
    },
    {
        "instruction": "Write a python program to classify text input as either positive or negative sentiment.",
        "input": "",
        "output": "# Example of predicting sentiment from text\nfrom textblob import TextBlob\n \ndef classify_sentiment(text):\n\t# create TextBlob object of passed text\n\tanalysis = TextBlob(text)\n\t# set sentiment\n\tif analysis.sentiment.polarity > 0:\n\t\treturn 'positive'\n\telif analysis.sentiment.polarity == 0:\n\t\treturn 'neutral'\n\telse:\n\t\treturn 'negative'\n\ntext1 = 'I am a good person'\ntext2 = 'I am a bad person'\n\nsentiment1 = classify_sentiment(text1) \nsentiment2 = classify_sentiment(text2) \n\nprint(sentiment1)\nprint(sentiment2)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to classify text input as either positive or negative sentiment.\n\n### Input:\n\n\n### Output:\n# Example of predicting sentiment from text\nfrom textblob import TextBlob\n \ndef classify_sentiment(text):\n\t# create TextBlob object of passed text\n\tanalysis = TextBlob(text)\n\t# set sentiment\n\tif analysis.sentiment.polarity > 0:\n\t\treturn 'positive'\n\telif analysis.sentiment.polarity == 0:\n\t\treturn 'neutral'\n\telse:\n\t\treturn 'negative'\n\ntext1 = 'I am a good person'\ntext2 = 'I am a bad person'\n\nsentiment1 = classify_sentiment(text1) \nsentiment2 = classify_sentiment(text2) \n\nprint(sentiment1)\nprint(sentiment2)"
    },
    {
        "instruction": "Write a Python class for creating a binary tree andfinding the maximum depth of the tree.",
        "input": "",
        "output": "class Node: \n    def __init__(self, data): \n        self.data = data  \n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n \n   def __init__(self):\n       self.root = None\n \n   def add_node(self, data):\n        if self.root is None:\n            self.root = Node(data)\n        else:\n            self._add_to_tree(self.root, data)\n\n    def _add_to_tree(self, node, data):\n        if data < node.data:\n            if node.left is None:\n                node.left = Node(data)\n            else:\n                self._add_to_tree(node.left, data)\n        else:\n            if node.right is None:\n                node.right = Node(data)\n            else:\n                self._add_to_tree(node.right, data)\n\n    def max_depth(self):\n        return self._max_depth(self.root)\n\n    def _max_depth(self, node):\n        if node is None:\n            return 0\n        else:\n            left_depth = self._max_depth(node.left) \n            right_depth = self._max_depth(node.right)\n            return max(left_depth, right_depth) + 1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class for creating a binary tree andfinding the maximum depth of the tree.\n\n### Input:\n\n\n### Output:\nclass Node: \n    def __init__(self, data): \n        self.data = data  \n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n \n   def __init__(self):\n       self.root = None\n \n   def add_node(self, data):\n        if self.root is None:\n            self.root = Node(data)\n        else:\n            self._add_to_tree(self.root, data)\n\n    def _add_to_tree(self, node, data):\n        if data < node.data:\n            if node.left is None:\n                node.left = Node(data)\n            else:\n                self._add_to_tree(node.left, data)\n        else:\n            if node.right is None:\n                node.right = Node(data)\n            else:\n                self._add_to_tree(node.right, data)\n\n    def max_depth(self):\n        return self._max_depth(self.root)\n\n    def _max_depth(self, node):\n        if node is None:\n            return 0\n        else:\n            left_depth = self._max_depth(node.left) \n            right_depth = self._max_depth(node.right)\n            return max(left_depth, right_depth) + 1"
    },
    {
        "instruction": "Build a program in Python that prints out all the prime numbers between 2 and 100.",
        "input": "",
        "output": "def prime_numbers():\n    primes = [2]\n    for num in range(3, 101):\n        if all(num % prime != 0 for prime in primes):\n            primes.append(num)\n    print(primes)\n\nprime_numbers()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a program in Python that prints out all the prime numbers between 2 and 100.\n\n### Input:\n\n\n### Output:\ndef prime_numbers():\n    primes = [2]\n    for num in range(3, 101):\n        if all(num % prime != 0 for prime in primes):\n            primes.append(num)\n    print(primes)\n\nprime_numbers()"
    },
    {
        "instruction": "Create a Python program that creates a three dimensional array.",
        "input": "",
        "output": "import numpy as np \n  \n# Creating a 3-D array \nx = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]) \n  \n# Displaying the 3-D array \nprint(x)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that creates a three dimensional array.\n\n### Input:\n\n\n### Output:\nimport numpy as np \n  \n# Creating a 3-D array \nx = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]) \n  \n# Displaying the 3-D array \nprint(x)"
    },
    {
        "instruction": "Can you develop a Python script to merge two given lists?",
        "input": "['a', 'b', 'c']\n['1', '2', '3']",
        "output": "list1 = ['a', 'b', 'c']\nlist2 = ['1', '2', '3']\n\ndef merge_lists(list1, list2):\n    merged_list = list1 + list2\n    return merged_list\n\nmerged_list = merge_lists(list1, list2)\nprint(merged_list) # Output: ['a', 'b', 'c', '1', '2', '3']",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you develop a Python script to merge two given lists?\n\n### Input:\n['a', 'b', 'c']\n['1', '2', '3']\n\n### Output:\nlist1 = ['a', 'b', 'c']\nlist2 = ['1', '2', '3']\n\ndef merge_lists(list1, list2):\n    merged_list = list1 + list2\n    return merged_list\n\nmerged_list = merge_lists(list1, list2)\nprint(merged_list) # Output: ['a', 'b', 'c', '1', '2', '3']"
    },
    {
        "instruction": "Write Python code to compute the shortest common supersequence (SCS) of two given strings.",
        "input": "str1 = \"abac\"\nstr2 = \"baba",
        "output": "def findSCS(str1, str2, m, n): \n    if m == 0: \n        return n \n    if n == 0: \n        return m \n    if str1[m - 1] == str2[n - 1]: \n        return 1 + findSCS(str1, str2, m - 1, n - 1) \n    else: \n        return 1 + min(findSCS(str1, str2, m, n - 1), \n                       findSCS(str1, str2, m - 1, n)) \n  \ndef SCS(str1, str2): \n    return findSCS(str1, str2, len(str1), len(str2))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to compute the shortest common supersequence (SCS) of two given strings.\n\n### Input:\nstr1 = \"abac\"\nstr2 = \"baba\n\n### Output:\ndef findSCS(str1, str2, m, n): \n    if m == 0: \n        return n \n    if n == 0: \n        return m \n    if str1[m - 1] == str2[n - 1]: \n        return 1 + findSCS(str1, str2, m - 1, n - 1) \n    else: \n        return 1 + min(findSCS(str1, str2, m, n - 1), \n                       findSCS(str1, str2, m - 1, n)) \n  \ndef SCS(str1, str2): \n    return findSCS(str1, str2, len(str1), len(str2))"
    },
    {
        "instruction": "Generate Python functions for updating and deleting records in a local SQLite database.",
        "input": "Not applicable",
        "output": "import sqlite3\n\ndef update_record(conn, record):\n cur = conn.cursor()\n \n sql = ''' UPDATE records\n    SET name = ?,\n    data = ?\n    WHERE id = ?'''\n cur.execute(sql, record)\n conn.commit()\n \ndef delete_record(conn, record):\n cur = conn.cursor()\n \n sql = ''' DELETE FROM records\n    WHERE id = ?'''\n cur.execute(sql, (record[0],))\n conn.commit()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python functions for updating and deleting records in a local SQLite database.\n\n### Input:\nNot applicable\n\n### Output:\nimport sqlite3\n\ndef update_record(conn, record):\n cur = conn.cursor()\n \n sql = ''' UPDATE records\n    SET name = ?,\n    data = ?\n    WHERE id = ?'''\n cur.execute(sql, record)\n conn.commit()\n \ndef delete_record(conn, record):\n cur = conn.cursor()\n \n sql = ''' DELETE FROM records\n    WHERE id = ?'''\n cur.execute(sql, (record[0],))\n conn.commit()"
    },
    {
        "instruction": "This code is a Python script that reprojects photospheres. To use it, you need to run the script and provide the following arguments:\n\n--sourceProjection: The type of source projection. Valid values are Equirectangular, Cubemap, SideBySideFisheye.\n--sourceImage: The source image[s]. List multiple images in double quotes like so \"front.png right.png back.png left.png top.png bottom.png\".\n--useBilnear: Whether to use bilinear interpolation when reprojecting. Valid values are true and false.\n--outProjection: The type of output projection. Valid values are Equirectangular, Cubemap, SideBySideFisheye, Fisheye.\n--outImage: The output image[s]. List multiple images in double quotes like so \"front.png right.png back.png left.png top.png bottom.png\".\n--outWidth: The output image[s] width in pixels.\n--outHeight: The output image[s] height in pixels.\n\nThe script will then reproject the photosphere and save the output image[s]. If the output projection is Cubemap, the output images will be saved separately for each face.",
        "input": "",
        "output": "# Copyright 2016 Bhautik J Joshi\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#     http://www.apache.org/licenses/LICENSE-2.0\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\nimport argparse\n\nimport vrProjector\n\ndef main():\n  parser = argparse.ArgumentParser(description='Reproject photospheres')\n  parser.add_argument('--sourceProjection', required=True, help='Type of source projection. Valid values are: Equirectangular, Cubemap, SideBySideFisheye')\n  parser.add_argument('--sourceImage', required=True, help='Source image[s]. List multiple images in double quotes like so \"front.png right.png back.png left.png top.png bottom.png\"')\n  parser.add_argument('--useBilnear', required=False, help='Use bilinear interpolation when reprojecting. Valid values are true and false.')\n  parser.add_argument('--outProjection', required=True, help='Type of output projection. Valid values are: Equirectangular, Cubemap, SideBySideFisheye, Fisheye')\n  parser.add_argument('--outImage', required=True, help='output image[s]. List multiple images in double quotes like so \"front.png right.png back.png left.png top.png bottom.png\"')\n  parser.add_argument('--outWidth', required=True, help='output image[s] width in pixels')\n  parser.add_argument('--outHeight', required=True, help='output image[s] height in pixels')\n\n  args = parser.parse_args()\n\n  source = None\n  if args.sourceProjection.lower() == \"Equirectangular\".lower():\n    source = vrProjector.EquirectangularProjection()\n    source.loadImage(args.sourceImage)\n  elif args.sourceProjection.lower() == \"SideBySideFisheye\".lower():\n    source = vrProjector.SideBySideFisheyeProjection()\n    source.loadImage(args.sourceImage)\n  elif args.sourceProjection.lower() == \"Cubemap\".lower():\n    source = vrProjector.CubemapProjection()\n    imageList = args.sourceImage.split(' ')\n    source.loadImages(imageList[0], imageList[1], imageList[2], imageList[3], imageList[4], imageList[5])\n  elif args.sourceProjection.lower() == \"Fisheye\".lower():\n    source = vrProjector.FisheyeProjection()\n    source.loadImage(args.sourceImage)\n\n  else:\n    print(\"Quitting because unsupported source projection type: \", args.sourceProjection)\n    return\n\n  if args.useBilnear is not None:\n    if args.useBilnear.lower() == \"true\":\n      source.set_use_bilinear(True)\n\n  out = None\n  if args.outProjection.lower() == \"Equirectangular\".lower():\n    out = vrProjector.EquirectangularProjection()\n    out.initImage(int(args.outWidth), int(args.outHeight))\n  elif args.outProjection.lower() == \"SideBySideFisheye\".lower():\n    out = vrProjector.SideBySideFisheyeProjection()\n    out.initImage(int(args.outWidth), int(args.outHeight))\n  elif args.outProjection.lower() == \"Cubemap\".lower():\n    out = vrProjector.CubemapProjection()\n    out.initImages(int(args.outWidth), int(args.outHeight))\n  elif args.outProjection.lower() == \"Fisheye\".lower():\n    out = vrProjector.FisheyeProjection()\n    out.initImage(int(args.outWidth), int(args.outHeight))\n  else:\n    print(\"Quitting because unsupported output projection type: \", args.outProjection)\n    return\n\n  out.reprojectToThis(source)\n  # out.reprojectToThisThreaded(source, 16)\n\n  if args.outProjection.lower() == \"Cubemap\".lower():\n    imageList = args.outImage.split(' ')\n    out.saveImages(imageList[0], imageList[1], imageList[2], imageList[3], imageList[4], imageList[5])\n  else:\n    out.saveImage(args.outImage)\n\nif __name__ == \"__main__\":\n    main()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a Python script that reprojects photospheres. To use it, you need to run the script and provide the following arguments:\n\n--sourceProjection: The type of source projection. Valid values are Equirectangular, Cubemap, SideBySideFisheye.\n--sourceImage: The source image[s]. List multiple images in double quotes like so \"front.png right.png back.png left.png top.png bottom.png\".\n--useBilnear: Whether to use bilinear interpolation when reprojecting. Valid values are true and false.\n--outProjection: The type of output projection. Valid values are Equirectangular, Cubemap, SideBySideFisheye, Fisheye.\n--outImage: The output image[s]. List multiple images in double quotes like so \"front.png right.png back.png left.png top.png bottom.png\".\n--outWidth: The output image[s] width in pixels.\n--outHeight: The output image[s] height in pixels.\n\nThe script will then reproject the photosphere and save the output image[s]. If the output projection is Cubemap, the output images will be saved separately for each face.\n\n### Input:\n\n\n### Output:\n# Copyright 2016 Bhautik J Joshi\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#     http://www.apache.org/licenses/LICENSE-2.0\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\nimport argparse\n\nimport vrProjector\n\ndef main():\n  parser = argparse.ArgumentParser(description='Reproject photospheres')\n  parser.add_argument('--sourceProjection', required=True, help='Type of source projection. Valid values are: Equirectangular, Cubemap, SideBySideFisheye')\n  parser.add_argument('--sourceImage', required=True, help='Source image[s]. List multiple images in double quotes like so \"front.png right.png back.png left.png top.png bottom.png\"')\n  parser.add_argument('--useBilnear', required=False, help='Use bilinear interpolation when reprojecting. Valid values are true and false.')\n  parser.add_argument('--outProjection', required=True, help='Type of output projection. Valid values are: Equirectangular, Cubemap, SideBySideFisheye, Fisheye')\n  parser.add_argument('--outImage', required=True, help='output image[s]. List multiple images in double quotes like so \"front.png right.png back.png left.png top.png bottom.png\"')\n  parser.add_argument('--outWidth', required=True, help='output image[s] width in pixels')\n  parser.add_argument('--outHeight', required=True, help='output image[s] height in pixels')\n\n  args = parser.parse_args()\n\n  source = None\n  if args.sourceProjection.lower() == \"Equirectangular\".lower():\n    source = vrProjector.EquirectangularProjection()\n    source.loadImage(args.sourceImage)\n  elif args.sourceProjection.lower() == \"SideBySideFisheye\".lower():\n    source = vrProjector.SideBySideFisheyeProjection()\n    source.loadImage(args.sourceImage)\n  elif args.sourceProjection.lower() == \"Cubemap\".lower():\n    source = vrProjector.CubemapProjection()\n    imageList = args.sourceImage.split(' ')\n    source.loadImages(imageList[0], imageList[1], imageList[2], imageList[3], imageList[4], imageList[5])\n  elif args.sourceProjection.lower() == \"Fisheye\".lower():\n    source = vrProjector.FisheyeProjection()\n    source.loadImage(args.sourceImage)\n\n  else:\n    print(\"Quitting because unsupported source projection type: \", args.sourceProjection)\n    return\n\n  if args.useBilnear is not None:\n    if args.useBilnear.lower() == \"true\":\n      source.set_use_bilinear(True)\n\n  out = None\n  if args.outProjection.lower() == \"Equirectangular\".lower():\n    out = vrProjector.EquirectangularProjection()\n    out.initImage(int(args.outWidth), int(args.outHeight))\n  elif args.outProjection.lower() == \"SideBySideFisheye\".lower():\n    out = vrProjector.SideBySideFisheyeProjection()\n    out.initImage(int(args.outWidth), int(args.outHeight))\n  elif args.outProjection.lower() == \"Cubemap\".lower():\n    out = vrProjector.CubemapProjection()\n    out.initImages(int(args.outWidth), int(args.outHeight))\n  elif args.outProjection.lower() == \"Fisheye\".lower():\n    out = vrProjector.FisheyeProjection()\n    out.initImage(int(args.outWidth), int(args.outHeight))\n  else:\n    print(\"Quitting because unsupported output projection type: \", args.outProjection)\n    return\n\n  out.reprojectToThis(source)\n  # out.reprojectToThisThreaded(source, 16)\n\n  if args.outProjection.lower() == \"Cubemap\".lower():\n    imageList = args.outImage.split(' ')\n    out.saveImages(imageList[0], imageList[1], imageList[2], imageList[3], imageList[4], imageList[5])\n  else:\n    out.saveImage(args.outImage)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "instruction": "Transform the following code from Python to JavaScript.",
        "input": "for i in range(10):\n    print(i)",
        "output": "for (let i = 0; i < 10; i++) {\n  console.log(i);\n}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTransform the following code from Python to JavaScript.\n\n### Input:\nfor i in range(10):\n    print(i)\n\n### Output:\nfor (let i = 0; i < 10; i++) {\n  console.log(i);\n}"
    },
    {
        "instruction": "Update the given python object with field name \"address\", value as \"London\"",
        "input": "{\"name\": \"John\", \"age\": 25}",
        "output": "{'name': 'John', 'age': 25, 'address': 'London'}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUpdate the given python object with field name \"address\", value as \"London\"\n\n### Input:\n{\"name\": \"John\", \"age\": 25}\n\n### Output:\n{'name': 'John', 'age': 25, 'address': 'London'}"
    },
    {
        "instruction": "Develop a Python class that stores the details of 10 students of a college and renders them in a tabular format.",
        "input": "",
        "output": "class StudentDetails:\n def __init__(self):\n  self.students=[]\n \n def add_student(self,name,age,roll):\n  self.students.append({\"name\":name,\"age\":age,\"roll\":roll})\n \n def print_table(self):\n  print(\"Name\\tAge\\tRoll\")\n  for s in self.students:\n   print(\"{}\\t{}\\t{}\".format(s['name'],s['age'],s['roll']))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python class that stores the details of 10 students of a college and renders them in a tabular format.\n\n### Input:\n\n\n### Output:\nclass StudentDetails:\n def __init__(self):\n  self.students=[]\n \n def add_student(self,name,age,roll):\n  self.students.append({\"name\":name,\"age\":age,\"roll\":roll})\n \n def print_table(self):\n  print(\"Name\\tAge\\tRoll\")\n  for s in self.students:\n   print(\"{}\\t{}\\t{}\".format(s['name'],s['age'],s['roll']))"
    },
    {
        "instruction": "Create an application in Python that displays the lyrics to a given song.",
        "input": "\u2018Happy\u2019 by Pharrell Williams",
        "output": "import requests\nimport re\n \ndef get_lyrics(song):\n song = song.replace(\" \", \"+\")\n base_url = 'https://www.azlyrics.com/lyrics/'\n page_url = base_url + song + \".html\"\n \n response = requests.get(page_url)\n lyrics = re.search(r\"<!-- start of lyrics -->(.*)<!-- end of lyrics -->\", response.text, flags=re.DOTALL).group(1)\n lyrics = re.sub(r'<[^>]*>', '', lyrics)\n \n return lyrics\n \nlyrics = get_lyrics('Happy Pharrell Williams')\nprint(lyrics)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an application in Python that displays the lyrics to a given song.\n\n### Input:\n\u2018Happy\u2019 by Pharrell Williams\n\n### Output:\nimport requests\nimport re\n \ndef get_lyrics(song):\n song = song.replace(\" \", \"+\")\n base_url = 'https://www.azlyrics.com/lyrics/'\n page_url = base_url + song + \".html\"\n \n response = requests.get(page_url)\n lyrics = re.search(r\"<!-- start of lyrics -->(.*)<!-- end of lyrics -->\", response.text, flags=re.DOTALL).group(1)\n lyrics = re.sub(r'<[^>]*>', '', lyrics)\n \n return lyrics\n \nlyrics = get_lyrics('Happy Pharrell Williams')\nprint(lyrics)"
    },
    {
        "instruction": "Design a data structure in Python for a deck of cards.",
        "input": "",
        "output": "class Card:\n    suits = (\"Hearts\", \"Diamonds\", \"Spades\", \"Clubs\")\n    values = (\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \n              \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\")\n    \n    def __init__(self, suit, value):\n        self.suit = suit\n        self.value = value\n    \n    def __repr__(self):\n        return f\"{self.value} of {self.suit}\"\n\nclass Deck:\n    def __init__(self):\n        self.cards = [Card(suit, value) for suit in Card.suits\n                                       for value in Card.values]\n    \n    def __repr__(self):\n        return f\"Deck of {self.count()} cards\"\n    \n    def count(self):\n        return len(self.cards)\n    \n    def _deal(self, num):\n        count = self.count()\n        actual = min([count,num])\n        if count == 0:\n            raise ValueError(\"All cards have been dealt\")\n        else:\n            cards = self.cards[-actual:]\n            self.cards = self.cards[:-actual]\n            return cards\n    \n    def deal_card(self):\n        return self._deal(1)[0]\n    \n    def deal_hand(self, hand_size):\n        return self._deal(hand_size)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a data structure in Python for a deck of cards.\n\n### Input:\n\n\n### Output:\nclass Card:\n    suits = (\"Hearts\", \"Diamonds\", \"Spades\", \"Clubs\")\n    values = (\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \n              \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\")\n    \n    def __init__(self, suit, value):\n        self.suit = suit\n        self.value = value\n    \n    def __repr__(self):\n        return f\"{self.value} of {self.suit}\"\n\nclass Deck:\n    def __init__(self):\n        self.cards = [Card(suit, value) for suit in Card.suits\n                                       for value in Card.values]\n    \n    def __repr__(self):\n        return f\"Deck of {self.count()} cards\"\n    \n    def count(self):\n        return len(self.cards)\n    \n    def _deal(self, num):\n        count = self.count()\n        actual = min([count,num])\n        if count == 0:\n            raise ValueError(\"All cards have been dealt\")\n        else:\n            cards = self.cards[-actual:]\n            self.cards = self.cards[:-actual]\n            return cards\n    \n    def deal_card(self):\n        return self._deal(1)[0]\n    \n    def deal_hand(self, hand_size):\n        return self._deal(hand_size)"
    },
    {
        "instruction": "Create a Debian package for MXCart:\n1. Clean any previous build by removing the directory /build/debpkg/\n2. Create the directory /build/debpkg/DEBIAN/\n3. Write the control file at /build/debpkg/DEBIAN/control\n4. Copy the required python files to /build/debpkg/usr/local/lib/mxcart/\n5. Copy the required images to /build/debpkg/usr/local/share/mxcart/ and /build/debpkg/usr/local/share/icons/hicolor/48x48/apps/\n6. Create the file /build/debpkg/usr/local/bin/mxcart with the given content\n7. Create the desktop entry file /build/debpkg/usr/local/share/applications/mxcart.desktop with the given content\n8. Build the Debian package by running \"dpkg-deb -b /build/debpkg /build/MXCart_{versionNum}_.deb\" where {versionNum} is the version number of the package.",
        "input": "",
        "output": "import os, hashlib\nfrom shutil import copy2 as copy\nfrom Resources import versionNum\nfrom subprocess import Popen\nfrom shutil import rmtree\n\ndef md5sum(fd, block_size=2**20):\n    md5 = hashlib.md5()\n    while True:\n        data = fd.read(block_size)\n        if not data:\n            break\n        md5.update(data)\n    return md5.hexdigest()\n\n#clean any previous\nmPath = os.path.dirname(__file__)+\"/build/debpkg/\"\nif os.path.isdir(mPath):\n    rmtree(mPath)\n\n#create DEBIAN directory\nmPath = os.path.dirname(__file__)+\"/build/debpkg/DEBIAN\"\nif not os.path.isdir(mPath):\n    os.makedirs(mPath)\n    \n#write control file\ncontrol = open(mPath+\"/control\", \"w\")\ncontrol.write( \"Package: MXCart\\n\" + \\\n    \"Version: %s\\n\" %(versionNum) + \\\n    \"Section: misc\\n\" + \\\n    \"Priority: optional\\n\" + \\\n    \"Architecture: all\\n\" + \\\n    \"Depends: pngnq, python, python-wxgtk2.8, python-imaging, python-gdal, python-pyproj, python-simplejson, python-shapely\\n\" + \\\n    \"Installed-Size: 331\\n\" + \\\n    \"Maintainer: Will Kamp\\n\" + \\\n    \"Description: BSB version 2 and 3 chart import utility for MX Mariner\\n\" )\ncontrol.close()\n\n#copy over needed python files\nmPath = os.path.dirname(__file__)+\"/build/debpkg/usr/local/lib/mxcart/\"\nif not os.path.isdir(mPath):\n    os.makedirs(mPath)\nfor pyFile in [\"/BsbHeader.py\", \"/buildWin.py\", \"/GUI.py\", \"/MXCart.py\", \"/BsbScales.py\", \\\n               \"/BsbOutlines.py\", \"/FilePathSearch.py\", \"/Helper_Gdal.py\", \"/MyGemfBuilder.py\", \\\n               \"/Helper_Tiler.py\", \"/Helper_Merge.py\", \"/Resources.py\", \"/FindZoom.py\", \"/GenerateData.py\", \\\n               \"/reader_bsb_data.csv\", \"/my_tilers_tools/viewer-google.html\", \"/my_tilers_tools/viewer-openlayers.html\"]:\n    #print os.path.dirname(__file__)+pyFile, mPath\n    copy(os.path.dirname(__file__)+pyFile, mPath)\n    \nmPath = os.path.dirname(__file__)+\"/build/debpkg/usr/local/lib/mxcart/my_tilers_tools/\"\nif not os.path.isdir(mPath):\n    os.makedirs(mPath)\nfor pyFile in [\"/my_tilers_tools/gdal_tiler.py\", \\\n               \"/my_tilers_tools/generate_efficient_map_file.py\", \\\n               \"/my_tilers_tools/map2gdal.py\", \\\n               \"/my_tilers_tools/reader_backend.py\", \\\n               \"/my_tilers_tools/reader_bsb.py\", \\\n               \"/my_tilers_tools/tiler_functions.py\", \\\n               \"/my_tilers_tools/tiles_convert.py\", \\\n               \"/my_tilers_tools/tiles_merge_simple.py\" ]:\n    #print os.path.dirname(__file__)+pyFile, mPath\n    copy(os.path.dirname(__file__)+pyFile, mPath)\n\n#copy dependant images\nmPath = os.path.dirname(__file__)+\"/build/debpkg/usr/local/share/mxcart/\"\nif not os.path.isdir(mPath):\n    os.makedirs(mPath)\nfor pyFile in [\"/kattegat.png\", \"/spinner.gif\"]:\n    #print os.path.dirname(__file__)+pyFile, mPath\n    copy(os.path.dirname(__file__)+pyFile, mPath)\n\nmPath = os.path.dirname(__file__)+\"/build/debpkg/usr/local/share/icons/hicolor/48x48/apps/\"\nif not os.path.isdir(mPath):\n    os.makedirs(mPath)\ncopy(os.path.dirname(__file__)+\"/mxcart.png\", mPath)\n\n#create bin\nmPath = os.path.dirname(__file__)+\"/build/debpkg/usr/local/bin\"\nif not os.path.isdir(mPath):\n    os.makedirs(mPath)\nbinsh = open(mPath + \"/mxcart\", \"w\")\nbinsh.write(\"#!/bin/bash\\n\\n\" + \\\n            \"cd /usr/local/lib/mxcart\\n\" + \\\n            \"python MXCart.py\\n\")\nbinsh.close()\nPopen([\"chmod\", \"777\", mPath + \"/mxcart\"])\n\n#create desktop entry\nmPath = os.path.dirname(__file__)+\"/build/debpkg/usr/local/share/applications\"\nif not os.path.isdir(mPath):\n    os.makedirs(mPath)\ndesktop = open(mPath + \"/mxcart.desktop\", \"w\")\ndesktop.write(\"[Desktop Entry]\\n\" + \\\n    \"Version=%s\\n\" %(versionNum)  + \\\n    \"Name=MX Cart\\n\" + \\\n    \"Comment=BSB Chart Import Utility\\n\" + \\\n    \"Path=/usr/local/lib/mxcart/\\n\" + \\\n    \"Exec=mxcart\\n\" + \\\n    \"Icon=/usr/local/share/icons/hicolor/48x48/apps/mxcart.png\\n\" + \\\n    \"StartupNotify=true\\n\" + \\\n    \"Terminal=false\\n\" + \\\n    \"Type=Application\\n\" + \\\n    \"Categories=Education;Science;Geography;\" )\ndesktop.close()\n\nPopen([\"dpkg-deb\", \"-b\", os.path.dirname(__file__)+\"/build/debpkg\", os.path.dirname(__file__)+\"/build/MXCart_%s_.deb\" %(versionNum)])\n##write md5sum file\n#mPath = os.path.dirname(__file__)+\"/build/debpkg/DEBIAN\"\n#md5sums = open(mPath+\"/md5sums\", \"w\")\n#for ea in os.listdir(os.path.dirname(__file__)+\"/build/debpkg/usr/local/lib/mxcart/\"):\n#    fd = open( os.path.dirname(__file__)+\"/build/debpkg/usr/local/lib/mxcart/\"+ea, \"rb\" )\n#    md5sums.write(md5sum(fd) + \"  \" + \"/usr/local/lib/mxcart/\"+ea+\"\\n\")\n#    fd.close()\n##for fd in os \n#md5sums.close()\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Debian package for MXCart:\n1. Clean any previous build by removing the directory /build/debpkg/\n2. Create the directory /build/debpkg/DEBIAN/\n3. Write the control file at /build/debpkg/DEBIAN/control\n4. Copy the required python files to /build/debpkg/usr/local/lib/mxcart/\n5. Copy the required images to /build/debpkg/usr/local/share/mxcart/ and /build/debpkg/usr/local/share/icons/hicolor/48x48/apps/\n6. Create the file /build/debpkg/usr/local/bin/mxcart with the given content\n7. Create the desktop entry file /build/debpkg/usr/local/share/applications/mxcart.desktop with the given content\n8. Build the Debian package by running \"dpkg-deb -b /build/debpkg /build/MXCart_{versionNum}_.deb\" where {versionNum} is the version number of the package.\n\n### Input:\n\n\n### Output:\nimport os, hashlib\nfrom shutil import copy2 as copy\nfrom Resources import versionNum\nfrom subprocess import Popen\nfrom shutil import rmtree\n\ndef md5sum(fd, block_size=2**20):\n    md5 = hashlib.md5()\n    while True:\n        data = fd.read(block_size)\n        if not data:\n            break\n        md5.update(data)\n    return md5.hexdigest()\n\n#clean any previous\nmPath = os.path.dirname(__file__)+\"/build/debpkg/\"\nif os.path.isdir(mPath):\n    rmtree(mPath)\n\n#create DEBIAN directory\nmPath = os.path.dirname(__file__)+\"/build/debpkg/DEBIAN\"\nif not os.path.isdir(mPath):\n    os.makedirs(mPath)\n    \n#write control file\ncontrol = open(mPath+\"/control\", \"w\")\ncontrol.write( \"Package: MXCart\\n\" + \\\n    \"Version: %s\\n\" %(versionNum) + \\\n    \"Section: misc\\n\" + \\\n    \"Priority: optional\\n\" + \\\n    \"Architecture: all\\n\" + \\\n    \"Depends: pngnq, python, python-wxgtk2.8, python-imaging, python-gdal, python-pyproj, python-simplejson, python-shapely\\n\" + \\\n    \"Installed-Size: 331\\n\" + \\\n    \"Maintainer: Will Kamp\\n\" + \\\n    \"Description: BSB version 2 and 3 chart import utility for MX Mariner\\n\" )\ncontrol.close()\n\n#copy over needed python files\nmPath = os.path.dirname(__file__)+\"/build/debpkg/usr/local/lib/mxcart/\"\nif not os.path.isdir(mPath):\n    os.makedirs(mPath)\nfor pyFile in [\"/BsbHeader.py\", \"/buildWin.py\", \"/GUI.py\", \"/MXCart.py\", \"/BsbScales.py\", \\\n               \"/BsbOutlines.py\", \"/FilePathSearch.py\", \"/Helper_Gdal.py\", \"/MyGemfBuilder.py\", \\\n               \"/Helper_Tiler.py\", \"/Helper_Merge.py\", \"/Resources.py\", \"/FindZoom.py\", \"/GenerateData.py\", \\\n               \"/reader_bsb_data.csv\", \"/my_tilers_tools/viewer-google.html\", \"/my_tilers_tools/viewer-openlayers.html\"]:\n    #print os.path.dirname(__file__)+pyFile, mPath\n    copy(os.path.dirname(__file__)+pyFile, mPath)\n    \nmPath = os.path.dirname(__file__)+\"/build/debpkg/usr/local/lib/mxcart/my_tilers_tools/\"\nif not os.path.isdir(mPath):\n    os.makedirs(mPath)\nfor pyFile in [\"/my_tilers_tools/gdal_tiler.py\", \\\n               \"/my_tilers_tools/generate_efficient_map_file.py\", \\\n               \"/my_tilers_tools/map2gdal.py\", \\\n               \"/my_tilers_tools/reader_backend.py\", \\\n               \"/my_tilers_tools/reader_bsb.py\", \\\n               \"/my_tilers_tools/tiler_functions.py\", \\\n               \"/my_tilers_tools/tiles_convert.py\", \\\n               \"/my_tilers_tools/tiles_merge_simple.py\" ]:\n    #print os.path.dirname(__file__)+pyFile, mPath\n    copy(os.path.dirname(__file__)+pyFile, mPath)\n\n#copy dependant images\nmPath = os.path.dirname(__file__)+\"/build/debpkg/usr/local/share/mxcart/\"\nif not os.path.isdir(mPath):\n    os.makedirs(mPath)\nfor pyFile in [\"/kattegat.png\", \"/spinner.gif\"]:\n    #print os.path.dirname(__file__)+pyFile, mPath\n    copy(os.path.dirname(__file__)+pyFile, mPath)\n\nmPath = os.path.dirname(__file__)+\"/build/debpkg/usr/local/share/icons/hicolor/48x48/apps/\"\nif not os.path.isdir(mPath):\n    os.makedirs(mPath)\ncopy(os.path.dirname(__file__)+\"/mxcart.png\", mPath)\n\n#create bin\nmPath = os.path.dirname(__file__)+\"/build/debpkg/usr/local/bin\"\nif not os.path.isdir(mPath):\n    os.makedirs(mPath)\nbinsh = open(mPath + \"/mxcart\", \"w\")\nbinsh.write(\"#!/bin/bash\\n\\n\" + \\\n            \"cd /usr/local/lib/mxcart\\n\" + \\\n            \"python MXCart.py\\n\")\nbinsh.close()\nPopen([\"chmod\", \"777\", mPath + \"/mxcart\"])\n\n#create desktop entry\nmPath = os.path.dirname(__file__)+\"/build/debpkg/usr/local/share/applications\"\nif not os.path.isdir(mPath):\n    os.makedirs(mPath)\ndesktop = open(mPath + \"/mxcart.desktop\", \"w\")\ndesktop.write(\"[Desktop Entry]\\n\" + \\\n    \"Version=%s\\n\" %(versionNum)  + \\\n    \"Name=MX Cart\\n\" + \\\n    \"Comment=BSB Chart Import Utility\\n\" + \\\n    \"Path=/usr/local/lib/mxcart/\\n\" + \\\n    \"Exec=mxcart\\n\" + \\\n    \"Icon=/usr/local/share/icons/hicolor/48x48/apps/mxcart.png\\n\" + \\\n    \"StartupNotify=true\\n\" + \\\n    \"Terminal=false\\n\" + \\\n    \"Type=Application\\n\" + \\\n    \"Categories=Education;Science;Geography;\" )\ndesktop.close()\n\nPopen([\"dpkg-deb\", \"-b\", os.path.dirname(__file__)+\"/build/debpkg\", os.path.dirname(__file__)+\"/build/MXCart_%s_.deb\" %(versionNum)])\n##write md5sum file\n#mPath = os.path.dirname(__file__)+\"/build/debpkg/DEBIAN\"\n#md5sums = open(mPath+\"/md5sums\", \"w\")\n#for ea in os.listdir(os.path.dirname(__file__)+\"/build/debpkg/usr/local/lib/mxcart/\"):\n#    fd = open( os.path.dirname(__file__)+\"/build/debpkg/usr/local/lib/mxcart/\"+ea, \"rb\" )\n#    md5sums.write(md5sum(fd) + \"  \" + \"/usr/local/lib/mxcart/\"+ea+\"\\n\")\n#    fd.close()\n##for fd in os \n#md5sums.close()\n"
    },
    {
        "instruction": "Create a Python program that takes an array with n elements and returns the index of the element which appears the maximum number of times.",
        "input": "n = 8",
        "output": "def max_frequency_index(lst): \n    dct = dict() \n\n    for i in range(len(lst)): \n        if lst[i] in dct: \n            dct[lst[i]] += 1\n        else: \n            dct[lst[i]] = 1\n    max_freq = 0\n    max_freq_index = 0\n\n    for i in dct: \n        if dct[i] > max_freq: \n            max_freq = dct[i] \n            max_freq_index = lst.index(i) \n  \n    return max_freq_index \n  \n# Driver Code \nlst = [1, 2, 3, 2, 4, 1, 2, 5]\n\n# Find the index of element which has maximum frequency \nprint(max_frequency_index(lst))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes an array with n elements and returns the index of the element which appears the maximum number of times.\n\n### Input:\nn = 8\n\n### Output:\ndef max_frequency_index(lst): \n    dct = dict() \n\n    for i in range(len(lst)): \n        if lst[i] in dct: \n            dct[lst[i]] += 1\n        else: \n            dct[lst[i]] = 1\n    max_freq = 0\n    max_freq_index = 0\n\n    for i in dct: \n        if dct[i] > max_freq: \n            max_freq = dct[i] \n            max_freq_index = lst.index(i) \n  \n    return max_freq_index \n  \n# Driver Code \nlst = [1, 2, 3, 2, 4, 1, 2, 5]\n\n# Find the index of element which has maximum frequency \nprint(max_frequency_index(lst))"
    },
    {
        "instruction": "Write Python code that takes in a string and replaces words greater than 5 characters long with the same word in reverse.",
        "input": "This is an example sentence.",
        "output": "def reverse_words(sentence):\n    words = sentence.split(' ')\n    new_sentence = ''\n    for word in words:\n        if len(word) > 5:\n            new_sentence += word[::-1] + ' '\n        else:\n            new_sentence += word + ' '\n    return new_sentence\n \noriginal_sentence = 'This is an example sentence.'\nreversed_sentence = reverse_words(original_sentence)\nprint(reversed_sentence)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code that takes in a string and replaces words greater than 5 characters long with the same word in reverse.\n\n### Input:\nThis is an example sentence.\n\n### Output:\ndef reverse_words(sentence):\n    words = sentence.split(' ')\n    new_sentence = ''\n    for word in words:\n        if len(word) > 5:\n            new_sentence += word[::-1] + ' '\n        else:\n            new_sentence += word + ' '\n    return new_sentence\n \noriginal_sentence = 'This is an example sentence.'\nreversed_sentence = reverse_words(original_sentence)\nprint(reversed_sentence)"
    },
    {
        "instruction": "Can you create an algorithm in Python for reversing an integer?",
        "input": "x = 2435",
        "output": "def reverseInteger(x): \n     \n    reversed = 0\n    while(x > 0): \n        reminder = x % 10\n        reversed = (reversed * 10) + reminder \n        x = x // 10\n    return reversed \n\nx = 2435\nres = reverseInteger(x) \nprint(res)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you create an algorithm in Python for reversing an integer?\n\n### Input:\nx = 2435\n\n### Output:\ndef reverseInteger(x): \n     \n    reversed = 0\n    while(x > 0): \n        reminder = x % 10\n        reversed = (reversed * 10) + reminder \n        x = x // 10\n    return reversed \n\nx = 2435\nres = reverseInteger(x) \nprint(res)"
    },
    {
        "instruction": "Generate a code to merge two python dictionaries and update the values.",
        "input": "dict_1 = {\n    'a': 1,\n    'b': 2\n}\n\ndict_2 = {\n    'b': 3,\n    'c': 4\n}",
        "output": "def merge_dicts(dict_1, dict_2):\n    # copy both dictionaries\n    merged_dict = dict_1.copy()  \n    merged_dict.update(dict_2)  \n    return merged_dict\n\nprint(merge_dicts(dict_1, dict_2))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to merge two python dictionaries and update the values.\n\n### Input:\ndict_1 = {\n    'a': 1,\n    'b': 2\n}\n\ndict_2 = {\n    'b': 3,\n    'c': 4\n}\n\n### Output:\ndef merge_dicts(dict_1, dict_2):\n    # copy both dictionaries\n    merged_dict = dict_1.copy()  \n    merged_dict.update(dict_2)  \n    return merged_dict\n\nprint(merge_dicts(dict_1, dict_2))"
    },
    {
        "instruction": "Write a python program to print out the numbers from 1 to 10.",
        "input": "",
        "output": "for i in range(1, 11):\n    print (i)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to print out the numbers from 1 to 10.\n\n### Input:\n\n\n### Output:\nfor i in range(1, 11):\n    print (i)"
    },
    {
        "instruction": "Create a program in Python which takes in a user's name and prints out a customized greeting message.",
        "input": "",
        "output": "def greeting(name):\n    '''This program will take in a user's name and prints out a customized greeting message.'''\n    print('Hello, %s! Welcome!' % (name))\n\nname = input('What is your name? ')\ngreeting(name)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python which takes in a user's name and prints out a customized greeting message.\n\n### Input:\n\n\n### Output:\ndef greeting(name):\n    '''This program will take in a user's name and prints out a customized greeting message.'''\n    print('Hello, %s! Welcome!' % (name))\n\nname = input('What is your name? ')\ngreeting(name)"
    },
    {
        "instruction": "Write a python program to calculate the areas of two rectangles and determine which one is larger",
        "input": "The dimensions of first rectangle are- length=2, width=4\nThe dimensions of second rectangle are- length=4, width=6",
        "output": "def calculate_area(length, width):\n    return length * width\n\nrectangle_1_area = calculate_area(2, 4)\nrectangle_2_area = calculate_area(4, 6)\n\nif(rectangle_1_area > rectangle_2_area):\n    print(\"Rectangle 1 is larger\")\nelse:\n    print(\"Rectangle 2 is larger\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to calculate the areas of two rectangles and determine which one is larger\n\n### Input:\nThe dimensions of first rectangle are- length=2, width=4\nThe dimensions of second rectangle are- length=4, width=6\n\n### Output:\ndef calculate_area(length, width):\n    return length * width\n\nrectangle_1_area = calculate_area(2, 4)\nrectangle_2_area = calculate_area(4, 6)\n\nif(rectangle_1_area > rectangle_2_area):\n    print(\"Rectangle 1 is larger\")\nelse:\n    print(\"Rectangle 2 is larger\")"
    },
    {
        "instruction": "Write a Python function to convert a ciphertext(string) to plaintext (string) using the Caesar encryption technique.",
        "input": "\"xlmw mw xli pefsi\"",
        "output": "def caeser_encryption_decrypt(ciphertext): \n    plaintext = \"\" \n    \n    for char in ciphertext:  \n        if char.isupper(): \n            plaintext += chr((ord(char) - 3-65) % 26 + 65) \n  \n        else: \n            plaintext += chr((ord(char) - 3 - 97) % 26 + 97) \n  \n    return plaintext \n\nresult = caeser_encryption_decrypt(\"xlmw mw xli pefsi\")\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to convert a ciphertext(string) to plaintext (string) using the Caesar encryption technique.\n\n### Input:\n\"xlmw mw xli pefsi\"\n\n### Output:\ndef caeser_encryption_decrypt(ciphertext): \n    plaintext = \"\" \n    \n    for char in ciphertext:  \n        if char.isupper(): \n            plaintext += chr((ord(char) - 3-65) % 26 + 65) \n  \n        else: \n            plaintext += chr((ord(char) - 3 - 97) % 26 + 97) \n  \n    return plaintext \n\nresult = caeser_encryption_decrypt(\"xlmw mw xli pefsi\")\nprint(result)"
    },
    {
        "instruction": "Develop a python program to add two matrices of the same size.",
        "input": "X = [[2, 3, 4], \n     [6, 7, 8], \n     [10, 11, 12]]\n\nY = [[4, 5, 6], \n     [8, 9, 10], \n     [12, 13, 14]]",
        "output": "def add_matrices(X, Y):\n    result = [[0 for col in range(len(X[0]))] for row in range(len(X))] # Create a matrix of all 0s\n    for i in range(len(X)):\n        for j in range(len(X[0])):\n            result[i][j] = X[i][j] + Y[i][j]\n    return result \n\nprint(add_matrices(X, Y))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python program to add two matrices of the same size.\n\n### Input:\nX = [[2, 3, 4], \n     [6, 7, 8], \n     [10, 11, 12]]\n\nY = [[4, 5, 6], \n     [8, 9, 10], \n     [12, 13, 14]]\n\n### Output:\ndef add_matrices(X, Y):\n    result = [[0 for col in range(len(X[0]))] for row in range(len(X))] # Create a matrix of all 0s\n    for i in range(len(X)):\n        for j in range(len(X[0])):\n            result[i][j] = X[i][j] + Y[i][j]\n    return result \n\nprint(add_matrices(X, Y))"
    },
    {
        "instruction": "Import pandas and time, and read in three CSV files. Merge the dataframes on datetime, lat, and lon. Filter the dataframe to include only rows with lat between 49 and 51 and lon between -125.52 and -120.2. Group the filtered dataframe by lat and lon, and calculate the mean of the Tair column. Write the execution time to a log file.",
        "input": "",
        "output": "\n# coding: utf-8\n\n# In[1]:\n\nimport pandas as pd\nimport time\nfrom sys import argv\n\nlogfile = argv[1]\nfilesize = argv[2]\n\n\n# # Python Pandas Benchmark\n\n# In[3]:\n\n\nprefix = \"file:////Users/tony/Dropbox/Projects/UW/cse599c-17sp-projects/spark-advantage/data/\"\n\nif(filesize == 'original'):\n    tairfname     = \"Tair_WA_nohead.csv\"\n    tsoilfname    = \"Tsoil_WA_nohead.csv\"\n    tsurfacefname = \"Tsurface_WA_nohead.csv\"\nelif (filesize == 'medium'):\n    tairfname     = \"Tair_WA_nohead.MEDIUM.csv\"\n    tsoilfname    = \"Tsoil_WA_nohead.MEDIUM.csv\"\n    tsurfacefname = \"Tsurface_WA_nohead.MEDIUM.csv\"\nelif (filesize == \"small\"):\n    tairfname     = \"Tair_WA_nohead.SMALL.csv\"\n    tsoilfname    = \"Tsoil_WA_nohead.SMALL.csv\"\n    tsurfacefname = \"Tsurface_WA_nohead.SMALL.csv\"\n\n\n\nstartTime = time.time()\n\n\n\ntair = pd.read_csv(prefix+tairfname)\ntsoil = pd.read_csv(prefix+tsoilfname)\ntsurface = pd.read_csv(prefix+tsurfacefname)\n\njoined = tair.merge(tsoil, on=[\"datetime\", \" lat\", \" lon\"]).merge(tsurface, on=[\"datetime\", \" lat\", \" lon\"])\n\njoined.columns = [name.strip() for name in joined.columns]\njoined[['lat', 'lon']] = joined[['lat', 'lon']].apply(pd.to_numeric)\n\nseattle = joined[(joined['lon'] > -125.52) & \\\n                 (joined['lon'] < -120.2)  & \\\n                 (joined['lat'] > 49.0)    & \\\n                 (joined['lat'] < 51.0)]\n\nseattle.groupby(by=['lat', 'lon'])['Tair'].mean()\n\nexptime = time.time() - startTime\nwith open(logfile, 'a') as log:\n    log.write(str(exptime)+'\\n')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImport pandas and time, and read in three CSV files. Merge the dataframes on datetime, lat, and lon. Filter the dataframe to include only rows with lat between 49 and 51 and lon between -125.52 and -120.2. Group the filtered dataframe by lat and lon, and calculate the mean of the Tair column. Write the execution time to a log file.\n\n### Input:\n\n\n### Output:\n\n# coding: utf-8\n\n# In[1]:\n\nimport pandas as pd\nimport time\nfrom sys import argv\n\nlogfile = argv[1]\nfilesize = argv[2]\n\n\n# # Python Pandas Benchmark\n\n# In[3]:\n\n\nprefix = \"file:////Users/tony/Dropbox/Projects/UW/cse599c-17sp-projects/spark-advantage/data/\"\n\nif(filesize == 'original'):\n    tairfname     = \"Tair_WA_nohead.csv\"\n    tsoilfname    = \"Tsoil_WA_nohead.csv\"\n    tsurfacefname = \"Tsurface_WA_nohead.csv\"\nelif (filesize == 'medium'):\n    tairfname     = \"Tair_WA_nohead.MEDIUM.csv\"\n    tsoilfname    = \"Tsoil_WA_nohead.MEDIUM.csv\"\n    tsurfacefname = \"Tsurface_WA_nohead.MEDIUM.csv\"\nelif (filesize == \"small\"):\n    tairfname     = \"Tair_WA_nohead.SMALL.csv\"\n    tsoilfname    = \"Tsoil_WA_nohead.SMALL.csv\"\n    tsurfacefname = \"Tsurface_WA_nohead.SMALL.csv\"\n\n\n\nstartTime = time.time()\n\n\n\ntair = pd.read_csv(prefix+tairfname)\ntsoil = pd.read_csv(prefix+tsoilfname)\ntsurface = pd.read_csv(prefix+tsurfacefname)\n\njoined = tair.merge(tsoil, on=[\"datetime\", \" lat\", \" lon\"]).merge(tsurface, on=[\"datetime\", \" lat\", \" lon\"])\n\njoined.columns = [name.strip() for name in joined.columns]\njoined[['lat', 'lon']] = joined[['lat', 'lon']].apply(pd.to_numeric)\n\nseattle = joined[(joined['lon'] > -125.52) & \\\n                 (joined['lon'] < -120.2)  & \\\n                 (joined['lat'] > 49.0)    & \\\n                 (joined['lat'] < 51.0)]\n\nseattle.groupby(by=['lat', 'lon'])['Tair'].mean()\n\nexptime = time.time() - startTime\nwith open(logfile, 'a') as log:\n    log.write(str(exptime)+'\\n')"
    },
    {
        "instruction": "Generate a valid Python code that will print the given message",
        "input": "Hello World!",
        "output": "print(\"Hello World!\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a valid Python code that will print the given message\n\n### Input:\nHello World!\n\n### Output:\nprint(\"Hello World!\")"
    },
    {
        "instruction": "Develop a function in Python to delete punctuation from a string.",
        "input": "This, is a string.",
        "output": "import string\n\ndef rm_punctuation(text): \n    translator = text.maketrans(\"\", \"\", string.punctuation) \n    return text.translate(translator) \n  \ntext = \"This, is a string.\"\nprint(rm_punctuation(text))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python to delete punctuation from a string.\n\n### Input:\nThis, is a string.\n\n### Output:\nimport string\n\ndef rm_punctuation(text): \n    translator = text.maketrans(\"\", \"\", string.punctuation) \n    return text.translate(translator) \n  \ntext = \"This, is a string.\"\nprint(rm_punctuation(text))"
    },
    {
        "instruction": "Create a Python script to find the person with the highest grade in a classroom.",
        "input": "[\n {'name': 'John', 'grade': 85},\n {'name': 'Alice', 'grade': 95},\n {'name': 'Bob', 'grade': 70},\n {'name': 'Sam', 'grade': 80}\n]",
        "output": "highest_grade_person = max(students, key=lambda x:x['grade'])\nprint(\"The student with highest grade is {}\".format(highest_grade_person))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to find the person with the highest grade in a classroom.\n\n### Input:\n[\n {'name': 'John', 'grade': 85},\n {'name': 'Alice', 'grade': 95},\n {'name': 'Bob', 'grade': 70},\n {'name': 'Sam', 'grade': 80}\n]\n\n### Output:\nhighest_grade_person = max(students, key=lambda x:x['grade'])\nprint(\"The student with highest grade is {}\".format(highest_grade_person))"
    },
    {
        "instruction": "Create a script in Python that takes a list of strings and prints the string with the longest length.",
        "input": "['hello', 'world', 'abracadabra']",
        "output": "def longest_string(str_list):\n    longest = str_list[0]\n    for s in str_list:\n        if len(s) > len(longest):\n            longest = s\n    print(longest)\n    \nlongest_string(['hello', 'world', 'abracadabra'])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a script in Python that takes a list of strings and prints the string with the longest length.\n\n### Input:\n['hello', 'world', 'abracadabra']\n\n### Output:\ndef longest_string(str_list):\n    longest = str_list[0]\n    for s in str_list:\n        if len(s) > len(longest):\n            longest = s\n    print(longest)\n    \nlongest_string(['hello', 'world', 'abracadabra'])"
    },
    {
        "instruction": "Create an algorithm for sorting an array of integers using Heap Sort in Python.",
        "input": "[4, 8, 2, 9, 5, 10, 7]",
        "output": "def heapify(arr, n, i): \n    largest = i \n    l = 2 * i + 1\n    r = 2 * i + 2\n  \n    # See if left child of root exists and is greater than root\n    if l < n and arr[i] < arr[l]: \n        largest = l \n  \n    # See if right child of root exists and is greater than root\n    if r < n and arr[largest] < arr[r]: \n        largest = r \n  \n    # Change root, if needed\n    if largest != i: \n        arr[i], arr[largest] = arr[largest], arr[i] \n  \n        # Heapify the root\n        heapify(arr, n, largest) \n\ndef heapSort(arr): \n    n = len(arr) \n  \n    # Build a maxheap\n    for i in range(n//2 - 1, -1, -1): \n        heapify(arr, n, i) \n  \n    # One by one extract elements\n    for i in range(n - 1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i] \n        heapify(arr, i, 0) \n\narr = [4, 8, 2, 9, 5, 10, 7]\nheapSort(arr)\nprint(arr)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm for sorting an array of integers using Heap Sort in Python.\n\n### Input:\n[4, 8, 2, 9, 5, 10, 7]\n\n### Output:\ndef heapify(arr, n, i): \n    largest = i \n    l = 2 * i + 1\n    r = 2 * i + 2\n  \n    # See if left child of root exists and is greater than root\n    if l < n and arr[i] < arr[l]: \n        largest = l \n  \n    # See if right child of root exists and is greater than root\n    if r < n and arr[largest] < arr[r]: \n        largest = r \n  \n    # Change root, if needed\n    if largest != i: \n        arr[i], arr[largest] = arr[largest], arr[i] \n  \n        # Heapify the root\n        heapify(arr, n, largest) \n\ndef heapSort(arr): \n    n = len(arr) \n  \n    # Build a maxheap\n    for i in range(n//2 - 1, -1, -1): \n        heapify(arr, n, i) \n  \n    # One by one extract elements\n    for i in range(n - 1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i] \n        heapify(arr, i, 0) \n\narr = [4, 8, 2, 9, 5, 10, 7]\nheapSort(arr)\nprint(arr)"
    },
    {
        "instruction": "Develop a Python tool for using API data. This should have the ability to list all the available APIs, allow the user to select an API, and display the API documentation.",
        "input": "Not applicable",
        "output": "import requests\nimport json\n\ndef list_apis():\n apis = requests.get('https://api.example.com/list_apis')\n return json.loads(apis.text)\n\ndef select_api(api):\n api = requests.get('https://api.example.com/get_api/' + api)\n return json.loads(api.text)\n\ndef get_doc(api):\n doc = requests.get('https://api.example.com/get_doc/' + api)\n return json.loads(doc.text)\n\napis = list_apis()\nselected_api = select_api(apis[0])\ndoc = get_doc(selected_api)\n\nprint(doc)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python tool for using API data. This should have the ability to list all the available APIs, allow the user to select an API, and display the API documentation.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nimport json\n\ndef list_apis():\n apis = requests.get('https://api.example.com/list_apis')\n return json.loads(apis.text)\n\ndef select_api(api):\n api = requests.get('https://api.example.com/get_api/' + api)\n return json.loads(api.text)\n\ndef get_doc(api):\n doc = requests.get('https://api.example.com/get_doc/' + api)\n return json.loads(doc.text)\n\napis = list_apis()\nselected_api = select_api(apis[0])\ndoc = get_doc(selected_api)\n\nprint(doc)"
    },
    {
        "instruction": "Compute the mean squared error (MSE) of a linear regression model in Python.",
        "input": "",
        "output": "def mean_squared_error(y_true, y_pred):\n    squared_errors = (y_true - y_pred)**2 # calculation of squared errors \n    mse = sum(squared_errors) / len(y_true) # mean of squared errors  \n    return mse",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the mean squared error (MSE) of a linear regression model in Python.\n\n### Input:\n\n\n### Output:\ndef mean_squared_error(y_true, y_pred):\n    squared_errors = (y_true - y_pred)**2 # calculation of squared errors \n    mse = sum(squared_errors) / len(y_true) # mean of squared errors  \n    return mse"
    },
    {
        "instruction": "Create a JSON-RPC API in Python with Flask. The API should include one method, `reduce(words)` that takes a list of strings as input and returns a string that's the concatenation of those strings.",
        "input": "Not applicable",
        "output": "import jsonrpclib\n\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/api\", methods=['POST'])\ndef handle():\n    # Decode and parse the request\n    req = jsonrpclib.loads(request.data)\n\n    # Call the correct method\n    method = req['method']\n    params = req['params']\n    result = globals()[method](*params)\n\n    # Encode and return the response\n    response = jsonrpclib.dumps({'result': result})\n    return response\n\ndef reduce(words):\n    return ''.join(words)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a JSON-RPC API in Python with Flask. The API should include one method, `reduce(words)` that takes a list of strings as input and returns a string that's the concatenation of those strings.\n\n### Input:\nNot applicable\n\n### Output:\nimport jsonrpclib\n\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/api\", methods=['POST'])\ndef handle():\n    # Decode and parse the request\n    req = jsonrpclib.loads(request.data)\n\n    # Call the correct method\n    method = req['method']\n    params = req['params']\n    result = globals()[method](*params)\n\n    # Encode and return the response\n    response = jsonrpclib.dumps({'result': result})\n    return response\n\ndef reduce(words):\n    return ''.join(words)"
    },
    {
        "instruction": "Use the Twitter API to develop a sentiment analysis program in Python.",
        "input": "Not applicable",
        "output": "import tweepy\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n#Twitter credentials\nconsumer_key = 'your_key'\nconsumer_secret = 'your_secret'\naccess_token = 'your_token'\naccess_token_secret = 'your_secret'\n\n#Create OAuth authentication\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\n#Create API object\napi = tweepy.API(auth)\n\n#initialize sentiment analyzer\nanalyzer = SentimentIntensityAnalyzer()\n\n#Search query\nsearch_query = '#sad'\n\n#Search results\nsearch_results = api.search(search_query)\n\n#Loop through search results\nfor tweet in search_results:\n    #Analyze sentiment\n    sentiment = analyzer.polarity_scores(tweet.text)\n    #Print sentiment\n    print(f\"{tweet.text} - {sentiment}\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the Twitter API to develop a sentiment analysis program in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport tweepy\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n#Twitter credentials\nconsumer_key = 'your_key'\nconsumer_secret = 'your_secret'\naccess_token = 'your_token'\naccess_token_secret = 'your_secret'\n\n#Create OAuth authentication\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\n#Create API object\napi = tweepy.API(auth)\n\n#initialize sentiment analyzer\nanalyzer = SentimentIntensityAnalyzer()\n\n#Search query\nsearch_query = '#sad'\n\n#Search results\nsearch_results = api.search(search_query)\n\n#Loop through search results\nfor tweet in search_results:\n    #Analyze sentiment\n    sentiment = analyzer.polarity_scores(tweet.text)\n    #Print sentiment\n    print(f\"{tweet.text} - {sentiment}\")"
    },
    {
        "instruction": "Classify the given set of words using Python",
        "input": "['happy', 'puppy', 'joyful', 'dog', 'cat']",
        "output": "# Define list of words\nwords = ['happy', 'puppy', 'joyful', 'dog', 'cat']\n \n# Initialise lists\nanimals = []\nfeelings = []\n \n# Iterate through list\nfor i in words:\n    # Classifying elements in list\n    if i == 'dog' or i == 'cat':\n        animals.append(i)\n    elif i == 'happy' or i == 'joyful' or i == 'puppy':\n        feelings.append(i)\n \n# Printing classified lists\nprint('Animals:', animals)\nprint('Feelings:', feelings)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nClassify the given set of words using Python\n\n### Input:\n['happy', 'puppy', 'joyful', 'dog', 'cat']\n\n### Output:\n# Define list of words\nwords = ['happy', 'puppy', 'joyful', 'dog', 'cat']\n \n# Initialise lists\nanimals = []\nfeelings = []\n \n# Iterate through list\nfor i in words:\n    # Classifying elements in list\n    if i == 'dog' or i == 'cat':\n        animals.append(i)\n    elif i == 'happy' or i == 'joyful' or i == 'puppy':\n        feelings.append(i)\n \n# Printing classified lists\nprint('Animals:', animals)\nprint('Feelings:', feelings)"
    },
    {
        "instruction": "Configure a Python program to calculate the sum of all integers from 1 to 100.",
        "input": "",
        "output": "def calculate_sum():\n    sum = 0\n    for i in range(1, 101):\n        sum += i\n    return sum",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConfigure a Python program to calculate the sum of all integers from 1 to 100.\n\n### Input:\n\n\n### Output:\ndef calculate_sum():\n    sum = 0\n    for i in range(1, 101):\n        sum += i\n    return sum"
    },
    {
        "instruction": "Create a web scraper in Python to scrape the homepage of a website.",
        "input": "",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com/'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Scraping code goes here\n# e.g. page_title = soup.find('h1').contents",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python to scrape the homepage of a website.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://example.com/'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Scraping code goes here\n# e.g. page_title = soup.find('h1').contents"
    },
    {
        "instruction": "Create a supervised machine learning model using Python to predict if a loan will default or not.",
        "input": "Loan data (features and labels) in a CSV format",
        "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Load the data\ndata = pd.read_csv('loan_data.csv')\n\n# Split the data into features and labels\nX = data.drop('target', axis=1)\ny = data['target']\n\n# Split the data into a training set and a test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n\n# Create a Random Forest classifier\nclf = RandomForestClassifier(n_estimators=100, random_state=42)\n\n# Train the classifier\nclf.fit(X_train, y_train)\n\n# Make predictions\ny_pred = clf.predict(X_test)\n\n# Calculate the accuracy\naccuracy = (y_pred == y_test).mean()\n\nprint('The accuracy is: {:.2f}'.format(accuracy))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a supervised machine learning model using Python to predict if a loan will default or not.\n\n### Input:\nLoan data (features and labels) in a CSV format\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Load the data\ndata = pd.read_csv('loan_data.csv')\n\n# Split the data into features and labels\nX = data.drop('target', axis=1)\ny = data['target']\n\n# Split the data into a training set and a test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n\n# Create a Random Forest classifier\nclf = RandomForestClassifier(n_estimators=100, random_state=42)\n\n# Train the classifier\nclf.fit(X_train, y_train)\n\n# Make predictions\ny_pred = clf.predict(X_test)\n\n# Calculate the accuracy\naccuracy = (y_pred == y_test).mean()\n\nprint('The accuracy is: {:.2f}'.format(accuracy))"
    },
    {
        "instruction": "Create a python class called \"Laptop\" that initializes with a brand and a model.",
        "input": "",
        "output": "class Laptop:\n    def __init__(self, brand, model):\n        self.brand = brand\n        self.model = model",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python class called \"Laptop\" that initializes with a brand and a model.\n\n### Input:\n\n\n### Output:\nclass Laptop:\n    def __init__(self, brand, model):\n        self.brand = brand\n        self.model = model"
    },
    {
        "instruction": "Create a Naive Bayes Classifier in Python to classify emails as spam or nonspam.",
        "input": "Data Set - emails.csv",
        "output": "import pandas as pd \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB \n\n# Load the dataset\ndf = pd.read_csv('emails.csv')\n\n# Split the dataset into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(df['message'],  df['label'], random_state=1)\n\n# Create an instance of the CountVectorizer\ncount_vector = CountVectorizer()\n\n# Transform the training data using count vectorizer \ntraining_data = count_vector.fit_transform(X_train)\n\n# Transform the test data using the count vectorizer which was used for training\ntesting_data = count_vector.transform(X_test)\n\n# Create an instance of the multinomial Naive Bayes classifier \nnaive_bayes = MultinomialNB()\n\n# Fit the classifier to the training data \nnaive_bayes.fit(training_data, y_train)\n\n# Make the predictions\npredictions = naive_bayes.predict(testing_data)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Naive Bayes Classifier in Python to classify emails as spam or nonspam.\n\n### Input:\nData Set - emails.csv\n\n### Output:\nimport pandas as pd \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB \n\n# Load the dataset\ndf = pd.read_csv('emails.csv')\n\n# Split the dataset into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(df['message'],  df['label'], random_state=1)\n\n# Create an instance of the CountVectorizer\ncount_vector = CountVectorizer()\n\n# Transform the training data using count vectorizer \ntraining_data = count_vector.fit_transform(X_train)\n\n# Transform the test data using the count vectorizer which was used for training\ntesting_data = count_vector.transform(X_test)\n\n# Create an instance of the multinomial Naive Bayes classifier \nnaive_bayes = MultinomialNB()\n\n# Fit the classifier to the training data \nnaive_bayes.fit(training_data, y_train)\n\n# Make the predictions\npredictions = naive_bayes.predict(testing_data)"
    },
    {
        "instruction": "Create a Python functioning calculator using tkinter.",
        "input": "Not applicable",
        "output": "from tkinter import *\n\nroot = Tk()\nroot.title(\"Calculator\")\n\ne = Entry(root, width=35, borderwidth=5)\ne.grid(row=0, column=0, columnspan=3, padx=10, pady=10)\n\n# Define buttons\n\ndef button_click(number):\n current = e.get()\n e.delete(0, END)\n e.insert(0, str(current) + str(number))\n\n# Define clear function\n\ndef button_clear():\n e.delete(0, END)\n\n# Define addition function \n\ndef button_add():\n first_num=e.get()\n global f_num\n global maths\n maths=\"addition\"\n f_num = float(first_num)\n e.delete(0, END)\n\n# Define equal function \n\ndef button_equal():\n second_num= e.get()\n e.delete(0, END)\n \n if maths == \"addition\":\n  e.insert(0, f_num + float(second_num))\n \n# Create buttons\n\nbutton_1 = Button(root, text=\"1\", padx=40, pady=20, command=lambda: button_click(1))\nbutton_2 = Button(root, text=\"2\", padx=40, pady=20, command=lambda: button_click(2))\nbutton_3 = Button(root, text=\"3\", padx=40, pady=20, command=lambda: button_click(3))\nbutton_4 = Button(root, text=\"4\", padx=40, pady=20, command=lambda: button_click(4))\nbutton_5 = Button(root, text=\"5\", padx=40, pady=20, command=lambda: button_click(5))\nbutton_6 = Button(root, text=\"6\", padx=40, pady=20, command=lambda: button_click(6))\nbutton_7 = Button(root, text=\"7\", padx=40, pady=20, command=lambda: button_click(7))\nbutton_8 = Button(root, text=\"8\", padx=40, pady=20, command=lambda: button_click(8))\nbutton_9 = Button(root, text=\"9\", padx=40, pady=20, command=lambda: button_click(9))\nbutton_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))\nbutton_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)\nbutton_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)\nbutton_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)\n\n# Put buttons on screen\n\nbutton_1.grid(row=3, column=0)\nbutton_2.grid(row=3, column=1)\nbutton_3.grid(row=3, column=2)\n\nbutton_4.grid(row=2, column=0)\nbutton_5.grid(row=2, column=1)\nbutton_6.grid(row=2, column=2)\n\nbutton_7.grid(row=1, column=0)\nbutton_8.grid(row=1, column=1)\nbutton_9.grid(row=1, column=2)\n\nbutton_0.grid(row=4, column=0)\nbutton_clear.grid(row=4, column=1, columnspan=2)\nbutton_add.grid(row=5, column=0)\nbutton_equal.grid(row=5, column=1, columnspan=2)\n\nroot.mainloop()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python functioning calculator using tkinter.\n\n### Input:\nNot applicable\n\n### Output:\nfrom tkinter import *\n\nroot = Tk()\nroot.title(\"Calculator\")\n\ne = Entry(root, width=35, borderwidth=5)\ne.grid(row=0, column=0, columnspan=3, padx=10, pady=10)\n\n# Define buttons\n\ndef button_click(number):\n current = e.get()\n e.delete(0, END)\n e.insert(0, str(current) + str(number))\n\n# Define clear function\n\ndef button_clear():\n e.delete(0, END)\n\n# Define addition function \n\ndef button_add():\n first_num=e.get()\n global f_num\n global maths\n maths=\"addition\"\n f_num = float(first_num)\n e.delete(0, END)\n\n# Define equal function \n\ndef button_equal():\n second_num= e.get()\n e.delete(0, END)\n \n if maths == \"addition\":\n  e.insert(0, f_num + float(second_num))\n \n# Create buttons\n\nbutton_1 = Button(root, text=\"1\", padx=40, pady=20, command=lambda: button_click(1))\nbutton_2 = Button(root, text=\"2\", padx=40, pady=20, command=lambda: button_click(2))\nbutton_3 = Button(root, text=\"3\", padx=40, pady=20, command=lambda: button_click(3))\nbutton_4 = Button(root, text=\"4\", padx=40, pady=20, command=lambda: button_click(4))\nbutton_5 = Button(root, text=\"5\", padx=40, pady=20, command=lambda: button_click(5))\nbutton_6 = Button(root, text=\"6\", padx=40, pady=20, command=lambda: button_click(6))\nbutton_7 = Button(root, text=\"7\", padx=40, pady=20, command=lambda: button_click(7))\nbutton_8 = Button(root, text=\"8\", padx=40, pady=20, command=lambda: button_click(8))\nbutton_9 = Button(root, text=\"9\", padx=40, pady=20, command=lambda: button_click(9))\nbutton_0 = Button(root, text=\"0\", padx=40, pady=20, command=lambda: button_click(0))\nbutton_add = Button(root, text=\"+\", padx=39, pady=20, command=button_add)\nbutton_equal = Button(root, text=\"=\", padx=91, pady=20, command=button_equal)\nbutton_clear = Button(root, text=\"Clear\", padx=79, pady=20, command=button_clear)\n\n# Put buttons on screen\n\nbutton_1.grid(row=3, column=0)\nbutton_2.grid(row=3, column=1)\nbutton_3.grid(row=3, column=2)\n\nbutton_4.grid(row=2, column=0)\nbutton_5.grid(row=2, column=1)\nbutton_6.grid(row=2, column=2)\n\nbutton_7.grid(row=1, column=0)\nbutton_8.grid(row=1, column=1)\nbutton_9.grid(row=1, column=2)\n\nbutton_0.grid(row=4, column=0)\nbutton_clear.grid(row=4, column=1, columnspan=2)\nbutton_add.grid(row=5, column=0)\nbutton_equal.grid(row=5, column=1, columnspan=2)\n\nroot.mainloop()"
    },
    {
        "instruction": "Write an algorithm in Python to calculate the area of a triangle given by its three points.",
        "input": "A(x1,y1), B(x2,y2), C(x3,y3)",
        "output": "def area(x1,y1,x2,y2,x3,y3): \n    a = (x1 * (y2 - y3) + x2 * (y3 - y1) + \n         x3 * (y1 - y2))/2; \n    return abs(a); \n\n# Driver Code \nx1,y1 = (4,7)\nx2,y2 = (5,6)\nx3,y3 = (7,4)\n\nprint(area(x1,y1,x2,y2,x3,y3));",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to calculate the area of a triangle given by its three points.\n\n### Input:\nA(x1,y1), B(x2,y2), C(x3,y3)\n\n### Output:\ndef area(x1,y1,x2,y2,x3,y3): \n    a = (x1 * (y2 - y3) + x2 * (y3 - y1) + \n         x3 * (y1 - y2))/2; \n    return abs(a); \n\n# Driver Code \nx1,y1 = (4,7)\nx2,y2 = (5,6)\nx3,y3 = (7,4)\n\nprint(area(x1,y1,x2,y2,x3,y3));"
    },
    {
        "instruction": "Design an algorithm in Python to convert a temperature in Fahrenheit to Celsius.",
        "input": "64 degrees Fahrenheit",
        "output": "def convert_f_to_c(temperature):\n    return (temperature - 32) * 5.0/9.0\n\nresult = convert_f_to_c(64)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to convert a temperature in Fahrenheit to Celsius.\n\n### Input:\n64 degrees Fahrenheit\n\n### Output:\ndef convert_f_to_c(temperature):\n    return (temperature - 32) * 5.0/9.0\n\nresult = convert_f_to_c(64)\nprint(result)"
    },
    {
        "instruction": "Write a python program to generate and print a bar chart of the ages of employees in a company.",
        "input": "EmployeeName\tAge\nJohn\t        30\nGeorge\t        22\nJames\t        25",
        "output": "import matplotlib.pyplot as plt \n \nx = ['John', 'George', 'James']\ny = [30, 22, 25]\n \n# plotting the points  \nplt.bar(x, y) \n  \n# naming the x-axis \nplt.xlabel('Employee Name') \n# naming the y-axis \nplt.ylabel('Age') \n# giving a title to my graph \nplt.title('Ages of Employees') \n  \n# function to show the plot \nplt.show()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to generate and print a bar chart of the ages of employees in a company.\n\n### Input:\nEmployeeName\tAge\nJohn\t        30\nGeorge\t        22\nJames\t        25\n\n### Output:\nimport matplotlib.pyplot as plt \n \nx = ['John', 'George', 'James']\ny = [30, 22, 25]\n \n# plotting the points  \nplt.bar(x, y) \n  \n# naming the x-axis \nplt.xlabel('Employee Name') \n# naming the y-axis \nplt.ylabel('Age') \n# giving a title to my graph \nplt.title('Ages of Employees') \n  \n# function to show the plot \nplt.show()"
    },
    {
        "instruction": "Create a class called Player in Python and add two class methods called attack and defend.",
        "input": "",
        "output": "class Player:\n    \n    def __init__(self):\n        pass\n    \n    def attack(self):\n        print(\"The Player is attacking!\")\n    \n    def defend(self):\n        print(\"The Player is defending!\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class called Player in Python and add two class methods called attack and defend.\n\n### Input:\n\n\n### Output:\nclass Player:\n    \n    def __init__(self):\n        pass\n    \n    def attack(self):\n        print(\"The Player is attacking!\")\n    \n    def defend(self):\n        print(\"The Player is defending!\")"
    },
    {
        "instruction": "Generate a Python program which multiplies all the numbers between two given numbers.",
        "input": "start: 2\nend: 10",
        "output": "def multiply_between(start, end):\n    result = 1\n    for i in range(start, end + 1):\n        result *= i\n    return result\n\nprint(multiply_between(2, 10))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program which multiplies all the numbers between two given numbers.\n\n### Input:\nstart: 2\nend: 10\n\n### Output:\ndef multiply_between(start, end):\n    result = 1\n    for i in range(start, end + 1):\n        result *= i\n    return result\n\nprint(multiply_between(2, 10))"
    },
    {
        "instruction": "Suggest a completion for the following python code, such that it prints all the elements of a list.",
        "input": "def print_list_elements(lst):",
        "output": "def print_list_elements(lst):\n    for elem in lst:\n        print(elem)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a completion for the following python code, such that it prints all the elements of a list.\n\n### Input:\ndef print_list_elements(lst):\n\n### Output:\ndef print_list_elements(lst):\n    for elem in lst:\n        print(elem)"
    },
    {
        "instruction": "Build a machine learning model in Python for predicting the sentiment score (positive or negative) of a given text.",
        "input": "Not applicable",
        "output": "import numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.svm import LinearSVC\n\n# Create the input data set \nX = np.array([\n 'This movie was great!',\n 'I really enjoyed this movie',\n 'This movie was not so good',\n 'I did not enjoy this movie'\n ])\n\n# Create the labels\ny = np.array([1,1,0,0])\n\n# Create the vectorizer\nvectorizer = CountVectorizer()\n\n# Create the machine learning model\nclf = LinearSVC()\n\n# Vectorize the input data\nX_vectors = vectorizer.fit_transform(X)\n\n# Train the model\nclf.fit(X_vectors, y)\n\n# Predict the sentiment score of a given text\ntext = 'I hated this movie'\ntest_vector = vectorizer.transform([text])\nprediction = clf.predict(test_vector)\nprint(prediction) # Output: [0]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a machine learning model in Python for predicting the sentiment score (positive or negative) of a given text.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.svm import LinearSVC\n\n# Create the input data set \nX = np.array([\n 'This movie was great!',\n 'I really enjoyed this movie',\n 'This movie was not so good',\n 'I did not enjoy this movie'\n ])\n\n# Create the labels\ny = np.array([1,1,0,0])\n\n# Create the vectorizer\nvectorizer = CountVectorizer()\n\n# Create the machine learning model\nclf = LinearSVC()\n\n# Vectorize the input data\nX_vectors = vectorizer.fit_transform(X)\n\n# Train the model\nclf.fit(X_vectors, y)\n\n# Predict the sentiment score of a given text\ntext = 'I hated this movie'\ntest_vector = vectorizer.transform([text])\nprediction = clf.predict(test_vector)\nprint(prediction) # Output: [0]"
    },
    {
        "instruction": "Using given data, generate random user reviews and ratings for a movie in Python.",
        "input": "data = [{\n  \"movie_name\": \"Inception\"\n  \"movie_id\": \"213121\",\n  \"users\": [\"Alice\", \"Bob\", \"John\"]\n}];",
        "output": "reviews = {\n  \"Alice\":{\n   \"rating\": random.randint(1, 5),\n   \"review\": \"I watched 'Inception' and I thought it was great!\"\n  },\n  \"Bob\":{\n   \"rating\": random.randint(1, 5),\n   \"review\": \"I watched 'Inception' and it was just okay.\"\n  },\n  \"John\":{\n   \"rating\": random.randint(1, 5),\n   \"review\": \"I didn't enjoy 'Inception' as much as some others.\"\n  }\n}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing given data, generate random user reviews and ratings for a movie in Python.\n\n### Input:\ndata = [{\n  \"movie_name\": \"Inception\"\n  \"movie_id\": \"213121\",\n  \"users\": [\"Alice\", \"Bob\", \"John\"]\n}];\n\n### Output:\nreviews = {\n  \"Alice\":{\n   \"rating\": random.randint(1, 5),\n   \"review\": \"I watched 'Inception' and I thought it was great!\"\n  },\n  \"Bob\":{\n   \"rating\": random.randint(1, 5),\n   \"review\": \"I watched 'Inception' and it was just okay.\"\n  },\n  \"John\":{\n   \"rating\": random.randint(1, 5),\n   \"review\": \"I didn't enjoy 'Inception' as much as some others.\"\n  }\n}"
    },
    {
        "instruction": "Rewrite the following Python function to minimize the number of lines and improve readability.",
        "input": "def add_numbers(num1, num2):\n    sum = num1 + num2 \n    print(\"The sum of two numbers is :\",sum)",
        "output": "def add_numbers(num1, num2):\n    print(f\"The sum of two numbers is : {num1 + num2}\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following Python function to minimize the number of lines and improve readability.\n\n### Input:\ndef add_numbers(num1, num2):\n    sum = num1 + num2 \n    print(\"The sum of two numbers is :\",sum)\n\n### Output:\ndef add_numbers(num1, num2):\n    print(f\"The sum of two numbers is : {num1 + num2}\")"
    },
    {
        "instruction": "Design a recursive function in Python that computes the $n^{th}$ Fibonacci number.",
        "input": "",
        "output": "def Fibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n   elif n==1: \n      return 0\n   elif n==2: \n      return 1\n   else: \n      return Fibonacci(n-1)+Fibonacci(n-2)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a recursive function in Python that computes the $n^{th}$ Fibonacci number.\n\n### Input:\n\n\n### Output:\ndef Fibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n   elif n==1: \n      return 0\n   elif n==2: \n      return 1\n   else: \n      return Fibonacci(n-1)+Fibonacci(n-2)"
    },
    {
        "instruction": "Write a Python program that takes a list of numbers and finds the most frequently occuring element in it.",
        "input": "[2 ,3, 5, 7, 3, 3, 4]",
        "output": "def find_most_frequent_element(in_list):\n    counts = {}\n    for element in in_list:\n        if element in counts:\n            counts[element] += 1\n        else:\n            counts[element] = 1\n    max_count = max(counts.values())\n    return [key for key,value in counts.items() if value == max_count][0]\n\nmost_frequent_element = find_most_frequent_element([2,3,5,7,3,3,4])\nprint(most_frequent_element)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a list of numbers and finds the most frequently occuring element in it.\n\n### Input:\n[2 ,3, 5, 7, 3, 3, 4]\n\n### Output:\ndef find_most_frequent_element(in_list):\n    counts = {}\n    for element in in_list:\n        if element in counts:\n            counts[element] += 1\n        else:\n            counts[element] = 1\n    max_count = max(counts.values())\n    return [key for key,value in counts.items() if value == max_count][0]\n\nmost_frequent_element = find_most_frequent_element([2,3,5,7,3,3,4])\nprint(most_frequent_element)"
    },
    {
        "instruction": "Create a function to calculate the factorial of a given number in Python.",
        "input": "",
        "output": "def factorial(number): \n    if number == 0: \n        return 1\n    else:\n        return number * factorial(number - 1)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to calculate the factorial of a given number in Python.\n\n### Input:\n\n\n### Output:\ndef factorial(number): \n    if number == 0: \n        return 1\n    else:\n        return number * factorial(number - 1)"
    },
    {
        "instruction": "Create a multiplayer online game in Python that allows 2 players to play against each other.",
        "input": "",
        "output": "\"\"\"\nCreating a Multiplayer Online Game in Python\n\"\"\"\n\nimport time\nimport random\n\n# Initializing the game\nplayers = []\n\n# Defining a function for playing the game\ndef play_game(player_1, player_2):\n    # Give both players 5 seconds to choose a number between 1 and 10\n    time.sleep(5)\n    player_1_num = random.randint(1, 10)\n    player_2_num = random.randint(1, 10)\n\n    # Check to see who won\n    if player_1_num > player_2_num:\n        print(\"Player 1 (\" + player_1 + \") wins!\")\n    elif player_2_num > player_1_num:\n        print(\"Player 2 (\" + player_2 + \") wins!\")\n    else:\n        print(\"It's a draw!\")\n\n# Defining a function to add two players\ndef add_player(player):\n    players.append(player)\n    if len(players) == 2:\n        play_game(players[0], players[1])\n\n# Start the game\nprint(\"Welcome to the game! Type 'add_player()' to add your name to the game.\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a multiplayer online game in Python that allows 2 players to play against each other.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreating a Multiplayer Online Game in Python\n\"\"\"\n\nimport time\nimport random\n\n# Initializing the game\nplayers = []\n\n# Defining a function for playing the game\ndef play_game(player_1, player_2):\n    # Give both players 5 seconds to choose a number between 1 and 10\n    time.sleep(5)\n    player_1_num = random.randint(1, 10)\n    player_2_num = random.randint(1, 10)\n\n    # Check to see who won\n    if player_1_num > player_2_num:\n        print(\"Player 1 (\" + player_1 + \") wins!\")\n    elif player_2_num > player_1_num:\n        print(\"Player 2 (\" + player_2 + \") wins!\")\n    else:\n        print(\"It's a draw!\")\n\n# Defining a function to add two players\ndef add_player(player):\n    players.append(player)\n    if len(players) == 2:\n        play_game(players[0], players[1])\n\n# Start the game\nprint(\"Welcome to the game! Type 'add_player()' to add your name to the game.\")"
    },
    {
        "instruction": "Generate a python function to identify the longest increasing subsequence in an array of numbers.",
        "input": "[10, 22, 9, 33, 21, 50, 41, 60]",
        "output": "def find_longest_increasing_subsequence(arr):\n    # Initialize the list with the first element of \n    # the input array\n    LIS = [arr[0]] \n  \n    for i in range(1, len(arr)): \n        if (arr[i] > LIS[-1]): \n            # If the current element is larger \n            # than the last element in the list \n            # then append it to the list \n            LIS.append(arr[i]) \n        else: \n            # If the current element is smaller than \n            # the last element in the list then find \n            # the position of the element which is \n            # just smaller than the current element \n            # and replace it. \n            index = find_closest_number_index(LIS, arr[i]) \n            LIS[index] = arr[i] \n  \n    # Return the length of the Longest Increasing Subsequence \n    return len(LIS) \n  \n# Function to find the closest number \n# index in the list \ndef find_closest_number_index(LIS, num): \n    start = 0\n    end = len(LIS) - 1\n  \n    # Handle edge cases \n    if (num > LIS[end]): \n        return end \n  \n    # Binary search  \n    while (start <= end): \n        mid = int(start + (end - start) / 2) \n  \n        if (LIS[mid] == num): \n            return mid \n  \n        if (mid > 0 and LIS[mid - 1] < num  \n            and num < LIS[ mid ]): \n            return mid - 1\n              \n        if (num < LIS[mid]): \n            end = mid - 1\n        else: \n            start = mid + 1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python function to identify the longest increasing subsequence in an array of numbers.\n\n### Input:\n[10, 22, 9, 33, 21, 50, 41, 60]\n\n### Output:\ndef find_longest_increasing_subsequence(arr):\n    # Initialize the list with the first element of \n    # the input array\n    LIS = [arr[0]] \n  \n    for i in range(1, len(arr)): \n        if (arr[i] > LIS[-1]): \n            # If the current element is larger \n            # than the last element in the list \n            # then append it to the list \n            LIS.append(arr[i]) \n        else: \n            # If the current element is smaller than \n            # the last element in the list then find \n            # the position of the element which is \n            # just smaller than the current element \n            # and replace it. \n            index = find_closest_number_index(LIS, arr[i]) \n            LIS[index] = arr[i] \n  \n    # Return the length of the Longest Increasing Subsequence \n    return len(LIS) \n  \n# Function to find the closest number \n# index in the list \ndef find_closest_number_index(LIS, num): \n    start = 0\n    end = len(LIS) - 1\n  \n    # Handle edge cases \n    if (num > LIS[end]): \n        return end \n  \n    # Binary search  \n    while (start <= end): \n        mid = int(start + (end - start) / 2) \n  \n        if (LIS[mid] == num): \n            return mid \n  \n        if (mid > 0 and LIS[mid - 1] < num  \n            and num < LIS[ mid ]): \n            return mid - 1\n              \n        if (num < LIS[mid]): \n            end = mid - 1\n        else: \n            start = mid + 1"
    },
    {
        "instruction": "Write a Python program that prints the first 10 prime numbers",
        "input": "",
        "output": "def get_prime_numbers(n):\n    prime_nums = []\n    i = 2\n    while len(prime_nums) < n:\n        isPrime = True\n        for num in prime_nums:\n            if i % num == 0:\n                isPrime = False\n                break\n        if isPrime:\n            prime_nums.append(i)\n        i += 1\n    return prime_nums\n\nif __name__ == '__main__':\n    print(get_prime_numbers(10))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that prints the first 10 prime numbers\n\n### Input:\n\n\n### Output:\ndef get_prime_numbers(n):\n    prime_nums = []\n    i = 2\n    while len(prime_nums) < n:\n        isPrime = True\n        for num in prime_nums:\n            if i % num == 0:\n                isPrime = False\n                break\n        if isPrime:\n            prime_nums.append(i)\n        i += 1\n    return prime_nums\n\nif __name__ == '__main__':\n    print(get_prime_numbers(10))"
    },
    {
        "instruction": "Can you create a Python script to print out the two smallest elements from an array of numbers?",
        "input": "[45, 24, 2, 17, 78]",
        "output": "def smallest_two_elements(nums):\n    min1 = min(nums)\n    nums.remove(min1)\n    min2 = min(nums)\n    \n    print(min1, min2)\n\nsmallest_two_elements([45, 24, 2, 17, 78])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you create a Python script to print out the two smallest elements from an array of numbers?\n\n### Input:\n[45, 24, 2, 17, 78]\n\n### Output:\ndef smallest_two_elements(nums):\n    min1 = min(nums)\n    nums.remove(min1)\n    min2 = min(nums)\n    \n    print(min1, min2)\n\nsmallest_two_elements([45, 24, 2, 17, 78])"
    },
    {
        "instruction": "In Python, create a function to find the difference in number of a's and b's in a string.",
        "input": "abcdba",
        "output": "def countDifference(s): \n   a_count = 0\n   b_count = 0\n   for i in range(len(s)):  \n       if (s[i] == 'a'): \n           a_count = a_count + 1\n       elif (s[i] == 'b'): \n           b_count = b_count + 1\n   diff = a_count - b_count\n   return diff\n\nprint(countDifference('abcdba'))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, create a function to find the difference in number of a's and b's in a string.\n\n### Input:\nabcdba\n\n### Output:\ndef countDifference(s): \n   a_count = 0\n   b_count = 0\n   for i in range(len(s)):  \n       if (s[i] == 'a'): \n           a_count = a_count + 1\n       elif (s[i] == 'b'): \n           b_count = b_count + 1\n   diff = a_count - b_count\n   return diff\n\nprint(countDifference('abcdba'))"
    },
    {
        "instruction": "Create a Python program that converts degrees Celsius to Fahrenheit.",
        "input": "35",
        "output": "def celsius_to_fahrenheit(celsius):\n return celsius * 9/5 + 32\n\ncelsius = 35\nfahrenheit = celsius_to_fahrenheit(celsius)\nprint(\"{} \u00b0C is {} \u00b0F\".format(celsius, fahrenheit))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that converts degrees Celsius to Fahrenheit.\n\n### Input:\n35\n\n### Output:\ndef celsius_to_fahrenheit(celsius):\n return celsius * 9/5 + 32\n\ncelsius = 35\nfahrenheit = celsius_to_fahrenheit(celsius)\nprint(\"{} \u00b0C is {} \u00b0F\".format(celsius, fahrenheit))"
    },
    {
        "instruction": "Generate Python code to get the maximum element in a list.",
        "input": "List of integers [7, 2, 3, 6, 5]",
        "output": "list = [7, 2, 3, 6, 5]\nprint(\"Max element is:\", max(list))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to get the maximum element in a list.\n\n### Input:\nList of integers [7, 2, 3, 6, 5]\n\n### Output:\nlist = [7, 2, 3, 6, 5]\nprint(\"Max element is:\", max(list))"
    },
    {
        "instruction": "Write a Python program to filter out the words of length greater than 5 from a given list of words",
        "input": "['Hello', 'is', 'Python', 'Programming']",
        "output": "def filter_long_words(words):\n  return [word for word in words if len(word) > 5]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to filter out the words of length greater than 5 from a given list of words\n\n### Input:\n['Hello', 'is', 'Python', 'Programming']\n\n### Output:\ndef filter_long_words(words):\n  return [word for word in words if len(word) > 5]"
    },
    {
        "instruction": "Write a Python program to solve a quadratic equation.",
        "input": "a = 1\nb = -5\nc = 6",
        "output": "import math\n\n# Solve the quadratic equation ax**2 + bx + c = 0 \n# ax**2 + bx + c = 0 \n# find x\n\na = 1\nb = - 5\nc = 6\n\nd = (b**2) - (4*a*c)\n \n# find two solutions\nsol1 = (-b-math.sqrt(d))/(2*a)\nsol2 = (-b+math.sqrt(d))/(2*a)\n \nprint('The solution are {0} and {1}'.format(sol1,sol2))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to solve a quadratic equation.\n\n### Input:\na = 1\nb = -5\nc = 6\n\n### Output:\nimport math\n\n# Solve the quadratic equation ax**2 + bx + c = 0 \n# ax**2 + bx + c = 0 \n# find x\n\na = 1\nb = - 5\nc = 6\n\nd = (b**2) - (4*a*c)\n \n# find two solutions\nsol1 = (-b-math.sqrt(d))/(2*a)\nsol2 = (-b+math.sqrt(d))/(2*a)\n \nprint('The solution are {0} and {1}'.format(sol1,sol2))"
    },
    {
        "instruction": "Build a Neural Network in Python which can predict the probability that a person belonging to a certain age group will purchase an item.",
        "input": "",
        "output": "import numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\n\n# Generate data\nX = np.random.rand(100, 5)\ny = np.random.randint(2, size=100)\n\n# Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n\n# Create the neural network model\nmodel = Sequential()\nmodel.add(Dense(30, input_dim = 5, activation = 'relu'))\nmodel.add(Dense(15, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs = 20, batch_size = 10, validation_data = (X_test, y_test))\n\n# Evaluate the model\nscore, acc = model.evaluate(X_test, y_test, batch_size = 10)\nprint(\"Test score:\", score)\nprint(\"Test accuracy:\", acc)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Neural Network in Python which can predict the probability that a person belonging to a certain age group will purchase an item.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\n\n# Generate data\nX = np.random.rand(100, 5)\ny = np.random.randint(2, size=100)\n\n# Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)\n\n# Create the neural network model\nmodel = Sequential()\nmodel.add(Dense(30, input_dim = 5, activation = 'relu'))\nmodel.add(Dense(15, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1, activation='sigmoid'))\n\n# Compile the model\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs = 20, batch_size = 10, validation_data = (X_test, y_test))\n\n# Evaluate the model\nscore, acc = model.evaluate(X_test, y_test, batch_size = 10)\nprint(\"Test score:\", score)\nprint(\"Test accuracy:\", acc)"
    },
    {
        "instruction": "Compare two strings in Python to determine if they are anagrams of one another.",
        "input": "str1 = \"abcd\"\nstr2 = \"dcba\"",
        "output": "def is_anagram(str1, str2):\n    \"\"\"\n    Checks if two strings are anagrams of one another\n    \"\"\"\n    if len(str1) != len(str2):\n        return False\n    \n    str1_counts = {}\n    for char in str1:\n        if char in str1_counts:\n            str1_counts[char] += 1\n        else:\n            str1_counts[char] = 1\n            \n    str2_counts = {}\n    for char in str2:\n        if char in str2_counts:\n            str2_counts[char] += 1\n        else:\n            str2_counts[char] = 1\n            \n    for char in str1_counts:\n        if str1_counts[char] != str2_counts.get(char, 0):\n            return False\n    \n    return True",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompare two strings in Python to determine if they are anagrams of one another.\n\n### Input:\nstr1 = \"abcd\"\nstr2 = \"dcba\"\n\n### Output:\ndef is_anagram(str1, str2):\n    \"\"\"\n    Checks if two strings are anagrams of one another\n    \"\"\"\n    if len(str1) != len(str2):\n        return False\n    \n    str1_counts = {}\n    for char in str1:\n        if char in str1_counts:\n            str1_counts[char] += 1\n        else:\n            str1_counts[char] = 1\n            \n    str2_counts = {}\n    for char in str2:\n        if char in str2_counts:\n            str2_counts[char] += 1\n        else:\n            str2_counts[char] = 1\n            \n    for char in str1_counts:\n        if str1_counts[char] != str2_counts.get(char, 0):\n            return False\n    \n    return True"
    },
    {
        "instruction": "Create a Python web scraper that retrieves the title and URL of the latest 10 news articles published on a given website.",
        "input": "URL of the website: https://www.example.com",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\n\n# Scrape the HTML at the url\nr = requests.get(url)\n\n# Turn the HTML into a Beautiful Soup object\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Find the latest 10 news articles on the webpage\nresults = soup.find_all('div', {'class': 'article'})[:10]\n\n# Loop through each article\nfor result in results:\n # Extract the title of the article\n title = result.find('h3').text\n\n # Extract the URL of the article\n link = result.find('a')['href']\n\n # Print the title and URL\n print(title)\n print(f\"{url}{link}\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python web scraper that retrieves the title and URL of the latest 10 news articles published on a given website.\n\n### Input:\nURL of the website: https://www.example.com\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\n\n# Scrape the HTML at the url\nr = requests.get(url)\n\n# Turn the HTML into a Beautiful Soup object\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Find the latest 10 news articles on the webpage\nresults = soup.find_all('div', {'class': 'article'})[:10]\n\n# Loop through each article\nfor result in results:\n # Extract the title of the article\n title = result.find('h3').text\n\n # Extract the URL of the article\n link = result.find('a')['href']\n\n # Print the title and URL\n print(title)\n print(f\"{url}{link}\")"
    },
    {
        "instruction": "Generate a Python script to generate all combinations of a list.",
        "input": "[1, 2, 3]",
        "output": "import itertools\n\ndef combinations(list):\n comb = itertools.combinations(list, 2)\n return [list(x) for x in set(comb)]\n\nlist = [1, 2, 3]\n\nresult = combinations(list)\n\nprint(f'The list of combinations is {result}')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to generate all combinations of a list.\n\n### Input:\n[1, 2, 3]\n\n### Output:\nimport itertools\n\ndef combinations(list):\n comb = itertools.combinations(list, 2)\n return [list(x) for x in set(comb)]\n\nlist = [1, 2, 3]\n\nresult = combinations(list)\n\nprint(f'The list of combinations is {result}')"
    },
    {
        "instruction": "Create a function to calculate the Fibonacci number at a given index in Python.",
        "input": "",
        "output": "def FibonacciNumber(index):\n    if index == 0:\n        return 0\n    elif index == 1:\n        return 1\n    else: \n        return FibonacciNumber(index - 1) + FibonacciNumber(index - 2)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to calculate the Fibonacci number at a given index in Python.\n\n### Input:\n\n\n### Output:\ndef FibonacciNumber(index):\n    if index == 0:\n        return 0\n    elif index == 1:\n        return 1\n    else: \n        return FibonacciNumber(index - 1) + FibonacciNumber(index - 2)"
    },
    {
        "instruction": "Compute the sum of the fibonacci sequence up to n using a recursive Python function.",
        "input": "5",
        "output": "def fib_sum(n):\n  if n <= 1:\n    return n\n  else:\n    return fib_sum(n-1) + fib_sum(n-2) + n\n\nprint(fib_sum(5))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the sum of the fibonacci sequence up to n using a recursive Python function.\n\n### Input:\n5\n\n### Output:\ndef fib_sum(n):\n  if n <= 1:\n    return n\n  else:\n    return fib_sum(n-1) + fib_sum(n-2) + n\n\nprint(fib_sum(5))"
    },
    {
        "instruction": "Write a function in Python that merges two string and removes the duplicates.",
        "input": "string_1 = 'one'\nstring_2 = 'two'",
        "output": "def merge_strings(string_1, string_2):\n    s = set(string_1 + string_2)\n    merged_string = ''.join(s)\n    return merged_string\n\nmerged_string = merge_strings(string_1, string_2)\nprint(merged_string)\n\n'''\nOutput:\nonetwo\n'''",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that merges two string and removes the duplicates.\n\n### Input:\nstring_1 = 'one'\nstring_2 = 'two'\n\n### Output:\ndef merge_strings(string_1, string_2):\n    s = set(string_1 + string_2)\n    merged_string = ''.join(s)\n    return merged_string\n\nmerged_string = merge_strings(string_1, string_2)\nprint(merged_string)\n\n'''\nOutput:\nonetwo\n'''"
    },
    {
        "instruction": "Write a Python program to sort a list of tuples by the second item in each tuple.",
        "input": "[(5, 5), (4, 4), (3, 3), (2, 2), (1, 1)]",
        "output": "# sort a list of tuples by the second item in each tuple\ndef sort_tuple(tuples):\n    # sort in ascending order\n    tuples.sort(key=lambda x: x[1])\n    # return the list\n    return tuples",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a list of tuples by the second item in each tuple.\n\n### Input:\n[(5, 5), (4, 4), (3, 3), (2, 2), (1, 1)]\n\n### Output:\n# sort a list of tuples by the second item in each tuple\ndef sort_tuple(tuples):\n    # sort in ascending order\n    tuples.sort(key=lambda x: x[1])\n    # return the list\n    return tuples"
    },
    {
        "instruction": "Generate a python code to classify an array of numbers into a set of categories",
        "input": "Given an array of numbers [3, 8, 15, 7, 20], classify the array into two categories - even and odd.",
        "output": "def even_odd_classification(arr):\n    evens = []\n    odds = []\n\n    for i in arr:\n        if i % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    \n    return evens, odds",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python code to classify an array of numbers into a set of categories\n\n### Input:\nGiven an array of numbers [3, 8, 15, 7, 20], classify the array into two categories - even and odd.\n\n### Output:\ndef even_odd_classification(arr):\n    evens = []\n    odds = []\n\n    for i in arr:\n        if i % 2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    \n    return evens, odds"
    },
    {
        "instruction": "Write a python code snippet to take a parameter n and return the sum of the natural numbers up to that parameter.",
        "input": "",
        "output": "def sum_natural_numbers(n):\n    return (n * (n + 1)) / 2",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code snippet to take a parameter n and return the sum of the natural numbers up to that parameter.\n\n### Input:\n\n\n### Output:\ndef sum_natural_numbers(n):\n    return (n * (n + 1)) / 2"
    },
    {
        "instruction": "Write a Python program to retrieve the latest top 50 news headlines from The Guardian.",
        "input": "",
        "output": "import requests\nimport bs4\n\n# Retrieve the latest top 50 news headlines from The Guardian\nurl = 'https://www.theguardian.com/'\nresp = requests.get(url)\nsoup = bs4.BeautifulSoup(resp.text, features=\"html.parser\")\nheadlines = soup.find_all('h3')\ntop_50_headlines = [h3.text for h3 in headlines[:50]]\nprint(top_50_headlines)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to retrieve the latest top 50 news headlines from The Guardian.\n\n### Input:\n\n\n### Output:\nimport requests\nimport bs4\n\n# Retrieve the latest top 50 news headlines from The Guardian\nurl = 'https://www.theguardian.com/'\nresp = requests.get(url)\nsoup = bs4.BeautifulSoup(resp.text, features=\"html.parser\")\nheadlines = soup.find_all('h3')\ntop_50_headlines = [h3.text for h3 in headlines[:50]]\nprint(top_50_headlines)"
    },
    {
        "instruction": "Create a program in Python that takes in two strings and outputs the longest common substring.",
        "input": "str1 = \"abcedfg\"\nstr2 = \"adfghijk\"",
        "output": "def lcs(str1, str2):\n    matrix = [[0] * (len(str2) + 1) for i in range(len(str1) + 1)]\n\n    for i, x in enumerate(str1):\n        for j, y in enumerate(str2):\n            if x == y:\n                matrix[i+1][j+1] = matrix[i][j] + 1\n            else:\n                matrix[i+1][j+1] = max(\n                    matrix[i+1][j],\n                    matrix[i][j+1]\n                )\n\n    result = \"\"\n    x, y = len(str1), len(str2)\n    while x != 0 and y != 0:\n        if matrix[x][y] == matrix[x-1][y]:\n            x -= 1\n        elif matrix[x][y] == matrix[x][y-1]:\n            y -= 1\n        else:\n            result = str1[x-1] + result\n            x -= 1\n            y -= 1\n\n    return result",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes in two strings and outputs the longest common substring.\n\n### Input:\nstr1 = \"abcedfg\"\nstr2 = \"adfghijk\"\n\n### Output:\ndef lcs(str1, str2):\n    matrix = [[0] * (len(str2) + 1) for i in range(len(str1) + 1)]\n\n    for i, x in enumerate(str1):\n        for j, y in enumerate(str2):\n            if x == y:\n                matrix[i+1][j+1] = matrix[i][j] + 1\n            else:\n                matrix[i+1][j+1] = max(\n                    matrix[i+1][j],\n                    matrix[i][j+1]\n                )\n\n    result = \"\"\n    x, y = len(str1), len(str2)\n    while x != 0 and y != 0:\n        if matrix[x][y] == matrix[x-1][y]:\n            x -= 1\n        elif matrix[x][y] == matrix[x][y-1]:\n            y -= 1\n        else:\n            result = str1[x-1] + result\n            x -= 1\n            y -= 1\n\n    return result"
    },
    {
        "instruction": "Create a Python function for sorting a given list of integers using QuickSort algorithm.",
        "input": "[8,5,4,7,3,1]",
        "output": "def quick_sort(numbers):\n    if len(numbers) <= 1:\n        return numbers \n    else:\n        pivot = numbers[0]\n        less = [i for i in numbers[1:] if i <= pivot]\n        greater = [i for i in numbers[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)\n\nnumbers = [8,5,4,7,3,1]\nsorted_numbers = quick_sort(numbers)\nprint(sorted_numbers)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function for sorting a given list of integers using QuickSort algorithm.\n\n### Input:\n[8,5,4,7,3,1]\n\n### Output:\ndef quick_sort(numbers):\n    if len(numbers) <= 1:\n        return numbers \n    else:\n        pivot = numbers[0]\n        less = [i for i in numbers[1:] if i <= pivot]\n        greater = [i for i in numbers[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)\n\nnumbers = [8,5,4,7,3,1]\nsorted_numbers = quick_sort(numbers)\nprint(sorted_numbers)"
    },
    {
        "instruction": "Create a Python code snippet to remove all elements within a list with value 0.",
        "input": "my_list = [0, 2, 3, 0, 4]",
        "output": "my_list = [0, 2, 3, 0, 4]\nmy_list[:] = [val for val in my_list if val != 0]\nprint(my_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code snippet to remove all elements within a list with value 0.\n\n### Input:\nmy_list = [0, 2, 3, 0, 4]\n\n### Output:\nmy_list = [0, 2, 3, 0, 4]\nmy_list[:] = [val for val in my_list if val != 0]\nprint(my_list)"
    },
    {
        "instruction": "Create a Python function that takes two strings and returns a list of words which are present in both the strings.",
        "input": "string1 = \"hello world is a beautiful place\"\nstring2 = \"coding is a wonderful experience\"",
        "output": "def intersection(string1, string2):\n    # Tokenizing both strings into words\n    tokens1 = string1.split(\" \")\n    tokens2 = string2.split(\" \")\n\n    # Store words which are present in both strings\n    intersection_words = []\n\n    # Iterating tokens1\n    for token1 in tokens1:\n        # For each token in tokens1, check if present in tokens2\n        if token1 in tokens2:\n            # If present, add to intersection_words\n            intersection_words.append(token1)\n\n    # Return the intersection_words\n    return intersection_words\n\nintersection(string1, string2) #Output: ['is', 'a']",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes two strings and returns a list of words which are present in both the strings.\n\n### Input:\nstring1 = \"hello world is a beautiful place\"\nstring2 = \"coding is a wonderful experience\"\n\n### Output:\ndef intersection(string1, string2):\n    # Tokenizing both strings into words\n    tokens1 = string1.split(\" \")\n    tokens2 = string2.split(\" \")\n\n    # Store words which are present in both strings\n    intersection_words = []\n\n    # Iterating tokens1\n    for token1 in tokens1:\n        # For each token in tokens1, check if present in tokens2\n        if token1 in tokens2:\n            # If present, add to intersection_words\n            intersection_words.append(token1)\n\n    # Return the intersection_words\n    return intersection_words\n\nintersection(string1, string2) #Output: ['is', 'a']"
    },
    {
        "instruction": "Create a geo-fenced notification system in Python.",
        "input": "",
        "output": "import geocoder\n\ndef notification_system(user_location, message):\n    g = geocoder.ip(user_location)\n    latitude, longitude = g.latlng\n\n    # create a geo-fence around user location\n    radius = 10 # in kilometers\n    center = (latitude, longitude)\n\n    # check if the user is within the geo-fence\n    if is_within_fence(center, radius):\n        # send notification to the user\n        send_notification(message)\n\ndef is_within_fence(center, radius):\n    pass\n\ndef send_notification(message):\n    pass",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a geo-fenced notification system in Python.\n\n### Input:\n\n\n### Output:\nimport geocoder\n\ndef notification_system(user_location, message):\n    g = geocoder.ip(user_location)\n    latitude, longitude = g.latlng\n\n    # create a geo-fence around user location\n    radius = 10 # in kilometers\n    center = (latitude, longitude)\n\n    # check if the user is within the geo-fence\n    if is_within_fence(center, radius):\n        # send notification to the user\n        send_notification(message)\n\ndef is_within_fence(center, radius):\n    pass\n\ndef send_notification(message):\n    pass"
    },
    {
        "instruction": "Create an encrypted message sending system with Python.",
        "input": "Not applicable",
        "output": "import string\nimport random\n\ndef encrypt_message(plain_message, key):\n encrypted_message = ''\n for letter in plain_message:\n encrypted_message += chr((ord(letter) + int(key)) % 126)\n return encrypted_message\n\ndef decrypt_message(cipher_message, key):\n decrypted_message = ''\n for letter in cipher_message:\n decrypted_message += chr((ord(letter) - int(key)) % 126)\n return decrypted_message\n\ndef generate_key():\n key = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\n return key\n\ndef main():\n message = input('Enter message to encrypt: ')\n key = generate_key()\nencrypted_message = encrypt_message(message, key)\ndecrypted_message = decrypt_message(encrypted_message, key)\n\nprint('Encrypted message: ', encrypted_message)\nprint('Key: ', key)\nprint('Decrypted message: ', decrypted_message)\n\nmain()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an encrypted message sending system with Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport string\nimport random\n\ndef encrypt_message(plain_message, key):\n encrypted_message = ''\n for letter in plain_message:\n encrypted_message += chr((ord(letter) + int(key)) % 126)\n return encrypted_message\n\ndef decrypt_message(cipher_message, key):\n decrypted_message = ''\n for letter in cipher_message:\n decrypted_message += chr((ord(letter) - int(key)) % 126)\n return decrypted_message\n\ndef generate_key():\n key = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\n return key\n\ndef main():\n message = input('Enter message to encrypt: ')\n key = generate_key()\nencrypted_message = encrypt_message(message, key)\ndecrypted_message = decrypt_message(encrypted_message, key)\n\nprint('Encrypted message: ', encrypted_message)\nprint('Key: ', key)\nprint('Decrypted message: ', decrypted_message)\n\nmain()"
    },
    {
        "instruction": "Create a Python script that uses regular expressions to find all phone numbers in a string.",
        "input": "The following phone number should be found: (111) 111-1111",
        "output": "import re\n\nphone_string = \"(111) 111-1111\"\n\nphone_numbers = re.findall(r'\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4}', phone_string)\n\nfor number in phone_numbers:\n print(number)\n# Output: (111) 111-1111",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that uses regular expressions to find all phone numbers in a string.\n\n### Input:\nThe following phone number should be found: (111) 111-1111\n\n### Output:\nimport re\n\nphone_string = \"(111) 111-1111\"\n\nphone_numbers = re.findall(r'\\(?\\d{3}\\)?-?\\s?\\d{3}-\\d{4}', phone_string)\n\nfor number in phone_numbers:\n print(number)\n# Output: (111) 111-1111"
    },
    {
        "instruction": "Write a loop in Python that accumulates the sum of the numbers in an array.",
        "input": "[1, 2, 3]",
        "output": "sum = 0\n\nfor num in [1, 2, 3]:\n    sum += num\n\nprint(sum)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a loop in Python that accumulates the sum of the numbers in an array.\n\n### Input:\n[1, 2, 3]\n\n### Output:\nsum = 0\n\nfor num in [1, 2, 3]:\n    sum += num\n\nprint(sum)"
    },
    {
        "instruction": "Write a Python class to model a polynomial.",
        "input": "",
        "output": "class Polynomial:\n    def __init__(self, coeffs):\n        self.coeffs = coeffs\n    \n    # Implement a method to evaluate the polynomial at a given x value.\n    def evaluate(self, x):\n        result = 0\n        for i, coeff in enumerate(self.coeffs):\n            result += coeff * x**i\n        return result",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class to model a polynomial.\n\n### Input:\n\n\n### Output:\nclass Polynomial:\n    def __init__(self, coeffs):\n        self.coeffs = coeffs\n    \n    # Implement a method to evaluate the polynomial at a given x value.\n    def evaluate(self, x):\n        result = 0\n        for i, coeff in enumerate(self.coeffs):\n            result += coeff * x**i\n        return result"
    },
    {
        "instruction": "Write a Python program to convert a list of RGB colors to HEX colors.",
        "input": "colors: [[255, 0, 0], [255, 128, 0], [255, 255, 0], [128, 255, 0], [0, 255, 0]]",
        "output": "def rgb_to_hex(colors):\n    hex_colors = []\n    for color in colors:\n        hex_color = \"#\"\n        for value in color:\n            hex_value = hex(value)[2:]\n            if len(hex_value) == 1:\n                hex_value = \"0\" + hex_value\n            hex_color += hex_value\n        hex_colors.append(hex_color)\n    return hex_colors",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a list of RGB colors to HEX colors.\n\n### Input:\ncolors: [[255, 0, 0], [255, 128, 0], [255, 255, 0], [128, 255, 0], [0, 255, 0]]\n\n### Output:\ndef rgb_to_hex(colors):\n    hex_colors = []\n    for color in colors:\n        hex_color = \"#\"\n        for value in color:\n            hex_value = hex(value)[2:]\n            if len(hex_value) == 1:\n                hex_value = \"0\" + hex_value\n            hex_color += hex_value\n        hex_colors.append(hex_color)\n    return hex_colors"
    },
    {
        "instruction": "This code defines a Python module that provides support for exporting Qt's MenuBars/Menus over DBUS. To use it, import the necessary modules and create a QMenu object. Then create a DBusMenu object and call its publish_new_menu method, passing in the QMenu object. Finally, start the application event loop.",
        "input": "",
        "output": "#!/usr/bin/env python\n# vim:fileencoding=utf-8\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\n\n__license__ = 'GPL v3'\n__copyright__ = '2014, Kovid Goyal <kovid at kovidgoyal.net>'\n\n# Support for excporting Qt's MenuBars/Menus over DBUS. The API is defined in\n# dbus-menu.xml from the libdbusmenu project https://launchpad.net/libdbusmenu\n\nimport dbus\nfrom PyQt5.Qt import (\n    QApplication, QMenu, QIcon, QKeySequence, QObject, QEvent, QTimer, pyqtSignal, Qt)\n\nfrom calibre.utils.dbus_service import Object, BusName, method as dbus_method, dbus_property, signal as dbus_signal\nfrom calibre.gui2.dbus_export.utils import (\n    setup_for_cli_run, swap_mnemonic_char, key_sequence_to_dbus_shortcut, icon_to_dbus_menu_icon)\n\nnull = object()\n\ndef PropDict(mapping=()):\n    return dbus.Dictionary(mapping, signature='sv')\n\ndef create_properties_for_action(ac, previous=None):\n    ans = PropDict()\n    if ac.isSeparator():\n        ans['type'] = 'separator'\n        if not ac.isVisible():\n            ans['visible'] = False\n        return ans\n    text = ac.text() or ac.iconText()\n    if text:\n        ans['label'] = swap_mnemonic_char(text)\n    if not ac.isEnabled():\n        ans['enabled'] = False\n    if not ac.isVisible() or ac.property('blocked') is True:\n        ans['visible'] = False\n    if ac.menu() is not None:\n        ans['children-display'] = 'submenu'\n    if ac.isCheckable():\n        exclusive = ac.actionGroup() is not None and ac.actionGroup().isExclusive()\n        ans['toggle-type'] = 'radio' if exclusive else 'checkmark'\n        ans['toggle-state'] = int(ac.isChecked())\n    shortcuts = ac.shortcuts()\n    if shortcuts:\n        sc = dbus.Array(signature='as')\n        for s in shortcuts:\n            if not s.isEmpty():\n                for x in key_sequence_to_dbus_shortcut(s):\n                    sc.append(dbus.Array(x, signature='s'))\n        if sc:\n            ans['shortcut'] = sc[:1]  # Unity fails to display the shortcuts at all if more than one is specified\n    if ac.isIconVisibleInMenu():\n        icon = ac.icon()\n        if previous and previous.get('x-qt-icon-cache-key') == icon.cacheKey():\n            for x in 'icon-data x-qt-icon-cache-key'.split():\n                ans[x] = previous[x]\n        else:\n            data = icon_to_dbus_menu_icon(ac.icon())\n            if data is not None:\n                ans['icon-data'] = data\n                ans['x-qt-icon-cache-key'] = icon.cacheKey()\n    return ans\n\ndef menu_actions(menu):\n    try:\n        return menu.actions()\n    except TypeError:\n        if isinstance(menu, QMenu):\n            return QMenu.actions(menu)\n        raise\n\nclass DBusMenu(QObject):\n\n    handle_event_signal = pyqtSignal(object, object, object, object)\n\n    def __init__(self, object_path, parent=None, bus=None):\n        QObject.__init__(self, parent)\n        # Unity barfs is the Event DBUS method does not return immediately, so\n        # handle it asynchronously\n        self.handle_event_signal.connect(self.handle_event, type=Qt.QueuedConnection)\n        self.dbus_api = DBusMenuAPI(self, object_path, bus=bus)\n        self.set_status = self.dbus_api.set_status\n        self._next_id = 0\n        self.action_changed_timer = t = QTimer(self)\n        t.setInterval(0), t.setSingleShot(True), t.timeout.connect(self.actions_changed)\n        self.layout_changed_timer = t = QTimer(self)\n        t.setInterval(0), t.setSingleShot(True), t.timeout.connect(self.layouts_changed)\n        self.init_maps()\n\n    @property\n    def object_path(self):\n        return self.dbus_api._object_path\n\n    def init_maps(self, qmenu=None):\n        self.action_changes = set()\n        self.layout_changes = set()\n        self.qmenu = qmenu\n        self._id_to_action, self._action_to_id = {}, {}\n        self._action_properties = {}\n\n    @property\n    def next_id(self):\n        self._next_id += 1\n        return self._next_id\n\n    def id_to_action(self, action_id):\n        if self.qmenu is None:\n            return None\n        return self._id_to_action.get(action_id)\n\n    def action_to_id(self, action):\n        if self.qmenu is None:\n            return None\n        return self._action_to_id.get(action)\n\n    def action_properties(self, action_id, restrict_to=None):\n        if self.qmenu is None:\n            return {}\n        ans = self._action_properties.get(action_id, PropDict())\n        if restrict_to:\n            ans = PropDict({k:v for k, v in ans.iteritems() if k in restrict_to})\n        return ans\n\n    def publish_new_menu(self, qmenu=None):\n        self.init_maps(qmenu)\n        if qmenu is not None:\n            qmenu.destroyed.connect(lambda obj=None:self.publish_new_menu())\n            ac = qmenu.menuAction()\n            self.add_action(ac)\n        self.dbus_api.LayoutUpdated(self.dbus_api.revision, 0)\n\n    def set_visible(self, visible):\n        ac = self.id_to_action(0)\n        if ac is not None and self.qmenu is not None:\n            changed = False\n            blocked = not visible\n            for ac in menu_actions(ac.menu()):\n                ac_id = self.action_to_id(ac)\n                if ac_id is not None:\n                    old = ac.property('blocked')\n                    if old is not blocked:\n                        ac.setProperty('blocked', blocked)\n                        self.action_changes.add(ac_id)\n                        changed = True\n            if changed:\n                self.action_changed_timer.start()\n\n    def add_action(self, ac):\n        ac_id = 0 if ac.menu() is self.qmenu else self.next_id\n        self._id_to_action[ac_id] = ac\n        self._action_to_id[ac] = ac_id\n        self._action_properties[ac_id] = create_properties_for_action(ac)\n        if ac.menu() is not None:\n            self.add_menu(ac.menu())\n\n    def add_menu(self, menu):\n        menu.installEventFilter(self)\n        for ac in menu_actions(menu):\n            self.add_action(ac)\n\n    def eventFilter(self, obj, ev):\n        ac = getattr(obj, 'menuAction', lambda : None)()\n        ac_id = self.action_to_id(ac)\n        if ac_id is not None:\n            etype = ev.type()\n            if etype == QEvent.ActionChanged:\n                ac_id = self.action_to_id(ev.action())\n                self.action_changes.add(ac_id)\n                self.action_changed_timer.start()\n            elif etype == QEvent.ActionAdded:\n                self.layout_changes.add(ac_id)\n                self.layout_changed_timer.start()\n                self.add_action(ev.action())\n            elif etype == QEvent.ActionRemoved:\n                self.layout_changes.add(ac_id)\n                self.layout_changed_timer.start()\n                self.action_removed(ev.action())\n        return False\n\n    def actions_changed(self):\n        updated_props = dbus.Array(signature='(ia{sv})')\n        removed_props = dbus.Array(signature='(ias)')\n        for ac_id in self.action_changes:\n            ac = self.id_to_action(ac_id)\n            if ac is None:\n                continue\n            old_props = self.action_properties(ac_id)\n            new_props = self._action_properties[ac_id] = create_properties_for_action(ac, old_props)\n            removed = set(old_props) - set(new_props)\n            if removed:\n                removed_props.append((ac_id, dbus.Array(removed, signature='as')))\n            updated = PropDict({k:v for k, v in new_props.iteritems() if v != old_props.get(k, null)})\n            if updated:\n                updated_props.append((ac_id, updated))\n        self.action_changes = set()\n        if updated_props or removed_props:\n            self.dbus_api.ItemsPropertiesUpdated(updated_props, removed_props)\n        return updated_props, removed_props\n\n    def layouts_changed(self):\n        changes = set()\n        for ac_id in self.layout_changes:\n            if ac_id in self._id_to_action:\n                changes.add(ac_id)\n        self.layout_changes = set()\n        if changes:\n            self.dbus_api.revision += 1\n            for change in changes:\n                self.dbus_api.LayoutUpdated(self.dbus_api.revision, change)\n        return changes\n\n    def action_is_in_a_menu(self, ac):\n        all_menus = {ac.menu() for ac in self._action_to_id}\n        all_menus.discard(None)\n        return bool(set(ac.associatedWidgets()).intersection(all_menus))\n\n    def action_removed(self, ac):\n        if not self.action_is_in_a_menu(ac):\n            ac_id = self._action_to_id.pop(ac, None)\n            self._id_to_action.pop(ac_id, None)\n            self._action_properties.pop(ac_id, None)\n\n    def get_layout(self, parent_id, depth, property_names):\n        # Ensure any pending updates are done, as they are needed now\n        self.actions_changed()\n        self.layouts_changed()\n        property_names = property_names or None\n        props = self.action_properties(parent_id, property_names)\n        return parent_id, props, self.get_layout_children(parent_id, depth, property_names)\n\n    def get_layout_children(self, parent_id, depth, property_names):\n        ans = dbus.Array(signature='(ia{sv}av)')\n        ac = self.id_to_action(parent_id)\n        if ac is not None and depth != 0 and ac.menu() is not None:\n            for child in menu_actions(ac.menu()):\n                child_id = self.action_to_id(child)\n                if child_id is not None:\n                    props = self.action_properties(child_id, property_names)\n                    ans.append((child_id, props, self.get_layout_children(child_id, depth - 1, property_names)))\n        return ans\n\n    def get_properties(self, ids=None, property_names=None):\n        property_names = property_names or None\n        ans = dbus.Array(signature='(ia{sv})')\n        for action_id in (ids or self._id_to_action):\n            ans.append((action_id, self.action_properties(action_id, property_names)))\n        return ans\n\n    def handle_event(self, action_id, event, data, timestamp):\n        ac = self.id_to_action(action_id)\n        if event == 'clicked':\n            if ac.isCheckable():\n                ac.toggle()\n            ac.triggered.emit(ac.isCheckable() and ac.isChecked())\n\n    def handle_about_to_show(self, ac):\n        child_ids = {self.action_to_id(x) for x in menu_actions(ac.menu())}\n        child_ids.discard(None)\n        ac_id = self.action_to_id(ac)\n        ac.menu().aboutToShow.emit()\n        if ac_id in self.layout_changes or child_ids.intersection(self.action_changes):\n            return True\n        return False\n\nclass DBusMenuAPI(Object):\n\n    IFACE = 'com.canonical.dbusmenu'\n\n    def __init__(self, menu, object_path, bus=None):\n        if bus is None:\n            bus = dbus.SessionBus()\n        Object.__init__(self, bus, object_path)\n        self.status = 'normal'\n        self.menu = menu\n        self.revision = 0\n\n    @dbus_property(IFACE, signature='u')\n    def Version(self):\n        return 3  # GTK 3 uses 3, KDE 4 uses 2\n\n    @dbus_property(IFACE, signature='s', emits_changed_signal=True)\n    def Status(self):\n        return self.status\n\n    def set_status(self, normal=True):\n        self.status = 'normal' if normal else 'notice'\n        self.PropertiesChanged(self.IFACE, {'Status': self.status}, [])\n\n    @dbus_property(IFACE, signature='s')\n    def TextDirection(self):\n        return 'ltr' if QApplication.instance().isLeftToRight() else 'rtl'\n\n    @dbus_property(IFACE, signature='as')\n    def IconThemePath(self):\n        return dbus.Array(signature='s')\n\n    @dbus_method(IFACE, in_signature='iias', out_signature='u(ia{sv}av)')\n    def GetLayout(self, parentId, recursionDepth, propertyNames):\n        layout = self.menu.get_layout(parentId, recursionDepth, propertyNames)\n        return self.revision, layout\n\n    @dbus_method(IFACE, in_signature='aias', out_signature='a(ia{sv})')\n    def GetGroupProperties(self, ids, propertyNames):\n        return self.menu.get_properties(ids, propertyNames)\n\n    @dbus_method(IFACE, in_signature='is', out_signature='v')\n    def GetProperty(self, id, name):\n        return self.menu.action_properties(id).get(name, '')\n\n    @dbus_method(IFACE, in_signature='isvu', out_signature='')\n    def Event(self, id, eventId, data, timestamp):\n        ''' This is called by the applet to notify the application an event happened on a\n        menu item. eventId can be one of the following::\n            * \"clicked\"\n            * \"hovered\"\n            * \"opened\"\n            * \"closed\"\n        Vendor specific events can be added by prefixing them with \"x-<vendor>-\"'''\n        if self.menu.id_to_action(id) is not None:\n            self.menu.handle_event_signal.emit(id, eventId, data, timestamp)\n\n    @dbus_method(IFACE, in_signature='a(isvu)', out_signature='ai')\n    def EventGroup(self, events):\n        ''' Used to pass a set of events as a single message for possibily\n        several different menuitems.  This is done to optimize DBus traffic.\n        Should return a list of ids that are not found. events is a list of\n        events in the same format as used for the Event method.'''\n        missing = dbus.Array(signature='u')\n        for id, eventId, data, timestamp in events:\n            if self.menu.id_to_action(id) is not None:\n                self.menu.handle_event_signal.emit(id, eventId, data, timestamp)\n            else:\n                missing.append(id)\n        return missing\n\n    @dbus_method(IFACE, in_signature='i', out_signature='b')\n    def AboutToShow(self, id):\n        ac = self.menu.id_to_action(id)\n        if ac is not None and ac.menu() is not None:\n            return self.menu.handle_about_to_show(ac)\n        return False\n\n    @dbus_method(IFACE, in_signature='ai', out_signature='aiai')\n    def AboutToShowGroup(self, ids):\n        updates_needed = dbus.Array(signature='i')\n        id_errors = dbus.Array(signature='i')\n        for ac_id in ids:\n            ac = self.menu.id_to_action(id)\n            if ac is not None and ac.menu() is not None:\n                if self.menu.handle_about_to_show(ac):\n                    updates_needed.append(ac_id)\n            else:\n                id_errors.append(ac_id)\n        return updates_needed, id_errors\n\n    @dbus_signal(IFACE, 'a(ia{sv})a(ias)')\n    def ItemsPropertiesUpdated(self, updatedProps, removedProps):\n        pass\n\n    @dbus_signal(IFACE, 'ui')\n    def LayoutUpdated(self, revision, parent):\n        pass\n\n    @dbus_signal(IFACE, 'iu')\n    def ItemActivationRequested(self, id, timestamp):\n        pass\n\ndef test():\n    setup_for_cli_run()\n    app = QApplication([])\n    bus = dbus.SessionBus()\n    dbus_name = BusName('com.calibre-ebook.TestDBusMenu', bus=bus, do_not_queue=True)\n    m = QMenu()\n    ac = m.addAction(QIcon(I('window-close.png')), 'Quit', app.quit)\n    ac.setShortcut(QKeySequence('Ctrl+Q'))\n    menu = DBusMenu('/Menu', bus=bus)\n    menu.publish_new_menu(m)\n    app.exec_()\n    del dbus_name\n\nif __name__ == '__main__':\n    test()\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code defines a Python module that provides support for exporting Qt's MenuBars/Menus over DBUS. To use it, import the necessary modules and create a QMenu object. Then create a DBusMenu object and call its publish_new_menu method, passing in the QMenu object. Finally, start the application event loop.\n\n### Input:\n\n\n### Output:\n#!/usr/bin/env python\n# vim:fileencoding=utf-8\nfrom __future__ import (unicode_literals, division, absolute_import,\n                        print_function)\n\n__license__ = 'GPL v3'\n__copyright__ = '2014, Kovid Goyal <kovid at kovidgoyal.net>'\n\n# Support for excporting Qt's MenuBars/Menus over DBUS. The API is defined in\n# dbus-menu.xml from the libdbusmenu project https://launchpad.net/libdbusmenu\n\nimport dbus\nfrom PyQt5.Qt import (\n    QApplication, QMenu, QIcon, QKeySequence, QObject, QEvent, QTimer, pyqtSignal, Qt)\n\nfrom calibre.utils.dbus_service import Object, BusName, method as dbus_method, dbus_property, signal as dbus_signal\nfrom calibre.gui2.dbus_export.utils import (\n    setup_for_cli_run, swap_mnemonic_char, key_sequence_to_dbus_shortcut, icon_to_dbus_menu_icon)\n\nnull = object()\n\ndef PropDict(mapping=()):\n    return dbus.Dictionary(mapping, signature='sv')\n\ndef create_properties_for_action(ac, previous=None):\n    ans = PropDict()\n    if ac.isSeparator():\n        ans['type'] = 'separator'\n        if not ac.isVisible():\n            ans['visible'] = False\n        return ans\n    text = ac.text() or ac.iconText()\n    if text:\n        ans['label'] = swap_mnemonic_char(text)\n    if not ac.isEnabled():\n        ans['enabled'] = False\n    if not ac.isVisible() or ac.property('blocked') is True:\n        ans['visible'] = False\n    if ac.menu() is not None:\n        ans['children-display'] = 'submenu'\n    if ac.isCheckable():\n        exclusive = ac.actionGroup() is not None and ac.actionGroup().isExclusive()\n        ans['toggle-type'] = 'radio' if exclusive else 'checkmark'\n        ans['toggle-state'] = int(ac.isChecked())\n    shortcuts = ac.shortcuts()\n    if shortcuts:\n        sc = dbus.Array(signature='as')\n        for s in shortcuts:\n            if not s.isEmpty():\n                for x in key_sequence_to_dbus_shortcut(s):\n                    sc.append(dbus.Array(x, signature='s'))\n        if sc:\n            ans['shortcut'] = sc[:1]  # Unity fails to display the shortcuts at all if more than one is specified\n    if ac.isIconVisibleInMenu():\n        icon = ac.icon()\n        if previous and previous.get('x-qt-icon-cache-key') == icon.cacheKey():\n            for x in 'icon-data x-qt-icon-cache-key'.split():\n                ans[x] = previous[x]\n        else:\n            data = icon_to_dbus_menu_icon(ac.icon())\n            if data is not None:\n                ans['icon-data'] = data\n                ans['x-qt-icon-cache-key'] = icon.cacheKey()\n    return ans\n\ndef menu_actions(menu):\n    try:\n        return menu.actions()\n    except TypeError:\n        if isinstance(menu, QMenu):\n            return QMenu.actions(menu)\n        raise\n\nclass DBusMenu(QObject):\n\n    handle_event_signal = pyqtSignal(object, object, object, object)\n\n    def __init__(self, object_path, parent=None, bus=None):\n        QObject.__init__(self, parent)\n        # Unity barfs is the Event DBUS method does not return immediately, so\n        # handle it asynchronously\n        self.handle_event_signal.connect(self.handle_event, type=Qt.QueuedConnection)\n        self.dbus_api = DBusMenuAPI(self, object_path, bus=bus)\n        self.set_status = self.dbus_api.set_status\n        self._next_id = 0\n        self.action_changed_timer = t = QTimer(self)\n        t.setInterval(0), t.setSingleShot(True), t.timeout.connect(self.actions_changed)\n        self.layout_changed_timer = t = QTimer(self)\n        t.setInterval(0), t.setSingleShot(True), t.timeout.connect(self.layouts_changed)\n        self.init_maps()\n\n    @property\n    def object_path(self):\n        return self.dbus_api._object_path\n\n    def init_maps(self, qmenu=None):\n        self.action_changes = set()\n        self.layout_changes = set()\n        self.qmenu = qmenu\n        self._id_to_action, self._action_to_id = {}, {}\n        self._action_properties = {}\n\n    @property\n    def next_id(self):\n        self._next_id += 1\n        return self._next_id\n\n    def id_to_action(self, action_id):\n        if self.qmenu is None:\n            return None\n        return self._id_to_action.get(action_id)\n\n    def action_to_id(self, action):\n        if self.qmenu is None:\n            return None\n        return self._action_to_id.get(action)\n\n    def action_properties(self, action_id, restrict_to=None):\n        if self.qmenu is None:\n            return {}\n        ans = self._action_properties.get(action_id, PropDict())\n        if restrict_to:\n            ans = PropDict({k:v for k, v in ans.iteritems() if k in restrict_to})\n        return ans\n\n    def publish_new_menu(self, qmenu=None):\n        self.init_maps(qmenu)\n        if qmenu is not None:\n            qmenu.destroyed.connect(lambda obj=None:self.publish_new_menu())\n            ac = qmenu.menuAction()\n            self.add_action(ac)\n        self.dbus_api.LayoutUpdated(self.dbus_api.revision, 0)\n\n    def set_visible(self, visible):\n        ac = self.id_to_action(0)\n        if ac is not None and self.qmenu is not None:\n            changed = False\n            blocked = not visible\n            for ac in menu_actions(ac.menu()):\n                ac_id = self.action_to_id(ac)\n                if ac_id is not None:\n                    old = ac.property('blocked')\n                    if old is not blocked:\n                        ac.setProperty('blocked', blocked)\n                        self.action_changes.add(ac_id)\n                        changed = True\n            if changed:\n                self.action_changed_timer.start()\n\n    def add_action(self, ac):\n        ac_id = 0 if ac.menu() is self.qmenu else self.next_id\n        self._id_to_action[ac_id] = ac\n        self._action_to_id[ac] = ac_id\n        self._action_properties[ac_id] = create_properties_for_action(ac)\n        if ac.menu() is not None:\n            self.add_menu(ac.menu())\n\n    def add_menu(self, menu):\n        menu.installEventFilter(self)\n        for ac in menu_actions(menu):\n            self.add_action(ac)\n\n    def eventFilter(self, obj, ev):\n        ac = getattr(obj, 'menuAction', lambda : None)()\n        ac_id = self.action_to_id(ac)\n        if ac_id is not None:\n            etype = ev.type()\n            if etype == QEvent.ActionChanged:\n                ac_id = self.action_to_id(ev.action())\n                self.action_changes.add(ac_id)\n                self.action_changed_timer.start()\n            elif etype == QEvent.ActionAdded:\n                self.layout_changes.add(ac_id)\n                self.layout_changed_timer.start()\n                self.add_action(ev.action())\n            elif etype == QEvent.ActionRemoved:\n                self.layout_changes.add(ac_id)\n                self.layout_changed_timer.start()\n                self.action_removed(ev.action())\n        return False\n\n    def actions_changed(self):\n        updated_props = dbus.Array(signature='(ia{sv})')\n        removed_props = dbus.Array(signature='(ias)')\n        for ac_id in self.action_changes:\n            ac = self.id_to_action(ac_id)\n            if ac is None:\n                continue\n            old_props = self.action_properties(ac_id)\n            new_props = self._action_properties[ac_id] = create_properties_for_action(ac, old_props)\n            removed = set(old_props) - set(new_props)\n            if removed:\n                removed_props.append((ac_id, dbus.Array(removed, signature='as')))\n            updated = PropDict({k:v for k, v in new_props.iteritems() if v != old_props.get(k, null)})\n            if updated:\n                updated_props.append((ac_id, updated))\n        self.action_changes = set()\n        if updated_props or removed_props:\n            self.dbus_api.ItemsPropertiesUpdated(updated_props, removed_props)\n        return updated_props, removed_props\n\n    def layouts_changed(self):\n        changes = set()\n        for ac_id in self.layout_changes:\n            if ac_id in self._id_to_action:\n                changes.add(ac_id)\n        self.layout_changes = set()\n        if changes:\n            self.dbus_api.revision += 1\n            for change in changes:\n                self.dbus_api.LayoutUpdated(self.dbus_api.revision, change)\n        return changes\n\n    def action_is_in_a_menu(self, ac):\n        all_menus = {ac.menu() for ac in self._action_to_id}\n        all_menus.discard(None)\n        return bool(set(ac.associatedWidgets()).intersection(all_menus))\n\n    def action_removed(self, ac):\n        if not self.action_is_in_a_menu(ac):\n            ac_id = self._action_to_id.pop(ac, None)\n            self._id_to_action.pop(ac_id, None)\n            self._action_properties.pop(ac_id, None)\n\n    def get_layout(self, parent_id, depth, property_names):\n        # Ensure any pending updates are done, as they are needed now\n        self.actions_changed()\n        self.layouts_changed()\n        property_names = property_names or None\n        props = self.action_properties(parent_id, property_names)\n        return parent_id, props, self.get_layout_children(parent_id, depth, property_names)\n\n    def get_layout_children(self, parent_id, depth, property_names):\n        ans = dbus.Array(signature='(ia{sv}av)')\n        ac = self.id_to_action(parent_id)\n        if ac is not None and depth != 0 and ac.menu() is not None:\n            for child in menu_actions(ac.menu()):\n                child_id = self.action_to_id(child)\n                if child_id is not None:\n                    props = self.action_properties(child_id, property_names)\n                    ans.append((child_id, props, self.get_layout_children(child_id, depth - 1, property_names)))\n        return ans\n\n    def get_properties(self, ids=None, property_names=None):\n        property_names = property_names or None\n        ans = dbus.Array(signature='(ia{sv})')\n        for action_id in (ids or self._id_to_action):\n            ans.append((action_id, self.action_properties(action_id, property_names)))\n        return ans\n\n    def handle_event(self, action_id, event, data, timestamp):\n        ac = self.id_to_action(action_id)\n        if event == 'clicked':\n            if ac.isCheckable():\n                ac.toggle()\n            ac.triggered.emit(ac.isCheckable() and ac.isChecked())\n\n    def handle_about_to_show(self, ac):\n        child_ids = {self.action_to_id(x) for x in menu_actions(ac.menu())}\n        child_ids.discard(None)\n        ac_id = self.action_to_id(ac)\n        ac.menu().aboutToShow.emit()\n        if ac_id in self.layout_changes or child_ids.intersection(self.action_changes):\n            return True\n        return False\n\nclass DBusMenuAPI(Object):\n\n    IFACE = 'com.canonical.dbusmenu'\n\n    def __init__(self, menu, object_path, bus=None):\n        if bus is None:\n            bus = dbus.SessionBus()\n        Object.__init__(self, bus, object_path)\n        self.status = 'normal'\n        self.menu = menu\n        self.revision = 0\n\n    @dbus_property(IFACE, signature='u')\n    def Version(self):\n        return 3  # GTK 3 uses 3, KDE 4 uses 2\n\n    @dbus_property(IFACE, signature='s', emits_changed_signal=True)\n    def Status(self):\n        return self.status\n\n    def set_status(self, normal=True):\n        self.status = 'normal' if normal else 'notice'\n        self.PropertiesChanged(self.IFACE, {'Status': self.status}, [])\n\n    @dbus_property(IFACE, signature='s')\n    def TextDirection(self):\n        return 'ltr' if QApplication.instance().isLeftToRight() else 'rtl'\n\n    @dbus_property(IFACE, signature='as')\n    def IconThemePath(self):\n        return dbus.Array(signature='s')\n\n    @dbus_method(IFACE, in_signature='iias', out_signature='u(ia{sv}av)')\n    def GetLayout(self, parentId, recursionDepth, propertyNames):\n        layout = self.menu.get_layout(parentId, recursionDepth, propertyNames)\n        return self.revision, layout\n\n    @dbus_method(IFACE, in_signature='aias', out_signature='a(ia{sv})')\n    def GetGroupProperties(self, ids, propertyNames):\n        return self.menu.get_properties(ids, propertyNames)\n\n    @dbus_method(IFACE, in_signature='is', out_signature='v')\n    def GetProperty(self, id, name):\n        return self.menu.action_properties(id).get(name, '')\n\n    @dbus_method(IFACE, in_signature='isvu', out_signature='')\n    def Event(self, id, eventId, data, timestamp):\n        ''' This is called by the applet to notify the application an event happened on a\n        menu item. eventId can be one of the following::\n            * \"clicked\"\n            * \"hovered\"\n            * \"opened\"\n            * \"closed\"\n        Vendor specific events can be added by prefixing them with \"x-<vendor>-\"'''\n        if self.menu.id_to_action(id) is not None:\n            self.menu.handle_event_signal.emit(id, eventId, data, timestamp)\n\n    @dbus_method(IFACE, in_signature='a(isvu)', out_signature='ai')\n    def EventGroup(self, events):\n        ''' Used to pass a set of events as a single message for possibily\n        several different menuitems.  This is done to optimize DBus traffic.\n        Should return a list of ids that are not found. events is a list of\n        events in the same format as used for the Event method.'''\n        missing = dbus.Array(signature='u')\n        for id, eventId, data, timestamp in events:\n            if self.menu.id_to_action(id) is not None:\n                self.menu.handle_event_signal.emit(id, eventId, data, timestamp)\n            else:\n                missing.append(id)\n        return missing\n\n    @dbus_method(IFACE, in_signature='i', out_signature='b')\n    def AboutToShow(self, id):\n        ac = self.menu.id_to_action(id)\n        if ac is not None and ac.menu() is not None:\n            return self.menu.handle_about_to_show(ac)\n        return False\n\n    @dbus_method(IFACE, in_signature='ai', out_signature='aiai')\n    def AboutToShowGroup(self, ids):\n        updates_needed = dbus.Array(signature='i')\n        id_errors = dbus.Array(signature='i')\n        for ac_id in ids:\n            ac = self.menu.id_to_action(id)\n            if ac is not None and ac.menu() is not None:\n                if self.menu.handle_about_to_show(ac):\n                    updates_needed.append(ac_id)\n            else:\n                id_errors.append(ac_id)\n        return updates_needed, id_errors\n\n    @dbus_signal(IFACE, 'a(ia{sv})a(ias)')\n    def ItemsPropertiesUpdated(self, updatedProps, removedProps):\n        pass\n\n    @dbus_signal(IFACE, 'ui')\n    def LayoutUpdated(self, revision, parent):\n        pass\n\n    @dbus_signal(IFACE, 'iu')\n    def ItemActivationRequested(self, id, timestamp):\n        pass\n\ndef test():\n    setup_for_cli_run()\n    app = QApplication([])\n    bus = dbus.SessionBus()\n    dbus_name = BusName('com.calibre-ebook.TestDBusMenu', bus=bus, do_not_queue=True)\n    m = QMenu()\n    ac = m.addAction(QIcon(I('window-close.png')), 'Quit', app.quit)\n    ac.setShortcut(QKeySequence('Ctrl+Q'))\n    menu = DBusMenu('/Menu', bus=bus)\n    menu.publish_new_menu(m)\n    app.exec_()\n    del dbus_name\n\nif __name__ == '__main__':\n    test()\n"
    },
    {
        "instruction": "Generate a Python function that takes a dataframe and returns a new dataframe with only the columns that start with the letter 'A'.",
        "input": "",
        "output": "def filter_A_columns(df): \n    col_list = [col for col in df.columns if col[0] == 'A']\n    return df[col_list]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that takes a dataframe and returns a new dataframe with only the columns that start with the letter 'A'.\n\n### Input:\n\n\n### Output:\ndef filter_A_columns(df): \n    col_list = [col for col in df.columns if col[0] == 'A']\n    return df[col_list]"
    },
    {
        "instruction": "Create a Python program to encode an input string using base64 encoding.",
        "input": "",
        "output": "import base64\n\ndef encode_string(input_string):\n    encoded_bytes = base64.b64encode(input_string.encode('utf-8'))\n    return encoded_bytes.decode('utf-8')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to encode an input string using base64 encoding.\n\n### Input:\n\n\n### Output:\nimport base64\n\ndef encode_string(input_string):\n    encoded_bytes = base64.b64encode(input_string.encode('utf-8'))\n    return encoded_bytes.decode('utf-8')"
    },
    {
        "instruction": "Write Python code to print out the prime numbers from 1 to 100",
        "input": "",
        "output": "for i in range(2, 101):\n    for j in range(2, i):\n        if i % j == 0:\n            break\n    else:\n        print(i)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to print out the prime numbers from 1 to 100\n\n### Input:\n\n\n### Output:\nfor i in range(2, 101):\n    for j in range(2, i):\n        if i % j == 0:\n            break\n    else:\n        print(i)"
    },
    {
        "instruction": "Use an if-else statement in Python to determine if a number is even or odd.",
        "input": "n = 7",
        "output": "if n % 2 == 0:\n    print(n, 'is an even number')\nelse:\n    print(n, 'is an odd number')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse an if-else statement in Python to determine if a number is even or odd.\n\n### Input:\nn = 7\n\n### Output:\nif n % 2 == 0:\n    print(n, 'is an even number')\nelse:\n    print(n, 'is an odd number')"
    },
    {
        "instruction": "Write a Python program to compute the sum of two given integers.",
        "input": "a = 5\nb = 7",
        "output": "sum = a + b\nprint(sum) # 12",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compute the sum of two given integers.\n\n### Input:\na = 5\nb = 7\n\n### Output:\nsum = a + b\nprint(sum) # 12"
    },
    {
        "instruction": "Write a python code to",
        "input": "Extract the mean from a list of numbers.",
        "output": "def mean(lst):\n    total = 0\n    for x in lst:\n        total += x\n    return total / len(lst)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to\n\n### Input:\nExtract the mean from a list of numbers.\n\n### Output:\ndef mean(lst):\n    total = 0\n    for x in lst:\n        total += x\n    return total / len(lst)"
    },
    {
        "instruction": "Create a Python script that generates a random password of length n with a minimum required characters.",
        "input": "n = 8",
        "output": "import string\nimport random\n\ndef generate_password(length):\n    password_characters = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(password_characters) for i in range(length))\n\nprint(generate_password(8))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that generates a random password of length n with a minimum required characters.\n\n### Input:\nn = 8\n\n### Output:\nimport string\nimport random\n\ndef generate_password(length):\n    password_characters = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(password_characters) for i in range(length))\n\nprint(generate_password(8))"
    },
    {
        "instruction": "Create a Python script to automatically fill out a web form with a given set of data.",
        "input": "The name \"John Doe\" \nThe email \"john.doe@example.com\"",
        "output": "import requests\n\nurl = 'https://www.example.com/form-url'\n\nname = 'John Doe'\nemail = 'john.doe@example.com'\n\ndata = {\n 'name' : name,\n 'email' : email\n}\n\nresponse = requests.post(url, data)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to automatically fill out a web form with a given set of data.\n\n### Input:\nThe name \"John Doe\" \nThe email \"john.doe@example.com\"\n\n### Output:\nimport requests\n\nurl = 'https://www.example.com/form-url'\n\nname = 'John Doe'\nemail = 'john.doe@example.com'\n\ndata = {\n 'name' : name,\n 'email' : email\n}\n\nresponse = requests.post(url, data)"
    },
    {
        "instruction": "Create a program in Python that adds a given list of numbers.",
        "input": "[2, 5, 9]",
        "output": "def add_list(list_of_numbers):\n    sum = 0\n    for i in list_of_numbers:\n        sum += i\n    return sum\n\nlist = [2, 5, 9]\nresult = add_list(list)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that adds a given list of numbers.\n\n### Input:\n[2, 5, 9]\n\n### Output:\ndef add_list(list_of_numbers):\n    sum = 0\n    for i in list_of_numbers:\n        sum += i\n    return sum\n\nlist = [2, 5, 9]\nresult = add_list(list)\nprint(result)"
    },
    {
        "instruction": "Create a Python program to compute the sum of all integers from 1 to n.",
        "input": "Provide n: 10",
        "output": "# compute sum of all numbers from 1 to n\ndef compute_sum(n):\n sum = 0\n \n for i in range(1, n+1):\n sum += i\n \n return sum\n \nprint(compute_sum(10))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to compute the sum of all integers from 1 to n.\n\n### Input:\nProvide n: 10\n\n### Output:\n# compute sum of all numbers from 1 to n\ndef compute_sum(n):\n sum = 0\n \n for i in range(1, n+1):\n sum += i\n \n return sum\n \nprint(compute_sum(10))"
    },
    {
        "instruction": "Design a python program which will return the maximum element of a given list.",
        "input": "data = [10, 20, 50, 27, 11, 1]",
        "output": "def find_max_element(arr):\n    max_element = arr[0]\n    for num in arr[1:]:\n        if num > max_element:\n            max_element = num\n    return max_element",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program which will return the maximum element of a given list.\n\n### Input:\ndata = [10, 20, 50, 27, 11, 1]\n\n### Output:\ndef find_max_element(arr):\n    max_element = arr[0]\n    for num in arr[1:]:\n        if num > max_element:\n            max_element = num\n    return max_element"
    },
    {
        "instruction": "Implement a predictive text using a machine learning model in Python.",
        "input": "",
        "output": "#importing the libraries\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n#loading the dataset\ndata = np.load('text_data.npy')\nlabels = np.load('text_labels.npy')\n\n# vectorizing the data\nvectorizer = CountVectorizer()\nvectorized_data = vectorizer.fit_transform(data)\n\n#splitting the dataset into train and test\nX_train, X_test, y_train, y_test = train_test_split(vectorized_data, labels, test_size=0.2, random_state=0)\n\n#creating and fitting the model\nmodel = LogisticRegression().fit(X_train, y_train)\n\n#predicting the test data\ny_pred = model.predict(X_test)\n\n#calculating the accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(accuracy)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a predictive text using a machine learning model in Python.\n\n### Input:\n\n\n### Output:\n#importing the libraries\nimport numpy as np\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n#loading the dataset\ndata = np.load('text_data.npy')\nlabels = np.load('text_labels.npy')\n\n# vectorizing the data\nvectorizer = CountVectorizer()\nvectorized_data = vectorizer.fit_transform(data)\n\n#splitting the dataset into train and test\nX_train, X_test, y_train, y_test = train_test_split(vectorized_data, labels, test_size=0.2, random_state=0)\n\n#creating and fitting the model\nmodel = LogisticRegression().fit(X_train, y_train)\n\n#predicting the test data\ny_pred = model.predict(X_test)\n\n#calculating the accuracy\naccuracy = accuracy_score(y_test, y_pred)\nprint(accuracy)"
    },
    {
        "instruction": "Construct a new Python program for converting a given hashmap to a list.",
        "input": "{ 'name': 'John', 'age': 44, 'job': 'Engineer' }",
        "output": "d = { 'name': 'John', 'age': 44, 'job': 'Engineer' }\nl = list(d.items())\nprint(l)  // [('name', 'John'), ('age', 44), ('job', 'Engineer')]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a new Python program for converting a given hashmap to a list.\n\n### Input:\n{ 'name': 'John', 'age': 44, 'job': 'Engineer' }\n\n### Output:\nd = { 'name': 'John', 'age': 44, 'job': 'Engineer' }\nl = list(d.items())\nprint(l)  // [('name', 'John'), ('age', 44), ('job', 'Engineer')]"
    },
    {
        "instruction": "Create a Python method that accepts two strings as arguments and concatenates them.",
        "input": "",
        "output": "def concatenate_strings(str1, str2):\n    return str1 + str2",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python method that accepts two strings as arguments and concatenates them.\n\n### Input:\n\n\n### Output:\ndef concatenate_strings(str1, str2):\n    return str1 + str2"
    },
    {
        "instruction": "Generate a new Python class that is initialized with two data attributes and two methods.",
        "input": "",
        "output": "class NewClass:\n  \n  def __init__(self, data1, data2):\n    self.data1 = data1\n    self.data2 = data2\n    \n  def method1(self):\n    # method implementation\n    \n  def method2(self, param1):\n    # method implementation",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a new Python class that is initialized with two data attributes and two methods.\n\n### Input:\n\n\n### Output:\nclass NewClass:\n  \n  def __init__(self, data1, data2):\n    self.data1 = data1\n    self.data2 = data2\n    \n  def method1(self):\n    # method implementation\n    \n  def method2(self, param1):\n    # method implementation"
    },
    {
        "instruction": "Write a Python program to find a substring in a string. The program should return the index of the beginning of the substring or -1 if the substring is not found.",
        "input": "string = \"Hello World\"\nsubstring = \"World\"",
        "output": "def findSubstring(string, substring):\n index = string.find(substring)\n if index != -1:\n  return index\n else:\n  return -1\n\nstring = \"Hello World\"\nsubstring = \"World\"\nprint(findSubstring(string, substring)) # returns 6",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find a substring in a string. The program should return the index of the beginning of the substring or -1 if the substring is not found.\n\n### Input:\nstring = \"Hello World\"\nsubstring = \"World\"\n\n### Output:\ndef findSubstring(string, substring):\n index = string.find(substring)\n if index != -1:\n  return index\n else:\n  return -1\n\nstring = \"Hello World\"\nsubstring = \"World\"\nprint(findSubstring(string, substring)) # returns 6"
    },
    {
        "instruction": "Create an algorithm in Python for calculating the distance between two cities given their respective latitude and longitude.",
        "input": "Paris: 48.8566, 2.3522\nNew York: 40.7128, 74.0060",
        "output": "from math import sin, cos, sqrt, atan2, radians \n\ndef calculate_distance(lat1, long1, lat2, long2): \n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(lat1)\n    long1 = radians(long1)\n    lat2 = radians(lat2)\n    long2 = radians(long2)\n\n    dlon = long2 - long1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    distance = R * c\n\n    return distance\n\nparis = [48.8566, 2.3522]\nny = [40.7128, 74.0060]\ndistance = calculate_distance(paris[0], paris[1], ny[0], ny[1])\n\nprint(distance)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python for calculating the distance between two cities given their respective latitude and longitude.\n\n### Input:\nParis: 48.8566, 2.3522\nNew York: 40.7128, 74.0060\n\n### Output:\nfrom math import sin, cos, sqrt, atan2, radians \n\ndef calculate_distance(lat1, long1, lat2, long2): \n    # approximate radius of earth in km\n    R = 6373.0\n\n    lat1 = radians(lat1)\n    long1 = radians(long1)\n    lat2 = radians(lat2)\n    long2 = radians(long2)\n\n    dlon = long2 - long1\n    dlat = lat2 - lat1\n\n    a = sin(dlat / 2)**2 + cos(lat1) * cos(lat2) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n\n    distance = R * c\n\n    return distance\n\nparis = [48.8566, 2.3522]\nny = [40.7128, 74.0060]\ndistance = calculate_distance(paris[0], paris[1], ny[0], ny[1])\n\nprint(distance)"
    },
    {
        "instruction": "Create a Python program to get input from the user via command line  and store it into a MySQL database.",
        "input": "Not applicable",
        "output": "import mysql.connector\n\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"username\",\n  passwd=\"password\",\n  database=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nname = input('Please enter your name: ')\ncountry = input('Please enter your country: ')\n\nsql = \"INSERT INTO customers (name, country) VALUES (%s, %s)\"\nval = (name, country)\n\nmycursor.execute(sql, val)\nmydb.commit()\n\nprint(mycursor.rowcount, \"record inserted.\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to get input from the user via command line  and store it into a MySQL database.\n\n### Input:\nNot applicable\n\n### Output:\nimport mysql.connector\n\nmydb = mysql.connector.connect(\n  host=\"localhost\",\n  user=\"username\",\n  passwd=\"password\",\n  database=\"mydatabase\"\n)\n\nmycursor = mydb.cursor()\n\nname = input('Please enter your name: ')\ncountry = input('Please enter your country: ')\n\nsql = \"INSERT INTO customers (name, country) VALUES (%s, %s)\"\nval = (name, country)\n\nmycursor.execute(sql, val)\nmydb.commit()\n\nprint(mycursor.rowcount, \"record inserted.\")"
    },
    {
        "instruction": "Generate a code to create a linear regression model in python.",
        "input": "",
        "output": "\"\"\"\nLinear regression model in python\n\"\"\"\nimport numpy as np \nimport matplotlib.pyplot as plt \n\n# Read the data from CSV\nX, y = np.loadtxt('data.csv', delimiter=',', unpack=True)\n\n# Calculate the mean of X and y\nmean_x = np.mean(X)\nmean_y = np.mean(y)\n\n# Calculate the b1 and b0\nb1 = np.sum([(xi-mean_x)*(yi-mean_y) for xi, yi in zip(X,y)])/np.sum([(xi-mean_x)**2 for xi in X])\nb0 = mean_y - (b1*mean_x)\n\n# Print coefficient values\nprint(b0, b1)\n\n# Calculate predicted values\ny_pred = [b0 + b1*xi for xi in X] \n\n# Calculate the coefficient of determination\nSS_res = np.sum([(yi-yp)**2 for yi, yp in zip(y, y_pred)])\nSS_tot = np.sum([(yi-mean_y)**2 for yi in y])\nR2 = 1-SS_res/SS_tot\n\n# Plot the data\nplt.scatter(X, y, color='c', label='data')\nplt.plot(X, y_pred, color='g', label='model')\nplt.title('Linear Regression Model. r2 = '+str(R2))\nplt.legend()\n# Show the plot \nplt.show()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to create a linear regression model in python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nLinear regression model in python\n\"\"\"\nimport numpy as np \nimport matplotlib.pyplot as plt \n\n# Read the data from CSV\nX, y = np.loadtxt('data.csv', delimiter=',', unpack=True)\n\n# Calculate the mean of X and y\nmean_x = np.mean(X)\nmean_y = np.mean(y)\n\n# Calculate the b1 and b0\nb1 = np.sum([(xi-mean_x)*(yi-mean_y) for xi, yi in zip(X,y)])/np.sum([(xi-mean_x)**2 for xi in X])\nb0 = mean_y - (b1*mean_x)\n\n# Print coefficient values\nprint(b0, b1)\n\n# Calculate predicted values\ny_pred = [b0 + b1*xi for xi in X] \n\n# Calculate the coefficient of determination\nSS_res = np.sum([(yi-yp)**2 for yi, yp in zip(y, y_pred)])\nSS_tot = np.sum([(yi-mean_y)**2 for yi in y])\nR2 = 1-SS_res/SS_tot\n\n# Plot the data\nplt.scatter(X, y, color='c', label='data')\nplt.plot(X, y_pred, color='g', label='model')\nplt.title('Linear Regression Model. r2 = '+str(R2))\nplt.legend()\n# Show the plot \nplt.show()"
    },
    {
        "instruction": "Please generate a Python function that takes a string as input and prints every character in the string contained between \"a\" and \"e\" in a newline.",
        "input": "\"Airport\"",
        "output": "def extract_abce(string):\n  output = \"\"\n  for char in string:\n                    if ord(char) >= 97 and ord(char) <= 101:\n                                    output += char + \"\\n\"\n  print(output)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPlease generate a Python function that takes a string as input and prints every character in the string contained between \"a\" and \"e\" in a newline.\n\n### Input:\n\"Airport\"\n\n### Output:\ndef extract_abce(string):\n  output = \"\"\n  for char in string:\n                    if ord(char) >= 97 and ord(char) <= 101:\n                                    output += char + \"\\n\"\n  print(output)"
    },
    {
        "instruction": "Create a recursive Python program to find the sum of all the odd numbers between a given number x and 0.",
        "input": "x = 4",
        "output": "def sum_odd_recurse(num):\n    if num == 0:\n        return 0\n    elif num % 2 != 0:\n        return num + sum_odd_recurse(num - 1)\n    else:\n        return sum_odd_recurse(num - 1)\n\n# driver code\nx = 4\nprint(sum_odd_recurse(x)) # Output: 9 (1+3+5)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a recursive Python program to find the sum of all the odd numbers between a given number x and 0.\n\n### Input:\nx = 4\n\n### Output:\ndef sum_odd_recurse(num):\n    if num == 0:\n        return 0\n    elif num % 2 != 0:\n        return num + sum_odd_recurse(num - 1)\n    else:\n        return sum_odd_recurse(num - 1)\n\n# driver code\nx = 4\nprint(sum_odd_recurse(x)) # Output: 9 (1+3+5)"
    },
    {
        "instruction": "Write a script in Python that asks the user to input a sentence, then prints the sentence in reverse.",
        "input": "",
        "output": "sentence = input(\"Please enter a sentence: \")\n\nrev_sentence = sentence[::-1]\n\nprint(rev_sentence)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script in Python that asks the user to input a sentence, then prints the sentence in reverse.\n\n### Input:\n\n\n### Output:\nsentence = input(\"Please enter a sentence: \")\n\nrev_sentence = sentence[::-1]\n\nprint(rev_sentence)"
    },
    {
        "instruction": "Create a Python program for converting a given input text into Pig Latin",
        "input": "Example sentence:\n\n\u201cHello, world!\u201d",
        "output": "def pig_latin(sentence):\n  \n  # Split the sentence into words\n  words = sentence.split()\n  \n  # Iterate through each word and convert it to pig latin\n  output = []\n  for word in words:\n    if word[0] in 'aeiou':\n      output.append(word + 'way')\n    else:\n      output.append(word[1:] + word[0] + 'ay')\n  \n  # Return the modified sentence\n  return ' '.join(output)\n\n# Get the input sentence\nsentence = \"Hello, world!\"\n\n# Print the pig latin version of the sentence\nprint(pig_latin(sentence)) # Output: ellohay, orldway!",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for converting a given input text into Pig Latin\n\n### Input:\nExample sentence:\n\n\u201cHello, world!\u201d\n\n### Output:\ndef pig_latin(sentence):\n  \n  # Split the sentence into words\n  words = sentence.split()\n  \n  # Iterate through each word and convert it to pig latin\n  output = []\n  for word in words:\n    if word[0] in 'aeiou':\n      output.append(word + 'way')\n    else:\n      output.append(word[1:] + word[0] + 'ay')\n  \n  # Return the modified sentence\n  return ' '.join(output)\n\n# Get the input sentence\nsentence = \"Hello, world!\"\n\n# Print the pig latin version of the sentence\nprint(pig_latin(sentence)) # Output: ellohay, orldway!"
    },
    {
        "instruction": "In Python, create a list mode with the numbers from 0 to 50.",
        "input": "",
        "output": "list_mode = [i for i in range(51)]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, create a list mode with the numbers from 0 to 50.\n\n### Input:\n\n\n### Output:\nlist_mode = [i for i in range(51)]"
    },
    {
        "instruction": "Design a neural network in Python for the MNIST digits classification task.",
        "input": "N/A",
        "output": "import torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nclass MNISTClassifier(nn.Module):\n  def __init__(self):\n    super(MNISTClassifier, self).__init__()\n    # Create a convolutional network using 2D convolution and max pooling layers\n    self.conv1 = nn.Conv2d(1, 8, 3, padding=1)\n    self.conv2 = nn.Conv2d(8, 8, 3, padding=1)\n    self.pool = nn.MaxPool2d(2,2)\n    # Fully connected layer\n    self.fc1 = nn.Linear(8 * 7 * 7, 10)\n  \n  def forward(self, x):\n    x = F.relu(self.conv1(x))\n    x = self.pool(x)\n    x = F.relu(self.conv2(x))\n    x = self.pool(x)\n    x = x.view(-1, 8 * 7 * 7)\n    x = F.relu(self.fc1(x))\n    return x\n\nmodel = MNISTClassifier()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a neural network in Python for the MNIST digits classification task.\n\n### Input:\nN/A\n\n### Output:\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\n\nclass MNISTClassifier(nn.Module):\n  def __init__(self):\n    super(MNISTClassifier, self).__init__()\n    # Create a convolutional network using 2D convolution and max pooling layers\n    self.conv1 = nn.Conv2d(1, 8, 3, padding=1)\n    self.conv2 = nn.Conv2d(8, 8, 3, padding=1)\n    self.pool = nn.MaxPool2d(2,2)\n    # Fully connected layer\n    self.fc1 = nn.Linear(8 * 7 * 7, 10)\n  \n  def forward(self, x):\n    x = F.relu(self.conv1(x))\n    x = self.pool(x)\n    x = F.relu(self.conv2(x))\n    x = self.pool(x)\n    x = x.view(-1, 8 * 7 * 7)\n    x = F.relu(self.fc1(x))\n    return x\n\nmodel = MNISTClassifier()"
    },
    {
        "instruction": "Write a Python program to replace each character of a given string with the next letter in the alphabet.",
        "input": "",
        "output": "def replace_letter(string):\n result = ''\n for c in string:\n if c == 'z':\n result += 'a'\n else:\n result += chr(ord(c)+1)\n return result",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to replace each character of a given string with the next letter in the alphabet.\n\n### Input:\n\n\n### Output:\ndef replace_letter(string):\n result = ''\n for c in string:\n if c == 'z':\n result += 'a'\n else:\n result += chr(ord(c)+1)\n return result"
    },
    {
        "instruction": "Create an API in Python and deploy it with the Flask framework",
        "input": "",
        "output": "# import dependencies\nimport flask\nfrom flask import request, jsonify\n\n#import API methods\nimport some_function\n\napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] = True\n\n# create API endpoint\n@app.route('/api', methods=['GET'])\ndef api_call():\n    # Get the query parameters\n    query_parameters = request.args\n  \n    # Call the API method\n    result = some_function.some_function(query_parameters)\n \n    # Return jsonified output\n    return jsonify(result)\n\n# run the API\nif __name__ == '__main__':\n    app.run()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API in Python and deploy it with the Flask framework\n\n### Input:\n\n\n### Output:\n# import dependencies\nimport flask\nfrom flask import request, jsonify\n\n#import API methods\nimport some_function\n\napp = flask.Flask(__name__)\napp.config[\"DEBUG\"] = True\n\n# create API endpoint\n@app.route('/api', methods=['GET'])\ndef api_call():\n    # Get the query parameters\n    query_parameters = request.args\n  \n    # Call the API method\n    result = some_function.some_function(query_parameters)\n \n    # Return jsonified output\n    return jsonify(result)\n\n# run the API\nif __name__ == '__main__':\n    app.run()"
    },
    {
        "instruction": "Develop a web scraper in Python that collects data from a web page. The scraper should capture the product title, description, and price for each item on the page.",
        "input": "Not applicable",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/products'\nhtml = requests.get(url).text\nsoup = BeautifulSoup(html, 'html.parser')\n\nproducts = soup.find_all('div', class_='product')\n\nfor product in products:\n title = product.find('h3', class_='title').text\n description = product.find('p', class_='description').text\n price = product.find('div', class_='price').text\n\n print(title, description, price)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a web scraper in Python that collects data from a web page. The scraper should capture the product title, description, and price for each item on the page.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/products'\nhtml = requests.get(url).text\nsoup = BeautifulSoup(html, 'html.parser')\n\nproducts = soup.find_all('div', class_='product')\n\nfor product in products:\n title = product.find('h3', class_='title').text\n description = product.find('p', class_='description').text\n price = product.find('div', class_='price').text\n\n print(title, description, price)"
    },
    {
        "instruction": "Suggest a solution in Python to convert a sentence into a list of individual words.",
        "input": "\"This is a test sentence.\"",
        "output": "def sentence_to_words(sentence):\n    words = sentence.split()\n    return words \n\nresult = sentence_to_words(\"This is a test sentence.\")\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a solution in Python to convert a sentence into a list of individual words.\n\n### Input:\n\"This is a test sentence.\"\n\n### Output:\ndef sentence_to_words(sentence):\n    words = sentence.split()\n    return words \n\nresult = sentence_to_words(\"This is a test sentence.\")\nprint(result)"
    },
    {
        "instruction": "Develop a game AI in Python that plays Tic-Tac-Toe.",
        "input": "Not applicable",
        "output": "#import necessary libraries\nimport numpy as np\nfrom typing import List, Optional, Tuple\n\n# define the board\nboard=np.zeros([3,3], dtype=int)\n\n# define the winning combos\nwin_combos = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n]\n\n# define the game AI\ndef game_ai(board:np.ndarray) -> Optional[Tuple[int, int]]:\n  # analyze the board\n  diags=[]\n  diags.append(board.trace())\n  diags.append(np.fliplr(board).trace()) \n\n  # generate all possible moves\n  moves = [i for i, x in enumerate(board.reshape(-1)) if x == 0] \n  \n  # get winning move\n  for ind, val in enumerate(board.reshape(-1)):\n    if val == 0:\n      board.reshape(-1)[ind] = 1  \n      if any(all(val==1 for val in combo) for combo in win_combos):\n        board.reshape(-1)[ind] = 0\n        return ind // 3, ind % 3\n      else:\n        board.reshape(-1)[ind] = 0 \n  \n  # block opponent's winning move\n  for ind, val in enumerate(board.reshape(-1)):\n    if val == 0:\n      board.reshape(-1)[ind] = 2  \n      if any(all(val==2 for val in combo) for combo in win_combos):\n        board.reshape(-1)[ind] = 0\n        return ind // 3, ind % 3\n      else:\n        board.reshape(-1)[ind] = 0 \n\n  # do random move        \n  return moves[np.random.choice(len(moves))] // 3, moves[np.random.choice(len(moves))] % 3\n\n#sample call\nrow, col = game_ai(board)\nprint(row, col)\n# Output: 0 1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a game AI in Python that plays Tic-Tac-Toe.\n\n### Input:\nNot applicable\n\n### Output:\n#import necessary libraries\nimport numpy as np\nfrom typing import List, Optional, Tuple\n\n# define the board\nboard=np.zeros([3,3], dtype=int)\n\n# define the winning combos\nwin_combos = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6]\n]\n\n# define the game AI\ndef game_ai(board:np.ndarray) -> Optional[Tuple[int, int]]:\n  # analyze the board\n  diags=[]\n  diags.append(board.trace())\n  diags.append(np.fliplr(board).trace()) \n\n  # generate all possible moves\n  moves = [i for i, x in enumerate(board.reshape(-1)) if x == 0] \n  \n  # get winning move\n  for ind, val in enumerate(board.reshape(-1)):\n    if val == 0:\n      board.reshape(-1)[ind] = 1  \n      if any(all(val==1 for val in combo) for combo in win_combos):\n        board.reshape(-1)[ind] = 0\n        return ind // 3, ind % 3\n      else:\n        board.reshape(-1)[ind] = 0 \n  \n  # block opponent's winning move\n  for ind, val in enumerate(board.reshape(-1)):\n    if val == 0:\n      board.reshape(-1)[ind] = 2  \n      if any(all(val==2 for val in combo) for combo in win_combos):\n        board.reshape(-1)[ind] = 0\n        return ind // 3, ind % 3\n      else:\n        board.reshape(-1)[ind] = 0 \n\n  # do random move        \n  return moves[np.random.choice(len(moves))] // 3, moves[np.random.choice(len(moves))] % 3\n\n#sample call\nrow, col = game_ai(board)\nprint(row, col)\n# Output: 0 1"
    },
    {
        "instruction": "Write a Python program that takes in three numbers as input and determines which number is the maximum.",
        "input": "",
        "output": "def max_number(a,b,c):\n  max = a\n  if b > max:\n    max = b\n  if c > max:\n    max = c\n  return max\n\nprint(max_number(1,5,3))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes in three numbers as input and determines which number is the maximum.\n\n### Input:\n\n\n### Output:\ndef max_number(a,b,c):\n  max = a\n  if b > max:\n    max = b\n  if c > max:\n    max = c\n  return max\n\nprint(max_number(1,5,3))"
    },
    {
        "instruction": "Implement lexical analysis for a small language using Python.",
        "input": "Not applicable",
        "output": "import re\n\n# Representation of tokens\ntokens = [\n ['NUMBER',        r'\\d+(\\.\\d+)?'],\n ['OPEN_BRACE',    r'\\['],\n ['CLOSE_BRACE',   r'\\]'],\n ['TEXT',          r'[a-zA-Z]+']\n]\n\n# List of tokens\ntoken_list = []\nfor token, pattern in tokens:\n token_list.append(token)\n\n# Dictionary of tokens\ntoken_dict = {token: pattern for token, pattern in tokens}\n\ndef lex(string):\n token_list = []\n char_list = list(string)\n while char_list:\n for token, regex in token_dict.items():\n matchObj = re.match('^' + regex, ''.join(char_list))\n if matchObj:\n token_list.append((token, matchObj.group()))\n char_list = char_list[matchObj.end():]\n break\n else:\n raise SyntaxError\n return token_list\n\nprint(lex('[10.5 hello]'))\n# Output: [('OPEN_BRACE', '['), ('NUMBER', '10.5'), ('TEXT', 'hello'), ('CLOSE_BRACE', ']')]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement lexical analysis for a small language using Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport re\n\n# Representation of tokens\ntokens = [\n ['NUMBER',        r'\\d+(\\.\\d+)?'],\n ['OPEN_BRACE',    r'\\['],\n ['CLOSE_BRACE',   r'\\]'],\n ['TEXT',          r'[a-zA-Z]+']\n]\n\n# List of tokens\ntoken_list = []\nfor token, pattern in tokens:\n token_list.append(token)\n\n# Dictionary of tokens\ntoken_dict = {token: pattern for token, pattern in tokens}\n\ndef lex(string):\n token_list = []\n char_list = list(string)\n while char_list:\n for token, regex in token_dict.items():\n matchObj = re.match('^' + regex, ''.join(char_list))\n if matchObj:\n token_list.append((token, matchObj.group()))\n char_list = char_list[matchObj.end():]\n break\n else:\n raise SyntaxError\n return token_list\n\nprint(lex('[10.5 hello]'))\n# Output: [('OPEN_BRACE', '['), ('NUMBER', '10.5'), ('TEXT', 'hello'), ('CLOSE_BRACE', ']')]"
    },
    {
        "instruction": "Compose a regular expression in Python to find words beginning with a certain letter.",
        "input": "",
        "output": "import re\n\npattern = r\"\\b[aA]\\w+\"\n\n# call the function\nprint(re.findall(pattern))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a regular expression in Python to find words beginning with a certain letter.\n\n### Input:\n\n\n### Output:\nimport re\n\npattern = r\"\\b[aA]\\w+\"\n\n# call the function\nprint(re.findall(pattern))"
    },
    {
        "instruction": "Design a Palindrome detection algorithm in Python.",
        "input": "",
        "output": "def is_palindrome(input_str):\n  len_input = len(input_str)\n\n  for i in range(len_input // 2):\n    if input_str[i] != input_str[len_input - i - 1]:\n      return False\n  \n  return True",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Palindrome detection algorithm in Python.\n\n### Input:\n\n\n### Output:\ndef is_palindrome(input_str):\n  len_input = len(input_str)\n\n  for i in range(len_input // 2):\n    if input_str[i] != input_str[len_input - i - 1]:\n      return False\n  \n  return True"
    },
    {
        "instruction": "Generate an algorithm in Python that returns the kth smallest number in a given array.",
        "input": "Input Array: [3, 2, 4, 1, 5]\nInput k: 3",
        "output": "def kthSmallest(arr, k):\n # sort the array\n arr.sort()\n \n # return the kth element\n return arr[k-1]\n \n# Driver Code\narr = [3,2,4,1,5]\nk = 3\n\nprint(kthSmallest(arr, k)) # 3",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an algorithm in Python that returns the kth smallest number in a given array.\n\n### Input:\nInput Array: [3, 2, 4, 1, 5]\nInput k: 3\n\n### Output:\ndef kthSmallest(arr, k):\n # sort the array\n arr.sort()\n \n # return the kth element\n return arr[k-1]\n \n# Driver Code\narr = [3,2,4,1,5]\nk = 3\n\nprint(kthSmallest(arr, k)) # 3"
    },
    {
        "instruction": "Resolve the given merge conflict using Python.",
        "input": "<<<<<<< HEAD\nx = 5\n=======\nx = 10\n>>>>>>> branch2",
        "output": "x = 10",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nResolve the given merge conflict using Python.\n\n### Input:\n<<<<<<< HEAD\nx = 5\n=======\nx = 10\n>>>>>>> branch2\n\n### Output:\nx = 10"
    },
    {
        "instruction": "Create an algorithm in Python that takes an array of integers and `finds the pair that equals the given target.",
        "input": "[1, 4, 8, 10], 14",
        "output": "def find_pair(arr, target): \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] + arr[j] == target: \n                return (arr[i], arr[j]) \n\nresult = find_pair([1, 4, 8, 10], 14) \nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python that takes an array of integers and `finds the pair that equals the given target.\n\n### Input:\n[1, 4, 8, 10], 14\n\n### Output:\ndef find_pair(arr, target): \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] + arr[j] == target: \n                return (arr[i], arr[j]) \n\nresult = find_pair([1, 4, 8, 10], 14) \nprint(result)"
    },
    {
        "instruction": "Write a Python program to optimize a given system by choosing the lowest energy configuration.",
        "input": "",
        "output": "def optimize_system(system):\n    min_energy = sys.maxsize\n    for configuration in system:\n        energy = calculate_energy(configuration)\n        if energy < min_energy:\n            min_energy = energy\n            best_configuration = configuration\n    return best_configuration",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize a given system by choosing the lowest energy configuration.\n\n### Input:\n\n\n### Output:\ndef optimize_system(system):\n    min_energy = sys.maxsize\n    for configuration in system:\n        energy = calculate_energy(configuration)\n        if energy < min_energy:\n            min_energy = energy\n            best_configuration = configuration\n    return best_configuration"
    },
    {
        "instruction": "Create a Python script for downloading webpages from a list of URLs.",
        "input": "The URLs are: https://www.google.com, https://www.youtube.com and https://www.yahoo.com",
        "output": "import requests\n\nurls = [\"https://www.google.com\", \"https://www.youtube.com\", \"https://www.yahoo.com\"]\n\nfor url in urls:\n response = requests.get(url)\n html = response.text\n with open(f\"{url.split('//')[1]}.html\", \"w\") as file:\n file.write(html)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for downloading webpages from a list of URLs.\n\n### Input:\nThe URLs are: https://www.google.com, https://www.youtube.com and https://www.yahoo.com\n\n### Output:\nimport requests\n\nurls = [\"https://www.google.com\", \"https://www.youtube.com\", \"https://www.yahoo.com\"]\n\nfor url in urls:\n response = requests.get(url)\n html = response.text\n with open(f\"{url.split('//')[1]}.html\", \"w\") as file:\n file.write(html)"
    },
    {
        "instruction": "Implement a Python script to split a string into a list of words.",
        "input": "",
        "output": "def split_string(string): \n return string.split() \n\nprint(split_string(\"Hello, World!\")) # [\"Hello,\", \"World!\"]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python script to split a string into a list of words.\n\n### Input:\n\n\n### Output:\ndef split_string(string): \n return string.split() \n\nprint(split_string(\"Hello, World!\")) # [\"Hello,\", \"World!\"]"
    },
    {
        "instruction": "Use an existing Python dictionary to create a matplotlib chart showing the number of occurrences of each letter in the dictionary.",
        "input": "dictionary = {\n 'key1': 'value1',\n 'key2': 'value2',\n 'key3': 'value3',\n 'key4': 'value4',\n 'key5': 'value5',\n 'key6': 'value6',\n 'key7': 'value7',\n 'key8': 'value8'\n}",
        "output": "import matplotlib.pyplot as plt\n\noccurrences = {letter : 0 for letter in 'abcdefghijklmnopqrstuvwxyz'}\n\nfor key in dictionary:\n for letter in key.lower():\n occurrences[letter] += 1\n\nletters = sorted(occurrences.keys())\nvalues = [occurrences[letter] for letter in letters]\n \nplt.bar(letters, values, edgecolor='black', width=0.8)\nplt.title(\"Occurrences of Each Letter\")\nplt.show()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse an existing Python dictionary to create a matplotlib chart showing the number of occurrences of each letter in the dictionary.\n\n### Input:\ndictionary = {\n 'key1': 'value1',\n 'key2': 'value2',\n 'key3': 'value3',\n 'key4': 'value4',\n 'key5': 'value5',\n 'key6': 'value6',\n 'key7': 'value7',\n 'key8': 'value8'\n}\n\n### Output:\nimport matplotlib.pyplot as plt\n\noccurrences = {letter : 0 for letter in 'abcdefghijklmnopqrstuvwxyz'}\n\nfor key in dictionary:\n for letter in key.lower():\n occurrences[letter] += 1\n\nletters = sorted(occurrences.keys())\nvalues = [occurrences[letter] for letter in letters]\n \nplt.bar(letters, values, edgecolor='black', width=0.8)\nplt.title(\"Occurrences of Each Letter\")\nplt.show()"
    },
    {
        "instruction": "Create a Python 3 program that filters a list of numbers. The program should filter out any numbers greater than 10.",
        "input": "[20, 5, 2, 15, 7, 10]",
        "output": "numbers = [20, 5, 2, 15, 7, 10]\nnumbers = [x for x in numbers if x <= 10]\nprint(numbers)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python 3 program that filters a list of numbers. The program should filter out any numbers greater than 10.\n\n### Input:\n[20, 5, 2, 15, 7, 10]\n\n### Output:\nnumbers = [20, 5, 2, 15, 7, 10]\nnumbers = [x for x in numbers if x <= 10]\nprint(numbers)"
    },
    {
        "instruction": "Write a python program to convert a string to the list of words.",
        "input": "\"Hello, World!\"",
        "output": "def string_to_list(string):\n    return string.split()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to convert a string to the list of words.\n\n### Input:\n\"Hello, World!\"\n\n### Output:\ndef string_to_list(string):\n    return string.split()"
    },
    {
        "instruction": "Design a generative model in Python which generates text data with specified length.",
        "input": "",
        "output": "import numpy as np\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout, Bidirectional\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\nimport tensorflow.keras.utils as ku \n\ndef generate_text(model, tokenizer, seq_len, seed_text, num_gen_words):\n    '''\n    generates text from a trained model\n    '''\n    output_text = []\n    input_text = seed_text\n    for i in range(num_gen_words):\n\t\t# tokenize the input text\n        token_list = tokenizer.texts_to_sequences([input_text])[0]\n\t\t# pad the token list \n        token_list = pad_sequences([token_list], maxlen=seq_len, padding='pre')\n\t\t# predict next word\n        predicted = model.predict_classes(token_list, verbose=0)\n\t\t\n\t\t# mapping predicted word index to actual word\n        output_word = \"\"\n        for word, index in tokenizer.word_index.items():\n            if index == predicted:\n                output_word = word\n                break\n\t\t# append to output\n        input_text += \" \" + output_word\n        output_text.append(output_word)\n        \n    return \" \".join(output_text)\n    \nmodel  = Sequential()\n\n# here goes the rest of the model architecture \n\n# compile model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n#word tokenizer\ntokenizer = Tokenizer()\n\n# generate text\nseed_text = \"This is going to be\"\ngenerate_text(model, tokenizer, seq_len, seed_text, num_gen_words=10)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a generative model in Python which generates text data with specified length.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout, Bidirectional\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.optimizers import Adam\nimport tensorflow.keras.utils as ku \n\ndef generate_text(model, tokenizer, seq_len, seed_text, num_gen_words):\n    '''\n    generates text from a trained model\n    '''\n    output_text = []\n    input_text = seed_text\n    for i in range(num_gen_words):\n\t\t# tokenize the input text\n        token_list = tokenizer.texts_to_sequences([input_text])[0]\n\t\t# pad the token list \n        token_list = pad_sequences([token_list], maxlen=seq_len, padding='pre')\n\t\t# predict next word\n        predicted = model.predict_classes(token_list, verbose=0)\n\t\t\n\t\t# mapping predicted word index to actual word\n        output_word = \"\"\n        for word, index in tokenizer.word_index.items():\n            if index == predicted:\n                output_word = word\n                break\n\t\t# append to output\n        input_text += \" \" + output_word\n        output_text.append(output_word)\n        \n    return \" \".join(output_text)\n    \nmodel  = Sequential()\n\n# here goes the rest of the model architecture \n\n# compile model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n#word tokenizer\ntokenizer = Tokenizer()\n\n# generate text\nseed_text = \"This is going to be\"\ngenerate_text(model, tokenizer, seq_len, seed_text, num_gen_words=10)"
    },
    {
        "instruction": "Create a web scraper in Python to extract data from a specific web page. The data should include the text from all header tags and links to the page.",
        "input": "https://en.wikipedia.org/wiki/Main_Page",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_webpage_data(url):\n    response = requests.get(url)\n    html = response.content\n    soup = BeautifulSoup(html, 'html.parser')\n\n    text = soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])\n    headers = [header.text for header in text]\n\n    soup.find_all('a')\n    links = [link.get('href') for link in text]\n\n    return headers, links\n\nheaders, links = get_webpage_data('https://en.wikipedia.org/wiki/Main_Page')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python to extract data from a specific web page. The data should include the text from all header tags and links to the page.\n\n### Input:\nhttps://en.wikipedia.org/wiki/Main_Page\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef get_webpage_data(url):\n    response = requests.get(url)\n    html = response.content\n    soup = BeautifulSoup(html, 'html.parser')\n\n    text = soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])\n    headers = [header.text for header in text]\n\n    soup.find_all('a')\n    links = [link.get('href') for link in text]\n\n    return headers, links\n\nheaders, links = get_webpage_data('https://en.wikipedia.org/wiki/Main_Page')"
    },
    {
        "instruction": "Given a linked list, write a python program to reverse the linked list.",
        "input": "",
        "output": "# A Node class \nclass Node: \n  \n    # Constructor to initialize the node object \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n  \n    # A function to reverse the linked list \n    def reverse(self):\n        prev = None\n        current = self.head\n        while current is not None:\n            next = current.next\n            current.next = prev\n            prev = current\n            current = next\n        self.head = prev\n  \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a linked list, write a python program to reverse the linked list.\n\n### Input:\n\n\n### Output:\n# A Node class \nclass Node: \n  \n    # Constructor to initialize the node object \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n  \n    # A function to reverse the linked list \n    def reverse(self):\n        prev = None\n        current = self.head\n        while current is not None:\n            next = current.next\n            current.next = prev\n            prev = current\n            current = next\n        self.head = prev\n  \n    def push(self, new_data): \n        new_node = Node(new_data) \n        new_node.next = self.head \n        self.head = new_node"
    },
    {
        "instruction": "Write a Python program that takes in two sets and prints out the elements that are common to both sets.",
        "input": "Set 1: [\"apple\", \"banana\", \"orange\"]\nSet 2: [\"pineapple\", \"banana\", \"mango\"]",
        "output": "def common_elements(set1, set2):\n set_common = set1.intersection(set2)\n return set_common",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes in two sets and prints out the elements that are common to both sets.\n\n### Input:\nSet 1: [\"apple\", \"banana\", \"orange\"]\nSet 2: [\"pineapple\", \"banana\", \"mango\"]\n\n### Output:\ndef common_elements(set1, set2):\n set_common = set1.intersection(set2)\n return set_common"
    },
    {
        "instruction": "Create a class in Python to convert temperature values from Fahrenheit to Celsius.",
        "input": "Not applicable",
        "output": "class TemperatureConverter:\n  \n  def __init__(self):\n    self.temp = 0\n  \n  def set_temp(self, temp):\n    self.temp = temp\n  \n  def convert_temp(self):\n    return (self.temp - 32.0) * 5.0/9.0\n\n#Example Temperature Value\nf_temperature = 212\n\n# Create an instance\ntc = TemperatureConverter()\n\n#Set the temp value\ntc.set_temp(f_temperature)\n\n#Convert and print it\ncelsius_temp = tc.convert_temp()\nprint(celsius_temp)\n# Output: 100.0",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to convert temperature values from Fahrenheit to Celsius.\n\n### Input:\nNot applicable\n\n### Output:\nclass TemperatureConverter:\n  \n  def __init__(self):\n    self.temp = 0\n  \n  def set_temp(self, temp):\n    self.temp = temp\n  \n  def convert_temp(self):\n    return (self.temp - 32.0) * 5.0/9.0\n\n#Example Temperature Value\nf_temperature = 212\n\n# Create an instance\ntc = TemperatureConverter()\n\n#Set the temp value\ntc.set_temp(f_temperature)\n\n#Convert and print it\ncelsius_temp = tc.convert_temp()\nprint(celsius_temp)\n# Output: 100.0"
    },
    {
        "instruction": "The given code provides utility functions for Azure services. Use the functions as needed to validate inputs, handle errors, and perform operations.",
        "input": "",
        "output": "# -------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for\n# license information.\n# --------------------------------------------------------------------------\nfrom sys import version_info\n\nif version_info < (3,):\n    def _str(value):\n        if isinstance(value, unicode):\n            return value.encode('utf-8')\n\n        return str(value)\nelse:\n    _str = str\n\n\ndef _to_str(value):\n    return _str(value) if value is not None else None\n\n\nfrom azure.common import (\n    AzureHttpError,\n    AzureConflictHttpError,\n    AzureMissingResourceHttpError,\n    AzureException,\n)\nfrom ._constants import (\n    _ENCRYPTION_PROTOCOL_V1,\n)\n\n_ERROR_CONFLICT = 'Conflict ({0})'\n_ERROR_NOT_FOUND = 'Not found ({0})'\n_ERROR_UNKNOWN = 'Unknown error ({0})'\n_ERROR_STORAGE_MISSING_INFO = \\\n    'You need to provide an account name and either an account_key or sas_token when creating a storage service.'\n_ERROR_EMULATOR_DOES_NOT_SUPPORT_FILES = \\\n    'The emulator does not support the file service.'\n_ERROR_ACCESS_POLICY = \\\n    'share_access_policy must be either SignedIdentifier or AccessPolicy ' + \\\n    'instance'\n_ERROR_PARALLEL_NOT_SEEKABLE = 'Parallel operations require a seekable stream.'\n_ERROR_VALUE_SHOULD_BE_BYTES = '{0} should be of type bytes.'\n_ERROR_VALUE_SHOULD_BE_BYTES_OR_STREAM = '{0} should be of type bytes or a readable file-like/io.IOBase stream object.'\n_ERROR_VALUE_SHOULD_BE_SEEKABLE_STREAM = '{0} should be a seekable file-like/io.IOBase type stream object.'\n_ERROR_VALUE_SHOULD_BE_STREAM = '{0} should be a file-like/io.IOBase type stream object with a read method.'\n_ERROR_VALUE_NONE = '{0} should not be None.'\n_ERROR_VALUE_NONE_OR_EMPTY = '{0} should not be None or empty.'\n_ERROR_VALUE_NEGATIVE = '{0} should not be negative.'\n_ERROR_START_END_NEEDED_FOR_MD5 = \\\n    'Both end_range and start_range need to be specified ' + \\\n    'for getting content MD5.'\n_ERROR_RANGE_TOO_LARGE_FOR_MD5 = \\\n    'Getting content MD5 for a range greater than 4MB ' + \\\n    'is not supported.'\n_ERROR_MD5_MISMATCH = \\\n    'MD5 mismatch. Expected value is \\'{0}\\', computed value is \\'{1}\\'.'\n_ERROR_TOO_MANY_ACCESS_POLICIES = \\\n    'Too many access policies provided. The server does not support setting more than 5 access policies on a single resource.'\n_ERROR_OBJECT_INVALID = \\\n    '{0} does not define a complete interface. Value of {1} is either missing or invalid.'\n_ERROR_UNSUPPORTED_ENCRYPTION_VERSION = \\\n    'Encryption version is not supported.'\n_ERROR_DECRYPTION_FAILURE = \\\n    'Decryption failed'\n_ERROR_ENCRYPTION_REQUIRED = \\\n    'Encryption required but no key was provided.'\n_ERROR_DECRYPTION_REQUIRED = \\\n    'Decryption required but neither key nor resolver was provided.' + \\\n    ' If you do not want to decypt, please do not set the require encryption flag.'\n_ERROR_INVALID_KID = \\\n    'Provided or resolved key-encryption-key does not match the id of key used to encrypt.'\n_ERROR_UNSUPPORTED_ENCRYPTION_ALGORITHM = \\\n    'Specified encryption algorithm is not supported.'\n_ERROR_UNSUPPORTED_METHOD_FOR_ENCRYPTION = 'The require_encryption flag is set, but encryption is not supported' + \\\n                                           ' for this method.'\n_ERROR_UNKNOWN_KEY_WRAP_ALGORITHM = 'Unknown key wrap algorithm.'\n_ERROR_DATA_NOT_ENCRYPTED = 'Encryption required, but received data does not contain appropriate metatadata.' + \\\n                            'Data was either not encrypted or metadata has been lost.'\n\n\ndef _dont_fail_on_exist(error):\n    ''' don't throw exception if the resource exists.\n    This is called by create_* APIs with fail_on_exist=False'''\n    if isinstance(error, AzureConflictHttpError):\n        return False\n    else:\n        raise error\n\n\ndef _dont_fail_not_exist(error):\n    ''' don't throw exception if the resource doesn't exist.\n    This is called by create_* APIs with fail_on_exist=False'''\n    if isinstance(error, AzureMissingResourceHttpError):\n        return False\n    else:\n        raise error\n\n\ndef _http_error_handler(http_error):\n    ''' Simple error handler for azure.'''\n    message = str(http_error)\n    error_code = None\n\n    if 'x-ms-error-code' in http_error.respheader:\n        error_code = http_error.respheader['x-ms-error-code']\n        message += ' ErrorCode: ' + error_code\n\n    if http_error.respbody is not None:\n        message += '\\n' + http_error.respbody.decode('utf-8-sig')\n\n    ex = AzureHttpError(message, http_error.status)\n    ex.error_code = error_code\n\n    raise ex\n\n\ndef _validate_type_bytes(param_name, param):\n    if not isinstance(param, bytes):\n        raise TypeError(_ERROR_VALUE_SHOULD_BE_BYTES.format(param_name))\n\n\ndef _validate_type_bytes_or_stream(param_name, param):\n    if not (isinstance(param, bytes) or hasattr(param, 'read')):\n        raise TypeError(_ERROR_VALUE_SHOULD_BE_BYTES_OR_STREAM.format(param_name))\n\n\ndef _validate_not_none(param_name, param):\n    if param is None:\n        raise ValueError(_ERROR_VALUE_NONE.format(param_name))\n\n\ndef _validate_content_match(server_md5, computed_md5):\n    if server_md5 != computed_md5:\n        raise AzureException(_ERROR_MD5_MISMATCH.format(server_md5, computed_md5))\n\n\ndef _validate_access_policies(identifiers):\n    if identifiers and len(identifiers) > 5:\n        raise AzureException(_ERROR_TOO_MANY_ACCESS_POLICIES)\n\n\ndef _validate_key_encryption_key_wrap(kek):\n    # Note that None is not callable and so will fail the second clause of each check.\n    if not hasattr(kek, 'wrap_key') or not callable(kek.wrap_key):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'wrap_key'))\n    if not hasattr(kek, 'get_kid') or not callable(kek.get_kid):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'get_kid'))\n    if not hasattr(kek, 'get_key_wrap_algorithm') or not callable(kek.get_key_wrap_algorithm):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'get_key_wrap_algorithm'))\n\n\ndef _validate_key_encryption_key_unwrap(kek):\n    if not hasattr(kek, 'get_kid') or not callable(kek.get_kid):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'get_kid'))\n    if not hasattr(kek, 'unwrap_key') or not callable(kek.unwrap_key):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'unwrap_key'))\n\n\ndef _validate_encryption_required(require_encryption, kek):\n    if require_encryption and (kek is None):\n        raise ValueError(_ERROR_ENCRYPTION_REQUIRED)\n\n\ndef _validate_decryption_required(require_encryption, kek, resolver):\n    if (require_encryption and (kek is None) and\n            (resolver is None)):\n        raise ValueError(_ERROR_DECRYPTION_REQUIRED)\n\n\ndef _validate_encryption_protocol_version(encryption_protocol):\n    if not (_ENCRYPTION_PROTOCOL_V1 == encryption_protocol):\n        raise ValueError(_ERROR_UNSUPPORTED_ENCRYPTION_VERSION)\n\n\ndef _validate_kek_id(kid, resolved_id):\n    if not (kid == resolved_id):\n        raise ValueError(_ERROR_INVALID_KID)\n\n\ndef _validate_encryption_unsupported(require_encryption, key_encryption_key):\n    if require_encryption or (key_encryption_key is not None):\n        raise ValueError(_ERROR_UNSUPPORTED_METHOD_FOR_ENCRYPTION)\n\n\ndef _validate_user_delegation_key(user_delegation_key):\n    _validate_not_none('user_delegation_key.signed_oid', user_delegation_key.signed_oid)\n    _validate_not_none('user_delegation_key.signed_tid', user_delegation_key.signed_tid)\n    _validate_not_none('user_delegation_key.signed_start', user_delegation_key.signed_start)\n    _validate_not_none('user_delegation_key.signed_expiry', user_delegation_key.signed_expiry)\n    _validate_not_none('user_delegation_key.signed_version', user_delegation_key.signed_version)\n    _validate_not_none('user_delegation_key.signed_service', user_delegation_key.signed_service)\n    _validate_not_none('user_delegation_key.value', user_delegation_key.value)\n\n\n# wraps a given exception with the desired exception type\ndef _wrap_exception(ex, desired_type):\n    msg = \"\"\n    if len(ex.args) > 0:\n        msg = ex.args[0]\n    if version_info >= (3,):\n        # Automatic chaining in Python 3 means we keep the trace\n        return desired_type(msg)\n    else:\n        # There isn't a good solution in 2 for keeping the stack trace\n        # in general, or that will not result in an error in 3\n        # However, we can keep the previous error type and message\n        # TODO: In the future we will log the trace\n        return desired_type('{}: {}'.format(ex.__class__.__name__, msg))\n\n\nclass AzureSigningError(AzureException):\n    \"\"\"\n    Represents a fatal error when attempting to sign a request.\n    In general, the cause of this exception is user error. For example, the given account key is not valid.\n    Please visit https://docs.microsoft.com/en-us/azure/storage/common/storage-create-storage-account for more info.\n    \"\"\"\n    pass\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code provides utility functions for Azure services. Use the functions as needed to validate inputs, handle errors, and perform operations.\n\n### Input:\n\n\n### Output:\n# -------------------------------------------------------------------------\n# Copyright (c) Microsoft Corporation. All rights reserved.\n# Licensed under the MIT License. See License.txt in the project root for\n# license information.\n# --------------------------------------------------------------------------\nfrom sys import version_info\n\nif version_info < (3,):\n    def _str(value):\n        if isinstance(value, unicode):\n            return value.encode('utf-8')\n\n        return str(value)\nelse:\n    _str = str\n\n\ndef _to_str(value):\n    return _str(value) if value is not None else None\n\n\nfrom azure.common import (\n    AzureHttpError,\n    AzureConflictHttpError,\n    AzureMissingResourceHttpError,\n    AzureException,\n)\nfrom ._constants import (\n    _ENCRYPTION_PROTOCOL_V1,\n)\n\n_ERROR_CONFLICT = 'Conflict ({0})'\n_ERROR_NOT_FOUND = 'Not found ({0})'\n_ERROR_UNKNOWN = 'Unknown error ({0})'\n_ERROR_STORAGE_MISSING_INFO = \\\n    'You need to provide an account name and either an account_key or sas_token when creating a storage service.'\n_ERROR_EMULATOR_DOES_NOT_SUPPORT_FILES = \\\n    'The emulator does not support the file service.'\n_ERROR_ACCESS_POLICY = \\\n    'share_access_policy must be either SignedIdentifier or AccessPolicy ' + \\\n    'instance'\n_ERROR_PARALLEL_NOT_SEEKABLE = 'Parallel operations require a seekable stream.'\n_ERROR_VALUE_SHOULD_BE_BYTES = '{0} should be of type bytes.'\n_ERROR_VALUE_SHOULD_BE_BYTES_OR_STREAM = '{0} should be of type bytes or a readable file-like/io.IOBase stream object.'\n_ERROR_VALUE_SHOULD_BE_SEEKABLE_STREAM = '{0} should be a seekable file-like/io.IOBase type stream object.'\n_ERROR_VALUE_SHOULD_BE_STREAM = '{0} should be a file-like/io.IOBase type stream object with a read method.'\n_ERROR_VALUE_NONE = '{0} should not be None.'\n_ERROR_VALUE_NONE_OR_EMPTY = '{0} should not be None or empty.'\n_ERROR_VALUE_NEGATIVE = '{0} should not be negative.'\n_ERROR_START_END_NEEDED_FOR_MD5 = \\\n    'Both end_range and start_range need to be specified ' + \\\n    'for getting content MD5.'\n_ERROR_RANGE_TOO_LARGE_FOR_MD5 = \\\n    'Getting content MD5 for a range greater than 4MB ' + \\\n    'is not supported.'\n_ERROR_MD5_MISMATCH = \\\n    'MD5 mismatch. Expected value is \\'{0}\\', computed value is \\'{1}\\'.'\n_ERROR_TOO_MANY_ACCESS_POLICIES = \\\n    'Too many access policies provided. The server does not support setting more than 5 access policies on a single resource.'\n_ERROR_OBJECT_INVALID = \\\n    '{0} does not define a complete interface. Value of {1} is either missing or invalid.'\n_ERROR_UNSUPPORTED_ENCRYPTION_VERSION = \\\n    'Encryption version is not supported.'\n_ERROR_DECRYPTION_FAILURE = \\\n    'Decryption failed'\n_ERROR_ENCRYPTION_REQUIRED = \\\n    'Encryption required but no key was provided.'\n_ERROR_DECRYPTION_REQUIRED = \\\n    'Decryption required but neither key nor resolver was provided.' + \\\n    ' If you do not want to decypt, please do not set the require encryption flag.'\n_ERROR_INVALID_KID = \\\n    'Provided or resolved key-encryption-key does not match the id of key used to encrypt.'\n_ERROR_UNSUPPORTED_ENCRYPTION_ALGORITHM = \\\n    'Specified encryption algorithm is not supported.'\n_ERROR_UNSUPPORTED_METHOD_FOR_ENCRYPTION = 'The require_encryption flag is set, but encryption is not supported' + \\\n                                           ' for this method.'\n_ERROR_UNKNOWN_KEY_WRAP_ALGORITHM = 'Unknown key wrap algorithm.'\n_ERROR_DATA_NOT_ENCRYPTED = 'Encryption required, but received data does not contain appropriate metatadata.' + \\\n                            'Data was either not encrypted or metadata has been lost.'\n\n\ndef _dont_fail_on_exist(error):\n    ''' don't throw exception if the resource exists.\n    This is called by create_* APIs with fail_on_exist=False'''\n    if isinstance(error, AzureConflictHttpError):\n        return False\n    else:\n        raise error\n\n\ndef _dont_fail_not_exist(error):\n    ''' don't throw exception if the resource doesn't exist.\n    This is called by create_* APIs with fail_on_exist=False'''\n    if isinstance(error, AzureMissingResourceHttpError):\n        return False\n    else:\n        raise error\n\n\ndef _http_error_handler(http_error):\n    ''' Simple error handler for azure.'''\n    message = str(http_error)\n    error_code = None\n\n    if 'x-ms-error-code' in http_error.respheader:\n        error_code = http_error.respheader['x-ms-error-code']\n        message += ' ErrorCode: ' + error_code\n\n    if http_error.respbody is not None:\n        message += '\\n' + http_error.respbody.decode('utf-8-sig')\n\n    ex = AzureHttpError(message, http_error.status)\n    ex.error_code = error_code\n\n    raise ex\n\n\ndef _validate_type_bytes(param_name, param):\n    if not isinstance(param, bytes):\n        raise TypeError(_ERROR_VALUE_SHOULD_BE_BYTES.format(param_name))\n\n\ndef _validate_type_bytes_or_stream(param_name, param):\n    if not (isinstance(param, bytes) or hasattr(param, 'read')):\n        raise TypeError(_ERROR_VALUE_SHOULD_BE_BYTES_OR_STREAM.format(param_name))\n\n\ndef _validate_not_none(param_name, param):\n    if param is None:\n        raise ValueError(_ERROR_VALUE_NONE.format(param_name))\n\n\ndef _validate_content_match(server_md5, computed_md5):\n    if server_md5 != computed_md5:\n        raise AzureException(_ERROR_MD5_MISMATCH.format(server_md5, computed_md5))\n\n\ndef _validate_access_policies(identifiers):\n    if identifiers and len(identifiers) > 5:\n        raise AzureException(_ERROR_TOO_MANY_ACCESS_POLICIES)\n\n\ndef _validate_key_encryption_key_wrap(kek):\n    # Note that None is not callable and so will fail the second clause of each check.\n    if not hasattr(kek, 'wrap_key') or not callable(kek.wrap_key):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'wrap_key'))\n    if not hasattr(kek, 'get_kid') or not callable(kek.get_kid):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'get_kid'))\n    if not hasattr(kek, 'get_key_wrap_algorithm') or not callable(kek.get_key_wrap_algorithm):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'get_key_wrap_algorithm'))\n\n\ndef _validate_key_encryption_key_unwrap(kek):\n    if not hasattr(kek, 'get_kid') or not callable(kek.get_kid):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'get_kid'))\n    if not hasattr(kek, 'unwrap_key') or not callable(kek.unwrap_key):\n        raise AttributeError(_ERROR_OBJECT_INVALID.format('key encryption key', 'unwrap_key'))\n\n\ndef _validate_encryption_required(require_encryption, kek):\n    if require_encryption and (kek is None):\n        raise ValueError(_ERROR_ENCRYPTION_REQUIRED)\n\n\ndef _validate_decryption_required(require_encryption, kek, resolver):\n    if (require_encryption and (kek is None) and\n            (resolver is None)):\n        raise ValueError(_ERROR_DECRYPTION_REQUIRED)\n\n\ndef _validate_encryption_protocol_version(encryption_protocol):\n    if not (_ENCRYPTION_PROTOCOL_V1 == encryption_protocol):\n        raise ValueError(_ERROR_UNSUPPORTED_ENCRYPTION_VERSION)\n\n\ndef _validate_kek_id(kid, resolved_id):\n    if not (kid == resolved_id):\n        raise ValueError(_ERROR_INVALID_KID)\n\n\ndef _validate_encryption_unsupported(require_encryption, key_encryption_key):\n    if require_encryption or (key_encryption_key is not None):\n        raise ValueError(_ERROR_UNSUPPORTED_METHOD_FOR_ENCRYPTION)\n\n\ndef _validate_user_delegation_key(user_delegation_key):\n    _validate_not_none('user_delegation_key.signed_oid', user_delegation_key.signed_oid)\n    _validate_not_none('user_delegation_key.signed_tid', user_delegation_key.signed_tid)\n    _validate_not_none('user_delegation_key.signed_start', user_delegation_key.signed_start)\n    _validate_not_none('user_delegation_key.signed_expiry', user_delegation_key.signed_expiry)\n    _validate_not_none('user_delegation_key.signed_version', user_delegation_key.signed_version)\n    _validate_not_none('user_delegation_key.signed_service', user_delegation_key.signed_service)\n    _validate_not_none('user_delegation_key.value', user_delegation_key.value)\n\n\n# wraps a given exception with the desired exception type\ndef _wrap_exception(ex, desired_type):\n    msg = \"\"\n    if len(ex.args) > 0:\n        msg = ex.args[0]\n    if version_info >= (3,):\n        # Automatic chaining in Python 3 means we keep the trace\n        return desired_type(msg)\n    else:\n        # There isn't a good solution in 2 for keeping the stack trace\n        # in general, or that will not result in an error in 3\n        # However, we can keep the previous error type and message\n        # TODO: In the future we will log the trace\n        return desired_type('{}: {}'.format(ex.__class__.__name__, msg))\n\n\nclass AzureSigningError(AzureException):\n    \"\"\"\n    Represents a fatal error when attempting to sign a request.\n    In general, the cause of this exception is user error. For example, the given account key is not valid.\n    Please visit https://docs.microsoft.com/en-us/azure/storage/common/storage-create-storage-account for more info.\n    \"\"\"\n    pass\n"
    },
    {
        "instruction": "Write a Python script to automate the mouse or keyboard.",
        "input": "",
        "output": "import pyautogui\n \n# Move mouse to (100, 200)\npyautogui.moveTo(100, 200)\n \n# Drag mouse from (100, 200) to (300, 400)\npyautogui.dragTo(300, 400, button='left')\n \n# Click at position (300, 400)\npyautogui.click(x=300, y=400, clicks=2, button='left')\n \n# Type the word \"Hello World\" \npyautogui.typewrite(\"Hello World\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to automate the mouse or keyboard.\n\n### Input:\n\n\n### Output:\nimport pyautogui\n \n# Move mouse to (100, 200)\npyautogui.moveTo(100, 200)\n \n# Drag mouse from (100, 200) to (300, 400)\npyautogui.dragTo(300, 400, button='left')\n \n# Click at position (300, 400)\npyautogui.click(x=300, y=400, clicks=2, button='left')\n \n# Type the word \"Hello World\" \npyautogui.typewrite(\"Hello World\")"
    },
    {
        "instruction": "Generate an object-oriented program in Python to read data from an Excel spreadsheet and store it into a list of objects.",
        "input": "Example spreadsheet: \n\nname | GPA\nMary | 3.00\nDavid | 3.50\nJohn | 4.00",
        "output": "class Student:\n    def __init__(self, name, gpa):\n        self.name = name\n        self.gpa = gpa\n\ndef read_excel(filename):\n    excel_file = open(filename, 'r')\n    lines = excel_file.readlines()\n    students = list()\n    for line in lines[1:]:\n        name, gpa = line.split(\",\")\n        students.append(Student(name, float(gpa)))\n    return students",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an object-oriented program in Python to read data from an Excel spreadsheet and store it into a list of objects.\n\n### Input:\nExample spreadsheet: \n\nname | GPA\nMary | 3.00\nDavid | 3.50\nJohn | 4.00\n\n### Output:\nclass Student:\n    def __init__(self, name, gpa):\n        self.name = name\n        self.gpa = gpa\n\ndef read_excel(filename):\n    excel_file = open(filename, 'r')\n    lines = excel_file.readlines()\n    students = list()\n    for line in lines[1:]:\n        name, gpa = line.split(\",\")\n        students.append(Student(name, float(gpa)))\n    return students"
    },
    {
        "instruction": "Modify an existing Python list to remove any elements that occur more than once and keep just the unique elements.",
        "input": "",
        "output": "def unique_list(list):\n    unique_list = []\n    for item in list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify an existing Python list to remove any elements that occur more than once and keep just the unique elements.\n\n### Input:\n\n\n### Output:\ndef unique_list(list):\n    unique_list = []\n    for item in list:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list"
    },
    {
        "instruction": "Generate a python code to calculate the factorial for a given number.",
        "input": "num = 5",
        "output": "def factorial(number):\n    if number == 0:\n        return 1\n    else:\n        return number * factorial(number -1)\n\nfactorial(num)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python code to calculate the factorial for a given number.\n\n### Input:\nnum = 5\n\n### Output:\ndef factorial(number):\n    if number == 0:\n        return 1\n    else:\n        return number * factorial(number -1)\n\nfactorial(num)"
    },
    {
        "instruction": "Write a Python program to generate algebraic equations with randomly generated coefficients.",
        "input": "",
        "output": "import random\n\ndef generate_equation():\n  a = random.randint(-10, 10)\n  b = random.randint(-10, 10)\n  c = random.randint(-10, 10)\n\n  equation = f'{a}x^2 + {b}x + {c} = 0'\n  return equation\n\nresult = generate_equation()\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate algebraic equations with randomly generated coefficients.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_equation():\n  a = random.randint(-10, 10)\n  b = random.randint(-10, 10)\n  c = random.randint(-10, 10)\n\n  equation = f'{a}x^2 + {b}x + {c} = 0'\n  return equation\n\nresult = generate_equation()\nprint(result)"
    },
    {
        "instruction": "Generate a web scraper using Python that can capture data from an online store.",
        "input": "Example link of online store - https://www.example.com/",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/'\n\n# Capture the page\npage = requests.get(url)\n\n# Parse the page\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Find all the product containers\nproduct_containers = soup.find_all('div', {'class': 'product-container'})\n\n# Loop over product containers and capture the information\nproducts = []\nfor container in product_containers:\n # Capture the title\n title = container.find('h3').find('a')['title']\n\n # Capture the price\n price = container.find('div', {'class': 'price'}).find('strong').string\n\n # Ad documents to the `products` list\n products.append({'title': title, 'price': price})\n\n# Print the captured products\nprint(products)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a web scraper using Python that can capture data from an online store.\n\n### Input:\nExample link of online store - https://www.example.com/\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/'\n\n# Capture the page\npage = requests.get(url)\n\n# Parse the page\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Find all the product containers\nproduct_containers = soup.find_all('div', {'class': 'product-container'})\n\n# Loop over product containers and capture the information\nproducts = []\nfor container in product_containers:\n # Capture the title\n title = container.find('h3').find('a')['title']\n\n # Capture the price\n price = container.find('div', {'class': 'price'}).find('strong').string\n\n # Ad documents to the `products` list\n products.append({'title': title, 'price': price})\n\n# Print the captured products\nprint(products)"
    },
    {
        "instruction": "Create a Python program to classify emails into two categories: spam and ham.",
        "input": "",
        "output": "import re\n\ndef is_spam(email):\n    pattern = r'viagra|cialis|pharmacy'\n    if re.search(pattern, email):\n        return True\n    else:\n        return False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to classify emails into two categories: spam and ham.\n\n### Input:\n\n\n### Output:\nimport re\n\ndef is_spam(email):\n    pattern = r'viagra|cialis|pharmacy'\n    if re.search(pattern, email):\n        return True\n    else:\n        return False"
    },
    {
        "instruction": "Create an artificial neural network in Python to identify handwritten digits.",
        "input": "",
        "output": "import numpy as np\n\n# Create a neural network with an input layer with 784 nodes,\n# a hidden layer with 64 nodes, and an output layer with 10 nodes\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.InputLayer(input_shape=(784,)),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=5)  \n\n# Test the model \nmodel.evaluate(X_test, y_test)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an artificial neural network in Python to identify handwritten digits.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\n# Create a neural network with an input layer with 784 nodes,\n# a hidden layer with 64 nodes, and an output layer with 10 nodes\nmodel = tf.keras.models.Sequential([\n    tf.keras.layers.InputLayer(input_shape=(784,)),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(10, activation='softmax')\n])\n\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, epochs=5)  \n\n# Test the model \nmodel.evaluate(X_test, y_test)"
    },
    {
        "instruction": "Develop an algorithm in Python to reverse the order of words in a sentence.",
        "input": "Sentence: I love programming",
        "output": "def reverse(sentence):\n words = sentence.split(' ')\n words.reverse()\n \n return ' '.join(words)\n\nprint(reverse(\"I love programming\"))  // Output: \"programming love I\"",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to reverse the order of words in a sentence.\n\n### Input:\nSentence: I love programming\n\n### Output:\ndef reverse(sentence):\n words = sentence.split(' ')\n words.reverse()\n \n return ' '.join(words)\n\nprint(reverse(\"I love programming\"))  // Output: \"programming love I\""
    },
    {
        "instruction": "To find the optimal solution for the two pitchers problem, follow these steps:\n\n1. Make sure you have Python 3 installed.\n2. Copy the given code into a Python file.\n3. Run the program.\n4. Enter the volumes of the two pitchers when prompted.\n5. Enter the desired volume when prompted.\n6. The program will output the number of steps required and the actions to take to reach the desired volume.",
        "input": "",
        "output": "\"\"\"\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0438\u0449\u0435\u0442 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u043e \u0434\u0432\u0430 \u043a\u0443\u0432\u0448\u0438\u043d\u0430\n\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f Python 3\n\"\"\"\nfrom enum import Enum\n\n\nclass Action(Enum):\n    \"\"\"\n    \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043a\u0443\u0432\u0448\u0438\u043d\u0430\u043c\u0438\n    \"\"\"\n    empty = 0\n    fill = 1\n    transfer = 2\n    start = 3\n\n\ndef get_pitchers_volume():\n    \"\"\"\n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0431\u044a\u0451\u043c\u043e\u0432 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\n    \"\"\"\n    while True:  # pitchers_volume \u044d\u0442\u043e list \u0438\u0437 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435\u043c \u0432\u0432\u043e\u0434\u0438\u043c\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438\n        pitchers_volume = list(int(pitcher) for pitcher in input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u043e\u0431\u044a\u0451\u043c\u044b \u0434\u0432\u0443\u0445 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432: \").split())\n\n        if len(pitchers_volume) != 2:  # \u041c\u044b \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u0443\u0447\u0430\u0438 \u0441 \u0434\u0432\u0443\u043c\u044f \u043a\u0443\u0432\u0448\u0438\u043d\u0430\u043c\u0438\n            print('\u0410\u0439\u0430\u0439\u0430\u0439! \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0437\u0430\u043d\u043e\u0432\u043e.')\n        else:\n            return pitchers_volume\n\n\ndef get_target():\n    \"\"\"\n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439 \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0451\u043c\n    \"\"\"\n    return int(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0451\u043c: \"))\n\n\ndef greatest_common_divisor(a, b):\n    \"\"\"\n    \u0421\u0447\u0438\u0442\u0430\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0431\u0449\u0438\u0439 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef make_edges(i, j, i_max, j_max):\n    \"\"\"\n    \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u0432\u0441\u0435\u0445 \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0432\u0435\u0442\u0432\u0435\u0439 \u0433\u0440\u0430\u0444\u0430 \u0432 \u0442\u043e\u0447\u043a\u0435 (i, j)\n    \u0413\u0434\u0435 i \u0438 j \u2014 \u043d\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\n    \"\"\"\n    edges = dict()\n\n    # \u0415\u0441\u043b\u0438 \u043a\u0443\u0432\u0448\u0438\u043d\u044b \u043d\u0435 \u043f\u0443\u0441\u0442\u044b, \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0443\u0441\u0442\u043e\u0448\u0438\u0442\u044c\n    if i != 0:\n        edges[(0, j)] = Action.empty\n    if j != 0:\n        edges[(i, 0)] = Action.empty\n\n    # \u0415\u0441\u043b\u0438 \u043a\u0443\u0432\u0448\u0438\u043d\u044b \u043d\u0435 \u043f\u043e\u043b\u043d\u044b\u0435, \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c\n    if i != i_max:\n        edges[(i_max, j)] = Action.fill\n    if j != j_max:\n        edges[(i, j_max)] = Action.fill\n\n    # \u0418\u0437 \u043d\u0435\u043f\u0443\u0441\u0442\u043e\u0433\u043e \u043a\u0443\u0432\u0448\u0438\u043d\u0430 \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043b\u0438\u0442\u044c \u0432 \u043d\u0435\u043f\u043e\u043b\u043d\u044b\u0439\n    if i != 0 and j_max-j >= i:\n        edges[(0, j+i)] = Action.transfer\n    if j != 0 and i_max-i >= j:\n        edges[(i+j, 0)] = Action.transfer\n\n    # \u041f\u0440\u0438\u0447\u0435\u043c, \u0435\u0441\u043b\u0438 \u0432 \u043d\u0435\u043f\u043e\u043b\u043d\u043e\u043c \u043d\u0435 \u0445\u0432\u0430\u0442\u0438\u0442 \u043c\u0435\u0441\u0442\u0430,\n    # \u0442\u043e \u043e\u0431\u0430 \u043a\u0443\u0432\u0448\u0438\u043d\u0430 \u043e\u0441\u0442\u0430\u043d\u0443\u0442\u0441\u044f \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u043c\u0438\n    if j != 0 and 0 < i_max-i < j:\n        edges[(i_max, j - (i_max-i))] = Action.transfer\n    if i != 0 and 0 < j_max-j < i:\n        edges[(i - (j_max-j), j_max)] = Action.transfer\n    return edges\n\n\ndef make_pitchers_graph(pitchers_volume):\n    \"\"\"\n    \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043a\u043b\u044e\u0447\u0438 \u2014 \u0432\u0441\u0435 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u043d\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432,\n    \u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u2014 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u044b \u0438\u0437 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438\n    \"\"\"\n    pitchers_graph = dict()\n    gcd = greatest_common_divisor(pitchers_volume[0], pitchers_volume[1])\n    for i in range(0, int(pitchers_volume[0]/gcd)+1):      # \u041d\u0430\u0439\u0434\u0451\u043c \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043e\u0431\u0449\u0435\u0435 \u043a\u0440\u0430\u0442\u043d\u043e\u0435 \u0443 \u043e\u0431\u044a\u0451\u043c\u043e\u0432 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\n        for j in range(0, int(pitchers_volume[1]/gcd)+1):  # \u0418 \u043f\u043e\u0434\u0435\u043b\u0438\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043e\u0431\u044a\u0451\u043c\u043e\u0432 \u043d\u0430 \u043d\u0435\u0433\u043e, \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438\n            pitchers_graph[(i*gcd, j*gcd)] = make_edges(i*gcd, j*gcd, pitchers_volume[0], pitchers_volume[1])\n    return pitchers_graph\n\n\ndef dijkstra(graph, start_node, target):\n    \"\"\"\n    \u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0438\u0439 \u043f\u0443\u0442\u044c \u0432 \u0433\u0440\u0430\u0444\u0435\n    \"\"\"\n    distance = dict.fromkeys(graph, float('inf'))\n    path = dict()\n    path[start_node] = [[[start_node], [Action.start]]]  # \u041f\u0443\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0438\u0437\n    distance[start_node] = 0                           # \u0438\u043c\u0451\u043d \u0443\u0437\u043b\u043e\u0432 \u0441\u043e\u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f list \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0443\u0437\u043b\u043e\u0432\n    node_set = set(graph)                              # \u0441 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0442\u0438\u043f\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043a\u0443\u0432\u0448\u0438\u043d\u0430\u043c\u0438\n    targets_list = [node for node in node_set                   # \u0426\u0435\u043b\u0438 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u043a\u0430\u043a list \u0438\u0437 \u0432\u0441\u0435\u0445 \u0443\u0437\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435\n                    if node[0] == target or node[1] == target]  # \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0444\u0438\u043d\u0438\u0448\u0430\n\n    while node_set:\n        node = min(node_set, key=distance.get)\n        if node in targets_list and node in path:  # \u041a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0448\u043b\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u0443\u0437\u0435\u043b \u2014 \u0432\u044b\u0445\u043e\u0434\u0438\u043c. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u044b \u0438\u0449\u0435\u043c\n            return path[node]                      # \u043e\u0442 \u0442\u043e\u0447\u043a\u0438 (0, 0), \u0430 \u0432\u0435\u0441 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0431\u0440\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c,\n        node_set.remove(node)                      # \u0442\u043e \u043f\u0435\u0440\u0432\u044b\u0439 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0439 \u0443\u0437\u0435\u043b \u0438 \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c\n        for child_node in graph[node].keys():\n            if distance[child_node] >= distance[node] + 1:  # \u0412\u0435\u0441 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0431\u0440\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0437\u0430 \u0435\u0434\u0438\u043d\u0438\u0446\u0443\n                distance[child_node] = distance[node] + 1\n                path[child_node] = list()\n                path[child_node].extend(path[node])     # \u041f\u0443\u0442\u044c \u0434\u043e \u043d\u043e\u0432\u043e\u0433\u043e \u0443\u0437\u043b\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043f\u0443\u0442\u0438 \u0434\u043e \u0435\u0433\u043e \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n                path[child_node].append([[child_node],  # \u043f\u043b\u044e\u0441 \u0441\u0430\u043c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\n                                         [graph[node].get(child_node)]])  # \u0441 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0442\u0438\u043f\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\n\n\ndef show_answer(path, target):\n    \"\"\"\n    \u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0432\u0435\u0442 \u0432 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u043e\u0447\u0438\u0442\u0430\u0435\u043c\u043e\u043c \u0432\u0438\u0434\u0435\n    \"\"\"\n    if path is not None:\n        print('\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0448\u0430\u0433\u043e\u0432: {}'.format(len(path)-1))\n        for node in path:\n            print(node[0][0], end=' ')  # \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\n            print(node[1][0].name)      # \u0422\u0438\u043f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\n    else:\n        print('\u041d\u0435\u043b\u044c\u0437\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c {}\u043b., \u0438\u043c\u0435\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u0443\u0432\u0448\u0438\u043d\u044b.'.format(target))\n\n\npitchers_volume = get_pitchers_volume()  # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u043e\u0431\u044a\u0451\u043c\u044b \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\ntarget_node = get_target()               # \u0418 \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0451\u043c\nstart_node = (0, 0)  # \u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0441 \u043f\u0443\u0441\u0442\u044b\u0445 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\npitchers_graph = make_pitchers_graph(pitchers_volume)  # \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u0433\u0440\u0430\u0444 \u0438\u0437 \u0432\u0441\u0435\u0445 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\npath = dijkstra(pitchers_graph, start_node, target_node)  # \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0438\u0439 \u043f\u0443\u0442\u044c\nshow_answer(path, target_node)  # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTo find the optimal solution for the two pitchers problem, follow these steps:\n\n1. Make sure you have Python 3 installed.\n2. Copy the given code into a Python file.\n3. Run the program.\n4. Enter the volumes of the two pitchers when prompted.\n5. Enter the desired volume when prompted.\n6. The program will output the number of steps required and the actions to take to reach the desired volume.\n\n### Input:\n\n\n### Output:\n\"\"\"\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0438\u0449\u0435\u0442 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0437\u0430\u0434\u0430\u0447\u0438 \u043f\u0440\u043e \u0434\u0432\u0430 \u043a\u0443\u0432\u0448\u0438\u043d\u0430\n\u0414\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f Python 3\n\"\"\"\nfrom enum import Enum\n\n\nclass Action(Enum):\n    \"\"\"\n    \u0414\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043a\u0443\u0432\u0448\u0438\u043d\u0430\u043c\u0438\n    \"\"\"\n    empty = 0\n    fill = 1\n    transfer = 2\n    start = 3\n\n\ndef get_pitchers_volume():\n    \"\"\"\n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0431\u044a\u0451\u043c\u043e\u0432 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\n    \"\"\"\n    while True:  # pitchers_volume \u044d\u0442\u043e list \u0438\u0437 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435\u043c \u0432\u0432\u043e\u0434\u0438\u043c\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438\n        pitchers_volume = list(int(pitcher) for pitcher in input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u043e\u0431\u044a\u0451\u043c\u044b \u0434\u0432\u0443\u0445 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432: \").split())\n\n        if len(pitchers_volume) != 2:  # \u041c\u044b \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u0443\u0447\u0430\u0438 \u0441 \u0434\u0432\u0443\u043c\u044f \u043a\u0443\u0432\u0448\u0438\u043d\u0430\u043c\u0438\n            print('\u0410\u0439\u0430\u0439\u0430\u0439! \u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0439\u0442\u0435 \u0437\u0430\u043d\u043e\u0432\u043e.')\n        else:\n            return pitchers_volume\n\n\ndef get_target():\n    \"\"\"\n    \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0446\u0435\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0439 \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0451\u043c\n    \"\"\"\n    return int(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0451\u043c: \"))\n\n\ndef greatest_common_divisor(a, b):\n    \"\"\"\n    \u0421\u0447\u0438\u0442\u0430\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0431\u0449\u0438\u0439 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c.\n    \"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\n\ndef make_edges(i, j, i_max, j_max):\n    \"\"\"\n    \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u0432\u0441\u0435\u0445 \u0438\u0441\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0432\u0435\u0442\u0432\u0435\u0439 \u0433\u0440\u0430\u0444\u0430 \u0432 \u0442\u043e\u0447\u043a\u0435 (i, j)\n    \u0413\u0434\u0435 i \u0438 j \u2014 \u043d\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\n    \"\"\"\n    edges = dict()\n\n    # \u0415\u0441\u043b\u0438 \u043a\u0443\u0432\u0448\u0438\u043d\u044b \u043d\u0435 \u043f\u0443\u0441\u0442\u044b, \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0443\u0441\u0442\u043e\u0448\u0438\u0442\u044c\n    if i != 0:\n        edges[(0, j)] = Action.empty\n    if j != 0:\n        edges[(i, 0)] = Action.empty\n\n    # \u0415\u0441\u043b\u0438 \u043a\u0443\u0432\u0448\u0438\u043d\u044b \u043d\u0435 \u043f\u043e\u043b\u043d\u044b\u0435, \u0438\u0445 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c\n    if i != i_max:\n        edges[(i_max, j)] = Action.fill\n    if j != j_max:\n        edges[(i, j_max)] = Action.fill\n\n    # \u0418\u0437 \u043d\u0435\u043f\u0443\u0441\u0442\u043e\u0433\u043e \u043a\u0443\u0432\u0448\u0438\u043d\u0430 \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043b\u0438\u0442\u044c \u0432 \u043d\u0435\u043f\u043e\u043b\u043d\u044b\u0439\n    if i != 0 and j_max-j >= i:\n        edges[(0, j+i)] = Action.transfer\n    if j != 0 and i_max-i >= j:\n        edges[(i+j, 0)] = Action.transfer\n\n    # \u041f\u0440\u0438\u0447\u0435\u043c, \u0435\u0441\u043b\u0438 \u0432 \u043d\u0435\u043f\u043e\u043b\u043d\u043e\u043c \u043d\u0435 \u0445\u0432\u0430\u0442\u0438\u0442 \u043c\u0435\u0441\u0442\u0430,\n    # \u0442\u043e \u043e\u0431\u0430 \u043a\u0443\u0432\u0448\u0438\u043d\u0430 \u043e\u0441\u0442\u0430\u043d\u0443\u0442\u0441\u044f \u043d\u0435\u043f\u0443\u0441\u0442\u044b\u043c\u0438\n    if j != 0 and 0 < i_max-i < j:\n        edges[(i_max, j - (i_max-i))] = Action.transfer\n    if i != 0 and 0 < j_max-j < i:\n        edges[(i - (j_max-j), j_max)] = Action.transfer\n    return edges\n\n\ndef make_pitchers_graph(pitchers_volume):\n    \"\"\"\n    \u0421\u043e\u0437\u0434\u0430\u0451\u0442 \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043a\u043b\u044e\u0447\u0438 \u2014 \u0432\u0441\u0435 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u043d\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432,\n    \u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u2014 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u044b \u0438\u0437 \u043a\u0430\u0436\u0434\u043e\u0439 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438\n    \"\"\"\n    pitchers_graph = dict()\n    gcd = greatest_common_divisor(pitchers_volume[0], pitchers_volume[1])\n    for i in range(0, int(pitchers_volume[0]/gcd)+1):      # \u041d\u0430\u0439\u0434\u0451\u043c \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043e\u0431\u0449\u0435\u0435 \u043a\u0440\u0430\u0442\u043d\u043e\u0435 \u0443 \u043e\u0431\u044a\u0451\u043c\u043e\u0432 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\n        for j in range(0, int(pitchers_volume[1]/gcd)+1):  # \u0418 \u043f\u043e\u0434\u0435\u043b\u0438\u043c \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043e\u0431\u044a\u0451\u043c\u043e\u0432 \u043d\u0430 \u043d\u0435\u0433\u043e, \u0434\u043b\u044f \u043e\u043f\u0442\u0438\u043c\u0438\u0437\u0430\u0446\u0438\u0438\n            pitchers_graph[(i*gcd, j*gcd)] = make_edges(i*gcd, j*gcd, pitchers_volume[0], pitchers_volume[1])\n    return pitchers_graph\n\n\ndef dijkstra(graph, start_node, target):\n    \"\"\"\n    \u041d\u0430\u0445\u043e\u0434\u0438\u0442 \u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0438\u0439 \u043f\u0443\u0442\u044c \u0432 \u0433\u0440\u0430\u0444\u0435\n    \"\"\"\n    distance = dict.fromkeys(graph, float('inf'))\n    path = dict()\n    path[start_node] = [[[start_node], [Action.start]]]  # \u041f\u0443\u0442\u044c \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043a \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0438\u0437\n    distance[start_node] = 0                           # \u0438\u043c\u0451\u043d \u0443\u0437\u043b\u043e\u0432 \u0441\u043e\u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f list \u0438\u0437 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0443\u0437\u043b\u043e\u0432\n    node_set = set(graph)                              # \u0441 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0442\u0438\u043f\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f \u0441 \u043a\u0443\u0432\u0448\u0438\u043d\u0430\u043c\u0438\n    targets_list = [node for node in node_set                   # \u0426\u0435\u043b\u0438 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u043a\u0430\u043a list \u0438\u0437 \u0432\u0441\u0435\u0445 \u0443\u0437\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435\n                    if node[0] == target or node[1] == target]  # \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0444\u0438\u043d\u0438\u0448\u0430\n\n    while node_set:\n        node = min(node_set, key=distance.get)\n        if node in targets_list and node in path:  # \u041a\u0430\u043a \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0448\u043b\u0438 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0439 \u0443\u0437\u0435\u043b \u2014 \u0432\u044b\u0445\u043e\u0434\u0438\u043c. \u041f\u043e\u0441\u043a\u043e\u043b\u044c\u043a\u0443 \u043c\u044b \u0438\u0449\u0435\u043c\n            return path[node]                      # \u043e\u0442 \u0442\u043e\u0447\u043a\u0438 (0, 0), \u0430 \u0432\u0435\u0441 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0431\u0440\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c,\n        node_set.remove(node)                      # \u0442\u043e \u043f\u0435\u0440\u0432\u044b\u0439 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u044b\u0439 \u0443\u0437\u0435\u043b \u0438 \u0431\u0443\u0434\u0435\u0442 \u043e\u043f\u0442\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c\n        for child_node in graph[node].keys():\n            if distance[child_node] >= distance[node] + 1:  # \u0412\u0435\u0441 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0435\u0431\u0440\u0430 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u0437\u0430 \u0435\u0434\u0438\u043d\u0438\u0446\u0443\n                distance[child_node] = distance[node] + 1\n                path[child_node] = list()\n                path[child_node].extend(path[node])     # \u041f\u0443\u0442\u044c \u0434\u043e \u043d\u043e\u0432\u043e\u0433\u043e \u0443\u0437\u043b\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043f\u0443\u0442\u0438 \u0434\u043e \u0435\u0433\u043e \u0440\u043e\u0434\u0438\u0442\u0435\u043b\u044f\n                path[child_node].append([[child_node],  # \u043f\u043b\u044e\u0441 \u0441\u0430\u043c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\n                                         [graph[node].get(child_node)]])  # \u0441 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u043c \u0442\u0438\u043f\u0430 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\n\n\ndef show_answer(path, target):\n    \"\"\"\n    \u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0442\u0432\u0435\u0442 \u0432 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u043e\u0447\u0438\u0442\u0430\u0435\u043c\u043e\u043c \u0432\u0438\u0434\u0435\n    \"\"\"\n    if path is not None:\n        print('\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0448\u0430\u0433\u043e\u0432: {}'.format(len(path)-1))\n        for node in path:\n            print(node[0][0], end=' ')  # \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\n            print(node[1][0].name)      # \u0422\u0438\u043f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\n    else:\n        print('\u041d\u0435\u043b\u044c\u0437\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c {}\u043b., \u0438\u043c\u0435\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u0443\u0432\u0448\u0438\u043d\u044b.'.format(target))\n\n\npitchers_volume = get_pitchers_volume()  # \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u043e\u0431\u044a\u0451\u043c\u044b \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\ntarget_node = get_target()               # \u0418 \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0439 \u043e\u0431\u044a\u0451\u043c\nstart_node = (0, 0)  # \u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0441 \u043f\u0443\u0441\u0442\u044b\u0445 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\npitchers_graph = make_pitchers_graph(pitchers_volume)  # \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u0433\u0440\u0430\u0444 \u0438\u0437 \u0432\u0441\u0435\u0445 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439 \u043a\u0443\u0432\u0448\u0438\u043d\u043e\u0432\npath = dijkstra(pitchers_graph, start_node, target_node)  # \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u043a\u0440\u0430\u0442\u0447\u0430\u0439\u0448\u0438\u0439 \u043f\u0443\u0442\u044c\nshow_answer(path, target_node)  # \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"
    },
    {
        "instruction": "Create a program in Python to check if two strings are anagrams of each other. An anagram is a word, phrase, or name formed by rearranging the letters of another, such as \u2018cinema\u2019, formed from \u2018iceman\u2019.",
        "input": "",
        "output": "def is_anagram(str1, str2): \n\t\n\t# Remove all white spaces and convert strings to lowercase\n\tstr1 = str1.replace(\" \", \"\").lower()\n\tstr2 = str2.replace(\" \", \"\").lower()\n\t\n\t# Python doesn't have built-in method for checking anagrams, \n\t#so we need to sort the strings and then compare\n\tif(sorted(str1) == sorted(str2)): \n\t\treturn True \n\telse:\n\t\treturn False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to check if two strings are anagrams of each other. An anagram is a word, phrase, or name formed by rearranging the letters of another, such as \u2018cinema\u2019, formed from \u2018iceman\u2019.\n\n### Input:\n\n\n### Output:\ndef is_anagram(str1, str2): \n\t\n\t# Remove all white spaces and convert strings to lowercase\n\tstr1 = str1.replace(\" \", \"\").lower()\n\tstr2 = str2.replace(\" \", \"\").lower()\n\t\n\t# Python doesn't have built-in method for checking anagrams, \n\t#so we need to sort the strings and then compare\n\tif(sorted(str1) == sorted(str2)): \n\t\treturn True \n\telse:\n\t\treturn False"
    },
    {
        "instruction": "Generate a Python class for storing employee information. The class should include properties for name, age, salary, and role as well as methods for getting, setting, and displaying information for an employee.",
        "input": "Not applicable",
        "output": "class Employee:\n def __init__(self, name, age, salary, role):\n self.name = name\n self.age = age\n self.salary = salary\n self.role = role\n \n def get_name(self):\n return self.name\n \n def set_name(self, name):\n self.name = name\n \n def get_age(self):\n return self.age\n \n def set_age(self, age):\n self.age = age\n \n def get_salary(self):\n return self.salary\n \n def set_salary(self, salary):\n self.salary = salary\n \n def get_role(self):\n return self.role\n \n def set_role(self, role):\n self.role = role\n \n def display_employee_info (self):\n print(\"Name:\",self.name,\"\\nAge:\",self.age,\"\\nSalary:\",self.salary,\"\\nRole:\",self.role)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python class for storing employee information. The class should include properties for name, age, salary, and role as well as methods for getting, setting, and displaying information for an employee.\n\n### Input:\nNot applicable\n\n### Output:\nclass Employee:\n def __init__(self, name, age, salary, role):\n self.name = name\n self.age = age\n self.salary = salary\n self.role = role\n \n def get_name(self):\n return self.name\n \n def set_name(self, name):\n self.name = name\n \n def get_age(self):\n return self.age\n \n def set_age(self, age):\n self.age = age\n \n def get_salary(self):\n return self.salary\n \n def set_salary(self, salary):\n self.salary = salary\n \n def get_role(self):\n return self.role\n \n def set_role(self, role):\n self.role = role\n \n def display_employee_info (self):\n print(\"Name:\",self.name,\"\\nAge:\",self.age,\"\\nSalary:\",self.salary,\"\\nRole:\",self.role)"
    },
    {
        "instruction": "Write a function in python that takes a list of strings and returns a new list with the capitalized versions of strings sorted alphabetically.",
        "input": "List of strings: [\"hello\", \"world\", \"my name is\", \"xebia\"]",
        "output": "\"\"\"\nWrite a function in python that takes a list of strings and returns a new list with the capitalized versions of strings sorted alphabetically\n\"\"\"\ndef capitalize_and_sort(string_list):\n    capitalized_list = [string.capitalize() for string in string_list]\n    capitalized_list.sort()\n\n    return capitalized_list\n\nif __name__ == '__main__':\n    string_list = [\"hello\", \"world\", \"my name is\", \"xebia\"]\n    print(capitalize_and_sort(string_list))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in python that takes a list of strings and returns a new list with the capitalized versions of strings sorted alphabetically.\n\n### Input:\nList of strings: [\"hello\", \"world\", \"my name is\", \"xebia\"]\n\n### Output:\n\"\"\"\nWrite a function in python that takes a list of strings and returns a new list with the capitalized versions of strings sorted alphabetically\n\"\"\"\ndef capitalize_and_sort(string_list):\n    capitalized_list = [string.capitalize() for string in string_list]\n    capitalized_list.sort()\n\n    return capitalized_list\n\nif __name__ == '__main__':\n    string_list = [\"hello\", \"world\", \"my name is\", \"xebia\"]\n    print(capitalize_and_sort(string_list))"
    },
    {
        "instruction": "Write a Python script to parse a webpage to extract the weights from a table containing the weights of animals.",
        "input": "Table to scrape:\n\nAnimal | Weight\n-------------\nLion | 200 kg\nTiger | 150 kg\nElephant | 1000 kg",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n \nurl = 'https://example.com'\n \nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n \nweights = {}\n \nfor row in soup.select('table tr'):\n cells = row.find_all('td')\n if len(cells) == 2:\n  animal = cells[0].text.strip()\n  weight = cells[1].text.strip()\n  weights[animal] = weight\n \nprint(weights)\n# {'Lion': '200 kg', 'Tiger': '150 kg', 'Elephant': '1000 kg'}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to parse a webpage to extract the weights from a table containing the weights of animals.\n\n### Input:\nTable to scrape:\n\nAnimal | Weight\n-------------\nLion | 200 kg\nTiger | 150 kg\nElephant | 1000 kg\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n \nurl = 'https://example.com'\n \nresponse = requests.get(url)\nsoup = BeautifulSoup(response.text, 'html.parser')\n \nweights = {}\n \nfor row in soup.select('table tr'):\n cells = row.find_all('td')\n if len(cells) == 2:\n  animal = cells[0].text.strip()\n  weight = cells[1].text.strip()\n  weights[animal] = weight\n \nprint(weights)\n# {'Lion': '200 kg', 'Tiger': '150 kg', 'Elephant': '1000 kg'}"
    },
    {
        "instruction": "Generate an algorithm in Python for finding the maximum number of positive numbers in the last 5 elements of an array.",
        "input": "array: [-3, 9, 2, 10, -5, 4, 3]",
        "output": "# array of numbers \narr = [-3, 9, 2, 10, -5, 4, 3]\n\n# Counting the number of positive elements\ncount = 0\n\n# Iterating through the last 5 elements of the array\nfor i in range(len(arr)-5, len(arr)):\n\n    # Check if the current element is positive\n    if arr[i] > 0:\n        count += 1\n\nprint(\"The maximum number of positive numbers in the last 5 elements is:\", count)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an algorithm in Python for finding the maximum number of positive numbers in the last 5 elements of an array.\n\n### Input:\narray: [-3, 9, 2, 10, -5, 4, 3]\n\n### Output:\n# array of numbers \narr = [-3, 9, 2, 10, -5, 4, 3]\n\n# Counting the number of positive elements\ncount = 0\n\n# Iterating through the last 5 elements of the array\nfor i in range(len(arr)-5, len(arr)):\n\n    # Check if the current element is positive\n    if arr[i] > 0:\n        count += 1\n\nprint(\"The maximum number of positive numbers in the last 5 elements is:\", count)"
    },
    {
        "instruction": "Generate Python code to find maximum sum of contiguous subarray out of a given array.",
        "input": "array = [-2,1,-3,4,-1,2,1,-5,4]",
        "output": "def max_sum_subarray(array):\n    \"\"\"\n    This function will find the maximum sum of a contiguous subarray.\n    \n    Parameters:\n    array: list of integers\n    \n    Returns:\n    maximum sum of contiguuous subarray\n    \"\"\"\n    # Initialize the max sum and current sum to the start of the array\n    max_sum = current_sum = array[0]\n    \n    # Iterate over the array\n    for num in array[1:]:\n        # Reset the current sum to 0 if it is negative\n        current_sum = max(0, current_sum + num)\n        max_sum = max(current_sum, max_sum)\n    \n    return max_sum",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to find maximum sum of contiguous subarray out of a given array.\n\n### Input:\narray = [-2,1,-3,4,-1,2,1,-5,4]\n\n### Output:\ndef max_sum_subarray(array):\n    \"\"\"\n    This function will find the maximum sum of a contiguous subarray.\n    \n    Parameters:\n    array: list of integers\n    \n    Returns:\n    maximum sum of contiguuous subarray\n    \"\"\"\n    # Initialize the max sum and current sum to the start of the array\n    max_sum = current_sum = array[0]\n    \n    # Iterate over the array\n    for num in array[1:]:\n        # Reset the current sum to 0 if it is negative\n        current_sum = max(0, current_sum + num)\n        max_sum = max(current_sum, max_sum)\n    \n    return max_sum"
    },
    {
        "instruction": "Write a code to convert a JSON object to an array of dictionaries in Python.",
        "input": "JSON Object: {\n \"Fruit\": \"Apple\",\n \"Shape\": \"Round\",\n \"Color\": \"Red\"\n}",
        "output": "#Function to convert a JSON object to an array of dictionaries in Python\nimport json\n\ndef json_to_array(data):\n    my_dict = json.loads(data)\n    return [{k: v} for k, v in my_dict.items()]\n\n# Driver code\ndata = '{ \"Fruit\": \"Apple\", \"Shape\": \"Round\", \"Color\": \"Red\" }'\ndict_array = json_to_array(data)\nprint(dict_array)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to convert a JSON object to an array of dictionaries in Python.\n\n### Input:\nJSON Object: {\n \"Fruit\": \"Apple\",\n \"Shape\": \"Round\",\n \"Color\": \"Red\"\n}\n\n### Output:\n#Function to convert a JSON object to an array of dictionaries in Python\nimport json\n\ndef json_to_array(data):\n    my_dict = json.loads(data)\n    return [{k: v} for k, v in my_dict.items()]\n\n# Driver code\ndata = '{ \"Fruit\": \"Apple\", \"Shape\": \"Round\", \"Color\": \"Red\" }'\ndict_array = json_to_array(data)\nprint(dict_array)"
    },
    {
        "instruction": "Write a Python program to swap keys and values in a given dictionary.",
        "input": "",
        "output": "def swap_dict_keys_values(d):\n  d_new = dict()\n  for key, value in d.items():\n    d_new.setdefault(value,[]).append(key)\n  return d_new",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to swap keys and values in a given dictionary.\n\n### Input:\n\n\n### Output:\ndef swap_dict_keys_values(d):\n  d_new = dict()\n  for key, value in d.items():\n    d_new.setdefault(value,[]).append(key)\n  return d_new"
    },
    {
        "instruction": "Write a Python program to classify a given text as having positive or negative sentiment.",
        "input": "The customer service was fantastic but the meal was terrible.",
        "output": "positive",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify a given text as having positive or negative sentiment.\n\n### Input:\nThe customer service was fantastic but the meal was terrible.\n\n### Output:\npositive"
    },
    {
        "instruction": "Write a Python program to classify a given set of text documents based on a given set of categories.",
        "input": "Text Documents:\nDoc 1: This document is about Machine Learning\nDoc 2: This document is about Natural Language Processing\nCategories: Machine Learning and Natural Language Processing",
        "output": "import pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\ndocuments = [\n    \"This document is about Machine Learning\",\n    \"This document is about Natural Language Processing\"\n]\n\n# create the target categories\ncategories = [\"Machine Learning\", \"Natural Language Processing\"]\n\n# create the TF-IDF vectorizer\nvectorizer = TfidfVectorizer()\nX = vectorizer.fit_transform(documents)\n\n# create a dataframe from the TF-IDF matrix\ndf = pd.DataFrame(X.toarray(), columns=vectorizer.get_feature_names())\n\n# classify the documents based on the categories\npredictions = []\nfor i in range(len(X.toarray())):\n    max_score = 0\n    prediction = categories[0]\n    for c in categories:\n        score = df[c].iloc[i]\n        if score > max_score:\n            max_score = score\n            prediction = c\n    predictions.append(prediction)\n\n# print out the predictions\nprint(predictions)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify a given set of text documents based on a given set of categories.\n\n### Input:\nText Documents:\nDoc 1: This document is about Machine Learning\nDoc 2: This document is about Natural Language Processing\nCategories: Machine Learning and Natural Language Processing\n\n### Output:\nimport pandas as pd\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\ndocuments = [\n    \"This document is about Machine Learning\",\n    \"This document is about Natural Language Processing\"\n]\n\n# create the target categories\ncategories = [\"Machine Learning\", \"Natural Language Processing\"]\n\n# create the TF-IDF vectorizer\nvectorizer = TfidfVectorizer()\nX = vectorizer.fit_transform(documents)\n\n# create a dataframe from the TF-IDF matrix\ndf = pd.DataFrame(X.toarray(), columns=vectorizer.get_feature_names())\n\n# classify the documents based on the categories\npredictions = []\nfor i in range(len(X.toarray())):\n    max_score = 0\n    prediction = categories[0]\n    for c in categories:\n        score = df[c].iloc[i]\n        if score > max_score:\n            max_score = score\n            prediction = c\n    predictions.append(prediction)\n\n# print out the predictions\nprint(predictions)"
    },
    {
        "instruction": "Write a Python program to predict the grade of a student, based on the past exam results.",
        "input": "Mia's last 3 exam results:\nMath: 84\nEnglish: 89\nBiology: 82",
        "output": "import numpy as np\n\n# Input data\nmath = 84\nenglish = 89\nbiology = 82\n\n# Define weights\nmath_weight = 0.3\nenglish_weight = 0.4\nbiology_weight = 0.3\n\n# Compute weighted sum\ngrade = math * math_weight + english * english_weight + biology * biology_weight\n\n# Print the grade\nprint('Mia\\'s grade is: {:.2f}'.format(grade))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to predict the grade of a student, based on the past exam results.\n\n### Input:\nMia's last 3 exam results:\nMath: 84\nEnglish: 89\nBiology: 82\n\n### Output:\nimport numpy as np\n\n# Input data\nmath = 84\nenglish = 89\nbiology = 82\n\n# Define weights\nmath_weight = 0.3\nenglish_weight = 0.4\nbiology_weight = 0.3\n\n# Compute weighted sum\ngrade = math * math_weight + english * english_weight + biology * biology_weight\n\n# Print the grade\nprint('Mia\\'s grade is: {:.2f}'.format(grade))"
    },
    {
        "instruction": "Output the maximum value of a Python dictionary.",
        "input": "{\n 'a': 10, \n 'b': 20, \n 'c': 30\n}",
        "output": "max_value = max(dictionary.values()) # 30",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOutput the maximum value of a Python dictionary.\n\n### Input:\n{\n 'a': 10, \n 'b': 20, \n 'c': 30\n}\n\n### Output:\nmax_value = max(dictionary.values()) # 30"
    },
    {
        "instruction": "Analyze the sentiment of a given text using Python",
        "input": "I love writing code!",
        "output": "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n#init sentiment analyzer\nanalyzer = SentimentIntensityAnalyzer()\n\n#analyze sentiment\nsentiment_scores = analyzer.polarity_scores(\"I love writing code!\")\n\nif sentiment_scores['pos'] > sentiment_scores['neg']:\n    print (\"The sentiment of the text is positive\")\nelse:\n    print (\"The sentiment of the text is negative\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAnalyze the sentiment of a given text using Python\n\n### Input:\nI love writing code!\n\n### Output:\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n\n#init sentiment analyzer\nanalyzer = SentimentIntensityAnalyzer()\n\n#analyze sentiment\nsentiment_scores = analyzer.polarity_scores(\"I love writing code!\")\n\nif sentiment_scores['pos'] > sentiment_scores['neg']:\n    print (\"The sentiment of the text is positive\")\nelse:\n    print (\"The sentiment of the text is negative\")"
    },
    {
        "instruction": "Design an algorithm in Python that reverses the order of strings in a list.",
        "input": "[\"Apple\", \"Banana\", \"Carrot\", \"Durian\"]",
        "output": "def reverseList(list):\n    list.reverse()\n    return list\n\nlist = [\"Apple\", \"Banana\", \"Carrot\", \"Durian\"]\n\nreverseList(list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that reverses the order of strings in a list.\n\n### Input:\n[\"Apple\", \"Banana\", \"Carrot\", \"Durian\"]\n\n### Output:\ndef reverseList(list):\n    list.reverse()\n    return list\n\nlist = [\"Apple\", \"Banana\", \"Carrot\", \"Durian\"]\n\nreverseList(list)"
    },
    {
        "instruction": "Use Python and SQL to create a basic database for a fictional company. The company has a list of products, employees, and customers. The database should include models and relations for these three.",
        "input": "Not applicable",
        "output": "from sqlalchemy import Column, Integer, String, ForeignKey\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass Product(Base):\n __tablename__ = 'product'\n id = Column(Integer, primary_key=True)\n name = Column(String)\n\nclass Employee(Base):\n __tablename__ = 'employee'\n id = Column(Integer, primary_key=True)\n name = Column(String)\n\nclass Customer(Base):\n __tablename__ = 'customer'\n id = Column(Integer, primary_key=True)\n name = Column(String)\n\nclass Purchase(Base):\n __tablename__ = 'purchase'\n id = Column(Integer, primary_key=True)\n product_id = Column(Integer, ForeignKey('product.id'))\n employee_id = Column(Integer, ForeignKey('employee.id'))\n customer_id = Column(Integer, ForeignKey('customer.id'))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse Python and SQL to create a basic database for a fictional company. The company has a list of products, employees, and customers. The database should include models and relations for these three.\n\n### Input:\nNot applicable\n\n### Output:\nfrom sqlalchemy import Column, Integer, String, ForeignKey\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass Product(Base):\n __tablename__ = 'product'\n id = Column(Integer, primary_key=True)\n name = Column(String)\n\nclass Employee(Base):\n __tablename__ = 'employee'\n id = Column(Integer, primary_key=True)\n name = Column(String)\n\nclass Customer(Base):\n __tablename__ = 'customer'\n id = Column(Integer, primary_key=True)\n name = Column(String)\n\nclass Purchase(Base):\n __tablename__ = 'purchase'\n id = Column(Integer, primary_key=True)\n product_id = Column(Integer, ForeignKey('product.id'))\n employee_id = Column(Integer, ForeignKey('employee.id'))\n customer_id = Column(Integer, ForeignKey('customer.id'))"
    },
    {
        "instruction": "Design a program in Python to calculate the sum of all the elements in a given list.",
        "input": "[1, 2, 3, 4, 5]",
        "output": "def get_sum(list_nums):\n    sum = 0\n    for num in list_nums:\n        sum += num\n    return sum",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to calculate the sum of all the elements in a given list.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef get_sum(list_nums):\n    sum = 0\n    for num in list_nums:\n        sum += num\n    return sum"
    },
    {
        "instruction": "Create a Python class for an ordered dictionary.",
        "input": "",
        "output": "class OrderedDict:\n    def __init__(self):\n        self.items = []\n\n    def __setitem__(self, key, value):\n        for item in self.items:\n            if item[0] == key:\n                item[1] = value\n                break\n        else:\n            self.items.append([key, value])\n \n    def __getitem__(self, key):\n        for item in self.items:\n            if item[0] == key:\n                return item[1]\n        raise KeyError(key)\n\n    def __len__(self):\n        return len(self.items)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for an ordered dictionary.\n\n### Input:\n\n\n### Output:\nclass OrderedDict:\n    def __init__(self):\n        self.items = []\n\n    def __setitem__(self, key, value):\n        for item in self.items:\n            if item[0] == key:\n                item[1] = value\n                break\n        else:\n            self.items.append([key, value])\n \n    def __getitem__(self, key):\n        for item in self.items:\n            if item[0] == key:\n                return item[1]\n        raise KeyError(key)\n\n    def __len__(self):\n        return len(self.items)"
    },
    {
        "instruction": "Generate a Python program to find all palindromes in a given list.",
        "input": "",
        "output": "def find_palindromes(lst):\n    palindromes = []\n    for item in lst:\n        if item == item[::-1]:\n            palindromes.append(item)\n    return palindromes",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to find all palindromes in a given list.\n\n### Input:\n\n\n### Output:\ndef find_palindromes(lst):\n    palindromes = []\n    for item in lst:\n        if item == item[::-1]:\n            palindromes.append(item)\n    return palindromes"
    },
    {
        "instruction": "Create a Python function that accepts a list of numbers as input and returns a new list with the numbers in reversed order.",
        "input": "myList = [1, 2, 3, 4, 5]",
        "output": "def reverseList(List):\n    revList = []\n    for i in range(len(List)):\n        revList.append(List[len(List) - i - 1])\n    return revList",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that accepts a list of numbers as input and returns a new list with the numbers in reversed order.\n\n### Input:\nmyList = [1, 2, 3, 4, 5]\n\n### Output:\ndef reverseList(List):\n    revList = []\n    for i in range(len(List)):\n        revList.append(List[len(List) - i - 1])\n    return revList"
    },
    {
        "instruction": "Generate a random number using the built-in function of Python.",
        "input": "",
        "output": "import random\n\nnumber = random.randint(1,100)\nprint(number)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random number using the built-in function of Python.\n\n### Input:\n\n\n### Output:\nimport random\n\nnumber = random.randint(1,100)\nprint(number)"
    },
    {
        "instruction": "The code is a Python script that performs various image processing tasks. To use this code, you need to import the necessary libraries and run the Learn() function. The Learn() function reads in a list of image files and performs various operations on them, including segmentation, clustering, and inpainting. The resulting images are displayed using OpenCV. To use this code, you need to have the necessary image files in the correct directory and modify the file paths in the code accordingly.",
        "input": "",
        "output": "import roslib\nimport rospy\nimport sys\nimport timeit\nimport os\nimport Image_Process\nimport cv2\nimport cv2.cv as cv\nimport numpy as np\nimport BoW\nimport Analysis\nimport Segmentation\nfrom sklearn import cluster\nimport Descriptors\n\nclass Learn:\n    def __init__(self):\n        path = \"/media/iglu/Data/Dataset/DatasetIglu/Dataset_united/Ana_point/\"\n        i = 0\n\n        Seg = Segmentation.Segmentation()\n        f = open(path+\"List.txt\",'r')\n        for line in f:\n            print \"Starting Training\"\n            start_time = timeit.default_timer()\n            # code you want to evaluate\n            Time = line\n            file1 = next(f).rstrip('\\n')\n            file2 = next(f).rstrip('\\n')\n            Label = next(f).rstrip('\\n')\n            RGB = cv2.imread(path+\"RGB/\"+file1) #[:-4]+\"_RGB.jpg\"\n            Depth = cv2.imread(path+\"Depth/\"+file2) #[:-4]+\"_Depth.png\"\n            Mesh = []\n            for i in xrange(0, Depth.shape[0]):\n                for j in xrange(0, Depth.shape[1]):\n                    Mesh.append((i, j, Depth[i][j][0]))\n            kmeans = cluster.KMeans(Mesh,8)\n            print kmeans.n_clusters\n            # Depthv = self.Inpaint(Depth)\n            # Seg.CreateCloud(Depth)\n            # L = Seg.PlaneSegmentation()\n            # image = np.zeros(RGB.shape, RGB.dtype)\n            # depth2 = np.zeros(Depth.shape, Depth.dtype)\n            # for data in L:\n            #     image[int(data[0]),int(data[1])] = RGB[int(data[0]),int(data[1])]\n            #     depth2[int(data[0]), int(data[1])] = Depth[int(data[0]), int(data[1])]\n            #     print Depth[int(data[0]), int(data[1])]\n            # Seg.CreateCloud(depth2)\n            # L = Seg.PlaneSegmentation()\n            # image2 = np.zeros(image.shape, image.dtype)\n            # depth3 = np.zeros(depth2.shape, depth2.dtype)\n            # for data in L:\n            #     image2[int(data[0]),int(data[1])] = image[int(data[0]),int(data[1])]\n            #     depth3[int(data[0]), int(data[1])] = depth2[int(data[0]), int(data[1])]\n            #     print Depth[int(data[0]), int(data[1])]\n            elapsed = timeit.default_timer() - start_time\n            print \"Tiempo: \" + elapsed.__str__()\n            cv2.imshow(\"RGB\", RGB )\n            cv2.imshow(\"Depthv\", depth2)\n            cv2.waitKey(0) & 0xFF\n            cv2.destroyAllWindows()\n            # print \"Enviado \"+file+\" \"+i.__str__()\n            # if i >150:\n            #     break\n\n    def Inpaintv1(self,Depth):\n        Depth_Small = Depth\n        Temp2 = Depth\n        x1 = int(Depth.shape[0] * 0.2)\n        x2 = int(Depth.shape[1] * 0.2)\n        x3 = Depth.shape[2]\n        cv2.resize(Depth, (x1, x2), Depth_Small)\n        Temp = Depth_Small\n        mask = (Depth_Small == 0)\n        zeros = np.zeros(Depth_Small.shape, Depth_Small.dtype)\n        ones = np.ones(Depth_Small.shape, Depth_Small.dtype)\n        ones *= 255\n        maskk = np.where(mask == True, ones, zeros)\n        maskk = maskk[:, :, 0]\n        cv2.inpaint(Depth_Small, maskk, 10.0, cv2.INPAINT_TELEA, Temp)\n        cv2.resize(Temp, (Depth.shape[0], Depth.shape[1]), Temp2)\n        return Temp2\n\n    def Inpaint(self,Depth):\n        Depth_Small = Depth\n        Temp2 = Depth\n        Temp = Depth_Small\n        mask = (Depth_Small == 0)\n        zeros = np.zeros(Depth_Small.shape, Depth_Small.dtype)\n        ones = np.ones(Depth_Small.shape, Depth_Small.dtype)\n        ones *= 255\n        maskk = np.where(mask == True, ones, zeros)\n        maskk = maskk[:, :, 0]\n        cv2.inpaint(Depth_Small, maskk, 30.0, cv2.INPAINT_TELEA, Temp)\n        Temp2 = Temp\n        return Temp2\n\ndef main(args):\n    # Learn()\n    oll = np.zeros(25)\n    list = ['glass','Nesquik cereales','fork','bowl','Milk Box','Coke','plate','Heinz ketchup','Apple','lime','orange','Green tea box (Lipton)','cofee mug','Special K','water bottle','banana','Bote Pringles','pitcher','kleenex box','Spoon','Diet Coke','Mayonaise Heinz','Instant noodles','knife','lemon']\n\nif __name__ == '__main__':\n    main(sys.argv)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe code is a Python script that performs various image processing tasks. To use this code, you need to import the necessary libraries and run the Learn() function. The Learn() function reads in a list of image files and performs various operations on them, including segmentation, clustering, and inpainting. The resulting images are displayed using OpenCV. To use this code, you need to have the necessary image files in the correct directory and modify the file paths in the code accordingly.\n\n### Input:\n\n\n### Output:\nimport roslib\nimport rospy\nimport sys\nimport timeit\nimport os\nimport Image_Process\nimport cv2\nimport cv2.cv as cv\nimport numpy as np\nimport BoW\nimport Analysis\nimport Segmentation\nfrom sklearn import cluster\nimport Descriptors\n\nclass Learn:\n    def __init__(self):\n        path = \"/media/iglu/Data/Dataset/DatasetIglu/Dataset_united/Ana_point/\"\n        i = 0\n\n        Seg = Segmentation.Segmentation()\n        f = open(path+\"List.txt\",'r')\n        for line in f:\n            print \"Starting Training\"\n            start_time = timeit.default_timer()\n            # code you want to evaluate\n            Time = line\n            file1 = next(f).rstrip('\\n')\n            file2 = next(f).rstrip('\\n')\n            Label = next(f).rstrip('\\n')\n            RGB = cv2.imread(path+\"RGB/\"+file1) #[:-4]+\"_RGB.jpg\"\n            Depth = cv2.imread(path+\"Depth/\"+file2) #[:-4]+\"_Depth.png\"\n            Mesh = []\n            for i in xrange(0, Depth.shape[0]):\n                for j in xrange(0, Depth.shape[1]):\n                    Mesh.append((i, j, Depth[i][j][0]))\n            kmeans = cluster.KMeans(Mesh,8)\n            print kmeans.n_clusters\n            # Depthv = self.Inpaint(Depth)\n            # Seg.CreateCloud(Depth)\n            # L = Seg.PlaneSegmentation()\n            # image = np.zeros(RGB.shape, RGB.dtype)\n            # depth2 = np.zeros(Depth.shape, Depth.dtype)\n            # for data in L:\n            #     image[int(data[0]),int(data[1])] = RGB[int(data[0]),int(data[1])]\n            #     depth2[int(data[0]), int(data[1])] = Depth[int(data[0]), int(data[1])]\n            #     print Depth[int(data[0]), int(data[1])]\n            # Seg.CreateCloud(depth2)\n            # L = Seg.PlaneSegmentation()\n            # image2 = np.zeros(image.shape, image.dtype)\n            # depth3 = np.zeros(depth2.shape, depth2.dtype)\n            # for data in L:\n            #     image2[int(data[0]),int(data[1])] = image[int(data[0]),int(data[1])]\n            #     depth3[int(data[0]), int(data[1])] = depth2[int(data[0]), int(data[1])]\n            #     print Depth[int(data[0]), int(data[1])]\n            elapsed = timeit.default_timer() - start_time\n            print \"Tiempo: \" + elapsed.__str__()\n            cv2.imshow(\"RGB\", RGB )\n            cv2.imshow(\"Depthv\", depth2)\n            cv2.waitKey(0) & 0xFF\n            cv2.destroyAllWindows()\n            # print \"Enviado \"+file+\" \"+i.__str__()\n            # if i >150:\n            #     break\n\n    def Inpaintv1(self,Depth):\n        Depth_Small = Depth\n        Temp2 = Depth\n        x1 = int(Depth.shape[0] * 0.2)\n        x2 = int(Depth.shape[1] * 0.2)\n        x3 = Depth.shape[2]\n        cv2.resize(Depth, (x1, x2), Depth_Small)\n        Temp = Depth_Small\n        mask = (Depth_Small == 0)\n        zeros = np.zeros(Depth_Small.shape, Depth_Small.dtype)\n        ones = np.ones(Depth_Small.shape, Depth_Small.dtype)\n        ones *= 255\n        maskk = np.where(mask == True, ones, zeros)\n        maskk = maskk[:, :, 0]\n        cv2.inpaint(Depth_Small, maskk, 10.0, cv2.INPAINT_TELEA, Temp)\n        cv2.resize(Temp, (Depth.shape[0], Depth.shape[1]), Temp2)\n        return Temp2\n\n    def Inpaint(self,Depth):\n        Depth_Small = Depth\n        Temp2 = Depth\n        Temp = Depth_Small\n        mask = (Depth_Small == 0)\n        zeros = np.zeros(Depth_Small.shape, Depth_Small.dtype)\n        ones = np.ones(Depth_Small.shape, Depth_Small.dtype)\n        ones *= 255\n        maskk = np.where(mask == True, ones, zeros)\n        maskk = maskk[:, :, 0]\n        cv2.inpaint(Depth_Small, maskk, 30.0, cv2.INPAINT_TELEA, Temp)\n        Temp2 = Temp\n        return Temp2\n\ndef main(args):\n    # Learn()\n    oll = np.zeros(25)\n    list = ['glass','Nesquik cereales','fork','bowl','Milk Box','Coke','plate','Heinz ketchup','Apple','lime','orange','Green tea box (Lipton)','cofee mug','Special K','water bottle','banana','Bote Pringles','pitcher','kleenex box','Spoon','Diet Coke','Mayonaise Heinz','Instant noodles','knife','lemon']\n\nif __name__ == '__main__':\n    main(sys.argv)"
    },
    {
        "instruction": "The given code is a Python class that parses Gitdm files to extract information about identities, organizations, and affiliations. To use this code, create an instance of the `GitdmParser` class and pass in the relevant Gitdm files as arguments. The resulting `GitdmParser` object will have two attributes: `identities` and `organizations`, which are lists of `Identity` and `Organization` objects, respectively. The `Identity` and `Organization` classes are defined in the `model.py` module. The `GitdmParser` class has an optional argument `email_validation` that is set to `True` by default, which can be used to disable email address validation.",
        "input": "",
        "output": "# -*- coding: utf-8 -*-\n#\n# Copyright (C) 2014-2021 Bitergia\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# Authors:\n#     Santiago Due\u00f1as <sduenas@bitergia.com>\n#     Quan Zhou <quan@bitergia.com>\n#\n\nimport dateutil.parser\nimport logging\nimport re\n\n\nfrom ..db.model import MIN_PERIOD_DATE, MAX_PERIOD_DATE, UniqueIdentity,\\\n    Identity, Enrollment, Organization, Domain\nfrom ..exceptions import InvalidFormatError\n\nlogger = logging.getLogger(__name__)\n\n\nclass GitdmParser(object):\n    \"\"\"Parse identities and organizations using Gitdm files.\n\n    Gitdm provides several files that include information about\n    identities, organizations and affiliations. This parser is able\n    to parse anyone of these file formats, together or separate.\n\n    The unique identities are stored in an object named 'uidentities'.\n    The keys of this object are the UUID of the unique identities.\n    Each unique identity object stores a list of identities and\n    enrollments. Email addresses will not be validated when `email_validation`\n    is set to `False`.\n\n    Organizations are stored in 'organizations' object. Its keys\n    are the name of the organizations and each organization object is\n    related to a list of domains.\n\n    :param aliases: aliases stream\n    :param email_to_employer: enrollments stream\n    :param domain_to_employer: organizations stream\n    :param source: source of the data\n    :param email_validation: validate email addresses; set to True by default\n\n    :raises InvalidFormatError: raised when the format of any of the\n        given streams is not valid.\n    \"\"\"\n\n    # Common Gitdm patterns\n    VALID_LINE_REGEX = r\"^(\\S+)[ \\t]+([^#\\n\\r\\f\\v]+[^#\\s]*)(?:([ \\t]+#.*)?|\\s*)$\"\n    LINES_TO_IGNORE_REGEX = r\"^\\s*(?:#.*)?\\s*$\"\n    EMAIL_ADDRESS_REGEX = r\"^(?P<email>[^\\s@]+@[^\\s@.]+\\.[^\\s@]+)$\"\n    ORGANIZATION_REGEX = r\"^(?P<organization>[^#<\\t\\n\\r\\f\\v]*[^#<\\t\\n\\r\\f\\v\\s])?$\"\n    DOMAIN_REGEX = r\"^(?P<domain>\\w\\S+)$\"\n    ENROLLMENT_REGEX = r\"^(?P<organization>[^#<\\n\\r\\f\\v]*[^#<\\t\\n\\r\\f\\v\\s])(?:[ \\t]+<[ \\t]+(?P<date>\\d{4}\\-\\d{2}\\-\\d{2}))?$\"\n\n    def __init__(self, aliases=None, email_to_employer=None,\n                 domain_to_employer=None, source='gitdm', email_validation=True):\n        self._identities = {}\n        self._organizations = {}\n        self.source = source\n        self.email_validation = email_validation\n\n        # Raw data\n        self.__raw_identities = {}\n        self.__raw_aliases = {}\n        self.__raw_orgs = {}\n\n        self.__parse(aliases, email_to_employer,\n                     domain_to_employer)\n\n    @property\n    def identities(self):\n        uids = [u for u in self._identities.values()]\n        uids.sort(key=lambda u: u.uuid)\n        return uids\n\n    @property\n    def organizations(self):\n        orgs = [o for o in self._organizations.values()]\n        orgs.sort(key=lambda o: o.name)\n        return orgs\n\n    def __parse(self, aliases, email_to_employer, domain_to_employer):\n        \"\"\"Parse Gitdm streams\"\"\"\n\n        self.__parse_organizations(domain_to_employer)\n        self.__parse_identities(aliases, email_to_employer)\n\n    def __parse_identities(self, aliases, email_to_employer):\n        \"\"\"Parse Gitdm identities\"\"\"\n\n        # Parse streams\n        self.__parse_aliases_stream(aliases)\n        self.__parse_email_to_employer_stream(email_to_employer)\n\n        # Create unique identities from aliases list\n        for alias, email in self.__raw_aliases.items():\n            uid = self._identities.get(email, None)\n\n            if not uid:\n                uid = UniqueIdentity(uuid=email)\n\n                e = re.match(self.EMAIL_ADDRESS_REGEX, email, re.UNICODE)\n                if e:\n                    identity = Identity(email=email, source=self.source)\n                else:\n                    identity = Identity(username=email, source=self.source)\n\n                uid.identities.append(identity)\n\n                self._identities[email] = uid\n\n            e = re.match(self.EMAIL_ADDRESS_REGEX, alias, re.UNICODE)\n            if e:\n                identity = Identity(email=alias, source=self.source)\n            else:\n                identity = Identity(username=alias, source=self.source)\n\n            uid.identities.append(identity)\n\n        # Create unique identities from enrollments list\n        for email in self.__raw_identities:\n\n            # Do we have it from aliases?\n            if email in self._identities:\n                uid = self._identities[email]\n            elif email in self.__raw_aliases:\n                canonical = self.__raw_aliases[email]\n                uid = self._identities[canonical]\n            else:\n                uid = UniqueIdentity(uuid=email)\n\n                identity = Identity(email=email, source=self.source)\n                uid.identities.append(identity)\n\n                self._identities[email] = uid\n\n            # Assign enrollments\n            enrs = self.__raw_identities[email]\n            enrs.sort(key=lambda r: r[1])\n\n            start_date = MIN_PERIOD_DATE\n\n            for rol in enrs:\n                name = rol[0]\n                org = self._organizations.get(name, None)\n\n                if not org:\n                    org = Organization(name=name)\n                    self._organizations[name] = org\n\n                end_date = rol[1]\n\n                enrollment = Enrollment(start=start_date, end=end_date,\n                                        organization=org)\n                uid.enrollments.append(enrollment)\n\n                if end_date != MAX_PERIOD_DATE:\n                    start_date = end_date\n\n    def __parse_organizations(self, domain_to_employer):\n        \"\"\"Parse Gitdm organizations\"\"\"\n\n        # Parse streams\n        self.__parse_domain_to_employer_stream(domain_to_employer)\n\n        for org in self.__raw_orgs:\n            o = Organization(name=org)\n\n            for dom in self.__raw_orgs[org]:\n                d = Domain(domain=dom, is_top_domain=False)\n                o.domains.append(d)\n\n            self._organizations[org] = o\n\n    def __parse_aliases_stream(self, stream):\n        \"\"\"Parse aliases stream.\n\n        The stream contains a list of usernames (they can be email addresses\n        their username aliases. Each line has a username and an alias separated\n        by tabs. Comment lines start with the hash character (#).\n\n        Example:\n\n        # List of email aliases\n        jsmith@example.com    jsmith@example.net\n        jsmith@example.net    johnsmith@example.com\n        jdoe@example.com      john_doe@example.com\n        jdoe@example          john_doe@example.com\n        \"\"\"\n        if not stream:\n            return\n\n        f = self.__parse_aliases_line\n\n        for alias_entries in self.__parse_stream(stream, f):\n            alias = alias_entries[0]\n            username = alias_entries[1]\n\n            self.__raw_aliases[alias] = username\n\n    def __parse_email_to_employer_stream(self, stream):\n        \"\"\"Parse email to employer stream.\n\n        The stream contains a list of email addresses and their employers.\n        Each line has an email address and a organization name separated by\n        tabs. Optionally, the date when the identity withdrew from the\n        organization can be included followed by a '<' character. Comment\n        lines start with the hash character (#).\n\n        Example:\n\n        # List of enrollments\n        jsmith@example.com    Example Company # John Smith\n        jdoe@example.com    Example Company   # John Doe\n        jsmith@example.com    Bitergia < 2015-01-01  # John Smith - Bitergia\n        \"\"\"\n        if not stream:\n            return\n\n        f = self.__parse_email_to_employer_line\n\n        for rol in self.__parse_stream(stream, f):\n            email = rol[0]\n            org = rol[1]\n            rol_date = rol[2]\n\n            if org not in self.__raw_orgs:\n                self.__raw_orgs[org] = []\n\n            if email not in self.__raw_identities:\n                self.__raw_identities[email] = [(org, rol_date)]\n            else:\n                self.__raw_identities[email].append((org, rol_date))\n\n    def __parse_domain_to_employer_stream(self, stream):\n        \"\"\"Parse domain to employer stream.\n\n        Each line of the stream has to contain a domain and a organization,\n        or employer, separated by tabs. Comment lines start with the hash\n        character (#)\n\n        Example:\n\n        # Domains from domains.txt\n        example.org        Example\n        example.com        Example\n        bitergia.com       Bitergia\n        libresoft.es       LibreSoft\n        example.org        LibreSoft\n        \"\"\"\n        if not stream:\n            return\n\n        f = self.__parse_domain_to_employer_line\n\n        for o in self.__parse_stream(stream, f):\n            org = o[0]\n            dom = o[1]\n\n            if org not in self.__raw_orgs:\n                self.__raw_orgs[org] = []\n\n            self.__raw_orgs[org].append(dom)\n\n    def __parse_stream(self, stream, parse_line):\n        \"\"\"Generic method to parse gitdm streams\"\"\"\n\n        if not stream:\n            raise InvalidFormatError(cause='stream cannot be empty or None')\n\n        nline = 0\n        lines = stream.split('\\n')\n\n        for line in lines:\n            nline += 1\n\n            # Ignore blank lines and comments\n            m = re.match(self.LINES_TO_IGNORE_REGEX, line, re.UNICODE)\n            if m:\n                continue\n\n            m = re.match(self.VALID_LINE_REGEX, line, re.UNICODE)\n            if not m:\n                cause = \"line %s: invalid format\" % str(nline)\n                raise InvalidFormatError(cause=cause)\n\n            try:\n                result = parse_line(m.group(1), m.group(2))\n                yield result\n            except InvalidFormatError as e:\n                cause = \"Skip: '%s' -> line %s: %s\" % (line, str(nline), e)\n                logger.warning(cause)\n                continue\n\n    def __parse_aliases_line(self, raw_alias, raw_username):\n        \"\"\"Parse aliases lines\"\"\"\n\n        alias = self.__encode(raw_alias)\n        username = self.__encode(raw_username)\n\n        return alias, username\n\n    def __parse_email_to_employer_line(self, raw_email, raw_enrollment):\n        \"\"\"Parse email to employer lines\"\"\"\n\n        e = re.match(self.EMAIL_ADDRESS_REGEX, raw_email, re.UNICODE)\n        if not e and self.email_validation:\n            cause = \"invalid email format: '%s'\" % raw_email\n            raise InvalidFormatError(cause=cause)\n\n        if self.email_validation:\n            email = e.group('email').strip()\n        else:\n            email = raw_email\n\n        raw_enrollment = raw_enrollment.strip() if raw_enrollment != ' ' else raw_enrollment\n        r = re.match(self.ENROLLMENT_REGEX, raw_enrollment, re.UNICODE)\n        if not r:\n            cause = \"invalid enrollment format: '%s'\" % raw_enrollment\n            raise InvalidFormatError(cause=cause)\n\n        org = r.group('organization').strip()\n        date = r.group('date')\n\n        if date:\n            try:\n                dt = dateutil.parser.parse(r.group('date'))\n            except Exception as e:\n                cause = \"invalid date: '%s'\" % date\n        else:\n            dt = MAX_PERIOD_DATE\n\n        email = self.__encode(email)\n        org = self.__encode(org)\n\n        return email, org, dt\n\n    def __parse_domain_to_employer_line(self, raw_domain, raw_org):\n        \"\"\"Parse domain to employer lines\"\"\"\n\n        d = re.match(self.DOMAIN_REGEX, raw_domain, re.UNICODE)\n        if not d:\n            cause = \"invalid domain format: '%s'\" % raw_domain\n            raise InvalidFormatError(cause=cause)\n\n        dom = d.group('domain').strip()\n\n        raw_org = raw_org.strip() if raw_org != ' ' else raw_org\n        o = re.match(self.ORGANIZATION_REGEX, raw_org, re.UNICODE)\n        if not o:\n            cause = \"invalid organization format: '%s'\" % raw_org\n            raise InvalidFormatError(cause=cause)\n\n        org = o.group('organization').strip()\n\n        org = self.__encode(org)\n        dom = self.__encode(dom)\n\n        return org, dom\n\n    def __encode(self, s):\n        return s if s else None\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a Python class that parses Gitdm files to extract information about identities, organizations, and affiliations. To use this code, create an instance of the `GitdmParser` class and pass in the relevant Gitdm files as arguments. The resulting `GitdmParser` object will have two attributes: `identities` and `organizations`, which are lists of `Identity` and `Organization` objects, respectively. The `Identity` and `Organization` classes are defined in the `model.py` module. The `GitdmParser` class has an optional argument `email_validation` that is set to `True` by default, which can be used to disable email address validation.\n\n### Input:\n\n\n### Output:\n# -*- coding: utf-8 -*-\n#\n# Copyright (C) 2014-2021 Bitergia\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n#\n# Authors:\n#     Santiago Due\u00f1as <sduenas@bitergia.com>\n#     Quan Zhou <quan@bitergia.com>\n#\n\nimport dateutil.parser\nimport logging\nimport re\n\n\nfrom ..db.model import MIN_PERIOD_DATE, MAX_PERIOD_DATE, UniqueIdentity,\\\n    Identity, Enrollment, Organization, Domain\nfrom ..exceptions import InvalidFormatError\n\nlogger = logging.getLogger(__name__)\n\n\nclass GitdmParser(object):\n    \"\"\"Parse identities and organizations using Gitdm files.\n\n    Gitdm provides several files that include information about\n    identities, organizations and affiliations. This parser is able\n    to parse anyone of these file formats, together or separate.\n\n    The unique identities are stored in an object named 'uidentities'.\n    The keys of this object are the UUID of the unique identities.\n    Each unique identity object stores a list of identities and\n    enrollments. Email addresses will not be validated when `email_validation`\n    is set to `False`.\n\n    Organizations are stored in 'organizations' object. Its keys\n    are the name of the organizations and each organization object is\n    related to a list of domains.\n\n    :param aliases: aliases stream\n    :param email_to_employer: enrollments stream\n    :param domain_to_employer: organizations stream\n    :param source: source of the data\n    :param email_validation: validate email addresses; set to True by default\n\n    :raises InvalidFormatError: raised when the format of any of the\n        given streams is not valid.\n    \"\"\"\n\n    # Common Gitdm patterns\n    VALID_LINE_REGEX = r\"^(\\S+)[ \\t]+([^#\\n\\r\\f\\v]+[^#\\s]*)(?:([ \\t]+#.*)?|\\s*)$\"\n    LINES_TO_IGNORE_REGEX = r\"^\\s*(?:#.*)?\\s*$\"\n    EMAIL_ADDRESS_REGEX = r\"^(?P<email>[^\\s@]+@[^\\s@.]+\\.[^\\s@]+)$\"\n    ORGANIZATION_REGEX = r\"^(?P<organization>[^#<\\t\\n\\r\\f\\v]*[^#<\\t\\n\\r\\f\\v\\s])?$\"\n    DOMAIN_REGEX = r\"^(?P<domain>\\w\\S+)$\"\n    ENROLLMENT_REGEX = r\"^(?P<organization>[^#<\\n\\r\\f\\v]*[^#<\\t\\n\\r\\f\\v\\s])(?:[ \\t]+<[ \\t]+(?P<date>\\d{4}\\-\\d{2}\\-\\d{2}))?$\"\n\n    def __init__(self, aliases=None, email_to_employer=None,\n                 domain_to_employer=None, source='gitdm', email_validation=True):\n        self._identities = {}\n        self._organizations = {}\n        self.source = source\n        self.email_validation = email_validation\n\n        # Raw data\n        self.__raw_identities = {}\n        self.__raw_aliases = {}\n        self.__raw_orgs = {}\n\n        self.__parse(aliases, email_to_employer,\n                     domain_to_employer)\n\n    @property\n    def identities(self):\n        uids = [u for u in self._identities.values()]\n        uids.sort(key=lambda u: u.uuid)\n        return uids\n\n    @property\n    def organizations(self):\n        orgs = [o for o in self._organizations.values()]\n        orgs.sort(key=lambda o: o.name)\n        return orgs\n\n    def __parse(self, aliases, email_to_employer, domain_to_employer):\n        \"\"\"Parse Gitdm streams\"\"\"\n\n        self.__parse_organizations(domain_to_employer)\n        self.__parse_identities(aliases, email_to_employer)\n\n    def __parse_identities(self, aliases, email_to_employer):\n        \"\"\"Parse Gitdm identities\"\"\"\n\n        # Parse streams\n        self.__parse_aliases_stream(aliases)\n        self.__parse_email_to_employer_stream(email_to_employer)\n\n        # Create unique identities from aliases list\n        for alias, email in self.__raw_aliases.items():\n            uid = self._identities.get(email, None)\n\n            if not uid:\n                uid = UniqueIdentity(uuid=email)\n\n                e = re.match(self.EMAIL_ADDRESS_REGEX, email, re.UNICODE)\n                if e:\n                    identity = Identity(email=email, source=self.source)\n                else:\n                    identity = Identity(username=email, source=self.source)\n\n                uid.identities.append(identity)\n\n                self._identities[email] = uid\n\n            e = re.match(self.EMAIL_ADDRESS_REGEX, alias, re.UNICODE)\n            if e:\n                identity = Identity(email=alias, source=self.source)\n            else:\n                identity = Identity(username=alias, source=self.source)\n\n            uid.identities.append(identity)\n\n        # Create unique identities from enrollments list\n        for email in self.__raw_identities:\n\n            # Do we have it from aliases?\n            if email in self._identities:\n                uid = self._identities[email]\n            elif email in self.__raw_aliases:\n                canonical = self.__raw_aliases[email]\n                uid = self._identities[canonical]\n            else:\n                uid = UniqueIdentity(uuid=email)\n\n                identity = Identity(email=email, source=self.source)\n                uid.identities.append(identity)\n\n                self._identities[email] = uid\n\n            # Assign enrollments\n            enrs = self.__raw_identities[email]\n            enrs.sort(key=lambda r: r[1])\n\n            start_date = MIN_PERIOD_DATE\n\n            for rol in enrs:\n                name = rol[0]\n                org = self._organizations.get(name, None)\n\n                if not org:\n                    org = Organization(name=name)\n                    self._organizations[name] = org\n\n                end_date = rol[1]\n\n                enrollment = Enrollment(start=start_date, end=end_date,\n                                        organization=org)\n                uid.enrollments.append(enrollment)\n\n                if end_date != MAX_PERIOD_DATE:\n                    start_date = end_date\n\n    def __parse_organizations(self, domain_to_employer):\n        \"\"\"Parse Gitdm organizations\"\"\"\n\n        # Parse streams\n        self.__parse_domain_to_employer_stream(domain_to_employer)\n\n        for org in self.__raw_orgs:\n            o = Organization(name=org)\n\n            for dom in self.__raw_orgs[org]:\n                d = Domain(domain=dom, is_top_domain=False)\n                o.domains.append(d)\n\n            self._organizations[org] = o\n\n    def __parse_aliases_stream(self, stream):\n        \"\"\"Parse aliases stream.\n\n        The stream contains a list of usernames (they can be email addresses\n        their username aliases. Each line has a username and an alias separated\n        by tabs. Comment lines start with the hash character (#).\n\n        Example:\n\n        # List of email aliases\n        jsmith@example.com    jsmith@example.net\n        jsmith@example.net    johnsmith@example.com\n        jdoe@example.com      john_doe@example.com\n        jdoe@example          john_doe@example.com\n        \"\"\"\n        if not stream:\n            return\n\n        f = self.__parse_aliases_line\n\n        for alias_entries in self.__parse_stream(stream, f):\n            alias = alias_entries[0]\n            username = alias_entries[1]\n\n            self.__raw_aliases[alias] = username\n\n    def __parse_email_to_employer_stream(self, stream):\n        \"\"\"Parse email to employer stream.\n\n        The stream contains a list of email addresses and their employers.\n        Each line has an email address and a organization name separated by\n        tabs. Optionally, the date when the identity withdrew from the\n        organization can be included followed by a '<' character. Comment\n        lines start with the hash character (#).\n\n        Example:\n\n        # List of enrollments\n        jsmith@example.com    Example Company # John Smith\n        jdoe@example.com    Example Company   # John Doe\n        jsmith@example.com    Bitergia < 2015-01-01  # John Smith - Bitergia\n        \"\"\"\n        if not stream:\n            return\n\n        f = self.__parse_email_to_employer_line\n\n        for rol in self.__parse_stream(stream, f):\n            email = rol[0]\n            org = rol[1]\n            rol_date = rol[2]\n\n            if org not in self.__raw_orgs:\n                self.__raw_orgs[org] = []\n\n            if email not in self.__raw_identities:\n                self.__raw_identities[email] = [(org, rol_date)]\n            else:\n                self.__raw_identities[email].append((org, rol_date))\n\n    def __parse_domain_to_employer_stream(self, stream):\n        \"\"\"Parse domain to employer stream.\n\n        Each line of the stream has to contain a domain and a organization,\n        or employer, separated by tabs. Comment lines start with the hash\n        character (#)\n\n        Example:\n\n        # Domains from domains.txt\n        example.org        Example\n        example.com        Example\n        bitergia.com       Bitergia\n        libresoft.es       LibreSoft\n        example.org        LibreSoft\n        \"\"\"\n        if not stream:\n            return\n\n        f = self.__parse_domain_to_employer_line\n\n        for o in self.__parse_stream(stream, f):\n            org = o[0]\n            dom = o[1]\n\n            if org not in self.__raw_orgs:\n                self.__raw_orgs[org] = []\n\n            self.__raw_orgs[org].append(dom)\n\n    def __parse_stream(self, stream, parse_line):\n        \"\"\"Generic method to parse gitdm streams\"\"\"\n\n        if not stream:\n            raise InvalidFormatError(cause='stream cannot be empty or None')\n\n        nline = 0\n        lines = stream.split('\\n')\n\n        for line in lines:\n            nline += 1\n\n            # Ignore blank lines and comments\n            m = re.match(self.LINES_TO_IGNORE_REGEX, line, re.UNICODE)\n            if m:\n                continue\n\n            m = re.match(self.VALID_LINE_REGEX, line, re.UNICODE)\n            if not m:\n                cause = \"line %s: invalid format\" % str(nline)\n                raise InvalidFormatError(cause=cause)\n\n            try:\n                result = parse_line(m.group(1), m.group(2))\n                yield result\n            except InvalidFormatError as e:\n                cause = \"Skip: '%s' -> line %s: %s\" % (line, str(nline), e)\n                logger.warning(cause)\n                continue\n\n    def __parse_aliases_line(self, raw_alias, raw_username):\n        \"\"\"Parse aliases lines\"\"\"\n\n        alias = self.__encode(raw_alias)\n        username = self.__encode(raw_username)\n\n        return alias, username\n\n    def __parse_email_to_employer_line(self, raw_email, raw_enrollment):\n        \"\"\"Parse email to employer lines\"\"\"\n\n        e = re.match(self.EMAIL_ADDRESS_REGEX, raw_email, re.UNICODE)\n        if not e and self.email_validation:\n            cause = \"invalid email format: '%s'\" % raw_email\n            raise InvalidFormatError(cause=cause)\n\n        if self.email_validation:\n            email = e.group('email').strip()\n        else:\n            email = raw_email\n\n        raw_enrollment = raw_enrollment.strip() if raw_enrollment != ' ' else raw_enrollment\n        r = re.match(self.ENROLLMENT_REGEX, raw_enrollment, re.UNICODE)\n        if not r:\n            cause = \"invalid enrollment format: '%s'\" % raw_enrollment\n            raise InvalidFormatError(cause=cause)\n\n        org = r.group('organization').strip()\n        date = r.group('date')\n\n        if date:\n            try:\n                dt = dateutil.parser.parse(r.group('date'))\n            except Exception as e:\n                cause = \"invalid date: '%s'\" % date\n        else:\n            dt = MAX_PERIOD_DATE\n\n        email = self.__encode(email)\n        org = self.__encode(org)\n\n        return email, org, dt\n\n    def __parse_domain_to_employer_line(self, raw_domain, raw_org):\n        \"\"\"Parse domain to employer lines\"\"\"\n\n        d = re.match(self.DOMAIN_REGEX, raw_domain, re.UNICODE)\n        if not d:\n            cause = \"invalid domain format: '%s'\" % raw_domain\n            raise InvalidFormatError(cause=cause)\n\n        dom = d.group('domain').strip()\n\n        raw_org = raw_org.strip() if raw_org != ' ' else raw_org\n        o = re.match(self.ORGANIZATION_REGEX, raw_org, re.UNICODE)\n        if not o:\n            cause = \"invalid organization format: '%s'\" % raw_org\n            raise InvalidFormatError(cause=cause)\n\n        org = o.group('organization').strip()\n\n        org = self.__encode(org)\n        dom = self.__encode(dom)\n\n        return org, dom\n\n    def __encode(self, s):\n        return s if s else None\n"
    },
    {
        "instruction": "Create a REST API using Python which stores data in a database and retrieves the data upon a GET request.",
        "input": "Not applicable",
        "output": "import sqlite3\n\nfrom flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\ndatastore = sqlite3.connect('data.db')\n\n@app.route('/data', methods=['GET'])\ndef get_data():\n cur = datastore.cursor()\n cur.execute(\"SELECT * FROM data\")\n rows = cur.fetchall()\n return jsonify(rows)\n\n@app.route('/data', methods=['POST'])\ndef add_data():\n cur = datastore.cursor()\n cur.execute(\"INSERT INTO data VALUES (?, ?)\",\n (request.json['id'], request.json['value']))\n datastore.commit()\n return '', 201\n\nif __name__ == '__main__':\n app.run(debug=True)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a REST API using Python which stores data in a database and retrieves the data upon a GET request.\n\n### Input:\nNot applicable\n\n### Output:\nimport sqlite3\n\nfrom flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\ndatastore = sqlite3.connect('data.db')\n\n@app.route('/data', methods=['GET'])\ndef get_data():\n cur = datastore.cursor()\n cur.execute(\"SELECT * FROM data\")\n rows = cur.fetchall()\n return jsonify(rows)\n\n@app.route('/data', methods=['POST'])\ndef add_data():\n cur = datastore.cursor()\n cur.execute(\"INSERT INTO data VALUES (?, ?)\",\n (request.json['id'], request.json['value']))\n datastore.commit()\n return '', 201\n\nif __name__ == '__main__':\n app.run(debug=True)"
    },
    {
        "instruction": "Create a Python function that calculates the area of a circle.",
        "input": "radius=3",
        "output": "import math\n\ndef area_circle(radius):\n    return math.pi * (radius ** 2)\n    \nprint(area_circle(3))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that calculates the area of a circle.\n\n### Input:\nradius=3\n\n### Output:\nimport math\n\ndef area_circle(radius):\n    return math.pi * (radius ** 2)\n    \nprint(area_circle(3))"
    },
    {
        "instruction": "Write a Python program to generate all possible strings by using 'a', 'e', 'i', 'o', 'u'.",
        "input": "",
        "output": "def generate_combinations(s):\n    i = 0\n    result = []\n    for a in s:\n        for b in s:\n            for c in s:\n                for d in s:\n                    for e in s:\n                        result.append(a+b+c+d+e)\n    return result\n\nprint(generate_combinations(['a', 'e', 'i', 'o', 'u']))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate all possible strings by using 'a', 'e', 'i', 'o', 'u'.\n\n### Input:\n\n\n### Output:\ndef generate_combinations(s):\n    i = 0\n    result = []\n    for a in s:\n        for b in s:\n            for c in s:\n                for d in s:\n                    for e in s:\n                        result.append(a+b+c+d+e)\n    return result\n\nprint(generate_combinations(['a', 'e', 'i', 'o', 'u']))"
    },
    {
        "instruction": "Design a Python program to calculate the hourglass sum given a 2D array as input.",
        "input": "arr=[[1,1,1,0,0,0],\n     [0,1,0,0,0,0],\n     [1,1,1,0,0,0],\n     [0,0,2,4,4,0],\n     [0,0,0,2,0,0],\n     [0,0,1,2,4,0]]",
        "output": "def hourglass_sum(arr):\n    max_sum = float(\"-inf\")\n    for row in range(4):\n        for col in range(4):\n            top = arr[row][col] + arr[row][col+1] + arr[row][col+2]\n            middle = arr[row+1][col+1]\n            bottom = arr[row+2][col] + arr[row+2][col+1] + arr[row+2][col+2]\n            curr_sum = top + middle + bottom\n            max_sum = max(max_sum, curr_sum)\n    return max_sum",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to calculate the hourglass sum given a 2D array as input.\n\n### Input:\narr=[[1,1,1,0,0,0],\n     [0,1,0,0,0,0],\n     [1,1,1,0,0,0],\n     [0,0,2,4,4,0],\n     [0,0,0,2,0,0],\n     [0,0,1,2,4,0]]\n\n### Output:\ndef hourglass_sum(arr):\n    max_sum = float(\"-inf\")\n    for row in range(4):\n        for col in range(4):\n            top = arr[row][col] + arr[row][col+1] + arr[row][col+2]\n            middle = arr[row+1][col+1]\n            bottom = arr[row+2][col] + arr[row+2][col+1] + arr[row+2][col+2]\n            curr_sum = top + middle + bottom\n            max_sum = max(max_sum, curr_sum)\n    return max_sum"
    },
    {
        "instruction": "Design a program that takes two strings and determines the number of common characters in them.",
        "input": "",
        "output": "# Python Program to find common characters between two Strings \ndef commonCharacters(s1, s2): \n    # make hashmap for both string \n    hmap_s1 = [0] * NO_OF_CHARS \n    hmap_s2 = [0] * NO_OF_CHARS \n  \n    # count frequency of each character \n    # in first string \n    for i in s1: \n        hmap_s1[ord(i)] += 1\n  \n    # count frequency of each character \n    # in second string \n    for i in s2: \n        hmap_s2[ord(i)] += 1\n  \n    # traverse hashmap and count common \n    # characters \n    count = 0\n    for i in range(NO_OF_CHARS): \n        count += (min(hmap_s1[i], hmap_s2[i])) \n  \n    return count",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program that takes two strings and determines the number of common characters in them.\n\n### Input:\n\n\n### Output:\n# Python Program to find common characters between two Strings \ndef commonCharacters(s1, s2): \n    # make hashmap for both string \n    hmap_s1 = [0] * NO_OF_CHARS \n    hmap_s2 = [0] * NO_OF_CHARS \n  \n    # count frequency of each character \n    # in first string \n    for i in s1: \n        hmap_s1[ord(i)] += 1\n  \n    # count frequency of each character \n    # in second string \n    for i in s2: \n        hmap_s2[ord(i)] += 1\n  \n    # traverse hashmap and count common \n    # characters \n    count = 0\n    for i in range(NO_OF_CHARS): \n        count += (min(hmap_s1[i], hmap_s2[i])) \n  \n    return count"
    },
    {
        "instruction": "Create a Python program that takes an input of a list of numbers and prints out the median of the list.",
        "input": "[2, 9, 4, 8, 0, 7, 1]",
        "output": "def median(nums):\n # Sort the list\n nums.sort()\n \n length = len(nums)\n \n # Check for even length list\n if length % 2 == 0:\n  # Get average of two middle elements\n median = (nums[int(length / 2)] + nums[int(length / 2 - 1)]) / 2\n else:\n # Return middle element\n median = nums[int(length / 2)]\n \n return median\n \nnums = [2, 9, 4, 8, 0, 7, 1]\nprint(median(nums)) # 4.5",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes an input of a list of numbers and prints out the median of the list.\n\n### Input:\n[2, 9, 4, 8, 0, 7, 1]\n\n### Output:\ndef median(nums):\n # Sort the list\n nums.sort()\n \n length = len(nums)\n \n # Check for even length list\n if length % 2 == 0:\n  # Get average of two middle elements\n median = (nums[int(length / 2)] + nums[int(length / 2 - 1)]) / 2\n else:\n # Return middle element\n median = nums[int(length / 2)]\n \n return median\n \nnums = [2, 9, 4, 8, 0, 7, 1]\nprint(median(nums)) # 4.5"
    },
    {
        "instruction": "Generate a Python code snippet to print the first N numbers of the Fibonacci sequence.",
        "input": "",
        "output": "def print_fibonacci(n):\n    first_number = 0\n    second_number = 1\n    for num_ in range(0, n):\n        if num_ <= 1:\n            next_number = num_\n        else:\n            next_number = first_number + second_number\n            first_number = second_number\n            second_number = next_number\n        print(next_number)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code snippet to print the first N numbers of the Fibonacci sequence.\n\n### Input:\n\n\n### Output:\ndef print_fibonacci(n):\n    first_number = 0\n    second_number = 1\n    for num_ in range(0, n):\n        if num_ <= 1:\n            next_number = num_\n        else:\n            next_number = first_number + second_number\n            first_number = second_number\n            second_number = next_number\n        print(next_number)"
    },
    {
        "instruction": "Develop a machine learning model in Python to detect the presence of pneumonia in chest X-rays.",
        "input": "",
        "output": "from tensorflow.keras import layers\nfrom tensorflow.keras import models\n\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 1)))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(64, (3,3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(64, (3,3), activation='relu'))\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(2, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer='rmsprop',metrics=['accuracy'])\nmodel.fit(...)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a machine learning model in Python to detect the presence of pneumonia in chest X-rays.\n\n### Input:\n\n\n### Output:\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import models\n\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 1)))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(64, (3,3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2,2)))\nmodel.add(layers.Conv2D(64, (3,3), activation='relu'))\n\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(2, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy', optimizer='rmsprop',metrics=['accuracy'])\nmodel.fit(...)"
    },
    {
        "instruction": "Create a Python script that will generate a random four digit number",
        "input": "",
        "output": "import random\n\nnumber = random.randint(1000, 9999)\nprint(number) # e.g. 3874",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that will generate a random four digit number\n\n### Input:\n\n\n### Output:\nimport random\n\nnumber = random.randint(1000, 9999)\nprint(number) # e.g. 3874"
    },
    {
        "instruction": "Create an AI model in Python to classify an email as either a business or personal one.",
        "input": "",
        "output": "import pandas as pd \nimport numpy as np \nfrom sklearn.feature_extraction.text import TfidfVectorizer \nfrom sklearn.linear_model import LogisticRegression \nfrom sklearn.metrics import accuracy_score \n\ndata = pd.read_json('emails.json') \nX_train, X_test, y_train, y_test = train_test_split(data['text'], data['label'], test_size=0.2, random_state=42)\n\n# Transform textual data in vectors \ntfidf = TfidfVectorizer() \nX_train_vec = tfidf.fit_transform(X_train) \nX_test_vec = tfidf.transform(X_test)\n\n# Create and train a logistic regression model \nmodel = LogisticRegression() \nmodel.fit(X_train_vec, y_train) \n\n# Test the model accuracy \npredictions = model.predict(X_test_vec) \naccuracy = accuracy_score(y_test, predictions) \nprint('Model accuracy: ', accuracy)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI model in Python to classify an email as either a business or personal one.\n\n### Input:\n\n\n### Output:\nimport pandas as pd \nimport numpy as np \nfrom sklearn.feature_extraction.text import TfidfVectorizer \nfrom sklearn.linear_model import LogisticRegression \nfrom sklearn.metrics import accuracy_score \n\ndata = pd.read_json('emails.json') \nX_train, X_test, y_train, y_test = train_test_split(data['text'], data['label'], test_size=0.2, random_state=42)\n\n# Transform textual data in vectors \ntfidf = TfidfVectorizer() \nX_train_vec = tfidf.fit_transform(X_train) \nX_test_vec = tfidf.transform(X_test)\n\n# Create and train a logistic regression model \nmodel = LogisticRegression() \nmodel.fit(X_train_vec, y_train) \n\n# Test the model accuracy \npredictions = model.predict(X_test_vec) \naccuracy = accuracy_score(y_test, predictions) \nprint('Model accuracy: ', accuracy)"
    },
    {
        "instruction": "Create a class in Python with a method to sort the given array in an ascending order.",
        "input": "[3, 2, 5, 1, 4]",
        "output": "class Sort: \n    def sort_arr(self, arr):\n        arr.sort()\n        return arr",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python with a method to sort the given array in an ascending order.\n\n### Input:\n[3, 2, 5, 1, 4]\n\n### Output:\nclass Sort: \n    def sort_arr(self, arr):\n        arr.sort()\n        return arr"
    },
    {
        "instruction": "Design a neural network using TensorFlow in Python to classify movie reviews as either positive or negative.",
        "input": "",
        "output": "model = tf.keras.Sequential([\n    tf.keras.layers.Embedding(input_dim= 5000, output_dim= 32, input_length=500),\n    tf.keras.layers.SpatialDropout1D(0.25),\n    tf.keras.layers.Conv1D(64, 5, activation='relu'),\n    tf.keras.layers.GlobalMaxPooling1D(),\n    tf.keras.layers.Dense(16, activation='relu'),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a neural network using TensorFlow in Python to classify movie reviews as either positive or negative.\n\n### Input:\n\n\n### Output:\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Embedding(input_dim= 5000, output_dim= 32, input_length=500),\n    tf.keras.layers.SpatialDropout1D(0.25),\n    tf.keras.layers.Conv1D(64, 5, activation='relu'),\n    tf.keras.layers.GlobalMaxPooling1D(),\n    tf.keras.layers.Dense(16, activation='relu'),\n    tf.keras.layers.Dropout(0.25),\n    tf.keras.layers.Dense(1, activation='sigmoid')\n])"
    },
    {
        "instruction": "Create a web application in Python that displays a directory structure tree for a given path.",
        "input": "/home/myUser/myFolder",
        "output": "import os\n\ndef make_tree(path): \n files = os.listdir(path) \n for f in files: \n     full_path = os.path.join(path, f) \n     if os.path.isdir(full_path): \n         print(f) \n         make_tree(full_path) \n     else: \n         print(\" -\" + f) \n  \npath = '/home/myUser/myFolder' \nmake_tree(path)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application in Python that displays a directory structure tree for a given path.\n\n### Input:\n/home/myUser/myFolder\n\n### Output:\nimport os\n\ndef make_tree(path): \n files = os.listdir(path) \n for f in files: \n     full_path = os.path.join(path, f) \n     if os.path.isdir(full_path): \n         print(f) \n         make_tree(full_path) \n     else: \n         print(\" -\" + f) \n  \npath = '/home/myUser/myFolder' \nmake_tree(path)"
    },
    {
        "instruction": "Create a function in Python that takes a list as input and searches for a number \"x\" and returns the index of it.",
        "input": "[10, 8 , 5, 15], x = 15",
        "output": "def search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\narr = [10, 8 , 5, 15]\nx = 15\nprint(search(arr, x))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes a list as input and searches for a number \"x\" and returns the index of it.\n\n### Input:\n[10, 8 , 5, 15], x = 15\n\n### Output:\ndef search(arr, x):\n    for i in range(len(arr)):\n        if arr[i] == x:\n            return i\n    return -1\n\narr = [10, 8 , 5, 15]\nx = 15\nprint(search(arr, x))"
    },
    {
        "instruction": "Generate a Python program to create a dictionary and add elements to it.",
        "input": "",
        "output": "def create_dict():\n    my_dict = {} \n  \n    # adding elements one at a time \n    my_dict['a'] = 'alpha'\n    my_dict['g'] = 'gamma'\n    my_dict['o'] = 'omega'\n  \n    print(my_dict) \n    return my_dict",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to create a dictionary and add elements to it.\n\n### Input:\n\n\n### Output:\ndef create_dict():\n    my_dict = {} \n  \n    # adding elements one at a time \n    my_dict['a'] = 'alpha'\n    my_dict['g'] = 'gamma'\n    my_dict['o'] = 'omega'\n  \n    print(my_dict) \n    return my_dict"
    },
    {
        "instruction": "Design a basic Rock-Paper-Scissors game in Python.",
        "input": "",
        "output": "import random\n\noptions = [\"Rock\", \"Paper\", \"Scissors\"]\n\ndef rock_paper_scissors(n):\n    # get computer's move\n    computer_move = random.choice(options)\n    \n    # get user's move\n    print(\"Choose one: Rock, Paper, or Scissors\")\n    user_move = input()\n    user_move = user_move.capitalize()\n    \n    # check for a tie\n    if computer_move == user_move:\n        print(f\"It's a tie! You both chose {computer_move}\")\n    \n    # check for user win\n    elif (user_move == \"Rock\" and computer_move == \"Scissors\") or (user_move == \"Paper\" and computer_move == \"Rock\") or (user_move == \"Scissors\" and computer_move == \"Paper\"):\n        print(f\"You win! {user_move} beats {computer_move}\")\n    \n    # if none of the above, user loses\n    else:\n        print(f\"You lose! {computer_move} beats {user_move}\")\n\nrock_paper_scissors(3)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a basic Rock-Paper-Scissors game in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\noptions = [\"Rock\", \"Paper\", \"Scissors\"]\n\ndef rock_paper_scissors(n):\n    # get computer's move\n    computer_move = random.choice(options)\n    \n    # get user's move\n    print(\"Choose one: Rock, Paper, or Scissors\")\n    user_move = input()\n    user_move = user_move.capitalize()\n    \n    # check for a tie\n    if computer_move == user_move:\n        print(f\"It's a tie! You both chose {computer_move}\")\n    \n    # check for user win\n    elif (user_move == \"Rock\" and computer_move == \"Scissors\") or (user_move == \"Paper\" and computer_move == \"Rock\") or (user_move == \"Scissors\" and computer_move == \"Paper\"):\n        print(f\"You win! {user_move} beats {computer_move}\")\n    \n    # if none of the above, user loses\n    else:\n        print(f\"You lose! {computer_move} beats {user_move}\")\n\nrock_paper_scissors(3)"
    },
    {
        "instruction": "Design a function in Python that reverses a string.",
        "input": "string = \"Hello World\"",
        "output": "def reverse_string(str): \n    return str[::-1]  \n  \nreverse = reverse_string(string) \nprint(\"The reversed string is : \",reverse)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python that reverses a string.\n\n### Input:\nstring = \"Hello World\"\n\n### Output:\ndef reverse_string(str): \n    return str[::-1]  \n  \nreverse = reverse_string(string) \nprint(\"The reversed string is : \",reverse)"
    },
    {
        "instruction": "Modify a Python script so that it will accept multiple command line arguments and process them accordingly.",
        "input": "Old Python script:\n\nimport sys\n\ndef main():\n arg1 = sys.argv[1]\n arg2 = sys.argv[2]\n\n # Do something with the inputs\n\nif __name__ == \"__main__\":\n    main()",
        "output": "import sys\n\ndef main():\n # Create a list of arguments \n args = list(sys.argv) \n\n # Remove the script name \n args.pop(0) \n\n # Do something with the inputs \n for arg in args:\n     # Do something with the inputs\n\nif __name__ == \"__main__\":\n    main()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify a Python script so that it will accept multiple command line arguments and process them accordingly.\n\n### Input:\nOld Python script:\n\nimport sys\n\ndef main():\n arg1 = sys.argv[1]\n arg2 = sys.argv[2]\n\n # Do something with the inputs\n\nif __name__ == \"__main__\":\n    main()\n\n### Output:\nimport sys\n\ndef main():\n # Create a list of arguments \n args = list(sys.argv) \n\n # Remove the script name \n args.pop(0) \n\n # Do something with the inputs \n for arg in args:\n     # Do something with the inputs\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "instruction": "Create a web application in Python and Flask to display information about books.",
        "input": "books = [\n  {\n   'title': 'Book 1',\n   'author': 'John Doe',\n   'publisher': 'ABC Publisher',\n  },\n  {\n   'title': 'Book 2',\n   'author': 'Jane Doe',\n   'publisher': 'XYZ Publisher',\n  }\n]",
        "output": "from flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n books = [\n  {\n   'title': 'Book 1',\n   'author': 'John Doe',\n   'publisher': 'ABC Publisher',\n  },\n  {\n   'title': 'Book 2',\n   'author': 'Jane Doe',\n   'publisher': 'XYZ Publisher',\n  }\n]\n return render_template('index.html', books=books)\n\nif __name__ == '__main__':\n app.run(debug=True)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application in Python and Flask to display information about books.\n\n### Input:\nbooks = [\n  {\n   'title': 'Book 1',\n   'author': 'John Doe',\n   'publisher': 'ABC Publisher',\n  },\n  {\n   'title': 'Book 2',\n   'author': 'Jane Doe',\n   'publisher': 'XYZ Publisher',\n  }\n]\n\n### Output:\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n books = [\n  {\n   'title': 'Book 1',\n   'author': 'John Doe',\n   'publisher': 'ABC Publisher',\n  },\n  {\n   'title': 'Book 2',\n   'author': 'Jane Doe',\n   'publisher': 'XYZ Publisher',\n  }\n]\n return render_template('index.html', books=books)\n\nif __name__ == '__main__':\n app.run(debug=True)"
    },
    {
        "instruction": "Create an algorithm in Python for finding the shortest path through a maze using Dijkstra's algorithm.",
        "input": "Maze map represented as an adjacency matrix",
        "output": "def dijkstra(graph, source):\n    dist = [float('inf')] * len(graph)\n    dist[source] = 0\n    visited = [False] * len(graph)\n    path = [None] * len(graph)\n\n    while False in visited:\n        # select next node\n        min_distance = float('inf')\n        for i in range(len(graph)):\n            if visited[i]:\n                continue\n            if dist[i] < min_distance:\n                min_distance = dist[i]\n                node = i\n       \n        # update distances\n        for neighbor in range(len(graph[node])):\n            if visited[neighbor]:\n                continue\n            alternative_distance = dist[node] + graph[node][neighbor]\n            if alternative_distance < dist[neighbor]:\n                dist[neighbor] = alternative_distance\n                path[neighbor] = node\n\n        visited[node] = True\n\n    return path",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python for finding the shortest path through a maze using Dijkstra's algorithm.\n\n### Input:\nMaze map represented as an adjacency matrix\n\n### Output:\ndef dijkstra(graph, source):\n    dist = [float('inf')] * len(graph)\n    dist[source] = 0\n    visited = [False] * len(graph)\n    path = [None] * len(graph)\n\n    while False in visited:\n        # select next node\n        min_distance = float('inf')\n        for i in range(len(graph)):\n            if visited[i]:\n                continue\n            if dist[i] < min_distance:\n                min_distance = dist[i]\n                node = i\n       \n        # update distances\n        for neighbor in range(len(graph[node])):\n            if visited[neighbor]:\n                continue\n            alternative_distance = dist[node] + graph[node][neighbor]\n            if alternative_distance < dist[neighbor]:\n                dist[neighbor] = alternative_distance\n                path[neighbor] = node\n\n        visited[node] = True\n\n    return path"
    },
    {
        "instruction": "Write a Python function to count the number of substrings of a given string that contains exactly K distinct characters.",
        "input": "\"abcabcabcabc\", K = 2",
        "output": "def count_substrings_with_k_distinct_characters(in_str, k):\n    count = 0\n    for i in range(len(in_str)-k+1):\n        sub_str = in_str[i:i+k]\n        if len(set(sub_str)) == k:\n            count +=1 \n    return count\n\ncount = count_substrings_with_k_distinct_characters(\"abcabcabcabc\", 2)\nprint(count)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to count the number of substrings of a given string that contains exactly K distinct characters.\n\n### Input:\n\"abcabcabcabc\", K = 2\n\n### Output:\ndef count_substrings_with_k_distinct_characters(in_str, k):\n    count = 0\n    for i in range(len(in_str)-k+1):\n        sub_str = in_str[i:i+k]\n        if len(set(sub_str)) == k:\n            count +=1 \n    return count\n\ncount = count_substrings_with_k_distinct_characters(\"abcabcabcabc\", 2)\nprint(count)"
    },
    {
        "instruction": "Write code to create a binary tree given the input array.",
        "input": "arr = [1, 3, 5, 7, 9]",
        "output": "# Python program to create \n# a Binary Tree  \n  \n# A class that represents an  \n# individual node in a Binary Tree \nclass Node: \n    def __init__(self,key): \n        self.left = None\n        self.right = None\n        self.val = key \n  \n# create root  \ndef createTree(arr): \n    n = len(arr) \n  \n    # if array is empty \n    if n == 0: \n        return None\n  \n    # Create root of BST \n    root = Node(arr[0]) \n  \n    # insert remaining elements  \n    # of arr in level order \n    i = 1\n    while i < n: \n        insert(root, arr[i]) \n        i += 1\n  \n    return root \n  \n# Node and root insert \ndef insert(root,key): \n  \n    # create a new node, if root  \n    # is None, the new node is \n    # root \n    if root is None: \n        return Node(key) \n      \n    # if key is less than root's key \n    # then insert key in left subtree \n    if key < root.val: \n        root.left = insert(root.left, key) \n  \n    # if key is greater than root's key \n    # then insert key in right subtree \n    else: \n        root.right = insert(root.right, key) \n  \n    return root \n  \n  \n# Driver Code \nif __name__=='__main__': \n    arr = [1, 3, 5, 7, 9] \n    root = createTree(arr) \n    print(root.val)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code to create a binary tree given the input array.\n\n### Input:\narr = [1, 3, 5, 7, 9]\n\n### Output:\n# Python program to create \n# a Binary Tree  \n  \n# A class that represents an  \n# individual node in a Binary Tree \nclass Node: \n    def __init__(self,key): \n        self.left = None\n        self.right = None\n        self.val = key \n  \n# create root  \ndef createTree(arr): \n    n = len(arr) \n  \n    # if array is empty \n    if n == 0: \n        return None\n  \n    # Create root of BST \n    root = Node(arr[0]) \n  \n    # insert remaining elements  \n    # of arr in level order \n    i = 1\n    while i < n: \n        insert(root, arr[i]) \n        i += 1\n  \n    return root \n  \n# Node and root insert \ndef insert(root,key): \n  \n    # create a new node, if root  \n    # is None, the new node is \n    # root \n    if root is None: \n        return Node(key) \n      \n    # if key is less than root's key \n    # then insert key in left subtree \n    if key < root.val: \n        root.left = insert(root.left, key) \n  \n    # if key is greater than root's key \n    # then insert key in right subtree \n    else: \n        root.right = insert(root.right, key) \n  \n    return root \n  \n  \n# Driver Code \nif __name__=='__main__': \n    arr = [1, 3, 5, 7, 9] \n    root = createTree(arr) \n    print(root.val)"
    },
    {
        "instruction": "Create a Recurrent Neural Network (RNN) Model in Python with Keras that takes in text data and generates predicted labels.",
        "input": "Not applicable",
        "output": "import keras\nfrom keras.preprocessing import sequence\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Embedding, LSTM\nfrom keras.datasets import imdb\n\n(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=20000)\n\nx_train = sequence.pad_sequences(x_train, maxlen=80)\nx_test = sequence.pad_sequences(x_test, maxlen=80)\n\nmodel = Sequential()\nmodel.add(Embedding(20000, 128))\nmodel.add(LSTM(128, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',\n optimizer='adam',\n metrics=['accuracy'])\n\nmodel.fit(x_train, y_train,\n batch_size=32,\n epochs=15,\n verbose=2,\n validation_data=(x_test, y_test))\n\nscore, acc = model.evaluate(x_test, y_test,\n batch_size=32,\n verbose=2)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Recurrent Neural Network (RNN) Model in Python with Keras that takes in text data and generates predicted labels.\n\n### Input:\nNot applicable\n\n### Output:\nimport keras\nfrom keras.preprocessing import sequence\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Embedding, LSTM\nfrom keras.datasets import imdb\n\n(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=20000)\n\nx_train = sequence.pad_sequences(x_train, maxlen=80)\nx_test = sequence.pad_sequences(x_test, maxlen=80)\n\nmodel = Sequential()\nmodel.add(Embedding(20000, 128))\nmodel.add(LSTM(128, dropout=0.2, recurrent_dropout=0.2))\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.compile(loss='binary_crossentropy',\n optimizer='adam',\n metrics=['accuracy'])\n\nmodel.fit(x_train, y_train,\n batch_size=32,\n epochs=15,\n verbose=2,\n validation_data=(x_test, y_test))\n\nscore, acc = model.evaluate(x_test, y_test,\n batch_size=32,\n verbose=2)"
    },
    {
        "instruction": "Write a Python program which includes a feature which can calculate the sum of all the numbers from 1 to user's given number.",
        "input": "",
        "output": "def sum(n): \n    sum = 0\n    for i in range(1,n+1): \n        sum = sum + i \n    return sum",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program which includes a feature which can calculate the sum of all the numbers from 1 to user's given number.\n\n### Input:\n\n\n### Output:\ndef sum(n): \n    sum = 0\n    for i in range(1,n+1): \n        sum = sum + i \n    return sum"
    },
    {
        "instruction": "Generate a Python program to generate a random password with a combination of lowercase, uppercase and numeric characters containing 8-10 characters.",
        "input": "Not applicable",
        "output": "import random\nimport string\n\ndef generate_password():\n  length = random.randrange(8, 11)\n  password = ''.join(random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits) for _ in range(length))\n  return password\n\nif __name__ == '__main__':\n  password = generate_password()\n  print('Generated Password:', password)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to generate a random password with a combination of lowercase, uppercase and numeric characters containing 8-10 characters.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\nimport string\n\ndef generate_password():\n  length = random.randrange(8, 11)\n  password = ''.join(random.choice(string.ascii_lowercase + string.ascii_uppercase + string.digits) for _ in range(length))\n  return password\n\nif __name__ == '__main__':\n  password = generate_password()\n  print('Generated Password:', password)"
    },
    {
        "instruction": "Write an optimized function in Python to check if a given number is a prime number.",
        "input": "",
        "output": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n > 2 and n % 2 == 0:\n        return False\n\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n\n    return True",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an optimized function in Python to check if a given number is a prime number.\n\n### Input:\n\n\n### Output:\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n > 2 and n % 2 == 0:\n        return False\n\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n\n    return True"
    },
    {
        "instruction": "Generate a spiral matrix of size m x n using Python.",
        "input": "",
        "output": "def generate_spiral_matrix(m, n):\n    matrix = []\n    r = 0\n    c = 0\n    while (r < m and c < n):\n        # list to add elements of the first row\n        for i in range(c, n): \n            matrix.append(r * n + i + 1) \n        r += 1\n  \n        # list to add elements of the last column\n        for i in range(r, m): \n            matrix.append(i * n + n - 1 + 1)\n        n = n - 1\n  \n        # if last row exist\n        if ( r < m): \n                # list to add elements of the last row\n                for i in range(n - 1, c - 1, -1): \n                    matrix.append((m - 1) * n + i + 1) \n                m -= 1\n          \n        # if first column exits\n        if (c < n): \n            # list to add elements of the first column\n            for i in range(m - 1, r - 1, -1): \n                matrix.append(i * n + c + 1) \n            c += 1\n\n    return matrix",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a spiral matrix of size m x n using Python.\n\n### Input:\n\n\n### Output:\ndef generate_spiral_matrix(m, n):\n    matrix = []\n    r = 0\n    c = 0\n    while (r < m and c < n):\n        # list to add elements of the first row\n        for i in range(c, n): \n            matrix.append(r * n + i + 1) \n        r += 1\n  \n        # list to add elements of the last column\n        for i in range(r, m): \n            matrix.append(i * n + n - 1 + 1)\n        n = n - 1\n  \n        # if last row exist\n        if ( r < m): \n                # list to add elements of the last row\n                for i in range(n - 1, c - 1, -1): \n                    matrix.append((m - 1) * n + i + 1) \n                m -= 1\n          \n        # if first column exits\n        if (c < n): \n            # list to add elements of the first column\n            for i in range(m - 1, r - 1, -1): \n                matrix.append(i * n + c + 1) \n            c += 1\n\n    return matrix"
    },
    {
        "instruction": "Design an algorithm in Python that can print all the prime numbers from 1 to a given number.",
        "input": "",
        "output": "def print_prime_numbers(num):\n    for n in range(2, num+1):\n        if n == 2 or n ==3 :\n            print(n, end=\"\")\n            continue\n        for i in range(2, n):\n            if n % i == 0:\n                break\n        else:\n            print(n, end=\"\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that can print all the prime numbers from 1 to a given number.\n\n### Input:\n\n\n### Output:\ndef print_prime_numbers(num):\n    for n in range(2, num+1):\n        if n == 2 or n ==3 :\n            print(n, end=\"\")\n            continue\n        for i in range(2, n):\n            if n % i == 0:\n                break\n        else:\n            print(n, end=\"\")"
    },
    {
        "instruction": "Write a Python program to reverse an array.",
        "input": "Input Array: [1, 2, 3, 4, 5]",
        "output": "# create a function to reverse an array\ndef reverseArray(arr):\n    # initialize start and end index\n    start = 0\n    end = len(arr) - 1\n  \n    # loop until start index is less than end index\n    while start < end:\n        # swap the elements\n        arr[start], arr[end] = arr[end], arr[start]\n        # increment start index\n        start += 1\n        # decrement end index\n        end -= 1\n\n# array to be reversed\narr = [1, 2, 3, 4, 5]\n\n# calling the function\nreverseArray(arr)\n\n# print the reversed array\nprint(arr) # Output: [5, 4, 3, 2, 1]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to reverse an array.\n\n### Input:\nInput Array: [1, 2, 3, 4, 5]\n\n### Output:\n# create a function to reverse an array\ndef reverseArray(arr):\n    # initialize start and end index\n    start = 0\n    end = len(arr) - 1\n  \n    # loop until start index is less than end index\n    while start < end:\n        # swap the elements\n        arr[start], arr[end] = arr[end], arr[start]\n        # increment start index\n        start += 1\n        # decrement end index\n        end -= 1\n\n# array to be reversed\narr = [1, 2, 3, 4, 5]\n\n# calling the function\nreverseArray(arr)\n\n# print the reversed array\nprint(arr) # Output: [5, 4, 3, 2, 1]"
    },
    {
        "instruction": "Create a python program to Reverse Engineer an API and find its endpoints.",
        "input": "http://example.com/api",
        "output": "import requests\n\nurl = 'http://example.com/api'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    # Find the API endpoints\n    data = response.json()\n    endpoints = data.get('endpoints')\n    print(endpoints)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to Reverse Engineer an API and find its endpoints.\n\n### Input:\nhttp://example.com/api\n\n### Output:\nimport requests\n\nurl = 'http://example.com/api'\nresponse = requests.get(url)\n\nif response.status_code == 200:\n    # Find the API endpoints\n    data = response.json()\n    endpoints = data.get('endpoints')\n    print(endpoints)"
    },
    {
        "instruction": "Create a Python function which takes in two lists and returns a list that contains the elements from both lists.",
        "input": "list1 = [1, 2, 3] \nlist2 = [4, 5, 6]",
        "output": "def combine_lists(list1, list2):\n    return list1 + list2",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function which takes in two lists and returns a list that contains the elements from both lists.\n\n### Input:\nlist1 = [1, 2, 3] \nlist2 = [4, 5, 6]\n\n### Output:\ndef combine_lists(list1, list2):\n    return list1 + list2"
    },
    {
        "instruction": "Design a python program to evaluate an expression given as a string.",
        "input": "Input : \"7 * 4 + 2 - 1\"",
        "output": "def expression_evaluator(expr):\n    expr_list = expr.split()\n    stack = []\n\n    for items in expr_list: \n        if items == '*':\n            stack.append(int(stack.pop()) * int(stack.pop())) \n        elif items == '/':\n            divider = int(stack.pop())\n            stack.append(int(stack.pop()) / divider) \n        elif items == '+':\n            stack.append(int(stack.pop()) + int(stack.pop())) \n        elif items == '-':\n            substractor = int(stack.pop())\n            stack.append(int(stack.pop()) - substractor) \n        else:\n            stack.append(items)\n           \n    assert len(stack) == 1, 'Expression should contain a valid operator.'\n    return stack[0]\n    \nexpr = \"7 * 4 + 2 - 1\"\nresult = expression_evaluator(expr)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program to evaluate an expression given as a string.\n\n### Input:\nInput : \"7 * 4 + 2 - 1\"\n\n### Output:\ndef expression_evaluator(expr):\n    expr_list = expr.split()\n    stack = []\n\n    for items in expr_list: \n        if items == '*':\n            stack.append(int(stack.pop()) * int(stack.pop())) \n        elif items == '/':\n            divider = int(stack.pop())\n            stack.append(int(stack.pop()) / divider) \n        elif items == '+':\n            stack.append(int(stack.pop()) + int(stack.pop())) \n        elif items == '-':\n            substractor = int(stack.pop())\n            stack.append(int(stack.pop()) - substractor) \n        else:\n            stack.append(items)\n           \n    assert len(stack) == 1, 'Expression should contain a valid operator.'\n    return stack[0]\n    \nexpr = \"7 * 4 + 2 - 1\"\nresult = expression_evaluator(expr)\nprint(result)"
    },
    {
        "instruction": "Generate a Python function that splits a given string into its individual words.",
        "input": "",
        "output": "def split_words(string):\n    words = string.strip().split(\" \")\n    return words",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that splits a given string into its individual words.\n\n### Input:\n\n\n### Output:\ndef split_words(string):\n    words = string.strip().split(\" \")\n    return words"
    },
    {
        "instruction": "Create an algorithm that takes a string as input and generates an array of the most frequent words in that string.",
        "input": "",
        "output": "# Python \ndef most_frequent_words(str):\n  # split string into an array of words\n  words = str.split()\n\n  # create a dictionary and store words and their frequency as key-value pairs \n  frequency_dict = {}\n  for word in words:\n    if word not in frequency_dict:\n      frequency_dict[word] = 1\n    else:\n      frequency_dict[word] += 1\n\n  # create array with words and their frequencies \n  frequency_list = []\n  for key in frequency_dict:\n    frequency_list.append([key, frequency_dict[key]])\n\n  # sort list by frequency in descending order\n  frequency_list.sort(key=lambda x: x[1], reverse=True)\n\n  # return the first 5 items \n  return frequency_list[:5]\n  \n# JavaScript\nfunction mostFrequentWords(str) {\n  // split string into an array of words\n  const words = str.split(' ');\n\n  // create a dictionary and store words and their frequency as key-value pairs\n  const frequencyDict = {};\n  words.forEach(word => {\n    if (!(word in frequencyDict)) {\n      frequencyDict[word] = 1;\n    } else {\n      frequencyDict[word] += 1;\n    }\n  });\n\n  // create array with words and their frequencies\n  const frequencyList = [];\n  for (let key in frequencyDict) {\n    frequencyList.push([key, frequencyDict[key]]);\n  }\n\n  // sort list by frequency in descending order\n  frequencyList.sort((a, b) => b[1] - a[1]);\n\n  // return the first 5 items\n  return frequencyList.slice(0, 5);\n}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm that takes a string as input and generates an array of the most frequent words in that string.\n\n### Input:\n\n\n### Output:\n# Python \ndef most_frequent_words(str):\n  # split string into an array of words\n  words = str.split()\n\n  # create a dictionary and store words and their frequency as key-value pairs \n  frequency_dict = {}\n  for word in words:\n    if word not in frequency_dict:\n      frequency_dict[word] = 1\n    else:\n      frequency_dict[word] += 1\n\n  # create array with words and their frequencies \n  frequency_list = []\n  for key in frequency_dict:\n    frequency_list.append([key, frequency_dict[key]])\n\n  # sort list by frequency in descending order\n  frequency_list.sort(key=lambda x: x[1], reverse=True)\n\n  # return the first 5 items \n  return frequency_list[:5]\n  \n# JavaScript\nfunction mostFrequentWords(str) {\n  // split string into an array of words\n  const words = str.split(' ');\n\n  // create a dictionary and store words and their frequency as key-value pairs\n  const frequencyDict = {};\n  words.forEach(word => {\n    if (!(word in frequencyDict)) {\n      frequencyDict[word] = 1;\n    } else {\n      frequencyDict[word] += 1;\n    }\n  });\n\n  // create array with words and their frequencies\n  const frequencyList = [];\n  for (let key in frequencyDict) {\n    frequencyList.push([key, frequencyDict[key]]);\n  }\n\n  // sort list by frequency in descending order\n  frequencyList.sort((a, b) => b[1] - a[1]);\n\n  // return the first 5 items\n  return frequencyList.slice(0, 5);\n}"
    },
    {
        "instruction": "Implement a Classifier using Python and Scikit-Learn on the Iris dataset.",
        "input": "",
        "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\n \n# Load the dataset\nirisdataset = pd.read_csv('Iris.csv')\n \n# Separate the dependent variables and independent variables\nX = irisdataset.iloc[:, [0, 1, 2, 3]].values\nY = irisdataset.iloc[:, 4].values\n \n# Split the dataset into training and testing\nX_Train, X_Test, Y_Train, Y_Test = train_test_split(X, Y, test_size = 0.2, random_state = 0)\n \n# Feature Scaling\nsc = StandardScaler()\nX_Train = sc.fit_transform(X_Train)\nX_Test = sc.transform(X_Test)\n \n# Fit and Train the Model\nclassifier = SVC(kernel = 'rbf')\nclassifier.fit(X_Train, Y_Train)\n \n# Make predictions on the test set\nY_Pred = classifier.predict(X_Test)\n \n# Calculate the accuracy\nprint(\"Accuracy Score : \", accuracy_score(Y_Test, Y_Pred))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Classifier using Python and Scikit-Learn on the Iris dataset.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\n \n# Load the dataset\nirisdataset = pd.read_csv('Iris.csv')\n \n# Separate the dependent variables and independent variables\nX = irisdataset.iloc[:, [0, 1, 2, 3]].values\nY = irisdataset.iloc[:, 4].values\n \n# Split the dataset into training and testing\nX_Train, X_Test, Y_Train, Y_Test = train_test_split(X, Y, test_size = 0.2, random_state = 0)\n \n# Feature Scaling\nsc = StandardScaler()\nX_Train = sc.fit_transform(X_Train)\nX_Test = sc.transform(X_Test)\n \n# Fit and Train the Model\nclassifier = SVC(kernel = 'rbf')\nclassifier.fit(X_Train, Y_Train)\n \n# Make predictions on the test set\nY_Pred = classifier.predict(X_Test)\n \n# Calculate the accuracy\nprint(\"Accuracy Score : \", accuracy_score(Y_Test, Y_Pred))"
    },
    {
        "instruction": "Write a function in Python to traverse an object and return a 2D list with all its children.",
        "input": "",
        "output": "def traverse_object(obj):\n    output = []\n    for key, value in obj.items():\n        if isinstance(value, dict):\n            output.append([key, traverse_object(value)])\n        elif isinstance(value, list):\n            output.append([key, traverse_list(value)])\n        else:\n            output.append([key, value])\n    return output\n\ndef traverse_list(lst):\n    output = []\n    for item in lst:\n        if isinstance(item, dict):\n            output.append(traverse_object(item))\n        elif isinstance(item, list):\n            output.append(traverse_list(item))\n        else:\n            output.append(item)\n    return output",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to traverse an object and return a 2D list with all its children.\n\n### Input:\n\n\n### Output:\ndef traverse_object(obj):\n    output = []\n    for key, value in obj.items():\n        if isinstance(value, dict):\n            output.append([key, traverse_object(value)])\n        elif isinstance(value, list):\n            output.append([key, traverse_list(value)])\n        else:\n            output.append([key, value])\n    return output\n\ndef traverse_list(lst):\n    output = []\n    for item in lst:\n        if isinstance(item, dict):\n            output.append(traverse_object(item))\n        elif isinstance(item, list):\n            output.append(traverse_list(item))\n        else:\n            output.append(item)\n    return output"
    },
    {
        "instruction": "Build a web server to handle GET requests in Python.",
        "input": "",
        "output": "import http.server\nimport socketserver\n\nPORT = 80\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(\"serving at port\", PORT)\n    httpd.serve_forever()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a web server to handle GET requests in Python.\n\n### Input:\n\n\n### Output:\nimport http.server\nimport socketserver\n\nPORT = 80\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(\"serving at port\", PORT)\n    httpd.serve_forever()"
    },
    {
        "instruction": "You are provided an English sentence, please write the corresponding code in Python.",
        "input": "Sentence: Print a hello world statement",
        "output": "print(\"Hello world!\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are provided an English sentence, please write the corresponding code in Python.\n\n### Input:\nSentence: Print a hello world statement\n\n### Output:\nprint(\"Hello world!\")"
    },
    {
        "instruction": "Write a for loop to print out all numbers between 1 and 10 in Python.",
        "input": "",
        "output": "for i in range(1, 11):\n    print(i)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a for loop to print out all numbers between 1 and 10 in Python.\n\n### Input:\n\n\n### Output:\nfor i in range(1, 11):\n    print(i)"
    },
    {
        "instruction": "Write a Python code that finds the maximum value of a list, given a list of numbers as input.",
        "input": "[1, 4, 8, 2, 6]",
        "output": "max_value = max([1, 4, 8, 2, 6])\nprint(max_value)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code that finds the maximum value of a list, given a list of numbers as input.\n\n### Input:\n[1, 4, 8, 2, 6]\n\n### Output:\nmax_value = max([1, 4, 8, 2, 6])\nprint(max_value)"
    },
    {
        "instruction": "Generate an automated scheduling system in Python.",
        "input": "Schedule Data\n[{\n task: 'meeting', \n date: '01-04-2020',\n time: '9.00am', \n duration: '1 hour' \n},\n{\n task: 'presentation', \n date: '03-04-2020', \n time: '10.00am',\n duration: '2.30 hours'\n}]",
        "output": "import datetime\n\n# define the data structure for schedule\nclass Schedule: \n def __init__(self, task, date, time, duration):\n        self.task = task\n        self.date = date\n        self.time = time\n        self.duration = duration\n\n# define a function to check for conflicts\ndef check_conflicts(schedule_list):\n     start_times = []\n     end_times = []\n     for schedule in schedule_list:\n        # convert the date and time strings to datetime objects\n        start_time = datetime.datetime.strptime(f'{schedule.date} {schedule.time}', '%d-%m-%Y %H.%M%p')\n        end_time = start_time + datetime.timedelta(minutes=schedule.duration)\n        # append the start and end times to lists \n        start_times.append(start_time)\n        end_times.append(end_time)\n\n     # loop over the start list\n     for i in range(len(start_times)):\n        # if the current start time is between another start or end time, there is a conflict\n        if start_times[i] > min(start_times) and start_times[i] < max(end_times):\n            return False\n     # otherwise, there isn't a conflict\n     return True \n\n# Create a sample agenda\nschedule_list = [\n Schedule('Meeting', '01-04-2020', '9.00am', 60),\n Schedule('Presentation', '03-04-2020', '10.00am', 150) \n]\n\n# print the result\nprint(check_conflicts(schedule_list))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an automated scheduling system in Python.\n\n### Input:\nSchedule Data\n[{\n task: 'meeting', \n date: '01-04-2020',\n time: '9.00am', \n duration: '1 hour' \n},\n{\n task: 'presentation', \n date: '03-04-2020', \n time: '10.00am',\n duration: '2.30 hours'\n}]\n\n### Output:\nimport datetime\n\n# define the data structure for schedule\nclass Schedule: \n def __init__(self, task, date, time, duration):\n        self.task = task\n        self.date = date\n        self.time = time\n        self.duration = duration\n\n# define a function to check for conflicts\ndef check_conflicts(schedule_list):\n     start_times = []\n     end_times = []\n     for schedule in schedule_list:\n        # convert the date and time strings to datetime objects\n        start_time = datetime.datetime.strptime(f'{schedule.date} {schedule.time}', '%d-%m-%Y %H.%M%p')\n        end_time = start_time + datetime.timedelta(minutes=schedule.duration)\n        # append the start and end times to lists \n        start_times.append(start_time)\n        end_times.append(end_time)\n\n     # loop over the start list\n     for i in range(len(start_times)):\n        # if the current start time is between another start or end time, there is a conflict\n        if start_times[i] > min(start_times) and start_times[i] < max(end_times):\n            return False\n     # otherwise, there isn't a conflict\n     return True \n\n# Create a sample agenda\nschedule_list = [\n Schedule('Meeting', '01-04-2020', '9.00am', 60),\n Schedule('Presentation', '03-04-2020', '10.00am', 150) \n]\n\n# print the result\nprint(check_conflicts(schedule_list))"
    },
    {
        "instruction": "Implement a search algorithm in Python to look for the value in the list.",
        "input": "list_tmp = [1, 23, 42, 5, 7, 34, 89]\nvalue = 42",
        "output": "def search(list_tmp, value): \n    for index, item in enumerate(list_tmp): \n        if item == value: \n            return index \n\n    return -1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a search algorithm in Python to look for the value in the list.\n\n### Input:\nlist_tmp = [1, 23, 42, 5, 7, 34, 89]\nvalue = 42\n\n### Output:\ndef search(list_tmp, value): \n    for index, item in enumerate(list_tmp): \n        if item == value: \n            return index \n\n    return -1"
    },
    {
        "instruction": "Create a Python function for calculating the mode (most frequently occuring item) in a list of numbers.",
        "input": "List of numbers: [1, 2, 3, 2, 4, 2]",
        "output": "import collections\n\ndef mode(numbers):\n counts = collections.Counter(numbers)\n max_count = max(counts.values())\n return [item for item, count in counts.items() if count == max_count]\n\nnumbers = [1, 2, 3, 2, 4, 2]\nmode = mode(numbers)\nprint(mode)\n# Output: [2]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function for calculating the mode (most frequently occuring item) in a list of numbers.\n\n### Input:\nList of numbers: [1, 2, 3, 2, 4, 2]\n\n### Output:\nimport collections\n\ndef mode(numbers):\n counts = collections.Counter(numbers)\n max_count = max(counts.values())\n return [item for item, count in counts.items() if count == max_count]\n\nnumbers = [1, 2, 3, 2, 4, 2]\nmode = mode(numbers)\nprint(mode)\n# Output: [2]"
    },
    {
        "instruction": "Create a method in Python to search through a list and return all elements which are divisible by 5.",
        "input": "[4, 9, 5, 20, 21, 33]",
        "output": "def find_division_by_5(lst):\n    \"\"\"Search through a list and return all elements which are divisible by 5\"\"\"\n    result = []\n    for item in lst:\n        if item % 5 == 0:\n            result.append(item)\n    \n    return result\n    \nif __name__ == '__main__':\n    lst = [4, 9, 5, 20, 21, 33]\n    print(find_division_by_5(lst))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a method in Python to search through a list and return all elements which are divisible by 5.\n\n### Input:\n[4, 9, 5, 20, 21, 33]\n\n### Output:\ndef find_division_by_5(lst):\n    \"\"\"Search through a list and return all elements which are divisible by 5\"\"\"\n    result = []\n    for item in lst:\n        if item % 5 == 0:\n            result.append(item)\n    \n    return result\n    \nif __name__ == '__main__':\n    lst = [4, 9, 5, 20, 21, 33]\n    print(find_division_by_5(lst))"
    },
    {
        "instruction": "Create a min-heap data structure in python.",
        "input": "",
        "output": "import heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap_array = []\n\n    def insert(self, value):\n        heapq.heappush(self.heap_array, value)\n\n    def pop(self):\n        return heapq.heappop(self.heap_array)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a min-heap data structure in python.\n\n### Input:\n\n\n### Output:\nimport heapq\n\nclass MinHeap:\n    def __init__(self):\n        self.heap_array = []\n\n    def insert(self, value):\n        heapq.heappush(self.heap_array, value)\n\n    def pop(self):\n        return heapq.heappop(self.heap_array)"
    },
    {
        "instruction": "Write a procedure in Python to determine if two given strings are anagrams.",
        "input": "\"programmer\" and \"impregromr\"",
        "output": "def is_anagram(s1, s2):\n    s1_counts = {}\n    for char in s1:\n        if char not in s1_counts:\n            s1_counts[char] = 1\n        else:\n            s1_counts[char] += 1\n    \n    s2_counts = {}\n    for char in s2:\n        if char not in s2_counts:\n            s2_counts[char] = 1\n        else:\n            s2_counts[char] += 1\n            \n    return s1_counts == s2_counts",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a procedure in Python to determine if two given strings are anagrams.\n\n### Input:\n\"programmer\" and \"impregromr\"\n\n### Output:\ndef is_anagram(s1, s2):\n    s1_counts = {}\n    for char in s1:\n        if char not in s1_counts:\n            s1_counts[char] = 1\n        else:\n            s1_counts[char] += 1\n    \n    s2_counts = {}\n    for char in s2:\n        if char not in s2_counts:\n            s2_counts[char] = 1\n        else:\n            s2_counts[char] += 1\n            \n    return s1_counts == s2_counts"
    },
    {
        "instruction": "Create a Machine Learning model in Python for predicting the probability of a loan applicant defaulting.",
        "input": "The dataset contains the following columns:\nAge, Education, Income Level, Default Status",
        "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\n\n#Read the dataset\ndf = pd.read_csv('loan_data.csv')\n\n#Split the dataset into train and test sets\nX = df.drop('Default Status', axis=1)\ny = df['Default Status']\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)\n\n#Create a Decision Tree Classifier\ndt = DecisionTreeClassifier(max_depth=3, random_state=42)\ndt.fit(X_train, y_train)\n\n#Compute the accuracy on the test set\naccuracy = dt.score(X_test, y_test)\n\n#Print the accuracy\nprint(accuracy)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Machine Learning model in Python for predicting the probability of a loan applicant defaulting.\n\n### Input:\nThe dataset contains the following columns:\nAge, Education, Income Level, Default Status\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\n\n#Read the dataset\ndf = pd.read_csv('loan_data.csv')\n\n#Split the dataset into train and test sets\nX = df.drop('Default Status', axis=1)\ny = df['Default Status']\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)\n\n#Create a Decision Tree Classifier\ndt = DecisionTreeClassifier(max_depth=3, random_state=42)\ndt.fit(X_train, y_train)\n\n#Compute the accuracy on the test set\naccuracy = dt.score(X_test, y_test)\n\n#Print the accuracy\nprint(accuracy)"
    },
    {
        "instruction": "Generate a Python function that takes a sentence (string) as input and outputs a list of all the distinct words in the sentence.",
        "input": "The quick brown fox jumps over the lazy dog",
        "output": "def distinct_words(sentence):\n words = sentence.split()\n distinct_words = []\n for word in words:\n  if word not in distinct_words:\n   distinct_words.append(word)\n return distinct_words",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that takes a sentence (string) as input and outputs a list of all the distinct words in the sentence.\n\n### Input:\nThe quick brown fox jumps over the lazy dog\n\n### Output:\ndef distinct_words(sentence):\n words = sentence.split()\n distinct_words = []\n for word in words:\n  if word not in distinct_words:\n   distinct_words.append(word)\n return distinct_words"
    },
    {
        "instruction": "Create a Python script that takes a dictionary as an argument and prints the value of each key-value pair.",
        "input": "",
        "output": "def print_dict(dct):\n    for key, value in dct.items():\n        print('Key:', key, ', Value:', value)\n\nexample_dict = { 'a' : 1, 'b' : 2, 'c' : 3 }\nprint_dict(example_dict)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that takes a dictionary as an argument and prints the value of each key-value pair.\n\n### Input:\n\n\n### Output:\ndef print_dict(dct):\n    for key, value in dct.items():\n        print('Key:', key, ', Value:', value)\n\nexample_dict = { 'a' : 1, 'b' : 2, 'c' : 3 }\nprint_dict(example_dict)"
    },
    {
        "instruction": "Implement a web scraping script in Python to extract the headers of a given HTML page.",
        "input": "",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/' # example page\n\n# Get the HTML page\nresponse = requests.get(url)\ndata = response.text\n\n# Parse the HTML page\nsoup = BeautifulSoup(data, 'html.parser')\n\n# Extract the headers\nheaders = [header.text for header in soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])]\n\nprint(headers)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a web scraping script in Python to extract the headers of a given HTML page.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/' # example page\n\n# Get the HTML page\nresponse = requests.get(url)\ndata = response.text\n\n# Parse the HTML page\nsoup = BeautifulSoup(data, 'html.parser')\n\n# Extract the headers\nheaders = [header.text for header in soup.find_all(['h1', 'h2', 'h3', 'h4', 'h5', 'h6'])]\n\nprint(headers)"
    },
    {
        "instruction": "Create a program in Python to generate a sequence of five unique random numbers between 1 and 10",
        "input": "",
        "output": "from random import randrange\n\ndef generate_rand_seq(): \n    rand_list = []\n    while len(rand_list) < 5:\n        rand_num = randrange(1, 10)\n        if rand_num in rand_list:\n            continue\n        rand_list.append(rand_num)\n    return rand_list\n\nprint(generate_rand_seq())",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to generate a sequence of five unique random numbers between 1 and 10\n\n### Input:\n\n\n### Output:\nfrom random import randrange\n\ndef generate_rand_seq(): \n    rand_list = []\n    while len(rand_list) < 5:\n        rand_num = randrange(1, 10)\n        if rand_num in rand_list:\n            continue\n        rand_list.append(rand_num)\n    return rand_list\n\nprint(generate_rand_seq())"
    },
    {
        "instruction": "Add a try-catch block to the given Python code",
        "input": "x = 10\ny = 0\nz = x/y",
        "output": "try:\n  x = 10\n  y = 0\n  z = x/y\nexcept ZeroDivisionError:\n  print(\"ZeroDivisionError occurred: Cannot divide a number by 0\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAdd a try-catch block to the given Python code\n\n### Input:\nx = 10\ny = 0\nz = x/y\n\n### Output:\ntry:\n  x = 10\n  y = 0\n  z = x/y\nexcept ZeroDivisionError:\n  print(\"ZeroDivisionError occurred: Cannot divide a number by 0\")"
    },
    {
        "instruction": "Create a class in Python 3 that represents a process with a start() and stop() function.",
        "input": "",
        "output": "class Process:\n    def start(self):\n        # code to start the process \n        pass\n\n    def stop(self):\n        # code to stop the process \n        pass",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python 3 that represents a process with a start() and stop() function.\n\n### Input:\n\n\n### Output:\nclass Process:\n    def start(self):\n        # code to start the process \n        pass\n\n    def stop(self):\n        # code to stop the process \n        pass"
    },
    {
        "instruction": "Create an algorithm in Python that finds all subsets of a given set.",
        "input": "S = {a, b, c, d}",
        "output": "def subsets(S):\n\t\"Return all subsets of set S.\"\n\tif len(S) == 0:\n\t\treturn [[]]  # list of the empty set\n\tT = subsets(S[1:])  # recur on S[1:]\n\treturn T + [s + [S[0]] for s in T]  # add S[0] to front of each set in T\n\n# Sample use\nS = ['a', 'b', 'c', 'd']\nprint(subsets(S))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python that finds all subsets of a given set.\n\n### Input:\nS = {a, b, c, d}\n\n### Output:\ndef subsets(S):\n\t\"Return all subsets of set S.\"\n\tif len(S) == 0:\n\t\treturn [[]]  # list of the empty set\n\tT = subsets(S[1:])  # recur on S[1:]\n\treturn T + [s + [S[0]] for s in T]  # add S[0] to front of each set in T\n\n# Sample use\nS = ['a', 'b', 'c', 'd']\nprint(subsets(S))"
    },
    {
        "instruction": "How can you write a python program to calculate the number of days between two given dates?",
        "input": "",
        "output": "def calculate_days_between(date1, date2):\n    \"\"\"This function takes two dates as input and calculates the number of days between them.\n    \n    Args:\n        date1 (datetime): The first date.\n        date2 (datetime): The second date.\n    \n    Returns:\n        int: The number of days between the two dates.\n    \"\"\"\n    delta = date2 - date1\n    return delta.days",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow can you write a python program to calculate the number of days between two given dates?\n\n### Input:\n\n\n### Output:\ndef calculate_days_between(date1, date2):\n    \"\"\"This function takes two dates as input and calculates the number of days between them.\n    \n    Args:\n        date1 (datetime): The first date.\n        date2 (datetime): The second date.\n    \n    Returns:\n        int: The number of days between the two dates.\n    \"\"\"\n    delta = date2 - date1\n    return delta.days"
    },
    {
        "instruction": "Implement a method in Python that takes two strings as input and returns true if one string is a rotation of the other.",
        "input": "s1='abc' \ns2='cab'",
        "output": "def isRotation(s1, s2): \n    if (len(s1) != len(s2)): \n        return False\n  \n    temp = s1 + s1 \n    if (s2 in temp): \n        return True\n    return False\n\nresult = isRotation('abc', 'cab')\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a method in Python that takes two strings as input and returns true if one string is a rotation of the other.\n\n### Input:\ns1='abc' \ns2='cab'\n\n### Output:\ndef isRotation(s1, s2): \n    if (len(s1) != len(s2)): \n        return False\n  \n    temp = s1 + s1 \n    if (s2 in temp): \n        return True\n    return False\n\nresult = isRotation('abc', 'cab')\nprint(result)"
    },
    {
        "instruction": "Implement an AI algorithm in Python to solve an 8-puzzle.",
        "input": "[[1,2,3],\n [8,0,4],\n [7,6,5]]",
        "output": "def get_successor_states(board):\n\tsuccessor_states = []\n\tempty_space_coordinates = get_empty_space_coordinates(board)\n\n\t# Check the 4 possible operations\n\tfor row, col in empty_space_coordinates:\n\t\tif row > 0:\n\t\t\t# Move empty space UP\n\t\t\ttmp_board = np.copy(board)\n\t\t\ttmp_board[row][col] = tmp_board[row-1][col]\n\t\t\ttmp_board[row-1][col] = 0\n\t\t\tsuccessor_states.append(tmp_board)\n\t\t\n\t\tif row < 2:\n\t\t\t# Move empty space DOWN\n\t\t\ttmp_board = np.copy(board)\n\t\t\ttmp_board[row][col] = tmp_board[row+1][col]\n\t\t\ttmp_board[row+1][col] = 0\n\t\t\tsuccessor_states.append(tmp_board)\n\t\t\n\t\tif col > 0:\n\t\t\t# Move empty space LEFT\n\t\t\ttmp_board = np.copy(board)\n\t\t\ttmp_board[row][col] = tmp_board[row][col-1]\n\t\t\ttmp_board[row][col-1] = 0\n\t\t\tsuccessor_states.append(tmp_board)\n\t\t\n\t\tif col < 2:\n\t\t\t# Move empty space RIGHT\n\t\t\ttmp_board = np.copy(board)\n\t\t\ttmp_board[row][col] = tmp_board[row][col+1]\n\t\t\ttmp_board[row][col+1] = 0\n\t\t\tsuccessor_states.append(tmp_board)\n\treturn successor_states\n\ndef solve_8_puzzle(board):\n\tsolved_board = [[1, 2, 3], [8, 0, 4], [7, 6, 5]]\n\n\topen_list = []\n\tclosed_list = []\n\n\t# Initialize start state\n\tstart_node = {'state' : board, 'parent': None}\n\topen_list.append(start_node)\n\n\twhile len(open_list) > 0:\n\t\t# Get current node\n\t\tcurrent_node = open_list[0]\n\t\tdel open_list[0]\n\n\t\t# Check if current node is the solution\n\t\tif np.array_equal(current_node['state'], solved_board):\n\t\t\treturn current_node\n\n\t\t# Generate a list of successors\n\t\tsuccessor_states = get_successor_states(current_node['state'])\n\t\tfor state in successor_states:\n\t\t\t# Generate the new node \n\t\t\tsuccessor_node = {'state' : state, 'parent': current_node}\n\n\t\t\t# Check if node is not in open list\n\t\t\tin_open_list = False\n\t\t\tfor node in open_list:\n\t\t\t\tif np.array_equal(state, node['state']):\n\t\t\t\t\tin_open_list = True\n\n\t\t\t# Check if node is not in closed list\n\t\t\tin_closed_list = False\n\t\t\tfor node in closed_list:\n\t\t\t\tif np.array_equal(state, node['state']):\n\t\t\t\t\tin_closed_list = True\n\n\t\t\t# If not in open list and not in closed list, add it to the open list\n\t\t\tif in_open_list is False and in_closed_list is False:\n\t\t\t\topen_list.append(successor_node)\n\t\tclosed_list.append(current_node)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an AI algorithm in Python to solve an 8-puzzle.\n\n### Input:\n[[1,2,3],\n [8,0,4],\n [7,6,5]]\n\n### Output:\ndef get_successor_states(board):\n\tsuccessor_states = []\n\tempty_space_coordinates = get_empty_space_coordinates(board)\n\n\t# Check the 4 possible operations\n\tfor row, col in empty_space_coordinates:\n\t\tif row > 0:\n\t\t\t# Move empty space UP\n\t\t\ttmp_board = np.copy(board)\n\t\t\ttmp_board[row][col] = tmp_board[row-1][col]\n\t\t\ttmp_board[row-1][col] = 0\n\t\t\tsuccessor_states.append(tmp_board)\n\t\t\n\t\tif row < 2:\n\t\t\t# Move empty space DOWN\n\t\t\ttmp_board = np.copy(board)\n\t\t\ttmp_board[row][col] = tmp_board[row+1][col]\n\t\t\ttmp_board[row+1][col] = 0\n\t\t\tsuccessor_states.append(tmp_board)\n\t\t\n\t\tif col > 0:\n\t\t\t# Move empty space LEFT\n\t\t\ttmp_board = np.copy(board)\n\t\t\ttmp_board[row][col] = tmp_board[row][col-1]\n\t\t\ttmp_board[row][col-1] = 0\n\t\t\tsuccessor_states.append(tmp_board)\n\t\t\n\t\tif col < 2:\n\t\t\t# Move empty space RIGHT\n\t\t\ttmp_board = np.copy(board)\n\t\t\ttmp_board[row][col] = tmp_board[row][col+1]\n\t\t\ttmp_board[row][col+1] = 0\n\t\t\tsuccessor_states.append(tmp_board)\n\treturn successor_states\n\ndef solve_8_puzzle(board):\n\tsolved_board = [[1, 2, 3], [8, 0, 4], [7, 6, 5]]\n\n\topen_list = []\n\tclosed_list = []\n\n\t# Initialize start state\n\tstart_node = {'state' : board, 'parent': None}\n\topen_list.append(start_node)\n\n\twhile len(open_list) > 0:\n\t\t# Get current node\n\t\tcurrent_node = open_list[0]\n\t\tdel open_list[0]\n\n\t\t# Check if current node is the solution\n\t\tif np.array_equal(current_node['state'], solved_board):\n\t\t\treturn current_node\n\n\t\t# Generate a list of successors\n\t\tsuccessor_states = get_successor_states(current_node['state'])\n\t\tfor state in successor_states:\n\t\t\t# Generate the new node \n\t\t\tsuccessor_node = {'state' : state, 'parent': current_node}\n\n\t\t\t# Check if node is not in open list\n\t\t\tin_open_list = False\n\t\t\tfor node in open_list:\n\t\t\t\tif np.array_equal(state, node['state']):\n\t\t\t\t\tin_open_list = True\n\n\t\t\t# Check if node is not in closed list\n\t\t\tin_closed_list = False\n\t\t\tfor node in closed_list:\n\t\t\t\tif np.array_equal(state, node['state']):\n\t\t\t\t\tin_closed_list = True\n\n\t\t\t# If not in open list and not in closed list, add it to the open list\n\t\t\tif in_open_list is False and in_closed_list is False:\n\t\t\t\topen_list.append(successor_node)\n\t\tclosed_list.append(current_node)"
    },
    {
        "instruction": "Write a python code to process a text and find out the most common words.",
        "input": "The text is composed of five sentences.",
        "output": "import re\n\ntext = \"This is a sentence. This is another sentence. Here is a long sentence. This sentence is the longest. Also, this sentence is the longest.\"\n\n# Removing punctuation marks\ncleaned_text = re.sub(r'[^\\w\\s]','',text)\n\n# Splitting the string into words\nwords = cleaned_text.split()\n\n# Counting word frequencies\nword_freq = {}\nfor word in words:\n    if word in word_freq:\n        word_freq[word] += 1\n    else:\n        word_freq[word] = 1\n\n# Printing the most common word\nmost_common_word, freq = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)[0]\n\nprint(f\"The most common word is '{most_common_word}', appearing {freq} times.\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to process a text and find out the most common words.\n\n### Input:\nThe text is composed of five sentences.\n\n### Output:\nimport re\n\ntext = \"This is a sentence. This is another sentence. Here is a long sentence. This sentence is the longest. Also, this sentence is the longest.\"\n\n# Removing punctuation marks\ncleaned_text = re.sub(r'[^\\w\\s]','',text)\n\n# Splitting the string into words\nwords = cleaned_text.split()\n\n# Counting word frequencies\nword_freq = {}\nfor word in words:\n    if word in word_freq:\n        word_freq[word] += 1\n    else:\n        word_freq[word] = 1\n\n# Printing the most common word\nmost_common_word, freq = sorted(word_freq.items(), key=lambda x: x[1], reverse=True)[0]\n\nprint(f\"The most common word is '{most_common_word}', appearing {freq} times.\")"
    },
    {
        "instruction": "Rewrite a given function in Python to return the sum of the two parameters instead of multiplying them.",
        "input": "def multiply(a, b):\n  return a * b",
        "output": "def multiply(a, b):\n  return a + b",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite a given function in Python to return the sum of the two parameters instead of multiplying them.\n\n### Input:\ndef multiply(a, b):\n  return a * b\n\n### Output:\ndef multiply(a, b):\n  return a + b"
    },
    {
        "instruction": "Given an array of numbers, generate a Python program to find the maximum value.",
        "input": "[1, 4, 6, 8, 3, 9, 5]",
        "output": "def find_max(arr):\n    max_val = arr[0]\n    for el in arr:\n        if el > max_val:\n            max_val = el\n    return max_val\n\narr = [1, 4, 6, 8, 3, 9, 5]\nprint(find_max(arr))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of numbers, generate a Python program to find the maximum value.\n\n### Input:\n[1, 4, 6, 8, 3, 9, 5]\n\n### Output:\ndef find_max(arr):\n    max_val = arr[0]\n    for el in arr:\n        if el > max_val:\n            max_val = el\n    return max_val\n\narr = [1, 4, 6, 8, 3, 9, 5]\nprint(find_max(arr))"
    },
    {
        "instruction": "Generate a mathematic expression in Python for solving a quadratic equation given numbers 4, 1, and -3.",
        "input": "4, 1, and -3",
        "output": "# Generate a mathematic expression\n# to solve a quadratic equation\n\n# Quadratic equation: ax^2 + bx + c = 0\n# a = 4, b = 1, c = -3\n\nimport math\n\n# Solve Quadratic Equation\na = 4\nb = 1\nc = -3\ndiscriminant = (b*b - (4 * a * c))\nif discriminant < 0:\n    print('No numeircal solution for the given equation.')\nelse:\n    try:\n        x_1 = (-b + math.sqrt(discriminant)) / (2 * a)\n        x_2 = (-b - math.sqrt(discriminant)) / (2 * a)\n        print('x1 = ', x_1, ' and x2 = ', x_2)\n    except:\n        print('Invalid input.')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a mathematic expression in Python for solving a quadratic equation given numbers 4, 1, and -3.\n\n### Input:\n4, 1, and -3\n\n### Output:\n# Generate a mathematic expression\n# to solve a quadratic equation\n\n# Quadratic equation: ax^2 + bx + c = 0\n# a = 4, b = 1, c = -3\n\nimport math\n\n# Solve Quadratic Equation\na = 4\nb = 1\nc = -3\ndiscriminant = (b*b - (4 * a * c))\nif discriminant < 0:\n    print('No numeircal solution for the given equation.')\nelse:\n    try:\n        x_1 = (-b + math.sqrt(discriminant)) / (2 * a)\n        x_2 = (-b - math.sqrt(discriminant)) / (2 * a)\n        print('x1 = ', x_1, ' and x2 = ', x_2)\n    except:\n        print('Invalid input.')"
    },
    {
        "instruction": "Create a Python function to search and replace words in a given sentence.",
        "input": "Sentence: \"The quick brown fox jumps over the lazy dog\"; Replace quick with slow",
        "output": "def search_replace(sentence, target, replacement):\n    words = sentence.split(\" \")\n\n    for i in range(len(words)):\n        if words[i] == target:\n            words[i] = replacement\n    \n    return \" \".join(words)\n\nsentence = \"The quick brown fox jumps over the lazy dog\"\nprint(search_replace(sentence, \"quick\", \"slow\")) # \"The slow brown fox jumps over the lazy dog\"",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to search and replace words in a given sentence.\n\n### Input:\nSentence: \"The quick brown fox jumps over the lazy dog\"; Replace quick with slow\n\n### Output:\ndef search_replace(sentence, target, replacement):\n    words = sentence.split(\" \")\n\n    for i in range(len(words)):\n        if words[i] == target:\n            words[i] = replacement\n    \n    return \" \".join(words)\n\nsentence = \"The quick brown fox jumps over the lazy dog\"\nprint(search_replace(sentence, \"quick\", \"slow\")) # \"The slow brown fox jumps over the lazy dog\""
    },
    {
        "instruction": "Generate a Python program that creates a 2D array of given dimension and populate the array with random numbers.",
        "input": "\"10 10\"",
        "output": "import random\n\ndef create_2D_array(dims):\n    width = dims[0]\n    height = dims[1]\n    array = []\n    for row in range(height):\n        row_array = []\n        for col in range(width):\n            row_array.append(random.randint(0, 255))\n        array.append(row_array)\n    return array\n\nif __name__ == '__main__':\n    dims = [10, 10]\n    print(create_2D_array(dims))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that creates a 2D array of given dimension and populate the array with random numbers.\n\n### Input:\n\"10 10\"\n\n### Output:\nimport random\n\ndef create_2D_array(dims):\n    width = dims[0]\n    height = dims[1]\n    array = []\n    for row in range(height):\n        row_array = []\n        for col in range(width):\n            row_array.append(random.randint(0, 255))\n        array.append(row_array)\n    return array\n\nif __name__ == '__main__':\n    dims = [10, 10]\n    print(create_2D_array(dims))"
    },
    {
        "instruction": "Create a Python function to classify a given string as either a palindrome or not.",
        "input": "string=\"kayak\"",
        "output": "def is_palindrome(string):\n    string_temp = string.lower()\n    reverse_string = string_temp[::-1]\n    if string_temp == reverse_string:\n        print(\"yes, this is a palindrome\")\n    else:\n        print(\"no, this is not a palindrome\")\n\nis_palindrome(string)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to classify a given string as either a palindrome or not.\n\n### Input:\nstring=\"kayak\"\n\n### Output:\ndef is_palindrome(string):\n    string_temp = string.lower()\n    reverse_string = string_temp[::-1]\n    if string_temp == reverse_string:\n        print(\"yes, this is a palindrome\")\n    else:\n        print(\"no, this is not a palindrome\")\n\nis_palindrome(string)"
    },
    {
        "instruction": "Write and edit a Python function to filter a list of strings, removing any string at least 4 characters in length that contains the letter 'k'.",
        "input": "my_list = [\"cat\", \"dog\", \"monkey\", \"kite\"]",
        "output": "def filter_list(list):\n    return [item for item in list if len(item) < 4 or 'k' not in item]\n\nmy_list = filter_list(my_list)\nprint(my_list)\n\n# Output:\n# ['cat', 'dog']",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite and edit a Python function to filter a list of strings, removing any string at least 4 characters in length that contains the letter 'k'.\n\n### Input:\nmy_list = [\"cat\", \"dog\", \"monkey\", \"kite\"]\n\n### Output:\ndef filter_list(list):\n    return [item for item in list if len(item) < 4 or 'k' not in item]\n\nmy_list = filter_list(my_list)\nprint(my_list)\n\n# Output:\n# ['cat', 'dog']"
    },
    {
        "instruction": "Construct an HTTP request in Python which requests a resource from a given URL.",
        "input": "",
        "output": "import requests \n\nresponse = requests.get('<url>')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an HTTP request in Python which requests a resource from a given URL.\n\n### Input:\n\n\n### Output:\nimport requests \n\nresponse = requests.get('<url>')"
    },
    {
        "instruction": "Develop an algorithm to remove the duplicate words in a given string.",
        "input": "\"I love coding love coding Python\"",
        "output": "def remove_duplicates(string): \n    words = string.split(\" \") \n    res = [] \n    for word in words: \n        if word not in res: \n            res.append(word) \n    return (\" \".join(res)) \n\nstring = \"I love coding love coding Python\"\nres = remove_duplicates(string) \nprint(\"String after removing duplicates:\")\nprint(res)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm to remove the duplicate words in a given string.\n\n### Input:\n\"I love coding love coding Python\"\n\n### Output:\ndef remove_duplicates(string): \n    words = string.split(\" \") \n    res = [] \n    for word in words: \n        if word not in res: \n            res.append(word) \n    return (\" \".join(res)) \n\nstring = \"I love coding love coding Python\"\nres = remove_duplicates(string) \nprint(\"String after removing duplicates:\")\nprint(res)"
    },
    {
        "instruction": "Create a web scraper in Python that searches a given website for a specified HTML element.",
        "input": "Website: www.example.com\nHTML Element: div",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\nhtml = response.content\n\nsoup = BeautifulSoup(html, 'html.parser')\nfor div in soup.find_all('div'):\n print(div.text)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper in Python that searches a given website for a specified HTML element.\n\n### Input:\nWebsite: www.example.com\nHTML Element: div\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com'\nresponse = requests.get(url)\nhtml = response.content\n\nsoup = BeautifulSoup(html, 'html.parser')\nfor div in soup.find_all('div'):\n print(div.text)"
    },
    {
        "instruction": "Develop a Python program to calculate the sum of two integers provided as command line arguments.",
        "input": "Not applicable",
        "output": "import sys\n\n# Get the command line arguments\na = int(sys.argv[1])\nb = int(sys.argv[2])\n\n# Calculate the sum\nsum = a + b\n\n# Print the result\nprint(sum)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to calculate the sum of two integers provided as command line arguments.\n\n### Input:\nNot applicable\n\n### Output:\nimport sys\n\n# Get the command line arguments\na = int(sys.argv[1])\nb = int(sys.argv[2])\n\n# Calculate the sum\nsum = a + b\n\n# Print the result\nprint(sum)"
    },
    {
        "instruction": "Create a python function that accepts two lists as arguments and returns true if the first list is contained within the second",
        "input": "list_a = [1,2,3,4]\nlist_b = [1,2,3,4,5,6,7]",
        "output": "def is_contained(list_a, list_b):\n    for x in list_b: \n        if x not in list_a: \n            return False \n  \n    return True",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function that accepts two lists as arguments and returns true if the first list is contained within the second\n\n### Input:\nlist_a = [1,2,3,4]\nlist_b = [1,2,3,4,5,6,7]\n\n### Output:\ndef is_contained(list_a, list_b):\n    for x in list_b: \n        if x not in list_a: \n            return False \n  \n    return True"
    },
    {
        "instruction": "Write a Python program that croscorrelates two given arrays.",
        "input": "Array 1: [2, 3, 5, 7], Array 2: [1, 4, 6, 8]",
        "output": "import numpy as np\n \n#input arrays\narr1 = np.array([2, 3, 5, 7])\narr2 = np.array([1, 4, 6, 8])\n\n#calculating correlation\ncorrelation = np.corrcoef(arr1, arr2)\n\n#printing correlation\nprint(\"Correlation: \", correlation[0][1])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that croscorrelates two given arrays.\n\n### Input:\nArray 1: [2, 3, 5, 7], Array 2: [1, 4, 6, 8]\n\n### Output:\nimport numpy as np\n \n#input arrays\narr1 = np.array([2, 3, 5, 7])\narr2 = np.array([1, 4, 6, 8])\n\n#calculating correlation\ncorrelation = np.corrcoef(arr1, arr2)\n\n#printing correlation\nprint(\"Correlation: \", correlation[0][1])"
    },
    {
        "instruction": "Create a basic Python script for sending emails from your application.",
        "input": "Not applicable",
        "output": "import smtplib \nfrom email.message import EmailMessage \n\ndef send_mail(sender, recipient, subject, body):\n\tmessage = EmailMessage() \n\tmessage.set_content(body) \n\tmessage['Subject'] = subject \n\tmessage['From'] = sender \n\tmessage['To'] = recipient \n\t\n\t#set up connection to the mail server \n\tsmtp_server = smtplib.SMTP('smtp.your-email-host.com', 587) \n\tsmtp_server.starttls() \n\tsmtp_server.login(\"YOUR_EMAIL_USERNAME\", \"YOUR_EMAIL_PASSWORD\") \n\tsmtp_server.send_message(message) \n\tsmtp_server.quit() \n\t\nif __name__ == '__main__':\n send_mail('sender@email.com', 'recipient@email.com', 'Subject', 'Body')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Python script for sending emails from your application.\n\n### Input:\nNot applicable\n\n### Output:\nimport smtplib \nfrom email.message import EmailMessage \n\ndef send_mail(sender, recipient, subject, body):\n\tmessage = EmailMessage() \n\tmessage.set_content(body) \n\tmessage['Subject'] = subject \n\tmessage['From'] = sender \n\tmessage['To'] = recipient \n\t\n\t#set up connection to the mail server \n\tsmtp_server = smtplib.SMTP('smtp.your-email-host.com', 587) \n\tsmtp_server.starttls() \n\tsmtp_server.login(\"YOUR_EMAIL_USERNAME\", \"YOUR_EMAIL_PASSWORD\") \n\tsmtp_server.send_message(message) \n\tsmtp_server.quit() \n\t\nif __name__ == '__main__':\n send_mail('sender@email.com', 'recipient@email.com', 'Subject', 'Body')"
    },
    {
        "instruction": "Generate a script that parses a JSON string and prints out the corresponding Python dictionary.",
        "input": "{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}",
        "output": "import json\n\njson_string = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\nparsed_json = json.loads(json_string)\n\nprint(parsed_json)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a script that parses a JSON string and prints out the corresponding Python dictionary.\n\n### Input:\n{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}\n\n### Output:\nimport json\n\njson_string = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\nparsed_json = json.loads(json_string)\n\nprint(parsed_json)"
    },
    {
        "instruction": "Optimize a Python script that takes an array of integers and counts the number of pairs whose sum is equal to a given number.",
        "input": "Array = [-2, 0, 4, 8, 10]\nNumber = 8",
        "output": "def count_pairs(array, num): \n pairs = 0\n N = len(array) \n  \n # Version 1 \n for i in range(0, N): \n     for j in range(i+1, N): \n         if array[i] + array[j] == num: \n             pairs+= 1\n  \n # Version 2 \n processed = set() \n for element in array: \n     if num-element in processed: \n         pairs+= 1\n     else: \n         processed.add(element) \n  \n return pairs \n\nif __name__ == '__main__': \n array = [-2, 0, 4, 8 , 10] \n number = 8\n  \n print(\"Number of pairs that add upto {} is {}\".format(number, \n                              count_pairs(array, number)))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Python script that takes an array of integers and counts the number of pairs whose sum is equal to a given number.\n\n### Input:\nArray = [-2, 0, 4, 8, 10]\nNumber = 8\n\n### Output:\ndef count_pairs(array, num): \n pairs = 0\n N = len(array) \n  \n # Version 1 \n for i in range(0, N): \n     for j in range(i+1, N): \n         if array[i] + array[j] == num: \n             pairs+= 1\n  \n # Version 2 \n processed = set() \n for element in array: \n     if num-element in processed: \n         pairs+= 1\n     else: \n         processed.add(element) \n  \n return pairs \n\nif __name__ == '__main__': \n array = [-2, 0, 4, 8 , 10] \n number = 8\n  \n print(\"Number of pairs that add upto {} is {}\".format(number, \n                              count_pairs(array, number)))"
    },
    {
        "instruction": "Generate an efficient python code which finds the most frequent element in an array.",
        "input": "arr = [3, 2, 1, 3, 4, 2]",
        "output": "# Find the most frequent element in the array\nmost_freq = 0\ncount = 0\n\nfor x in arr:\n    freq = arr.count(x)\n    if freq > count:\n        most_freq = x\n        count = freq\n\n# Print the most frequent element\nprint(\"Most frequent element:\",most_freq)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an efficient python code which finds the most frequent element in an array.\n\n### Input:\narr = [3, 2, 1, 3, 4, 2]\n\n### Output:\n# Find the most frequent element in the array\nmost_freq = 0\ncount = 0\n\nfor x in arr:\n    freq = arr.count(x)\n    if freq > count:\n        most_freq = x\n        count = freq\n\n# Print the most frequent element\nprint(\"Most frequent element:\",most_freq)"
    },
    {
        "instruction": "Develop an object orientated program in Python to generate random numbers.",
        "input": "Range: 10-50",
        "output": "import random\n\nclass RandNumGenerator:\n    def __init__(self, low, high):\n        self.low = low\n        self.high = high\n    \n    def generate_rand_num(self):\n        return random.randint(self.low, self.high)\n\nif __name__ == '__main__':\n    gen = RandNumGenerator(10, 50)\n    print(gen.generate_rand_num())",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an object orientated program in Python to generate random numbers.\n\n### Input:\nRange: 10-50\n\n### Output:\nimport random\n\nclass RandNumGenerator:\n    def __init__(self, low, high):\n        self.low = low\n        self.high = high\n    \n    def generate_rand_num(self):\n        return random.randint(self.low, self.high)\n\nif __name__ == '__main__':\n    gen = RandNumGenerator(10, 50)\n    print(gen.generate_rand_num())"
    },
    {
        "instruction": "Given a list of integers, write a program that prints out two numbers which when summed, produces the second highest number in the list.",
        "input": "[3, 15, 6, 5, 2, 8, 7]",
        "output": "# Python code\n\n# input list\nnumbers = [3, 15, 6, 5, 2, 8, 7]\n\n# set maximum number to -infinity\nmax_num = float(\"-inf\")\n\n# set second highest number to -infinity\nsecond_highest = float(\"-inf\")\n\n# loop through list of numbers\nfor num in numbers:\n  # check if num is greater than current maximum number\n  if num > max_num:\n    # set second highest to current maximum number\n    second_highest = max_num\n    # set current maximum number to num\n    max_num = num\n  # check if num is greater than second highest number, but smaller than current maximum number \n  elif num > second_highest:\n    # set second highest number to num\n    second_highest = num\n  \n# print the output\nprint(f'The two numbers are {max_num} and {second_highest}')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of integers, write a program that prints out two numbers which when summed, produces the second highest number in the list.\n\n### Input:\n[3, 15, 6, 5, 2, 8, 7]\n\n### Output:\n# Python code\n\n# input list\nnumbers = [3, 15, 6, 5, 2, 8, 7]\n\n# set maximum number to -infinity\nmax_num = float(\"-inf\")\n\n# set second highest number to -infinity\nsecond_highest = float(\"-inf\")\n\n# loop through list of numbers\nfor num in numbers:\n  # check if num is greater than current maximum number\n  if num > max_num:\n    # set second highest to current maximum number\n    second_highest = max_num\n    # set current maximum number to num\n    max_num = num\n  # check if num is greater than second highest number, but smaller than current maximum number \n  elif num > second_highest:\n    # set second highest number to num\n    second_highest = num\n  \n# print the output\nprint(f'The two numbers are {max_num} and {second_highest}')"
    },
    {
        "instruction": "Design a function in Python to find the longest increasing sequence in an array of numbers.",
        "input": "[17, 3, 25, 11, 15, 8, 7, 10]",
        "output": "def longest_increasing_sequence(arr):\n    longest = []\n    current = []\n\n    for num in arr:\n        if not current or current[-1] < num:\n            current.append(num)\n        else:\n            if len(current) > len(longest):\n                longest = current\n            current = [num]\n    \n    if len(current) > len(longest):\n        longest = current\n    return longest",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to find the longest increasing sequence in an array of numbers.\n\n### Input:\n[17, 3, 25, 11, 15, 8, 7, 10]\n\n### Output:\ndef longest_increasing_sequence(arr):\n    longest = []\n    current = []\n\n    for num in arr:\n        if not current or current[-1] < num:\n            current.append(num)\n        else:\n            if len(current) > len(longest):\n                longest = current\n            current = [num]\n    \n    if len(current) > len(longest):\n        longest = current\n    return longest"
    },
    {
        "instruction": "Define a sorting algorithm to efficiently sort an array using Python.",
        "input": "",
        "output": "def sort(A):\n for i in range(len(A)):\n for j in range(i+1, len(A)):\n if A[i] > A[j]:\n A[i], A[j] = A[j],A[i]\n return A",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDefine a sorting algorithm to efficiently sort an array using Python.\n\n### Input:\n\n\n### Output:\ndef sort(A):\n for i in range(len(A)):\n for j in range(i+1, len(A)):\n if A[i] > A[j]:\n A[i], A[j] = A[j],A[i]\n return A"
    },
    {
        "instruction": "Generate a classifier in python to categorize the given set of records.",
        "input": "[(32, \u201cmale\u201d),(49, \u201cfemale\u201d),(21, \u201cmale\u201d),(45, \u201cfemale\u201d)]",
        "output": "def classifier(records):\n    male_list = []\n    female_list = []\n\n    # loop through the records\n    for record in records:\n        # check if the record belongs to male\n        if record[1] == 'male':\n            male_list.append(record[0])\n        # check if the record belongs to female\n        elif record[1] == 'female':\n            female_list.append(record[0])\n    # return the categorized lists \n    return male_list, female_list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a classifier in python to categorize the given set of records.\n\n### Input:\n[(32, \u201cmale\u201d),(49, \u201cfemale\u201d),(21, \u201cmale\u201d),(45, \u201cfemale\u201d)]\n\n### Output:\ndef classifier(records):\n    male_list = []\n    female_list = []\n\n    # loop through the records\n    for record in records:\n        # check if the record belongs to male\n        if record[1] == 'male':\n            male_list.append(record[0])\n        # check if the record belongs to female\n        elif record[1] == 'female':\n            female_list.append(record[0])\n    # return the categorized lists \n    return male_list, female_list"
    },
    {
        "instruction": "Write code in Python to filter the elements in a list. The function should take a list as an input and return the filtered list.",
        "input": "list = [14, 15, 16, 16, 19, 20, 20, 21, 19]",
        "output": "def filter_list(my_list): \n    # creating a new list to store the values \n    new_list = [] \n  \n    # looping through all the list elements \n    for i in my_list: \n        # checking condition \n        if i not in new_list: \n            new_list.append(i) \n              \n    # returning new_list which contains unique values \n    return new_list \n  \nlist = [14, 15, 16, 16, 19, 20, 20, 21, 19]\n  \nprint(filter_list(list)) \n\n# output [14, 15, 16, 19, 20, 21]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code in Python to filter the elements in a list. The function should take a list as an input and return the filtered list.\n\n### Input:\nlist = [14, 15, 16, 16, 19, 20, 20, 21, 19]\n\n### Output:\ndef filter_list(my_list): \n    # creating a new list to store the values \n    new_list = [] \n  \n    # looping through all the list elements \n    for i in my_list: \n        # checking condition \n        if i not in new_list: \n            new_list.append(i) \n              \n    # returning new_list which contains unique values \n    return new_list \n  \nlist = [14, 15, 16, 16, 19, 20, 20, 21, 19]\n  \nprint(filter_list(list)) \n\n# output [14, 15, 16, 19, 20, 21]"
    },
    {
        "instruction": "Create a Python script to sort a list of integers using quicksort algorithm.",
        "input": "[4,7,2,9,8,1]",
        "output": "def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)\n\n# main function\nif __name__ == \"__main__\":\n    arr = [4,7,2,9,8,1]\n    sorted_list = quick_sort(arr)\n    print(sorted_list)\n\n# output\n[1, 2, 4, 7, 8, 9]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to sort a list of integers using quicksort algorithm.\n\n### Input:\n[4,7,2,9,8,1]\n\n### Output:\ndef quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)\n\n# main function\nif __name__ == \"__main__\":\n    arr = [4,7,2,9,8,1]\n    sorted_list = quick_sort(arr)\n    print(sorted_list)\n\n# output\n[1, 2, 4, 7, 8, 9]"
    },
    {
        "instruction": "Develop a solution which adds two numbers X and Y and prints the sum as output using Python.",
        "input": "X = 10 \nY = 20",
        "output": "x = 10\ny = 20\n\nsum = x + y\n\nprint(sum) # Output: 30",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a solution which adds two numbers X and Y and prints the sum as output using Python.\n\n### Input:\nX = 10 \nY = 20\n\n### Output:\nx = 10\ny = 20\n\nsum = x + y\n\nprint(sum) # Output: 30"
    },
    {
        "instruction": "Given a Python script,rewrite it in Java.",
        "input": "def add(x, y):\n    z = x + y\n    return z",
        "output": "public int add(int x, int y) {\n    int z = x + y;\n    return z;\n}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a Python script,rewrite it in Java.\n\n### Input:\ndef add(x, y):\n    z = x + y\n    return z\n\n### Output:\npublic int add(int x, int y) {\n    int z = x + y;\n    return z;\n}"
    },
    {
        "instruction": "Develop a Python code that takes in an array of integers and outputs the array sorted in descending order.",
        "input": "[9, 2, 7, 1]",
        "output": "def sort_descending(arr):\n    arr.sort(reverse=True)\n    return arr\n\narr = [9, 2, 7, 1]\nres = sort_descending(arr) \nprint (str(res))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python code that takes in an array of integers and outputs the array sorted in descending order.\n\n### Input:\n[9, 2, 7, 1]\n\n### Output:\ndef sort_descending(arr):\n    arr.sort(reverse=True)\n    return arr\n\narr = [9, 2, 7, 1]\nres = sort_descending(arr) \nprint (str(res))"
    },
    {
        "instruction": "Write a Python program to generate a 4-digit random number.",
        "input": "",
        "output": "import random\n\ndef generate_4_digit_random_number():\n    return random.randint(1000, 9999)\n\nif __name__ == '__main__':\n    print(generate_4_digit_random_number())",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a 4-digit random number.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_4_digit_random_number():\n    return random.randint(1000, 9999)\n\nif __name__ == '__main__':\n    print(generate_4_digit_random_number())"
    },
    {
        "instruction": "Create a python code to do merge sort for an input array",
        "input": "input = [10, 8, 9, 5, 6, 7, 4]",
        "output": "def merge_sort(input): \n  \n    if len(input) > 1: \n        mid = len(input)//2 #Finding the mid of the array \n        L = input[:mid] # Dividing the array elements  \n        R = input[mid:] # into 2 halves \n  \n        merge_sort(L) # Sorting the first half \n        merge_sort(R) # Sorting the second half \n  \n        i = j = k = 0\n          \n        # Copy data to temp arrays L[] and R[] \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                input[k] = L[i] \n                i+=1\n            else: \n                input[k] = R[j] \n                j+=1\n            k+=1\n          \n        # Checking if any element was left \n        while i < len(L): \n            input[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            input[k] = R[j] \n            j+=1\n            k+=1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python code to do merge sort for an input array\n\n### Input:\ninput = [10, 8, 9, 5, 6, 7, 4]\n\n### Output:\ndef merge_sort(input): \n  \n    if len(input) > 1: \n        mid = len(input)//2 #Finding the mid of the array \n        L = input[:mid] # Dividing the array elements  \n        R = input[mid:] # into 2 halves \n  \n        merge_sort(L) # Sorting the first half \n        merge_sort(R) # Sorting the second half \n  \n        i = j = k = 0\n          \n        # Copy data to temp arrays L[] and R[] \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                input[k] = L[i] \n                i+=1\n            else: \n                input[k] = R[j] \n                j+=1\n            k+=1\n          \n        # Checking if any element was left \n        while i < len(L): \n            input[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            input[k] = R[j] \n            j+=1\n            k+=1"
    },
    {
        "instruction": "Create a python class",
        "input": "",
        "output": "class MyClass:\n    def __init__(self):\n        pass",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python class\n\n### Input:\n\n\n### Output:\nclass MyClass:\n    def __init__(self):\n        pass"
    },
    {
        "instruction": "Given a list of integers, write a Python program to compute the total number of pairwise summations in which the summation equals a given number.",
        "input": "List of Integers: [1,2,3,4]\nNumber: 7",
        "output": "def find_pairs(nums, num):\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == num:\n                pairs.append((nums[i], nums[j]))\n    return len(pairs)\n\nif __name__ == '__main__':\n\tnums = [1,2,3,4]\n\tnum = 7\n\tpairs = find_pairs(nums, num)\n\tprint(pairs)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of integers, write a Python program to compute the total number of pairwise summations in which the summation equals a given number.\n\n### Input:\nList of Integers: [1,2,3,4]\nNumber: 7\n\n### Output:\ndef find_pairs(nums, num):\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == num:\n                pairs.append((nums[i], nums[j]))\n    return len(pairs)\n\nif __name__ == '__main__':\n\tnums = [1,2,3,4]\n\tnum = 7\n\tpairs = find_pairs(nums, num)\n\tprint(pairs)"
    },
    {
        "instruction": "Write a Python code to generate all possible strings of 3 characters using the characters a, b and c.",
        "input": "",
        "output": "def generate_strings(characters, length):\n    strings = []\n    if length == 0:\n        strings.append('')\n    else:\n        for c in characters:\n            for s in generate_strings(characters, length-1):\n                strings.append(c + s) \n    return strings\n\ncharacters = ['a', 'b', 'c']\nlength = 3\n\nprint(generate_strings(characters, length))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to generate all possible strings of 3 characters using the characters a, b and c.\n\n### Input:\n\n\n### Output:\ndef generate_strings(characters, length):\n    strings = []\n    if length == 0:\n        strings.append('')\n    else:\n        for c in characters:\n            for s in generate_strings(characters, length-1):\n                strings.append(c + s) \n    return strings\n\ncharacters = ['a', 'b', 'c']\nlength = 3\n\nprint(generate_strings(characters, length))"
    },
    {
        "instruction": "Create a web application in Python with Flask that has a homepage and a page that displays the current time.",
        "input": "Not applicable",
        "output": "from datetime import datetime\n\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n return 'Homepage'\n\n@app.route('/time')\ndef time():\n time = datetime.now().strftime('%H:%M:%S')\n return f'The current time is {time}.'\n\nif __name__ == '__main__':\n app.run()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application in Python with Flask that has a homepage and a page that displays the current time.\n\n### Input:\nNot applicable\n\n### Output:\nfrom datetime import datetime\n\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n return 'Homepage'\n\n@app.route('/time')\ndef time():\n time = datetime.now().strftime('%H:%M:%S')\n return f'The current time is {time}.'\n\nif __name__ == '__main__':\n app.run()"
    },
    {
        "instruction": "Create an algorithm in Python to sort a given list of integers from smallest to largest.",
        "input": "[10, 7, 3, 5, 8]",
        "output": "def sort_list(numbers):\n\u00a0\u00a0\u00a0\u00a0numbers.sort()\n\u00a0\u00a0\u00a0\u00a0return numbers",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to sort a given list of integers from smallest to largest.\n\n### Input:\n[10, 7, 3, 5, 8]\n\n### Output:\ndef sort_list(numbers):\n\u00a0\u00a0\u00a0\u00a0numbers.sort()\n\u00a0\u00a0\u00a0\u00a0return numbers"
    },
    {
        "instruction": "Generate a Python function that prints information about the current machine.",
        "input": "",
        "output": "import platform\n\ndef print_machine_details():\n    \"\"\"Print current machine details.\"\"\"\n    # Get system name\n    system_name = platform.system()\n    # Get node name\n    system_node = platform.node()\n    # Get release\n    system_release = platform.release()\n    # get architecture\n    system_architecture = platform.architecture()\n    # Get processor\n    system_processor = platform.machine()\n\n    # Print the system name\n    print(\"System: {}\".format(system_name) )\n    # Print the node name\n    print(\"Node Name: {}\".format(system_node))\n    # Print release\n    print(\"Release: {}\".format(system_release))\n    # Print architecture\n    print(\"Architecture: {}\".format(system_architecture))\n    # Print processor\n    print(\"Processor: {}\".format(system_processor))\n\n# Call the function\nprint_machine_details()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that prints information about the current machine.\n\n### Input:\n\n\n### Output:\nimport platform\n\ndef print_machine_details():\n    \"\"\"Print current machine details.\"\"\"\n    # Get system name\n    system_name = platform.system()\n    # Get node name\n    system_node = platform.node()\n    # Get release\n    system_release = platform.release()\n    # get architecture\n    system_architecture = platform.architecture()\n    # Get processor\n    system_processor = platform.machine()\n\n    # Print the system name\n    print(\"System: {}\".format(system_name) )\n    # Print the node name\n    print(\"Node Name: {}\".format(system_node))\n    # Print release\n    print(\"Release: {}\".format(system_release))\n    # Print architecture\n    print(\"Architecture: {}\".format(system_architecture))\n    # Print processor\n    print(\"Processor: {}\".format(system_processor))\n\n# Call the function\nprint_machine_details()"
    },
    {
        "instruction": "Write a Python program to check that a string contains only a certain set of characters (in this case a-z, A-Z and 0-9).",
        "input": "",
        "output": "import re\n\ndef check_string(input_string):\n    regex = re.compile('[a-zA-Z0-9]')\n    for c in input_string:\n        if not regex.match(c):\n            return False\n    return True\n\nstring1 = 'ABC123'\nstring2 = 'ABC12!@'\n\nif check_string(string1):\n    print('String1 is valid')\nelse:\n    print('String1 is not valid')\n\nif check_string(string2):\n    print('String2 is valid')\nelse:\n    print('String2 is not valid')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to check that a string contains only a certain set of characters (in this case a-z, A-Z and 0-9).\n\n### Input:\n\n\n### Output:\nimport re\n\ndef check_string(input_string):\n    regex = re.compile('[a-zA-Z0-9]')\n    for c in input_string:\n        if not regex.match(c):\n            return False\n    return True\n\nstring1 = 'ABC123'\nstring2 = 'ABC12!@'\n\nif check_string(string1):\n    print('String1 is valid')\nelse:\n    print('String1 is not valid')\n\nif check_string(string2):\n    print('String2 is valid')\nelse:\n    print('String2 is not valid')"
    },
    {
        "instruction": "Implement a bubble sort algorithm with a Python function that takes an array as input and returns a sorted array.",
        "input": "[8, 1, 5, 7, 3]",
        "output": "def bubble_sort(arr): \n n = len(arr) \n  \n # Traverse through all array elements \n for i in range(n): \n  \n  # Last i elements are already in place \n  for j in range(0, n-i-1): \n  \n  # traverse the array from 0 to n-i-1 \n  # Swap if the element found is greater \n  # than the next element \n   if arr[j] > arr[j+1] : \n    arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n # Driver code to test above \n arr = [8, 1, 5, 7, 3] \n  \n bubble_sort(arr) \n  \n print (\"Sorted array is:\") \n for i in range(len(arr)): \n  print (\"%d\" %arr[i]), \n  \n# Output:\n1 3 5 7 8",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a bubble sort algorithm with a Python function that takes an array as input and returns a sorted array.\n\n### Input:\n[8, 1, 5, 7, 3]\n\n### Output:\ndef bubble_sort(arr): \n n = len(arr) \n  \n # Traverse through all array elements \n for i in range(n): \n  \n  # Last i elements are already in place \n  for j in range(0, n-i-1): \n  \n  # traverse the array from 0 to n-i-1 \n  # Swap if the element found is greater \n  # than the next element \n   if arr[j] > arr[j+1] : \n    arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n # Driver code to test above \n arr = [8, 1, 5, 7, 3] \n  \n bubble_sort(arr) \n  \n print (\"Sorted array is:\") \n for i in range(len(arr)): \n  print (\"%d\" %arr[i]), \n  \n# Output:\n1 3 5 7 8"
    },
    {
        "instruction": "Create a data structure in Python for storing employee information in a company.",
        "input": "A company with 5 Employees",
        "output": "employee_dict = {\n  'name': '',\n  'position': '',\n  'age': '',\n  'salary': ''\n  }\n  \nemployees = []\n\nemployees.append({\n'name': 'John Smith', \n'position': 'Manager',\n'age': 43,\n'salary': 100000\n})\n\nemployees.append({\n'name': 'Mary Jones',\n'position': 'Secretary',\n'age': 36,\n'salary': 50000\n})\n\nemployees.append({\n'name': 'David Williams',\n'position': 'Software Developer',\n'age': 25,\n'salary': 80000\n})\n\nemployees.append({\n'name': 'Richard Jones',\n'position': 'Accountant',\n'age': 41,\n'salary': 75000\n})\n\nemployees.append({\n'name': 'Susan Miller',\n'position': 'IT Specialist',\n'age': 28,\n'salary': 65000\n})",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a data structure in Python for storing employee information in a company.\n\n### Input:\nA company with 5 Employees\n\n### Output:\nemployee_dict = {\n  'name': '',\n  'position': '',\n  'age': '',\n  'salary': ''\n  }\n  \nemployees = []\n\nemployees.append({\n'name': 'John Smith', \n'position': 'Manager',\n'age': 43,\n'salary': 100000\n})\n\nemployees.append({\n'name': 'Mary Jones',\n'position': 'Secretary',\n'age': 36,\n'salary': 50000\n})\n\nemployees.append({\n'name': 'David Williams',\n'position': 'Software Developer',\n'age': 25,\n'salary': 80000\n})\n\nemployees.append({\n'name': 'Richard Jones',\n'position': 'Accountant',\n'age': 41,\n'salary': 75000\n})\n\nemployees.append({\n'name': 'Susan Miller',\n'position': 'IT Specialist',\n'age': 28,\n'salary': 65000\n})"
    },
    {
        "instruction": "Create an AI assistant in Python that can generate a forecast with any given dataset.",
        "input": "weather dataset: dates, temperature in Celsius, humidity",
        "output": "from sklearn.linear_model import LinearRegression\nimport pandas as pd\n\n# Read dataset\ndf = pd.read_csv('weather.csv')\n\n# Define features and target\nX = df[['date', 'temp']]\ny = df['humidity']\n\n# Create Linear Regression model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)\n\n# Display results\nprint('Forecasted Humidity')\nfor i in range(len(predictions)):\n    print('{:.2f}'.format(predictions[i]))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI assistant in Python that can generate a forecast with any given dataset.\n\n### Input:\nweather dataset: dates, temperature in Celsius, humidity\n\n### Output:\nfrom sklearn.linear_model import LinearRegression\nimport pandas as pd\n\n# Read dataset\ndf = pd.read_csv('weather.csv')\n\n# Define features and target\nX = df[['date', 'temp']]\ny = df['humidity']\n\n# Create Linear Regression model\nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)\n\n# Display results\nprint('Forecasted Humidity')\nfor i in range(len(predictions)):\n    print('{:.2f}'.format(predictions[i]))"
    },
    {
        "instruction": "Write a function in Python that takes in a string and returns a list containing its individual words.",
        "input": "\"This is a test\"",
        "output": "def string_to_list(s):\n    return s.split(' ')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes in a string and returns a list containing its individual words.\n\n### Input:\n\"This is a test\"\n\n### Output:\ndef string_to_list(s):\n    return s.split(' ')"
    },
    {
        "instruction": "Construct a code in python for accessing and processing the information of the world bank's open API.",
        "input": "",
        "output": "# Importing the requests module\nimport requests\n \n# API URL \nurl = \"https://api.worldbank.org/v2/countries/\"\n \n# Sending the HTTP request\nresponse = requests.get(url)\n \n# Converting the response in JSON format\nresponse_json = response.json()\n \n# Iterating over the response\nfor country in response_json[1]:\n    print(\"Country Name:\", country['name'])\n    print(\"Country Code:\", country['iso2Code'])\n    print(\"Region:\", country['region']['value'])\n    print(\"Income Level:\", country['incomeLevel']['value'], \"\\n\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a code in python for accessing and processing the information of the world bank's open API.\n\n### Input:\n\n\n### Output:\n# Importing the requests module\nimport requests\n \n# API URL \nurl = \"https://api.worldbank.org/v2/countries/\"\n \n# Sending the HTTP request\nresponse = requests.get(url)\n \n# Converting the response in JSON format\nresponse_json = response.json()\n \n# Iterating over the response\nfor country in response_json[1]:\n    print(\"Country Name:\", country['name'])\n    print(\"Country Code:\", country['iso2Code'])\n    print(\"Region:\", country['region']['value'])\n    print(\"Income Level:\", country['incomeLevel']['value'], \"\\n\")"
    },
    {
        "instruction": "Design a Python algorithm to identify all the prime numbers up to a given integer.",
        "input": "",
        "output": "def identify_primes(num):\n    '''This function will identify all the prime numbers up to a given integer.'''\n    primes = []\n    for x in range(2, num):\n        if all(x%i!=0 for i in range(2, int(x**0.5)+1)):\n            primes.append(x)\n    return primes",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python algorithm to identify all the prime numbers up to a given integer.\n\n### Input:\n\n\n### Output:\ndef identify_primes(num):\n    '''This function will identify all the prime numbers up to a given integer.'''\n    primes = []\n    for x in range(2, num):\n        if all(x%i!=0 for i in range(2, int(x**0.5)+1)):\n            primes.append(x)\n    return primes"
    },
    {
        "instruction": "Produce a Google App Engine application in Python that shows the current weather forecast for a specific city.",
        "input": "Not applicable",
        "output": "import webapp2\nfrom google.appengine.api import urlfetch\nimport json\n\nclass MainHandler(webapp2.RequestHandler):\n def get(self):\n city = 'London'\n api_key = '<your_api_key>'\n url = 'http://api.openweathermap.org/data/2.5/weather?q={}&APPID={}'.format(city, api_key)\n result = urlfetch.fetch(url)\n self.response.write(json.loads(result.content))\n  \napp = webapp2.WSGIApplication([\n ('/', MainHandler)\n], debug=True)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a Google App Engine application in Python that shows the current weather forecast for a specific city.\n\n### Input:\nNot applicable\n\n### Output:\nimport webapp2\nfrom google.appengine.api import urlfetch\nimport json\n\nclass MainHandler(webapp2.RequestHandler):\n def get(self):\n city = 'London'\n api_key = '<your_api_key>'\n url = 'http://api.openweathermap.org/data/2.5/weather?q={}&APPID={}'.format(city, api_key)\n result = urlfetch.fetch(url)\n self.response.write(json.loads(result.content))\n  \napp = webapp2.WSGIApplication([\n ('/', MainHandler)\n], debug=True)"
    },
    {
        "instruction": "Construct an efficient algorithm in Python to solve this problem.",
        "input": "You are given a list of nine integers. Divide the elements in the list into three groups of three elements each. The sum of each group's elements should be equal.\n\nFor example, if the list was:\n\n[2,3,3,3,3,3,3,3,3]\n\nThen each group's sum should be 9.",
        "output": "def divide_list_into_equal_groups(arr):\n  # Find the sum of all elements\n  sum_elements = 0\n  for i in arr:\n    sum_elements += i\n    \n  # divide the sum by 3 to get the desired result\n  avg = int(sum_elements / 3)\n    \n  # create a set to store all the possible sums\n  result = set()\n  for i in range(len(arr)):\n    for j in range(i, len(arr)):\n      temp_sum = 0\n      for k in range(i, j + 1):\n        temp_sum += arr[k]\n      result.add(temp_sum)\n    \n  # check if the desired sum is present in the set or not\n  if avg in result:\n    # Divide list into 3 groups\n    group1 = []\n    group2 = []\n    group3 = []\n    curr_g1_sum = 0\n    curr_g2_sum = 0\n    curr_g3_sum = 0\n    flag = 0\n      \n    for i in range(len(arr)):\n      # Check for current sum of each group\n      if flag == 0:\n        curr_g1_sum += arr[i]\n        if curr_g1_sum > avg:\n            flag = 1\n            curr_g2_sum += arr[i]\n        \n      elif flag == 1:\n        curr_g2_sum += arr[i]\n        if curr_g2_sum > avg:\n          flag = 2\n          curr_g3_sum += arr[i]\n        else:\n          group1.append(arr[i])\n          \n      elif flag == 2:\n        curr_g3_sum += arr[i]\n        if curr_g3_sum > avg:\n            return -1\n        else:\n            group2.append(arr[i])    \n          \n    group3.append(arr[-1])\n    return group1, group2, group3\n  else:\n    return -1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an efficient algorithm in Python to solve this problem.\n\n### Input:\nYou are given a list of nine integers. Divide the elements in the list into three groups of three elements each. The sum of each group's elements should be equal.\n\nFor example, if the list was:\n\n[2,3,3,3,3,3,3,3,3]\n\nThen each group's sum should be 9.\n\n### Output:\ndef divide_list_into_equal_groups(arr):\n  # Find the sum of all elements\n  sum_elements = 0\n  for i in arr:\n    sum_elements += i\n    \n  # divide the sum by 3 to get the desired result\n  avg = int(sum_elements / 3)\n    \n  # create a set to store all the possible sums\n  result = set()\n  for i in range(len(arr)):\n    for j in range(i, len(arr)):\n      temp_sum = 0\n      for k in range(i, j + 1):\n        temp_sum += arr[k]\n      result.add(temp_sum)\n    \n  # check if the desired sum is present in the set or not\n  if avg in result:\n    # Divide list into 3 groups\n    group1 = []\n    group2 = []\n    group3 = []\n    curr_g1_sum = 0\n    curr_g2_sum = 0\n    curr_g3_sum = 0\n    flag = 0\n      \n    for i in range(len(arr)):\n      # Check for current sum of each group\n      if flag == 0:\n        curr_g1_sum += arr[i]\n        if curr_g1_sum > avg:\n            flag = 1\n            curr_g2_sum += arr[i]\n        \n      elif flag == 1:\n        curr_g2_sum += arr[i]\n        if curr_g2_sum > avg:\n          flag = 2\n          curr_g3_sum += arr[i]\n        else:\n          group1.append(arr[i])\n          \n      elif flag == 2:\n        curr_g3_sum += arr[i]\n        if curr_g3_sum > avg:\n            return -1\n        else:\n            group2.append(arr[i])    \n          \n    group3.append(arr[-1])\n    return group1, group2, group3\n  else:\n    return -1"
    },
    {
        "instruction": "Develop an algorithm in Python to determine the greatest common divisor (GCD) of two numbers.",
        "input": "8, 12",
        "output": "def gcd(a, b): \n    # base case \n    if (a == 0):  \n        return b \n    if (b == 0):  \n        return a \n  \n    # a is greater \n    if (a > b): \n        return gcd(a%b, b) \n          \n    return gcd(a, b%a) \n\nprint(gcd(8, 12)) # 4",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to determine the greatest common divisor (GCD) of two numbers.\n\n### Input:\n8, 12\n\n### Output:\ndef gcd(a, b): \n    # base case \n    if (a == 0):  \n        return b \n    if (b == 0):  \n        return a \n  \n    # a is greater \n    if (a > b): \n        return gcd(a%b, b) \n          \n    return gcd(a, b%a) \n\nprint(gcd(8, 12)) # 4"
    },
    {
        "instruction": "Generate a python program to check the sum of two numbers and determine if they are equal or not.",
        "input": "Compare a = 4 and b = 6",
        "output": "def compare_sum(a, b):\n  if a + b == 10:\n    return True\n  else:\n    return False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to check the sum of two numbers and determine if they are equal or not.\n\n### Input:\nCompare a = 4 and b = 6\n\n### Output:\ndef compare_sum(a, b):\n  if a + b == 10:\n    return True\n  else:\n    return False"
    },
    {
        "instruction": "Construct a Python program to find the missing number in an array",
        "input": "nums = [4, 5, 7, 9, 10]",
        "output": "def missing_number(nums): \n    # Get the range of available numbers \n    range_nums = range(min(nums), max(nums) + 1) \n  \n    # Generate a dictionary with numbers in the range as key and its  \n    # present in the array or not as its value \n    result = dict.fromkeys(range_nums, False) \n    for item in nums: \n        result[item] = True\n  \n    # Iterate over the dictionary and get the missing value \n    missing_value = 0\n    for key, value in result.items(): \n        if value == False: \n            missing_value = key \n            break\n  \n    # Return the missing value \n    return missing_value \n\n# Driver code \nnums = [4, 5, 7, 9, 10]\nmissing_value = missing_number(nums) \nprint(\"Missing number is: \", missing_value)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to find the missing number in an array\n\n### Input:\nnums = [4, 5, 7, 9, 10]\n\n### Output:\ndef missing_number(nums): \n    # Get the range of available numbers \n    range_nums = range(min(nums), max(nums) + 1) \n  \n    # Generate a dictionary with numbers in the range as key and its  \n    # present in the array or not as its value \n    result = dict.fromkeys(range_nums, False) \n    for item in nums: \n        result[item] = True\n  \n    # Iterate over the dictionary and get the missing value \n    missing_value = 0\n    for key, value in result.items(): \n        if value == False: \n            missing_value = key \n            break\n  \n    # Return the missing value \n    return missing_value \n\n# Driver code \nnums = [4, 5, 7, 9, 10]\nmissing_value = missing_number(nums) \nprint(\"Missing number is: \", missing_value)"
    },
    {
        "instruction": "Complete the following python code to make it comply with the given logic",
        "input": "def largest_element(list1): \n    max = list1[0] \n    for item in list1: \n        if max",
        "output": "def largest_element(list1): \n    max = list1[0] \n    for item in list1: \n        if item > max: \n            max = item\n    return max",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nComplete the following python code to make it comply with the given logic\n\n### Input:\ndef largest_element(list1): \n    max = list1[0] \n    for item in list1: \n        if max\n\n### Output:\ndef largest_element(list1): \n    max = list1[0] \n    for item in list1: \n        if item > max: \n            max = item\n    return max"
    },
    {
        "instruction": "Optimize a Python script to filter all strings of length 5.",
        "input": "[\"Hello\", \"Hello World\", \"World\", \"Python\", \"Coding\"]",
        "output": "def filter_length(words):\n    new_words = []\n    for word in words:\n        if len(word) == 5:\n            new_words.append(word)\n\n    return new_words\n\nwords = [\"Hello\", \"Hello World\", \"World\", \"Python\", \"Coding\"]\n print(filter_length(words))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Python script to filter all strings of length 5.\n\n### Input:\n[\"Hello\", \"Hello World\", \"World\", \"Python\", \"Coding\"]\n\n### Output:\ndef filter_length(words):\n    new_words = []\n    for word in words:\n        if len(word) == 5:\n            new_words.append(word)\n\n    return new_words\n\nwords = [\"Hello\", \"Hello World\", \"World\", \"Python\", \"Coding\"]\n print(filter_length(words))"
    },
    {
        "instruction": "Use the machine learning model XGBoost to create a classifier in Python.",
        "input": "",
        "output": "import xgboost as xgb\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\n \n# Load the data\ndata = load_breast_cancer()\nX = data.data\ny = data.target\n \n# Split the data into training and testing sets  \nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n \n# Instantiate the XGBoost model  \nxg_cls = xgb.XGBClassifier(objective=\"binary:logistic\", n_estimators=10, seed=123)\n \n# Fit the model\nxg_cls.fit(X_train, y_train)\n \n# Predict the labels of the test set\nprediction = xg_cls.predict(X_test)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the machine learning model XGBoost to create a classifier in Python.\n\n### Input:\n\n\n### Output:\nimport xgboost as xgb\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import train_test_split\n \n# Load the data\ndata = load_breast_cancer()\nX = data.data\ny = data.target\n \n# Split the data into training and testing sets  \nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)\n \n# Instantiate the XGBoost model  \nxg_cls = xgb.XGBClassifier(objective=\"binary:logistic\", n_estimators=10, seed=123)\n \n# Fit the model\nxg_cls.fit(X_train, y_train)\n \n# Predict the labels of the test set\nprediction = xg_cls.predict(X_test)"
    },
    {
        "instruction": "Design an algorithm in Python to search a list of numbers for a particular number and return the index at which the number is located.",
        "input": "",
        "output": "def search(nums, target):\n    for i, num in enumerate(nums):\n        if target == num:\n            return i\n    return -1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to search a list of numbers for a particular number and return the index at which the number is located.\n\n### Input:\n\n\n### Output:\ndef search(nums, target):\n    for i, num in enumerate(nums):\n        if target == num:\n            return i\n    return -1"
    },
    {
        "instruction": "Generate a random alphanumeric string in Python of length 10.",
        "input": "Not applicable",
        "output": "import random \n\nalphanumeric_string = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\n\nprint(alphanumeric_string)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random alphanumeric string in Python of length 10.\n\n### Input:\nNot applicable\n\n### Output:\nimport random \n\nalphanumeric_string = ''.join(random.choices(string.ascii_letters + string.digits, k=10))\n\nprint(alphanumeric_string)"
    },
    {
        "instruction": "Rewrite the following JavaScript code to a python code.",
        "input": "function addNums(x, y) {\n    return x + y;\n}",
        "output": "def addNums(x, y):\n    return x + y",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following JavaScript code to a python code.\n\n### Input:\nfunction addNums(x, y) {\n    return x + y;\n}\n\n### Output:\ndef addNums(x, y):\n    return x + y"
    },
    {
        "instruction": "Create a Python script to scrape the titles of the latest 100 articles from a news website.",
        "input": "URL of the news website",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\n# Get the webpage\nurl = \"http://example.com/news\"\npage = requests.get(url)\n\n# Parse the page\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Get the titles\ntitles = soup.find_all('a', class_=\"article-title\")\ntitles = [title.get_text() for title in titles][:100]\n\n# Print the titles\nfor title in titles:\n    print(titles)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to scrape the titles of the latest 100 articles from a news website.\n\n### Input:\nURL of the news website\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Get the webpage\nurl = \"http://example.com/news\"\npage = requests.get(url)\n\n# Parse the page\nsoup = BeautifulSoup(page.content, 'html.parser')\n\n# Get the titles\ntitles = soup.find_all('a', class_=\"article-title\")\ntitles = [title.get_text() for title in titles][:100]\n\n# Print the titles\nfor title in titles:\n    print(titles)"
    },
    {
        "instruction": "Implement a Heap Sort algorithm in Python.",
        "input": "",
        "output": "def heapify(arr, n, i): \n    largest = i   # Initialize largest as root \n    l = 2 * i + 1     # left = 2*i + 1 \n    r = 2 * i + 2     # right = 2*i + 2 \n  \n    # See if left child of root exists and is \n    # greater than root \n    if l < n and arr[i] < arr[l]: \n        largest = l \n  \n    # See if right child of root exists and is \n    # greater than root \n    if r < n and arr[largest] < arr[r]: \n        largest = r \n  \n    # Change root, if needed \n    if largest != i: \n        arr[i],arr[largest] = arr[largest],arr[i]   # swap \n  \n        # Heapify the root. \n        heapify(arr, n, largest) \n  \n# The main function to sort an array of given size \ndef heapSort(arr): \n    n = len(arr) \n  \n    # Build a maxheap. \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n  \n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i]   # swap \n        heapify(arr, i, 0)\n  \n# Driver code to test above \narr = [ 12, 11, 13, 5, 6, 7] \nheapSort(arr) \nn = len(arr) \nprint (\"Sorted array is\") \nfor i in range(n): \n    print (\"%d\" %arr[i]),",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Heap Sort algorithm in Python.\n\n### Input:\n\n\n### Output:\ndef heapify(arr, n, i): \n    largest = i   # Initialize largest as root \n    l = 2 * i + 1     # left = 2*i + 1 \n    r = 2 * i + 2     # right = 2*i + 2 \n  \n    # See if left child of root exists and is \n    # greater than root \n    if l < n and arr[i] < arr[l]: \n        largest = l \n  \n    # See if right child of root exists and is \n    # greater than root \n    if r < n and arr[largest] < arr[r]: \n        largest = r \n  \n    # Change root, if needed \n    if largest != i: \n        arr[i],arr[largest] = arr[largest],arr[i]   # swap \n  \n        # Heapify the root. \n        heapify(arr, n, largest) \n  \n# The main function to sort an array of given size \ndef heapSort(arr): \n    n = len(arr) \n  \n    # Build a maxheap. \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n  \n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i]   # swap \n        heapify(arr, i, 0)\n  \n# Driver code to test above \narr = [ 12, 11, 13, 5, 6, 7] \nheapSort(arr) \nn = len(arr) \nprint (\"Sorted array is\") \nfor i in range(n): \n    print (\"%d\" %arr[i]),"
    },
    {
        "instruction": "Create a Python program to convert a given string from lower to upper case.",
        "input": "String: \u201chello world\u201d",
        "output": "def convert_to_upper_case(string):\n    '''This function will take a string as input and convert it to upper case'''\n    return string.upper()\n\nconverted_string = convert_to_upper_case(\"hello world\")\nprint(converted_string)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to convert a given string from lower to upper case.\n\n### Input:\nString: \u201chello world\u201d\n\n### Output:\ndef convert_to_upper_case(string):\n    '''This function will take a string as input and convert it to upper case'''\n    return string.upper()\n\nconverted_string = convert_to_upper_case(\"hello world\")\nprint(converted_string)"
    },
    {
        "instruction": "Optimize this while loop in the given Python code.",
        "input": "i = 0\nwhile i < 5:\n    i += 1\n    print(i)",
        "output": "i = 0\nwhile i < 5:\n    print(i)\n    i += 1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize this while loop in the given Python code.\n\n### Input:\ni = 0\nwhile i < 5:\n    i += 1\n    print(i)\n\n### Output:\ni = 0\nwhile i < 5:\n    print(i)\n    i += 1"
    },
    {
        "instruction": "Create an algorithm in Python using numpy to normalize a given array of numbers.",
        "input": "[1, 2, 3, 4]",
        "output": "import numpy as np\n\ndef normalize(arr):\n  return (arr - np.mean(arr)) / np.std(arr)\n\nnormalize([1,2,3,4]) # [-1.,  0.,  1.,  2.]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python using numpy to normalize a given array of numbers.\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\nimport numpy as np\n\ndef normalize(arr):\n  return (arr - np.mean(arr)) / np.std(arr)\n\nnormalize([1,2,3,4]) # [-1.,  0.,  1.,  2.]"
    },
    {
        "instruction": "Develop a Python script that determines the average age of people in a given list.",
        "input": "[{\"name\":\"john\",\"age\":20},{\"name\":\"jack\",\"age\":25},{\"name\":\"jason\",\"age\":30}]",
        "output": "def find_average_age(people_list):\n    ages_sum = 0\n    for person in people_list:\n        ages_sum += person['age']\n    return ages_sum / len(people_list)\n\npeople_list = [{\"name\":\"john\",\"age\":20},{\"name\":\"jack\",\"age\":25},{\"name\":\"jason\",\"age\":30}] \naverage_age = find_average_age(people_list)\nprint(average_age)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script that determines the average age of people in a given list.\n\n### Input:\n[{\"name\":\"john\",\"age\":20},{\"name\":\"jack\",\"age\":25},{\"name\":\"jason\",\"age\":30}]\n\n### Output:\ndef find_average_age(people_list):\n    ages_sum = 0\n    for person in people_list:\n        ages_sum += person['age']\n    return ages_sum / len(people_list)\n\npeople_list = [{\"name\":\"john\",\"age\":20},{\"name\":\"jack\",\"age\":25},{\"name\":\"jason\",\"age\":30}] \naverage_age = find_average_age(people_list)\nprint(average_age)"
    },
    {
        "instruction": "Find the square root of the given number using their binary search algorithm.",
        "input": "Number: 16",
        "output": "# Python program to find square root  \n# using binary search \n\ndef binarySearch(n, low, high): \n    mid = low + (high - low)/2\n  \n    # base cases \n    if(mid*mid == n): \n        return mid \n          \n    if(mid*mid > n): \n        return binarySearch(n, low, mid-1) \n          \n    return binarySearch(n, mid+1, high)\n      \n# Driver Code \nn = 16\nans = binarySearch(n, 0, n) \n#print 'Square root of ', n, 'is', ans\nprint(\"Square root of %0.5f is %f \" % (n, ans))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the square root of the given number using their binary search algorithm.\n\n### Input:\nNumber: 16\n\n### Output:\n# Python program to find square root  \n# using binary search \n\ndef binarySearch(n, low, high): \n    mid = low + (high - low)/2\n  \n    # base cases \n    if(mid*mid == n): \n        return mid \n          \n    if(mid*mid > n): \n        return binarySearch(n, low, mid-1) \n          \n    return binarySearch(n, mid+1, high)\n      \n# Driver Code \nn = 16\nans = binarySearch(n, 0, n) \n#print 'Square root of ', n, 'is', ans\nprint(\"Square root of %0.5f is %f \" % (n, ans))"
    },
    {
        "instruction": "Create a Python algorithm that finds the maximum value of an array",
        "input": "a = [5, 9, 8, 2, 1, 3]",
        "output": "def maxValue(array):\n    max = array[0]\n    for num in array:\n        if num > max:\n            max = num\n    return max\n\na = [5, 9 ,8, 2, 1, 3]\nprint(maxValue(a))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python algorithm that finds the maximum value of an array\n\n### Input:\na = [5, 9, 8, 2, 1, 3]\n\n### Output:\ndef maxValue(array):\n    max = array[0]\n    for num in array:\n        if num > max:\n            max = num\n    return max\n\na = [5, 9 ,8, 2, 1, 3]\nprint(maxValue(a))"
    },
    {
        "instruction": "Convert the following SQL query to Python.",
        "input": "SELECT * \nFROM `employee_table`\nWHERE `salary` < 10000",
        "output": "import sqlite3\n\ndb = sqlite3.connect(\"employee_table.db\") # Assumes the table is in a file named employee_table.db\ncur = db.cursor()\n\n# Execute the SQL command\ncur.execute(\"SELECT * FROM employee_table WHERE salary < 10000\")\n\n# Commit your changes\ndb.commit()\n\n# Get the results\nresults = cur.fetchall()\n\n# Print the results\nfor row in results:\n    print(row)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following SQL query to Python.\n\n### Input:\nSELECT * \nFROM `employee_table`\nWHERE `salary` < 10000\n\n### Output:\nimport sqlite3\n\ndb = sqlite3.connect(\"employee_table.db\") # Assumes the table is in a file named employee_table.db\ncur = db.cursor()\n\n# Execute the SQL command\ncur.execute(\"SELECT * FROM employee_table WHERE salary < 10000\")\n\n# Commit your changes\ndb.commit()\n\n# Get the results\nresults = cur.fetchall()\n\n# Print the results\nfor row in results:\n    print(row)"
    },
    {
        "instruction": "Design an algorithm in Python to check the validity of a 10-digit phone number.",
        "input": "Phone number = 8888881111",
        "output": "# Check to make sure the length of the phone number is 10\ndef check_phone_number(phone_number):\n    if len(phone_number) != 10:\n        return False\n\n    # Check to make sure all characters are digits\n    for c in phone_number:\n        if c < '0' or c > '9':\n            return False\n\n    # Phone number is valid\n    return True\n\n# Test the function\nprint(check_phone_number('8888881111')) # True",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to check the validity of a 10-digit phone number.\n\n### Input:\nPhone number = 8888881111\n\n### Output:\n# Check to make sure the length of the phone number is 10\ndef check_phone_number(phone_number):\n    if len(phone_number) != 10:\n        return False\n\n    # Check to make sure all characters are digits\n    for c in phone_number:\n        if c < '0' or c > '9':\n            return False\n\n    # Phone number is valid\n    return True\n\n# Test the function\nprint(check_phone_number('8888881111')) # True"
    },
    {
        "instruction": "Develop an algorithm in Python to classify an animal based on its weight and size.",
        "input": "weight = 5, size = 40",
        "output": "def classify_animal(weight, size):\n    if weight < 10 and size < 50:\n        return 'small'\n    elif weight >= 10 and size >= 50:\n        return 'large'\n    else:\n        return 'medium'\n\nclassify_animal(5, 40)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to classify an animal based on its weight and size.\n\n### Input:\nweight = 5, size = 40\n\n### Output:\ndef classify_animal(weight, size):\n    if weight < 10 and size < 50:\n        return 'small'\n    elif weight >= 10 and size >= 50:\n        return 'large'\n    else:\n        return 'medium'\n\nclassify_animal(5, 40)"
    },
    {
        "instruction": "Write a Python program to classify emails as spam or not spam.",
        "input": "",
        "output": "import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load emails\nemails = pd.read_csv('emails.csv')\n\n# Create Multinomial Naive Bayes classifier\ntfidf = TfidfVectorizer(stop_words='english')\nX = tfidf.fit_transform(emails.email).toarray()\ny = emails.spam\nclassifier = MultinomialNB().fit(X,y)\n\n# Make predictions for new emails\nemail = [\"Hi, I am offering a great deal on your favorite products.\"]\nemail_transformed = tfidf.transform(email).toarray()\nprobability = classifier.predict_proba(email_transformed)\n\n# Show results\nif probability[0][1] > 0.5:\n    print(\"This email is marked as SPAM\")\nelse:\n    print(\"This email is NOT marked as SPAM\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify emails as spam or not spam.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load emails\nemails = pd.read_csv('emails.csv')\n\n# Create Multinomial Naive Bayes classifier\ntfidf = TfidfVectorizer(stop_words='english')\nX = tfidf.fit_transform(emails.email).toarray()\ny = emails.spam\nclassifier = MultinomialNB().fit(X,y)\n\n# Make predictions for new emails\nemail = [\"Hi, I am offering a great deal on your favorite products.\"]\nemail_transformed = tfidf.transform(email).toarray()\nprobability = classifier.predict_proba(email_transformed)\n\n# Show results\nif probability[0][1] > 0.5:\n    print(\"This email is marked as SPAM\")\nelse:\n    print(\"This email is NOT marked as SPAM\")"
    },
    {
        "instruction": "Create a Python program that takes a given String and performs the Caesar Cipher algorithm (shifts every alphabetical character by a certain number of characters).",
        "input": "string = \"ABCDEFG\"\nshift = 3",
        "output": "def caesarCipher(string, shift):\n    result = \"\"\n    for char in string:\n        char_code = ord(char)+shift\n        if char_code < ord('A'):\n            result += chr(ord('Z')- abs(char_code) + 1)\n        elif char_code > ord('Z'):\n            result += chr(ord('A') + abs(char_code) - 1)\n        else:\n            result += chr(char_code)\n    return result",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a given String and performs the Caesar Cipher algorithm (shifts every alphabetical character by a certain number of characters).\n\n### Input:\nstring = \"ABCDEFG\"\nshift = 3\n\n### Output:\ndef caesarCipher(string, shift):\n    result = \"\"\n    for char in string:\n        char_code = ord(char)+shift\n        if char_code < ord('A'):\n            result += chr(ord('Z')- abs(char_code) + 1)\n        elif char_code > ord('Z'):\n            result += chr(ord('A') + abs(char_code) - 1)\n        else:\n            result += chr(char_code)\n    return result"
    },
    {
        "instruction": "Filter a string in Python by removing all alphabets and keeping only the numbers.",
        "input": "my_string = \"hey3this5is4my2string1\"",
        "output": "def filter_string(str):\n    str = ''.join(x for x in str if x.isdigit())\n    return str  \n\nmy_string = \"hey3this5is4my2string1\"\nprint(filter_string(my_string))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFilter a string in Python by removing all alphabets and keeping only the numbers.\n\n### Input:\nmy_string = \"hey3this5is4my2string1\"\n\n### Output:\ndef filter_string(str):\n    str = ''.join(x for x in str if x.isdigit())\n    return str  \n\nmy_string = \"hey3this5is4my2string1\"\nprint(filter_string(my_string))"
    },
    {
        "instruction": "Create a date class in Python with two init functions which will get and set a date, respectively.",
        "input": "",
        "output": "class Date:\n    def __init__(self):\n        self.day = 0\n        self.month = 0\n        self.year = 0\n \n    # function to set the date\n    def set_date(self, day, month, year):\n        self.day = day\n        self.month = month\n        self.year = year\n \n    # function to get the date\n    def get_date(self):\n        return self.day, self.month, self.year",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a date class in Python with two init functions which will get and set a date, respectively.\n\n### Input:\n\n\n### Output:\nclass Date:\n    def __init__(self):\n        self.day = 0\n        self.month = 0\n        self.year = 0\n \n    # function to set the date\n    def set_date(self, day, month, year):\n        self.day = day\n        self.month = month\n        self.year = year\n \n    # function to get the date\n    def get_date(self):\n        return self.day, self.month, self.year"
    },
    {
        "instruction": "Design a class in Python called \"Car\" to represent a car object.",
        "input": "",
        "output": "class Car:\n    def __init__(self, make, model, color):\n        self.make = make\n        self.model = model\n        self.color = color\n    \n    def accelerate(self):\n        self.speed += 10\n    \n    def brakes(self):\n        self.speed -= 10",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python called \"Car\" to represent a car object.\n\n### Input:\n\n\n### Output:\nclass Car:\n    def __init__(self, make, model, color):\n        self.make = make\n        self.model = model\n        self.color = color\n    \n    def accelerate(self):\n        self.speed += 10\n    \n    def brakes(self):\n        self.speed -= 10"
    },
    {
        "instruction": "Write a Python code to find the nearest integer to a given number.",
        "input": "",
        "output": "def nearest_integer(number):\n if number - int(number)>= 0.5:\n return int(number) + 1\n else:\n return int(number)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to find the nearest integer to a given number.\n\n### Input:\n\n\n### Output:\ndef nearest_integer(number):\n if number - int(number)>= 0.5:\n return int(number) + 1\n else:\n return int(number)"
    },
    {
        "instruction": "Create an array using Python containing the numbers 0 to 9.",
        "input": "",
        "output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an array using Python containing the numbers 0 to 9.\n\n### Input:\n\n\n### Output:\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
    },
    {
        "instruction": "Create a python script that generate a random password with a given length and rule.",
        "input": "length = 8 \nrule = must contain uppercase and lowercase",
        "output": "import random\n\ndef generate_password(length, rule):\n    upper_case_letters = [chr(i) for i in range(65, 91)]\n    lower_case_letters = [chr(i) for i in range(97, 123)]\n    numbers = [str(i) for i in range(0, 10)]\n    symbols = [\"@\", \"#\", \"$\", \"%\", \"&\"]\n    password = []\n    password.extend(random.sample(upper_case_letters, 1))\n    password.extend(random.sample(lower_case_letters, 1))\n    password.extend(random.sample(numbers, 2))\n    password.extend(random.sample(symbols, 1))\n    password.extend(random.sample(lower_case_letters + upper_case_letters + numbers, length - 5))\n    random.shuffle(password)\n    return \"\".join(password)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script that generate a random password with a given length and rule.\n\n### Input:\nlength = 8 \nrule = must contain uppercase and lowercase\n\n### Output:\nimport random\n\ndef generate_password(length, rule):\n    upper_case_letters = [chr(i) for i in range(65, 91)]\n    lower_case_letters = [chr(i) for i in range(97, 123)]\n    numbers = [str(i) for i in range(0, 10)]\n    symbols = [\"@\", \"#\", \"$\", \"%\", \"&\"]\n    password = []\n    password.extend(random.sample(upper_case_letters, 1))\n    password.extend(random.sample(lower_case_letters, 1))\n    password.extend(random.sample(numbers, 2))\n    password.extend(random.sample(symbols, 1))\n    password.extend(random.sample(lower_case_letters + upper_case_letters + numbers, length - 5))\n    random.shuffle(password)\n    return \"\".join(password)"
    },
    {
        "instruction": "Create a python program that applies mean normalization to the given data.",
        "input": "[1, 2, 3, 4, 5, 6]",
        "output": "def normalize_mean(data):\n    mean = np.mean(data)\n    normalized = [x - mean for x in data]\n    return normalized",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that applies mean normalization to the given data.\n\n### Input:\n[1, 2, 3, 4, 5, 6]\n\n### Output:\ndef normalize_mean(data):\n    mean = np.mean(data)\n    normalized = [x - mean for x in data]\n    return normalized"
    },
    {
        "instruction": "Construct an HMM model in Python to classify the gender of a given sentence.",
        "input": "",
        "output": "#import necessary libraries\nimport nltk\nimport numpy as np\nfrom nltk.corpus import brown\nfrom nltk.tokenize import word_tokenize\n\n#initialize HMM \ndef hmm():\n    # load corpus\n    corpus = brown.tagged_sents(categories=['adventure','fiction','romance',\n                                            'humor','mystery','science_fiction'])\n\n    # split corpus and generate tags\n    train_data,test_data = corpus[:1000], corpus[1000:]\n    tags = set([tag for sent in train_data for (word,tag) in sent])\n\n    # initialize hmm\n    hmm = {tag:{tag:{0:0 for tag in tags} for tag in tags} }\n    hmm['start'] = {tag:0 for tag in tags}\n    hmm['end'] = {tag:0 for tag in tags}\n\n    # calculate initial probabilities\n    for sent in train_data:\n        for i in range(len(sent)):\n            word,tag = sent[i]\n            if i == 0:\n                hmm['start'][tag] += 1\n            else:\n                previous_tag = sent[i-1][1]\n                hmm[previous_tag][tag][0] += 1\n            hmm[tag][tag][word] = hmm[tag][tag].get(word, 0) + 1\n\n    # calculate transition probabilities\n    for previous_tag in hmm:\n        if previous_tag != 'start' and previous_tag != 'end':\n            total = sum(hmm[previous_tag][tag][0] for tag in hmm[previous_tag])\n            for tag in hmm[previous_tag]:\n                hmm[previous_tag][tag][0] /= total\n    return hmm\n\ndef predict(sentence, hmm):\n    sentence = sentence.lower()\n    tokenized_sentence = word_tokenize(sentence)\n    # assign default tag to each word\n    tagged_sentence = []\n    for word in tokenized_sentence:\n        tagged_sentence.append((word,'M'))\n\n    # calculate likelihood of each tag for each word\n    for i in range(len(tagged_sentence)):\n        word,tag = tagged_sentence[i]\n        if i == 0:\n            probs = {tag:hmm['start'][tag] for tag in hmm['start']}\n        else:\n            previous_tag = tagged_sentence[i-1][1]\n            probs = {tag:hmm[previous_tag][tag][0] * hmm[tag][tag].get(word, 0) \n                     for tag in hmm[previous_tag]}\n        max_prob, tag_chosen = max(probs.items(), key=lambda x:x[1])\n        tagged_sentence[i] = (word, tag_chosen)\n    return tagged_sentence",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an HMM model in Python to classify the gender of a given sentence.\n\n### Input:\n\n\n### Output:\n#import necessary libraries\nimport nltk\nimport numpy as np\nfrom nltk.corpus import brown\nfrom nltk.tokenize import word_tokenize\n\n#initialize HMM \ndef hmm():\n    # load corpus\n    corpus = brown.tagged_sents(categories=['adventure','fiction','romance',\n                                            'humor','mystery','science_fiction'])\n\n    # split corpus and generate tags\n    train_data,test_data = corpus[:1000], corpus[1000:]\n    tags = set([tag for sent in train_data for (word,tag) in sent])\n\n    # initialize hmm\n    hmm = {tag:{tag:{0:0 for tag in tags} for tag in tags} }\n    hmm['start'] = {tag:0 for tag in tags}\n    hmm['end'] = {tag:0 for tag in tags}\n\n    # calculate initial probabilities\n    for sent in train_data:\n        for i in range(len(sent)):\n            word,tag = sent[i]\n            if i == 0:\n                hmm['start'][tag] += 1\n            else:\n                previous_tag = sent[i-1][1]\n                hmm[previous_tag][tag][0] += 1\n            hmm[tag][tag][word] = hmm[tag][tag].get(word, 0) + 1\n\n    # calculate transition probabilities\n    for previous_tag in hmm:\n        if previous_tag != 'start' and previous_tag != 'end':\n            total = sum(hmm[previous_tag][tag][0] for tag in hmm[previous_tag])\n            for tag in hmm[previous_tag]:\n                hmm[previous_tag][tag][0] /= total\n    return hmm\n\ndef predict(sentence, hmm):\n    sentence = sentence.lower()\n    tokenized_sentence = word_tokenize(sentence)\n    # assign default tag to each word\n    tagged_sentence = []\n    for word in tokenized_sentence:\n        tagged_sentence.append((word,'M'))\n\n    # calculate likelihood of each tag for each word\n    for i in range(len(tagged_sentence)):\n        word,tag = tagged_sentence[i]\n        if i == 0:\n            probs = {tag:hmm['start'][tag] for tag in hmm['start']}\n        else:\n            previous_tag = tagged_sentence[i-1][1]\n            probs = {tag:hmm[previous_tag][tag][0] * hmm[tag][tag].get(word, 0) \n                     for tag in hmm[previous_tag]}\n        max_prob, tag_chosen = max(probs.items(), key=lambda x:x[1])\n        tagged_sentence[i] = (word, tag_chosen)\n    return tagged_sentence"
    },
    {
        "instruction": "Design an algorithm in Python to check if a given array has a contiguous subarray of size at least 2 that sums to the given number.",
        "input": "Array: [1, 4, 20, 3, 10, 5]\nNumber: 33",
        "output": "def checkContiguousSubarray(arr, n, sum): \n          \n    # To store current sum and \n    # starting index of subarray \n    currsum = arr[0] \n    start = 0\n  \n    # Initially size of \n    # minimum length subarray is 1 \n    minlength = 1\n      \n    # Traverse through the given array \n    for i in range(1, n): \n          \n        # Update current sum \n        currsum = currsum + arr[i] \n          \n        # If currsum has reached more than \n        # or equal to sum remove starting \n        # elements \n        while currsum >= sum: \n              \n            # Update minimum length if needed \n            if (i + 1 - start < minlength): \n                minlength = i + 1 - start \n  \n            # remove starting elements \n            currsum = currsum - arr[start] \n            start = start + 1\n              \n    # Print the minimum length  \n    if minlength == n + 1: \n        print(\"Not Possible\") \n    else: \n        print(\"Minimum length of subarray is: %d\" %minlength) \n          \n# Driver code \narr =  [1, 4, 20, 3, 10, 5]\nk = 33\nn = len(arr) \nprint(\"Given array is\")\nprint(arr)\ncheckContiguousSubarray(arr, n, k)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to check if a given array has a contiguous subarray of size at least 2 that sums to the given number.\n\n### Input:\nArray: [1, 4, 20, 3, 10, 5]\nNumber: 33\n\n### Output:\ndef checkContiguousSubarray(arr, n, sum): \n          \n    # To store current sum and \n    # starting index of subarray \n    currsum = arr[0] \n    start = 0\n  \n    # Initially size of \n    # minimum length subarray is 1 \n    minlength = 1\n      \n    # Traverse through the given array \n    for i in range(1, n): \n          \n        # Update current sum \n        currsum = currsum + arr[i] \n          \n        # If currsum has reached more than \n        # or equal to sum remove starting \n        # elements \n        while currsum >= sum: \n              \n            # Update minimum length if needed \n            if (i + 1 - start < minlength): \n                minlength = i + 1 - start \n  \n            # remove starting elements \n            currsum = currsum - arr[start] \n            start = start + 1\n              \n    # Print the minimum length  \n    if minlength == n + 1: \n        print(\"Not Possible\") \n    else: \n        print(\"Minimum length of subarray is: %d\" %minlength) \n          \n# Driver code \narr =  [1, 4, 20, 3, 10, 5]\nk = 33\nn = len(arr) \nprint(\"Given array is\")\nprint(arr)\ncheckContiguousSubarray(arr, n, k)"
    },
    {
        "instruction": "Create a python program to store personal contact information in a dictionary format.",
        "input": "{\n    \"name\": \"John Doe\",\n    \"phone\": \"+1 123-456-7891\",\n    \"email\": \"john_doe@example.com\"\n }",
        "output": "def store_contact_info(contact_dict):\n    \n    name = contact_dict[\"name\"]\n    phone = contact_dict[\"phone\"]\n    email = contact_dict[\"email\"]\n\n    # Create dictionary to store contact info\n    contact_info_dict = {\n        \"Name\": name,\n        \"Phone\": phone,\n        \"Email\": email\n    }\n    return contact_info_dict",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to store personal contact information in a dictionary format.\n\n### Input:\n{\n    \"name\": \"John Doe\",\n    \"phone\": \"+1 123-456-7891\",\n    \"email\": \"john_doe@example.com\"\n }\n\n### Output:\ndef store_contact_info(contact_dict):\n    \n    name = contact_dict[\"name\"]\n    phone = contact_dict[\"phone\"]\n    email = contact_dict[\"email\"]\n\n    # Create dictionary to store contact info\n    contact_info_dict = {\n        \"Name\": name,\n        \"Phone\": phone,\n        \"Email\": email\n    }\n    return contact_info_dict"
    },
    {
        "instruction": "Develop an algorithm to find the least common multiple of two non-negative integers using Python.",
        "input": "12, 18",
        "output": "# Find the greatest common denominator\ndef gcd(num1, num2):\n    if num2 == 0:\n        return num1\n    else:\n        return gcd(num2, num1 % num2)\n\n# Find the least common multiple\ndef lcm(num1, num2):\n    return (num1 * num2) // gcd(num1, num2)\n\nnum1 = 12\nnum2 = 18\n\nprint(lcm(num1, num2))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm to find the least common multiple of two non-negative integers using Python.\n\n### Input:\n12, 18\n\n### Output:\n# Find the greatest common denominator\ndef gcd(num1, num2):\n    if num2 == 0:\n        return num1\n    else:\n        return gcd(num2, num1 % num2)\n\n# Find the least common multiple\ndef lcm(num1, num2):\n    return (num1 * num2) // gcd(num1, num2)\n\nnum1 = 12\nnum2 = 18\n\nprint(lcm(num1, num2))"
    },
    {
        "instruction": "Develop an algorithm to sort a list of numbers from low to high inPython.",
        "input": "[5, 7, 1, 6, 10, 4, 2]",
        "output": "def sort_numbers(nums):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                temp = nums[j]\n                nums[j] = nums[i]\n                nums[i] = temp\n    return nums\n\nprint(sort_numbers([5, 7, 1, 6, 10, 4, 2]))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm to sort a list of numbers from low to high inPython.\n\n### Input:\n[5, 7, 1, 6, 10, 4, 2]\n\n### Output:\ndef sort_numbers(nums):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                temp = nums[j]\n                nums[j] = nums[i]\n                nums[i] = temp\n    return nums\n\nprint(sort_numbers([5, 7, 1, 6, 10, 4, 2]))"
    },
    {
        "instruction": "Rewrite the code in Python so that it prints the length of a given string.",
        "input": "string = \"Hello World\"",
        "output": "string = \"Hello World\"\nprint(len(string)) # prints 11",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the code in Python so that it prints the length of a given string.\n\n### Input:\nstring = \"Hello World\"\n\n### Output:\nstring = \"Hello World\"\nprint(len(string)) # prints 11"
    },
    {
        "instruction": "Create a Python program that reads in a CSV, parse the data, and generates a JSON report.",
        "input": "Name, Age, Profession\nJohn, 25, Engineer\nJane, 30, Developer",
        "output": "import csv\nimport json\n \ncsv_file = open('data.csv', 'r')\njson_file = open('data.json', 'w')\n \nfieldnames = (\"Name\",\"Age\",\"Profession\")\nreader = csv.DictReader(csv_file, fieldnames)\nout = json.dumps([r for r in reader])\njson_file.write(out)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that reads in a CSV, parse the data, and generates a JSON report.\n\n### Input:\nName, Age, Profession\nJohn, 25, Engineer\nJane, 30, Developer\n\n### Output:\nimport csv\nimport json\n \ncsv_file = open('data.csv', 'r')\njson_file = open('data.json', 'w')\n \nfieldnames = (\"Name\",\"Age\",\"Profession\")\nreader = csv.DictReader(csv_file, fieldnames)\nout = json.dumps([r for r in reader])\njson_file.write(out)"
    },
    {
        "instruction": "Create a function that capitalizes the first letter of any given word",
        "input": "\"python\"",
        "output": "def capitalize_first_letter(word):\n    return word[0].upper() + word[1:]\n\n# main\nword = \"python\"\ncapitalized = capitalize_first_letter(word)\nprint(capitalized)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that capitalizes the first letter of any given word\n\n### Input:\n\"python\"\n\n### Output:\ndef capitalize_first_letter(word):\n    return word[0].upper() + word[1:]\n\n# main\nword = \"python\"\ncapitalized = capitalize_first_letter(word)\nprint(capitalized)"
    },
    {
        "instruction": "Create a Python code snippet that uses a try-except statement to capture an IndexError.",
        "input": "Not applicable",
        "output": "try:\n my_list = [1, 2, 3]\n print(my_list[4])\nexcept IndexError as e:\n print('Index not found!')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code snippet that uses a try-except statement to capture an IndexError.\n\n### Input:\nNot applicable\n\n### Output:\ntry:\n my_list = [1, 2, 3]\n print(my_list[4])\nexcept IndexError as e:\n print('Index not found!')"
    },
    {
        "instruction": "Write a Python script to generate 100 random numbers from 1-10.",
        "input": "Not applicable",
        "output": "import random\n \nrandom_nums = [random.randint(1, 10) for _ in range(100)]\n \nprint(random_nums)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate 100 random numbers from 1-10.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n \nrandom_nums = [random.randint(1, 10) for _ in range(100)]\n \nprint(random_nums)"
    },
    {
        "instruction": "Create a Python program to fetch a book from the Open Library API given its ISBN. The program should return the following information about the book: title, author, and description.",
        "input": "ISBN: 9781400079170",
        "output": "import requests\n\nISBN = '9781400079170'\nparams = {'bibkeys': ISBN, 'format': 'json', 'jscmd': 'details'}\n\nrequest = requests.get('https://openlibrary.org/api/books', params=params)\ndata = request.json()\n\nbook = data[f'OLID:{ISBN}']\ntitle = book['title']\nauthor = book['authors'][0]['name']\ndescription = book['description'][0]\n\nprint(f'Title: {title}')\nprint(f'Author: {author}')\nprint(f'Description: {description}')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to fetch a book from the Open Library API given its ISBN. The program should return the following information about the book: title, author, and description.\n\n### Input:\nISBN: 9781400079170\n\n### Output:\nimport requests\n\nISBN = '9781400079170'\nparams = {'bibkeys': ISBN, 'format': 'json', 'jscmd': 'details'}\n\nrequest = requests.get('https://openlibrary.org/api/books', params=params)\ndata = request.json()\n\nbook = data[f'OLID:{ISBN}']\ntitle = book['title']\nauthor = book['authors'][0]['name']\ndescription = book['description'][0]\n\nprint(f'Title: {title}')\nprint(f'Author: {author}')\nprint(f'Description: {description}')"
    },
    {
        "instruction": "Write a python program to combine two lists in a dictionary. The dictionary should have the first list as keys and the second list as the corresponding values.",
        "input": "list1 = [1,2,3]\nlist2 = [4,5,6]",
        "output": "def list_to_dict(keys, values):\n result = {}\n for i in range(len(keys)):\n  result[keys[i]] = values[i] \n return result",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to combine two lists in a dictionary. The dictionary should have the first list as keys and the second list as the corresponding values.\n\n### Input:\nlist1 = [1,2,3]\nlist2 = [4,5,6]\n\n### Output:\ndef list_to_dict(keys, values):\n result = {}\n for i in range(len(keys)):\n  result[keys[i]] = values[i] \n return result"
    },
    {
        "instruction": "Create an HTTP API with Python Flask that saves data from a form submission. The form contains fields for name, email, and telephone.",
        "input": "Not applicable",
        "output": "from flask import Flask, request\nimport sqlite3\n\napp = Flask(name)\n\n@app.route('/form', methods=['POST'])\ndef save_form():\n conn = sqlite3.connect('data.db')\n c = conn.cursor()\n c.execute(\"INSERT INTO submission VALUES ('name': ?, 'email': ?, 'phone': ?)\", (request.json['name'], request.json['email'], request.json['phone'])\n conn.commit()\n conn.close()\n return {'message': 'Successfully saved data'}\n \nif name == 'main':\n app.run(debug=True)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an HTTP API with Python Flask that saves data from a form submission. The form contains fields for name, email, and telephone.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, request\nimport sqlite3\n\napp = Flask(name)\n\n@app.route('/form', methods=['POST'])\ndef save_form():\n conn = sqlite3.connect('data.db')\n c = conn.cursor()\n c.execute(\"INSERT INTO submission VALUES ('name': ?, 'email': ?, 'phone': ?)\", (request.json['name'], request.json['email'], request.json['phone'])\n conn.commit()\n conn.close()\n return {'message': 'Successfully saved data'}\n \nif name == 'main':\n app.run(debug=True)"
    },
    {
        "instruction": "Using Python, create a code to predict the next three days temperature from a given dataset.",
        "input": "",
        "output": "# Importing the essential libraries \nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.metrics import mean_squared_error \nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.preprocessing import PolynomialFeatures  \nimport numpy as np \nimport pandas as pd \n\n# Loading the dataset \ndf = pd.read_csv('dataset.csv') \n\n# Separating dependent and independent variables \nX = df.iloc[:, :-1]\ny = df.iloc[:, -1]\n\n# Splitting into training and test set \nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 1) \n\n# Fitting a polynomial to the model \npolynomial_model = PolynomialFeatures(degree = 4)\nX_poly = polynomial_model.fit_transform(X_train)\npoly_reg = LinearRegression() \npoly_reg.fit(X_poly, y_train)\n\n# Predicting the next three days temperatures \nX_next_three_days = np.array([[+2.00], \n ] + [[+2.25], \n ] + [[+2.50]]).reshape(3,1)\nX_poly_next_three_days = polynomial_model.fit_transform(X_next_three_days )\n \npred_temp_next_three_days = poly_reg.predict(X_poly_next_three_days) \n \n# Printing the predictions\nprint(\"The predicted temperature for the next three days:\", pred_temp_next_three_days)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, create a code to predict the next three days temperature from a given dataset.\n\n### Input:\n\n\n### Output:\n# Importing the essential libraries \nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.metrics import mean_squared_error \nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.preprocessing import PolynomialFeatures  \nimport numpy as np \nimport pandas as pd \n\n# Loading the dataset \ndf = pd.read_csv('dataset.csv') \n\n# Separating dependent and independent variables \nX = df.iloc[:, :-1]\ny = df.iloc[:, -1]\n\n# Splitting into training and test set \nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state = 1) \n\n# Fitting a polynomial to the model \npolynomial_model = PolynomialFeatures(degree = 4)\nX_poly = polynomial_model.fit_transform(X_train)\npoly_reg = LinearRegression() \npoly_reg.fit(X_poly, y_train)\n\n# Predicting the next three days temperatures \nX_next_three_days = np.array([[+2.00], \n ] + [[+2.25], \n ] + [[+2.50]]).reshape(3,1)\nX_poly_next_three_days = polynomial_model.fit_transform(X_next_three_days )\n \npred_temp_next_three_days = poly_reg.predict(X_poly_next_three_days) \n \n# Printing the predictions\nprint(\"The predicted temperature for the next three days:\", pred_temp_next_three_days)"
    },
    {
        "instruction": "Create a Python program that converts an array into a linked list.",
        "input": "[1, 2, 3, 4]",
        "output": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\n# Function to convert array to linked list\ndef arrayToLinkedList(arr):\n    head = Node(arr[0])\n    currentNode = head\n    for i in range(1, len(arr)):\n        newNode = Node(arr[i])\n        currentNode.next = newNode\n        currentNode = newNode\n        \n    return head\n\n# Tester code\narr = [1, 2, 3, 4]\nhead = arrayToLinkedList(arr)\n\n# Print linked list\nwhile head:\n    print(head.data, end=\" \")\n    head = head.next",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that converts an array into a linked list.\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\nclass Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n\n# Function to convert array to linked list\ndef arrayToLinkedList(arr):\n    head = Node(arr[0])\n    currentNode = head\n    for i in range(1, len(arr)):\n        newNode = Node(arr[i])\n        currentNode.next = newNode\n        currentNode = newNode\n        \n    return head\n\n# Tester code\narr = [1, 2, 3, 4]\nhead = arrayToLinkedList(arr)\n\n# Print linked list\nwhile head:\n    print(head.data, end=\" \")\n    head = head.next"
    },
    {
        "instruction": "Generate an empty 2D array of size n x n in Python.",
        "input": "",
        "output": "# Create an empty 2D list\nn = 10\narr = [[0 for j in range(n)] for i in range(n)]\n\n# Print the array\nprint(arr)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an empty 2D array of size n x n in Python.\n\n### Input:\n\n\n### Output:\n# Create an empty 2D list\nn = 10\narr = [[0 for j in range(n)] for i in range(n)]\n\n# Print the array\nprint(arr)"
    },
    {
        "instruction": "Write a Python program to create a simple web page using Flask. The web page should include a greeting (e.g. \"Hello, World\") and a form with a \"Submit\" button. When the button is clicked, it should show a message saying \"Form Submitted\".",
        "input": "Not applicable",
        "output": "from flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route(\"/\", methods = [\"GET\", \"POST\"])\ndef index():\nif request.method == \"POST\":\n return render_template(\"index.html\", message=\"Form Submitted\")\nreturn render_template(\"index.html\", message= \"Hello, World\")\n\nif __name__ == \"__main__\":\n app.run(debug=True)\n\n# index.html\n\n<html>\n <head>\n <title>Form Submission</title>\n </head>\n <body>\n <h1>{{message}}</h1>\n <form action=\"/\" method=\"post\">\n <input type=\"submit\" value=\"Submit\" />\n </form>\n </body>\n</html>",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a simple web page using Flask. The web page should include a greeting (e.g. \"Hello, World\") and a form with a \"Submit\" button. When the button is clicked, it should show a message saying \"Form Submitted\".\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route(\"/\", methods = [\"GET\", \"POST\"])\ndef index():\nif request.method == \"POST\":\n return render_template(\"index.html\", message=\"Form Submitted\")\nreturn render_template(\"index.html\", message= \"Hello, World\")\n\nif __name__ == \"__main__\":\n app.run(debug=True)\n\n# index.html\n\n<html>\n <head>\n <title>Form Submission</title>\n </head>\n <body>\n <h1>{{message}}</h1>\n <form action=\"/\" method=\"post\">\n <input type=\"submit\" value=\"Submit\" />\n </form>\n </body>\n</html>"
    },
    {
        "instruction": "Generate a Python code snippet to make a copy of a given list.",
        "input": "list_a = [1, 2, 3, 4, 5]",
        "output": "list_b = list_a[:]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code snippet to make a copy of a given list.\n\n### Input:\nlist_a = [1, 2, 3, 4, 5]\n\n### Output:\nlist_b = list_a[:]"
    },
    {
        "instruction": "Create a function in Python that implements binary search.",
        "input": "[2, 5, 7, 9, 12, 15], 12",
        "output": "def binary_search(arr, value): \n    low = 0\n    high = len(arr) - 1\n  \n    while low <= high: \n        mid = (low + high) // 2\n        if arr[mid] < value: \n            low = mid + 1\n        elif arr[mid] > value: \n            high = mid - 1\n        else: \n            return mid \n  \n    return -1\n\n# Test\narr = [2, 5, 7, 9, 12, 15]\nvalue = 12\nprint(binary_search(arr, value)) # 4",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that implements binary search.\n\n### Input:\n[2, 5, 7, 9, 12, 15], 12\n\n### Output:\ndef binary_search(arr, value): \n    low = 0\n    high = len(arr) - 1\n  \n    while low <= high: \n        mid = (low + high) // 2\n        if arr[mid] < value: \n            low = mid + 1\n        elif arr[mid] > value: \n            high = mid - 1\n        else: \n            return mid \n  \n    return -1\n\n# Test\narr = [2, 5, 7, 9, 12, 15]\nvalue = 12\nprint(binary_search(arr, value)) # 4"
    },
    {
        "instruction": "Modify the Python program below to make it more efficient.",
        "input": "def foo(lst):\n    minimum = lst[0]\n    for n in lst:\n        if minimum > n:\n            minimum = n\n    return minimum",
        "output": "def foo(lst):\n    minimum = min(lst)\n    return minimum",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the Python program below to make it more efficient.\n\n### Input:\ndef foo(lst):\n    minimum = lst[0]\n    for n in lst:\n        if minimum > n:\n            minimum = n\n    return minimum\n\n### Output:\ndef foo(lst):\n    minimum = min(lst)\n    return minimum"
    },
    {
        "instruction": "Create a Python 3 program that takes as input a list of numbers (num1, num2,...,numN) and transforms it into the string \u201cnum1 + num2 + ... + numN = sum\u201d, where sum is the sum of the numbers.",
        "input": "[5, 3, 2, 6, 8]",
        "output": "nums = [5, 3, 2, 6, 8]\nsum = 0\nout_string = \"\"\n\nfor num in nums:\n sum += num\n out_string += str(num)\n \n if num != nums[-1]:\n  out_string += \" + \"\n else:\n  out_string += \" = \"\n  \nout_string += str(sum)\n\nprint(out_string)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python 3 program that takes as input a list of numbers (num1, num2,...,numN) and transforms it into the string \u201cnum1 + num2 + ... + numN = sum\u201d, where sum is the sum of the numbers.\n\n### Input:\n[5, 3, 2, 6, 8]\n\n### Output:\nnums = [5, 3, 2, 6, 8]\nsum = 0\nout_string = \"\"\n\nfor num in nums:\n sum += num\n out_string += str(num)\n \n if num != nums[-1]:\n  out_string += \" + \"\n else:\n  out_string += \" = \"\n  \nout_string += str(sum)\n\nprint(out_string)"
    },
    {
        "instruction": "Transform the given XML data into a Python dictionary.",
        "input": "<root>\n  <person>\n    <name>John</name>\n    <age>27</age>\n    <hobbies>\n      <hobby>Movies</hobby>\n      <hobby>Photography</hobby>\n    </hobbies>\n  </person>\n</root>",
        "output": "import xml.etree.ElementTree as et\nroot = et.fromstring('<root><person><name>John</name><age>27</age><hobbies><hobby>Movies</hobby><hobby>Photography</hobby></hobbies></person></root>')\n\ndata_dict = {}\n\nfor elem in list(root):\n    key = elem.tag\n    data_dict[key] = {}\n    for subelem in list(elem):\n        data_dict[key][subelem.tag] = subelem.text\n\nprint(data_dict)\n\n# Output\n{'person': {'name': 'John', 'age': '27', 'hobbies': {'hobby': ['Movies', 'Photography']}}}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTransform the given XML data into a Python dictionary.\n\n### Input:\n<root>\n  <person>\n    <name>John</name>\n    <age>27</age>\n    <hobbies>\n      <hobby>Movies</hobby>\n      <hobby>Photography</hobby>\n    </hobbies>\n  </person>\n</root>\n\n### Output:\nimport xml.etree.ElementTree as et\nroot = et.fromstring('<root><person><name>John</name><age>27</age><hobbies><hobby>Movies</hobby><hobby>Photography</hobby></hobbies></person></root>')\n\ndata_dict = {}\n\nfor elem in list(root):\n    key = elem.tag\n    data_dict[key] = {}\n    for subelem in list(elem):\n        data_dict[key][subelem.tag] = subelem.text\n\nprint(data_dict)\n\n# Output\n{'person': {'name': 'John', 'age': '27', 'hobbies': {'hobby': ['Movies', 'Photography']}}}"
    },
    {
        "instruction": "Using recursion, write a Python program to find the Nth Fibonacci number.",
        "input": "",
        "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing recursion, write a Python program to find the Nth Fibonacci number.\n\n### Input:\n\n\n### Output:\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)"
    },
    {
        "instruction": "Compose a python program to compare the elements of two strings and return the longest shared substring",
        "input": "str1: 'thequickbrownfox',\nstr2: 'jumpedoverthelazydog'",
        "output": "def longestSharedSubstring(str1, str2): \n  \n    # Variables to store the current substring \n    currentSubstring = \"\" \n    longestSubstring = \"\" \n  \n    # Compare every element of both the strings \n    for i in range(len(str1)): \n        for j in range(len(str2)): \n  \n            # Move forward if the characters match \n            if (str1[i] == str2[j]): \n                currentSubstring += str1[i] \n  \n                # Update max substring if required \n                if (len(currentSubstring) > len(longestSubstring)): \n                    longestSubstring = currentSubstring \n  \n            else: \n                currentSubstring = \"\" \n  \n    return longestSubstring \n\nlongestSubstring = longestSharedSubstring('thequickbrownfox', 'jumpedoverthelazydog')\nprint(longestSubstring)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a python program to compare the elements of two strings and return the longest shared substring\n\n### Input:\nstr1: 'thequickbrownfox',\nstr2: 'jumpedoverthelazydog'\n\n### Output:\ndef longestSharedSubstring(str1, str2): \n  \n    # Variables to store the current substring \n    currentSubstring = \"\" \n    longestSubstring = \"\" \n  \n    # Compare every element of both the strings \n    for i in range(len(str1)): \n        for j in range(len(str2)): \n  \n            # Move forward if the characters match \n            if (str1[i] == str2[j]): \n                currentSubstring += str1[i] \n  \n                # Update max substring if required \n                if (len(currentSubstring) > len(longestSubstring)): \n                    longestSubstring = currentSubstring \n  \n            else: \n                currentSubstring = \"\" \n  \n    return longestSubstring \n\nlongestSubstring = longestSharedSubstring('thequickbrownfox', 'jumpedoverthelazydog')\nprint(longestSubstring)"
    },
    {
        "instruction": "Write a valid python expression to print string n times",
        "input": "",
        "output": "print(str * n)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a valid python expression to print string n times\n\n### Input:\n\n\n### Output:\nprint(str * n)"
    },
    {
        "instruction": "Create a function in Python to filter a list of numbers by a given criteria.",
        "input": "[2, 3, 4, 5, 6, 7], criteria: divisible by 3",
        "output": "# Filter a list with a given criteria\ndef filter_list(input_list, criteria):\n    filtered_list = []\n    for num in input_list:\n        if num % criteria == 0:\n            filtered_list.append(num)\n    return filtered_list\n\nresult = filter_list([2, 3, 4, 5, 6, 7], 3)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to filter a list of numbers by a given criteria.\n\n### Input:\n[2, 3, 4, 5, 6, 7], criteria: divisible by 3\n\n### Output:\n# Filter a list with a given criteria\ndef filter_list(input_list, criteria):\n    filtered_list = []\n    for num in input_list:\n        if num % criteria == 0:\n            filtered_list.append(num)\n    return filtered_list\n\nresult = filter_list([2, 3, 4, 5, 6, 7], 3)\nprint(result)"
    },
    {
        "instruction": "Create a class in Python that stores employee information such as name, salary, and years of experience.",
        "input": "",
        "output": "class Employee:\n  def __init__(self, name, salary, experience):\n    self.name = name\n    self.salary = salary\n    self.experience = experience\n\n  def display_details(self):\n    print(f'Name: {self.name}\\nSalary: {self.salary}\\nExperience: {self.experience}')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that stores employee information such as name, salary, and years of experience.\n\n### Input:\n\n\n### Output:\nclass Employee:\n  def __init__(self, name, salary, experience):\n    self.name = name\n    self.salary = salary\n    self.experience = experience\n\n  def display_details(self):\n    print(f'Name: {self.name}\\nSalary: {self.salary}\\nExperience: {self.experience}')"
    },
    {
        "instruction": "Construct a Python function to convert a string of text to uppercase.",
        "input": "Not applicable",
        "output": "def upper_string(str1):\n    upper_str = ''\n    for i in range(len(str1)):\n        if ord(str1[i]) in range(97, 123):\n            upper_str += chr(ord(str1[i]) - 32)\n        else:\n            upper_str += str1[i]\n    return upper_str",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python function to convert a string of text to uppercase.\n\n### Input:\nNot applicable\n\n### Output:\ndef upper_string(str1):\n    upper_str = ''\n    for i in range(len(str1)):\n        if ord(str1[i]) in range(97, 123):\n            upper_str += chr(ord(str1[i]) - 32)\n        else:\n            upper_str += str1[i]\n    return upper_str"
    },
    {
        "instruction": "Develop a class in Python to represent a 2D vector.",
        "input": "",
        "output": "class Vector2D:\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n  \n  def __add__(self, other):\n    return Vector2D(self.x + other.x, self.y + other.y)\n  \n  def __sub__(self, other):\n    return Vector2D(self.x - other.x, self.y - other.y)\n  \n  def __mul__(self, scalar):\n    return Vector2D(self.x * scalar, self.y * scalar)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a class in Python to represent a 2D vector.\n\n### Input:\n\n\n### Output:\nclass Vector2D:\n  def __init__(self, x, y):\n    self.x = x\n    self.y = y\n  \n  def __add__(self, other):\n    return Vector2D(self.x + other.x, self.y + other.y)\n  \n  def __sub__(self, other):\n    return Vector2D(self.x - other.x, self.y - other.y)\n  \n  def __mul__(self, scalar):\n    return Vector2D(self.x * scalar, self.y * scalar)"
    },
    {
        "instruction": "Write Python code to generate a random set of 10 IP addresses in the range of 192.168.1.0 to 192.168.1.255.",
        "input": "Not applicable",
        "output": "import random\n\nfor i in range(10):\n ip_address = \"192.168.1.\" + str(random.randrange(0, 255))\n print(ip_address)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to generate a random set of 10 IP addresses in the range of 192.168.1.0 to 192.168.1.255.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\nfor i in range(10):\n ip_address = \"192.168.1.\" + str(random.randrange(0, 255))\n print(ip_address)"
    },
    {
        "instruction": "Design a Python class to represent a book with title, author, publication year and number of pages.",
        "input": "",
        "output": "class Book:\n    def __init__(self, title, author, publication_year, number_of_pages):\n        self.title = title\n        self.author = author\n        self.publication_year = publication_year\n        self.number_of_pages = number_of_pages",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class to represent a book with title, author, publication year and number of pages.\n\n### Input:\n\n\n### Output:\nclass Book:\n    def __init__(self, title, author, publication_year, number_of_pages):\n        self.title = title\n        self.author = author\n        self.publication_year = publication_year\n        self.number_of_pages = number_of_pages"
    },
    {
        "instruction": "Create a loop using Python to print the numbers 1 to 10.",
        "input": "",
        "output": "for i in range(1,11):\n    print(i)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a loop using Python to print the numbers 1 to 10.\n\n### Input:\n\n\n### Output:\nfor i in range(1,11):\n    print(i)"
    },
    {
        "instruction": "Write a python script to estimate Pi using a Monte Carlo Simulation.",
        "input": "Not applicable.",
        "output": "import random\n \ndef main():\n # number of darts to throw\n n = 1000000\n   \n # number of darts that land within the circle\n inside = 0\n \n # use the current system time as the seed\n random.seed()\n \n for i in range(n):\n # generate a random point x between -1 and 1\n x = random.uniform(-1, 1)\n \n # generate a random point y between -1 and 1\n y = random.uniform(-1, 1)\n \n # check to see if it landed within the circle or outside\n if (x*x + y*y <= 1):\n inside +=1\n \n pi = 4 * inside/n\n \n print (\"Pi is roughly %f\" % pi)\n \nif __name__ == \"__main__\":\n main()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script to estimate Pi using a Monte Carlo Simulation.\n\n### Input:\nNot applicable.\n\n### Output:\nimport random\n \ndef main():\n # number of darts to throw\n n = 1000000\n   \n # number of darts that land within the circle\n inside = 0\n \n # use the current system time as the seed\n random.seed()\n \n for i in range(n):\n # generate a random point x between -1 and 1\n x = random.uniform(-1, 1)\n \n # generate a random point y between -1 and 1\n y = random.uniform(-1, 1)\n \n # check to see if it landed within the circle or outside\n if (x*x + y*y <= 1):\n inside +=1\n \n pi = 4 * inside/n\n \n print (\"Pi is roughly %f\" % pi)\n \nif __name__ == \"__main__\":\n main()"
    },
    {
        "instruction": "Create a script in Python to find the square root of a number.",
        "input": "float x = 81.0",
        "output": "import math\nx = 81.0\n# calculate the square root\nprint('The square root of %0.1f is %0.1f'%(x, math.sqrt(x)))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a script in Python to find the square root of a number.\n\n### Input:\nfloat x = 81.0\n\n### Output:\nimport math\nx = 81.0\n# calculate the square root\nprint('The square root of %0.1f is %0.1f'%(x, math.sqrt(x)))"
    },
    {
        "instruction": "Given two integers, write a Python function to find their greatest common divisor (GCD).",
        "input": "num1 = 24\nnum2 = 18",
        "output": "def find_gcd(num1, num2):\n    gcd = 1\n    while num2 != 0:\n        temp = num2\n        num2 = num1 % num2\n        num1 = temp\n        gcd = num1\n    return gcd",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two integers, write a Python function to find their greatest common divisor (GCD).\n\n### Input:\nnum1 = 24\nnum2 = 18\n\n### Output:\ndef find_gcd(num1, num2):\n    gcd = 1\n    while num2 != 0:\n        temp = num2\n        num2 = num1 % num2\n        num1 = temp\n        gcd = num1\n    return gcd"
    },
    {
        "instruction": "Write a function in Python that makes an API call to get the top ten trending tweets for a given hashtag.",
        "input": "#machinelearning",
        "output": "import tweepy\n\n# Authentication keys\nconsumer_key = 'xxxxxxxxxxxxxxxxxxxxx'\nconsumer_secret = 'xxxxxxxxxxxxxxxxxxxxx'\naccess_token = 'xxxxxxxxxxxxxxxxxxxxx'\naccess_token_secret = 'xxxxxxxxxxxxxxxxxxxxx'\n\n# Authentication\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\n# Initialization of the API\napi = tweepy.API(auth)\n\n# Get the top 10 trending tweets\ntrending_tweets = api.search(q=\"#machinelearning\", lang=\"en\", rpp=10, tweet_mode='extended')\n\nfor tweet in trending_tweets: \n    print(tweet.full_text)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that makes an API call to get the top ten trending tweets for a given hashtag.\n\n### Input:\n#machinelearning\n\n### Output:\nimport tweepy\n\n# Authentication keys\nconsumer_key = 'xxxxxxxxxxxxxxxxxxxxx'\nconsumer_secret = 'xxxxxxxxxxxxxxxxxxxxx'\naccess_token = 'xxxxxxxxxxxxxxxxxxxxx'\naccess_token_secret = 'xxxxxxxxxxxxxxxxxxxxx'\n\n# Authentication\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\n# Initialization of the API\napi = tweepy.API(auth)\n\n# Get the top 10 trending tweets\ntrending_tweets = api.search(q=\"#machinelearning\", lang=\"en\", rpp=10, tweet_mode='extended')\n\nfor tweet in trending_tweets: \n    print(tweet.full_text)"
    },
    {
        "instruction": "Create a Python program that randomly shuffles the values in an array",
        "input": "my_arr = [1,2,3,4,5]",
        "output": "import random\n\ndef shuffle(my_arr):\n    shuffled_arr = my_arr[:]\n    random.shuffle(shuffled_arr)\n    return shuffled_arr\n\nshuffled_arr = shuffle(my_arr)\nprint(shuffled_arr)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that randomly shuffles the values in an array\n\n### Input:\nmy_arr = [1,2,3,4,5]\n\n### Output:\nimport random\n\ndef shuffle(my_arr):\n    shuffled_arr = my_arr[:]\n    random.shuffle(shuffled_arr)\n    return shuffled_arr\n\nshuffled_arr = shuffle(my_arr)\nprint(shuffled_arr)"
    },
    {
        "instruction": "Develop an algorithm in Python to find the middle element of a given linked list.",
        "input": "",
        "output": "# Function to get the middle of the linked list \ndef getmiddle(head): \n    if(head == None): \n        return head \n  \n    slow_ptr = head \n    fast_ptr = head \n  \n    while(fast_ptr != None and fast_ptr.next != None): \n        slow_ptr = slow_ptr.next\n        fast_ptr = fast_ptr.next.next\n  \n    return slow_ptr",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to find the middle element of a given linked list.\n\n### Input:\n\n\n### Output:\n# Function to get the middle of the linked list \ndef getmiddle(head): \n    if(head == None): \n        return head \n  \n    slow_ptr = head \n    fast_ptr = head \n  \n    while(fast_ptr != None and fast_ptr.next != None): \n        slow_ptr = slow_ptr.next\n        fast_ptr = fast_ptr.next.next\n  \n    return slow_ptr"
    },
    {
        "instruction": "Translate the following pseudocode into Python code.",
        "input": "i = 0\nwhile i < 10\n    print i\n    i = i + 1",
        "output": "i = 0\nwhile i < 10:\n    print(i)\n    i += 1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTranslate the following pseudocode into Python code.\n\n### Input:\ni = 0\nwhile i < 10\n    print i\n    i = i + 1\n\n### Output:\ni = 0\nwhile i < 10:\n    print(i)\n    i += 1"
    },
    {
        "instruction": "Generate a loop in Python using a list of words and print out the length of each word.",
        "input": "A list of strings [\"apple\", \"pie\", \"is\", \"delicious\"]",
        "output": "words = [\"apple\", \"pie\", \"is\", \"delicious\"]\n\nfor word in words:\n print(len(word))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a loop in Python using a list of words and print out the length of each word.\n\n### Input:\nA list of strings [\"apple\", \"pie\", \"is\", \"delicious\"]\n\n### Output:\nwords = [\"apple\", \"pie\", \"is\", \"delicious\"]\n\nfor word in words:\n print(len(word))"
    },
    {
        "instruction": "Create a Python program to search a web page for a given keyword and return a list of URLs.",
        "input": "Keyword: \"code generation\"",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\ndef search(keyword):\n urls = []\n url = \"https://www.example.com/search?q=\" + keyword\n response = requests.get(url)\n soup = BeautifulSoup(response.text, 'html.parser')\n results = soup.find_all('a')\n for result in results:\n  if result.has_attr('href'):\n   urls.append(result['href'])\n return urls\n\nurls = search(\"code generation\")\nprint(urls)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to search a web page for a given keyword and return a list of URLs.\n\n### Input:\nKeyword: \"code generation\"\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef search(keyword):\n urls = []\n url = \"https://www.example.com/search?q=\" + keyword\n response = requests.get(url)\n soup = BeautifulSoup(response.text, 'html.parser')\n results = soup.find_all('a')\n for result in results:\n  if result.has_attr('href'):\n   urls.append(result['href'])\n return urls\n\nurls = search(\"code generation\")\nprint(urls)"
    },
    {
        "instruction": "Write a Python program to find the number of days in a month using a given year and month.",
        "input": "",
        "output": "import calendar\n\ndef days_in_month(year, month):\n    return calendar.monthrange(year, month)[1]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the number of days in a month using a given year and month.\n\n### Input:\n\n\n### Output:\nimport calendar\n\ndef days_in_month(year, month):\n    return calendar.monthrange(year, month)[1]"
    },
    {
        "instruction": "Modify this Python program to print the greatest common divisor of two numbers.",
        "input": "num1 = 5, num2 = 6",
        "output": "def gcd(x, y):\n    while y != 0:\n        (x, y) = (y, x % y)\n    return x\n\nnum1 = 5\nnum2 = 6\n\nprint(\"GCD is:\", gcd(num1, num2))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify this Python program to print the greatest common divisor of two numbers.\n\n### Input:\nnum1 = 5, num2 = 6\n\n### Output:\ndef gcd(x, y):\n    while y != 0:\n        (x, y) = (y, x % y)\n    return x\n\nnum1 = 5\nnum2 = 6\n\nprint(\"GCD is:\", gcd(num1, num2))"
    },
    {
        "instruction": "Write a web socket server in Python that publishes new events with an associated user id.",
        "input": "Example data for the events: \n[\n {\n \"userId\": \"897jn43\",\n \"data\": {\n \"eventName\": \"tweet\",\n \"twId\": \"4235345\"\n }\n },\n {\n \"userId\": \"822nk63\",\n \"data\": {\n \"eventName\": \"view\",\n \"viewId\": \"6791\"\n }\n }\n]",
        "output": "import asyncio\nimport websockets\n\nevents = []\n\nasync def handle_message(websocket):\n while True:\n data = await websocket.recv()\n events.append(data)\n\nasync def consumer_handler(websocket, path):\n await handle_message(websocket)\n\nstart_server = websockets.serve(consumer_handler, \"localhost\", 8765)\n\nasyncio.get_event_loop().run_until_complete(start_server)\nasyncio.get_event_loop().run_forever()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a web socket server in Python that publishes new events with an associated user id.\n\n### Input:\nExample data for the events: \n[\n {\n \"userId\": \"897jn43\",\n \"data\": {\n \"eventName\": \"tweet\",\n \"twId\": \"4235345\"\n }\n },\n {\n \"userId\": \"822nk63\",\n \"data\": {\n \"eventName\": \"view\",\n \"viewId\": \"6791\"\n }\n }\n]\n\n### Output:\nimport asyncio\nimport websockets\n\nevents = []\n\nasync def handle_message(websocket):\n while True:\n data = await websocket.recv()\n events.append(data)\n\nasync def consumer_handler(websocket, path):\n await handle_message(websocket)\n\nstart_server = websockets.serve(consumer_handler, \"localhost\", 8765)\n\nasyncio.get_event_loop().run_until_complete(start_server)\nasyncio.get_event_loop().run_forever()"
    },
    {
        "instruction": "Create a Python program to filter an array of numbers based on certain criteria.",
        "input": "[1,2,3,4,5,6,7,8,9,10], Criteria: Greater than 5",
        "output": "def filter_numbers(numbers, criteria):\n    filtered_numbers = []\n    for number in numbers:\n        if (criteria == 'greater than') and (number > 5):\n            filtered_numbers.append(number)\n    return filtered_numbers\n \nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfiltered_numbers = filter_numbers(numbers, 'greater than')\nprint(filtered_numbers) #[6, 7, 8, 9, 10]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to filter an array of numbers based on certain criteria.\n\n### Input:\n[1,2,3,4,5,6,7,8,9,10], Criteria: Greater than 5\n\n### Output:\ndef filter_numbers(numbers, criteria):\n    filtered_numbers = []\n    for number in numbers:\n        if (criteria == 'greater than') and (number > 5):\n            filtered_numbers.append(number)\n    return filtered_numbers\n \nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nfiltered_numbers = filter_numbers(numbers, 'greater than')\nprint(filtered_numbers) #[6, 7, 8, 9, 10]"
    },
    {
        "instruction": "Create a class in Python that simulates a student's grades in a course.",
        "input": "",
        "output": "class Student:\n    def __init__(self, course_name, grades):\n        self.course_name = course_name\n        self.grades = grades\n        \n    def get_grade(self):\n        return sum(self.grades) / len(self.grades)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that simulates a student's grades in a course.\n\n### Input:\n\n\n### Output:\nclass Student:\n    def __init__(self, course_name, grades):\n        self.course_name = course_name\n        self.grades = grades\n        \n    def get_grade(self):\n        return sum(self.grades) / len(self.grades)"
    },
    {
        "instruction": "Create a simple Python program that takes as parameters two text strings and calculates the Levenshtein distance.",
        "input": "For instance, \"kitten\" and \"sitting\"",
        "output": "def levenshtein_distance(s1: str, s2: str):\n    m = len(s1)\n    n = len(s2)\n \n    table = dict()\n    for i in range(m+1):\n        table[i, 0] = i\n    for j in range(n+1):\n        table[0, j] = j\n \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s1[i-1] == s2[j-1]:\n                cost = 0\n            else: \n                cost = 1\n            table[i, j] = min(table[i-1, j] + 1, \n                    table[i, j-1] + 1, \n                    table[i-1, j-1] + cost)\n \n    return table[m, n]\n \nprint(levenshtein_distance('kitten', 'sitting'))\n\nOutput: 3",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple Python program that takes as parameters two text strings and calculates the Levenshtein distance.\n\n### Input:\nFor instance, \"kitten\" and \"sitting\"\n\n### Output:\ndef levenshtein_distance(s1: str, s2: str):\n    m = len(s1)\n    n = len(s2)\n \n    table = dict()\n    for i in range(m+1):\n        table[i, 0] = i\n    for j in range(n+1):\n        table[0, j] = j\n \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s1[i-1] == s2[j-1]:\n                cost = 0\n            else: \n                cost = 1\n            table[i, j] = min(table[i-1, j] + 1, \n                    table[i, j-1] + 1, \n                    table[i-1, j-1] + cost)\n \n    return table[m, n]\n \nprint(levenshtein_distance('kitten', 'sitting'))\n\nOutput: 3"
    },
    {
        "instruction": "Create a Python script to clean text data. The script should remove punctuation and white space and convert all of the words to lower case.",
        "input": "Not applicable",
        "output": "import re\n\ndef clean_text(text):\n cleaned_text = re.sub(r'[^\\w\\s]','', text)\n cleaned_text = cleaned_text.lower().strip()\n return cleaned_text\n \n text = 'This is a sample sentence.'\n cleaned_text = clean_text(text)\n print(cleaned_text)\n\n# Output: thisisasamplesentence",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to clean text data. The script should remove punctuation and white space and convert all of the words to lower case.\n\n### Input:\nNot applicable\n\n### Output:\nimport re\n\ndef clean_text(text):\n cleaned_text = re.sub(r'[^\\w\\s]','', text)\n cleaned_text = cleaned_text.lower().strip()\n return cleaned_text\n \n text = 'This is a sample sentence.'\n cleaned_text = clean_text(text)\n print(cleaned_text)\n\n# Output: thisisasamplesentence"
    },
    {
        "instruction": "Given a string of text, write a function in Python that prints out every word in the string.",
        "input": "The quick brown fox",
        "output": "def printWords(text):\n words = text.split()\n for word in words:\n print(word)\n\nprintWords(\"The quick brown fox\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a string of text, write a function in Python that prints out every word in the string.\n\n### Input:\nThe quick brown fox\n\n### Output:\ndef printWords(text):\n words = text.split()\n for word in words:\n print(word)\n\nprintWords(\"The quick brown fox\")"
    },
    {
        "instruction": "Specify a Python function that takes a ``URL`` address and returns the exact content found at that link.",
        "input": "",
        "output": "def getUrlContent(url):\n    response = requests.get(url)\n    return response.content.decode('utf-8')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSpecify a Python function that takes a ``URL`` address and returns the exact content found at that link.\n\n### Input:\n\n\n### Output:\ndef getUrlContent(url):\n    response = requests.get(url)\n    return response.content.decode('utf-8')"
    },
    {
        "instruction": "Write a Python program to detect if two strings are anagrams or not.",
        "input": "",
        "output": "def is_anagram(word1, word2):\n    word1 = word1.replace(' ', '').lower()\n    word2 = word2.replace(' ', '').lower()\n\n    if len(word1) != len(word2):\n        return False\n\n    count = {}\n    for letter in word1:\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n\n    for letter in word2:\n        if letter in count:\n            count[letter] -= 1\n        else:\n            count[letter] = 1\n\n    for k in count:\n        if count[k] != 0:\n            return False\n\n    return True",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to detect if two strings are anagrams or not.\n\n### Input:\n\n\n### Output:\ndef is_anagram(word1, word2):\n    word1 = word1.replace(' ', '').lower()\n    word2 = word2.replace(' ', '').lower()\n\n    if len(word1) != len(word2):\n        return False\n\n    count = {}\n    for letter in word1:\n        if letter in count:\n            count[letter] += 1\n        else:\n            count[letter] = 1\n\n    for letter in word2:\n        if letter in count:\n            count[letter] -= 1\n        else:\n            count[letter] = 1\n\n    for k in count:\n        if count[k] != 0:\n            return False\n\n    return True"
    },
    {
        "instruction": "Create a random forest classifier in python to predict whether a given customer will buy a product or not.",
        "input": "",
        "output": "#import necessary libraries\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\n#load data\ndata = pd.read_csv('data.csv')\n\n#split data into features and labels\nX = data.iloc[:, :-1]\ny = data.iloc[:, -1]\n\n#train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n#initializing the classifier\nclassifier = RandomForestClassifier(n_estimators=20, random_state=0)\n\n# training the classifier\nclassifier.fit(X_train, y_train)\n\n# predicting the test set results\ny_pred = classifier.predict(X_test)\n\n# evaluating the classifier\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a random forest classifier in python to predict whether a given customer will buy a product or not.\n\n### Input:\n\n\n### Output:\n#import necessary libraries\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\n#load data\ndata = pd.read_csv('data.csv')\n\n#split data into features and labels\nX = data.iloc[:, :-1]\ny = data.iloc[:, -1]\n\n#train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n#initializing the classifier\nclassifier = RandomForestClassifier(n_estimators=20, random_state=0)\n\n# training the classifier\nclassifier.fit(X_train, y_train)\n\n# predicting the test set results\ny_pred = classifier.predict(X_test)\n\n# evaluating the classifier\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))"
    },
    {
        "instruction": "Write a web scraper in Python that scrapes a website for product prices. The scraper should extract the product name and price for each product listed on the website and store the data in a dictionary.",
        "input": "Not applicable",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"http://website.com/products/\"\n\ndef scrape(url):\n data = {'name': [], 'price': []}\n resp = requests.get(url)\n soup = BeautifulSoup(resp.text, 'html.parser')\n \n for product in soup.select('div.product'):\n data['name'].append(product.select_one('p.name').text)\n data['price'].append(product.select_one('p.price').text)\n \n return data\n\ndata = scrape(url)\n\nprint(data)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a web scraper in Python that scrapes a website for product prices. The scraper should extract the product name and price for each product listed on the website and store the data in a dictionary.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = \"http://website.com/products/\"\n\ndef scrape(url):\n data = {'name': [], 'price': []}\n resp = requests.get(url)\n soup = BeautifulSoup(resp.text, 'html.parser')\n \n for product in soup.select('div.product'):\n data['name'].append(product.select_one('p.name').text)\n data['price'].append(product.select_one('p.price').text)\n \n return data\n\ndata = scrape(url)\n\nprint(data)"
    },
    {
        "instruction": "How would you format a JSON string using Python?",
        "input": "\"{\\\"name\\\":\\\"John Doe\\\",\\\"age\\\":30}\"",
        "output": "import json\n\n# Get json string\njson_string = \"{\\\"name\\\":\\\"John Doe\\\",\\\"age\\\":30}\"\n\n# Parse the json string\nparsed_string = json.loads(json_string)\n\n# Pretty print the parsed string\npretty_string = json.dumps(parsed_string, indent=4, sort_keys=True)\n\n# Show output\nprint(pretty_string)\n# Output:\n{\n    \"name\": \"John Doe\",\n    \"age\": 30\n}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow would you format a JSON string using Python?\n\n### Input:\n\"{\\\"name\\\":\\\"John Doe\\\",\\\"age\\\":30}\"\n\n### Output:\nimport json\n\n# Get json string\njson_string = \"{\\\"name\\\":\\\"John Doe\\\",\\\"age\\\":30}\"\n\n# Parse the json string\nparsed_string = json.loads(json_string)\n\n# Pretty print the parsed string\npretty_string = json.dumps(parsed_string, indent=4, sort_keys=True)\n\n# Show output\nprint(pretty_string)\n# Output:\n{\n    \"name\": \"John Doe\",\n    \"age\": 30\n}"
    },
    {
        "instruction": "Write a Python program to arrange the following list in descending order",
        "input": "[4,7,1,10,3]",
        "output": "arr = [4,7,1,10,3]\n\narr.sort(reverse=True)\n\nprint(arr)\n# Output: [10, 7, 4, 3, 1]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to arrange the following list in descending order\n\n### Input:\n[4,7,1,10,3]\n\n### Output:\narr = [4,7,1,10,3]\n\narr.sort(reverse=True)\n\nprint(arr)\n# Output: [10, 7, 4, 3, 1]"
    },
    {
        "instruction": "Generate a Python code to automatically add an item to the beginning of a given array.",
        "input": "arr = [1,2,3,4,5]\nnew_item = 7",
        "output": "def add_item_to_beginning(arr, new_item):\n    return [new_item] + arr",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code to automatically add an item to the beginning of a given array.\n\n### Input:\narr = [1,2,3,4,5]\nnew_item = 7\n\n### Output:\ndef add_item_to_beginning(arr, new_item):\n    return [new_item] + arr"
    },
    {
        "instruction": "Design a command-line interface in Python to accept user input",
        "input": "",
        "output": "import sys\n\n# collect the user's input\nuser_input = input('Enter your command: ')\n\n# process the user's input and execute the corresponding command\nif user_input == 'exit':\n    sys.exit()\nelif user_input == 'help':\n    print('This is a helpful message.')\nelse:\n    print('Command not recognized, try again.')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a command-line interface in Python to accept user input\n\n### Input:\n\n\n### Output:\nimport sys\n\n# collect the user's input\nuser_input = input('Enter your command: ')\n\n# process the user's input and execute the corresponding command\nif user_input == 'exit':\n    sys.exit()\nelif user_input == 'help':\n    print('This is a helpful message.')\nelse:\n    print('Command not recognized, try again.')"
    },
    {
        "instruction": "Create a Python program that receives a list of numbers, and generates two new lists: one containing the even elements from the original list, and one containing the odd elements.",
        "input": "[1, 2, 3, 4, 5, 6]",
        "output": "def find_even_odd(nums):\n  even_list = []\n  odd_list = []\n  for num in nums:\n    if num % 2 == 0:\n      even_list.append(num)\n    else:\n      odd_list.append(num)\n  \n  return even_list, odd_list\n  \nprint(find_even_odd([1, 2, 3, 4, 5, 6]))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that receives a list of numbers, and generates two new lists: one containing the even elements from the original list, and one containing the odd elements.\n\n### Input:\n[1, 2, 3, 4, 5, 6]\n\n### Output:\ndef find_even_odd(nums):\n  even_list = []\n  odd_list = []\n  for num in nums:\n    if num % 2 == 0:\n      even_list.append(num)\n    else:\n      odd_list.append(num)\n  \n  return even_list, odd_list\n  \nprint(find_even_odd([1, 2, 3, 4, 5, 6]))"
    },
    {
        "instruction": "Build a regression model in Python that predicts the stock price for a given day.",
        "input": "Historical stock prices, open, close, high and low, for the past 30 days.",
        "output": "# Import Libraries \nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n# Read in the data\ndata = pd.read_csv('stock_data.csv')\nopen_prices = data['open']\nclose_prices = data['close']\nhigh_prices = data['high']\nlow_prices = data['low']\n\n# Set X and y \nX = np.array(open_prices).reshape((-1, 1))\ny = close_prices\n\n# Create and fit model\nmodel = LinearRegression().fit(X, y)\n\n# Make predictions\npredicted_prices = model.predict(X)\n\n# Plot the results\nplt.scatter(X, y)\nplt.plot(X, predicted_prices, color='red', linewidth=2)\nplt.show()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a regression model in Python that predicts the stock price for a given day.\n\n### Input:\nHistorical stock prices, open, close, high and low, for the past 30 days.\n\n### Output:\n# Import Libraries \nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\n# Read in the data\ndata = pd.read_csv('stock_data.csv')\nopen_prices = data['open']\nclose_prices = data['close']\nhigh_prices = data['high']\nlow_prices = data['low']\n\n# Set X and y \nX = np.array(open_prices).reshape((-1, 1))\ny = close_prices\n\n# Create and fit model\nmodel = LinearRegression().fit(X, y)\n\n# Make predictions\npredicted_prices = model.predict(X)\n\n# Plot the results\nplt.scatter(X, y)\nplt.plot(X, predicted_prices, color='red', linewidth=2)\nplt.show()"
    },
    {
        "instruction": "Create a Python program that encrypts string input using the Caesar Cipher.",
        "input": "String = \"Hello, World!\";",
        "output": "def caesarCipherEncrypt(str, key): \n    encrypted_str = \"\" \n  \n    # traverse text \n    for i in range(len(str)): \n        char = str[i] \n  \n        # Encrypt uppercase characters \n        if (char.isupper()): \n            encrypted_str += chr((ord(char) + key-65) % 26 + 65) \n  \n        # Encrypt lowercase characters \n        else: \n            encrypted_str += chr((ord(char) + key - 97) % 26 + 97) \n  \n    return encrypted_str \n  \n# Driver code \nresult = caesarCipherEncrypt(\"Hello, World!\", 5) \nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that encrypts string input using the Caesar Cipher.\n\n### Input:\nString = \"Hello, World!\";\n\n### Output:\ndef caesarCipherEncrypt(str, key): \n    encrypted_str = \"\" \n  \n    # traverse text \n    for i in range(len(str)): \n        char = str[i] \n  \n        # Encrypt uppercase characters \n        if (char.isupper()): \n            encrypted_str += chr((ord(char) + key-65) % 26 + 65) \n  \n        # Encrypt lowercase characters \n        else: \n            encrypted_str += chr((ord(char) + key - 97) % 26 + 97) \n  \n    return encrypted_str \n  \n# Driver code \nresult = caesarCipherEncrypt(\"Hello, World!\", 5) \nprint(result)"
    },
    {
        "instruction": "Write a small program in Python to print the total sum of first n even numbers.",
        "input": "",
        "output": "n = int(input(\"Enter a number: \"))\n\ntotal = 0\nfor i in range(2, (2*n)+1, 2):\n    total += i\n    \nprint(\"The sum of first\", n, \"even numbers is\", total)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a small program in Python to print the total sum of first n even numbers.\n\n### Input:\n\n\n### Output:\nn = int(input(\"Enter a number: \"))\n\ntotal = 0\nfor i in range(2, (2*n)+1, 2):\n    total += i\n    \nprint(\"The sum of first\", n, \"even numbers is\", total)"
    },
    {
        "instruction": "Design a function to calculate the hamming distance of two strings in Python.",
        "input": "str1 = \"karolin\"\nstr2 = \"kathrin\"",
        "output": "def hamming_distance(str1, str2):\n    \"\"\"Calculates the Hamming distance between two strings.\n    Arguments:\n        str1 (str): The first string.\n        str2 (str): The second string.\n    Returns:\n        (int): The Hamming distance.\n    \"\"\"\n    if len(str1) != len(str2):\n        raise ValueError(\"Strings must have the same length\")\n\n    distance = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            distance += 1\n            \n    return distance",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function to calculate the hamming distance of two strings in Python.\n\n### Input:\nstr1 = \"karolin\"\nstr2 = \"kathrin\"\n\n### Output:\ndef hamming_distance(str1, str2):\n    \"\"\"Calculates the Hamming distance between two strings.\n    Arguments:\n        str1 (str): The first string.\n        str2 (str): The second string.\n    Returns:\n        (int): The Hamming distance.\n    \"\"\"\n    if len(str1) != len(str2):\n        raise ValueError(\"Strings must have the same length\")\n\n    distance = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            distance += 1\n            \n    return distance"
    },
    {
        "instruction": "Write a data structure class in Python to store an array of characters.",
        "input": "",
        "output": "class Array(object):\n    def __init__(self, capacity = 10):\n        self.capacity = capacity\n        self.items = [None] * self.capacity\n\n    def add(self, item):\n        if len(self.items) >= self.capacity:\n            self.resize()\n\n        self.items[len(self.items)] = item\n        self.size += 1\n\n    def resize(self):\n        self.capacity *= 2\n        new_items = [None] * self.capacity\n        for i in range(len(self.items)):\n            new_items[i] = self.items[i]\n        self.items = new_items",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a data structure class in Python to store an array of characters.\n\n### Input:\n\n\n### Output:\nclass Array(object):\n    def __init__(self, capacity = 10):\n        self.capacity = capacity\n        self.items = [None] * self.capacity\n\n    def add(self, item):\n        if len(self.items) >= self.capacity:\n            self.resize()\n\n        self.items[len(self.items)] = item\n        self.size += 1\n\n    def resize(self):\n        self.capacity *= 2\n        new_items = [None] * self.capacity\n        for i in range(len(self.items)):\n            new_items[i] = self.items[i]\n        self.items = new_items"
    },
    {
        "instruction": "Design a Python function that rearranges the elements of a given array",
        "input": "[1, 2, 3, 4, 5]",
        "output": "def rearrange_arr(arr): \n    arr.sort(reverse = True) \n    return arr",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python function that rearranges the elements of a given array\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef rearrange_arr(arr): \n    arr.sort(reverse = True) \n    return arr"
    },
    {
        "instruction": "Build a Python program to edit a string",
        "input": "Replace all spaces in the string \"Hello World\" with undescores.",
        "output": "def replace_spaces_with_underscore(string):\n    return string.replace(\" \", \"_\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python program to edit a string\n\n### Input:\nReplace all spaces in the string \"Hello World\" with undescores.\n\n### Output:\ndef replace_spaces_with_underscore(string):\n    return string.replace(\" \", \"_\")"
    },
    {
        "instruction": "Identify the data type of the following input and provide a code to convert it to an integer in Python.",
        "input": "\"123\"",
        "output": "input_type = type(\"123\") # str\n\nconverted_int = int(\"123\") # 123",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIdentify the data type of the following input and provide a code to convert it to an integer in Python.\n\n### Input:\n\"123\"\n\n### Output:\ninput_type = type(\"123\") # str\n\nconverted_int = int(\"123\") # 123"
    },
    {
        "instruction": "Design a Python program to find the minimum difference between any two elements in a given collection.",
        "input": "arr = [2, 9, 6, 5, 4, 9, 8]",
        "output": "def minimumAbsDifference(arr):\n    arr.sort()\n    min_diff = float('inf')\n    \n    for i in range(1, len(arr)): \n        diff = arr[i] - arr[i - 1]\n        min_diff = min(min_diff, diff)\n    \n    return min_diff \n\narr = [2, 9, 6, 5, 4, 9, 8]\nmin_diff = minimumAbsDifference(arr)\nprint(min_diff)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to find the minimum difference between any two elements in a given collection.\n\n### Input:\narr = [2, 9, 6, 5, 4, 9, 8]\n\n### Output:\ndef minimumAbsDifference(arr):\n    arr.sort()\n    min_diff = float('inf')\n    \n    for i in range(1, len(arr)): \n        diff = arr[i] - arr[i - 1]\n        min_diff = min(min_diff, diff)\n    \n    return min_diff \n\narr = [2, 9, 6, 5, 4, 9, 8]\nmin_diff = minimumAbsDifference(arr)\nprint(min_diff)"
    },
    {
        "instruction": "Construct a function in Python that takes a string as input, and returns a list of the ten most frequent words in the string.",
        "input": "String: \"Hello World! This is a great day to learn Python and code some beautiful solutions!\"",
        "output": "def most_frequent_words(string):\n    '''\n    Function to find the ten most frequent words in a given string\n    \n    Parameters\n    string: string\n    \n    Returns\n    list of the ten most frequent words\n    '''\n    string = string.lower()\n    words = string.split()\n    word_frequency = {}\n    # populate the word_frequency dictionary\n    for word in words:\n        if word in word_frequency.keys():\n            word_frequency[word] += 1\n        else:\n            word_frequency[word] = 1\n    # sort the dictionary in descending order by frequency\n    sorted_words = sorted(word_frequency.items(), key=lambda kv: kv[1], reverse=True)\n    top_ten = sorted_words[:10]\n    return [word[0] for word in top_ten]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function in Python that takes a string as input, and returns a list of the ten most frequent words in the string.\n\n### Input:\nString: \"Hello World! This is a great day to learn Python and code some beautiful solutions!\"\n\n### Output:\ndef most_frequent_words(string):\n    '''\n    Function to find the ten most frequent words in a given string\n    \n    Parameters\n    string: string\n    \n    Returns\n    list of the ten most frequent words\n    '''\n    string = string.lower()\n    words = string.split()\n    word_frequency = {}\n    # populate the word_frequency dictionary\n    for word in words:\n        if word in word_frequency.keys():\n            word_frequency[word] += 1\n        else:\n            word_frequency[word] = 1\n    # sort the dictionary in descending order by frequency\n    sorted_words = sorted(word_frequency.items(), key=lambda kv: kv[1], reverse=True)\n    top_ten = sorted_words[:10]\n    return [word[0] for word in top_ten]"
    },
    {
        "instruction": "Create a Python program to convert a list of words into its corresponding abbreviations.",
        "input": "[\"Hello\",\"World\",\"Amazing\"]",
        "output": "def word_abbreviations(words):\n abbreviations = []\n for word in words:\n  abbreviations.append(word[0].upper() + str(len(word)-2) + word[-1].upper())\n return abbreviations\n\nlist_of_words = [\"Hello\",\"World\",\"Amazing\"]\nprint(word_abbreviations(list_of_words))\n\nOutput: ['H4o', 'W4d', 'A5g']",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to convert a list of words into its corresponding abbreviations.\n\n### Input:\n[\"Hello\",\"World\",\"Amazing\"]\n\n### Output:\ndef word_abbreviations(words):\n abbreviations = []\n for word in words:\n  abbreviations.append(word[0].upper() + str(len(word)-2) + word[-1].upper())\n return abbreviations\n\nlist_of_words = [\"Hello\",\"World\",\"Amazing\"]\nprint(word_abbreviations(list_of_words))\n\nOutput: ['H4o', 'W4d', 'A5g']"
    },
    {
        "instruction": "Solve the following problem using python",
        "input": "Given a list of strings, return a list of string where each string is replaced by its length",
        "output": "def replace_by_length(list_of_strings):\n    final_list = []\n    for string in list_of_strings:\n        final_list.append(len(string))\n    return final_list\n\nif __name__ == \"__main__\":\n    list_of_strings = [\"hello\", \"world\", \"coding\"]\n    print(replace_by_length(list_of_strings))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSolve the following problem using python\n\n### Input:\nGiven a list of strings, return a list of string where each string is replaced by its length\n\n### Output:\ndef replace_by_length(list_of_strings):\n    final_list = []\n    for string in list_of_strings:\n        final_list.append(len(string))\n    return final_list\n\nif __name__ == \"__main__\":\n    list_of_strings = [\"hello\", \"world\", \"coding\"]\n    print(replace_by_length(list_of_strings))"
    },
    {
        "instruction": "Generate Python code to tokenize the given text.",
        "input": "Text: This is a sentence containing words",
        "output": "import re\n\ndef tokenize_text(text):\n    #Split the string into words on whitespace\n    words = re.split(r'\\s', text)\n    #Punctuation patterns\n    punctuation = re.compile(r'[.,!?;:]')\n    #Create tokens\n    tokens = [word.strip(punctuation.pattern) for word in words]\n    #Return the list of tokens\n    return tokens",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to tokenize the given text.\n\n### Input:\nText: This is a sentence containing words\n\n### Output:\nimport re\n\ndef tokenize_text(text):\n    #Split the string into words on whitespace\n    words = re.split(r'\\s', text)\n    #Punctuation patterns\n    punctuation = re.compile(r'[.,!?;:]')\n    #Create tokens\n    tokens = [word.strip(punctuation.pattern) for word in words]\n    #Return the list of tokens\n    return tokens"
    },
    {
        "instruction": "Build a custom container in Google Cloud Platform (GCP) to host a small-scale web application.",
        "input": "Not applicable",
        "output": "# Install Docker\nsudo apt-get update\nsudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg-agent \\\n    software-properties-common\n    \ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\nsudo add-apt-repository \\\n   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable\"\n\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io\n\n# Create a docker image\ndocker build -t myproject:latest .\n\n# Push the docker image to GCP\ngcloud auth configure-docker\ndocker tag myproject:latest gcr.io/[PROJECT-ID]/[IMAGE]\ndocker push gcr.io/[PROJECT-ID]/[IMAGE]\n\n# Provision a Compute instance\ngcloud compute instances create my-instance \\\n    --boot-disk-size 50GB \\\n    --image-family ubuntu-1804-lts \\\n    --image-project ubuntu-os-cloud \\\n    --machine-type g1-small \\\n    --tags http-server \\\n    --metadata-from-file startup-script=gnupg-agent.st\n\n# Create a managed instance group\ngcloud compute instance-groups managed create my-group \\\n    --zone us-central1-a \\\n    --base-instance-name my-group \\\n    --template my-template \\\n    --size 1\n\n# Create an instance template\ngcloud compute instance-templates create my-template \\\n    --machine-type g1-small \\\n    --network my-net \\\n    --image-family ubuntu-bionic \\\n    --image-project ubuntu-os-cloud \\\n    --metadata-from-file startup-script=startup-script.sh\n\n# Download startup script\nwget https://raw.githubusercontent.com/GoogleCloudPlatform/python-docs-samples/master/container_engine/startup-script.sh",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a custom container in Google Cloud Platform (GCP) to host a small-scale web application.\n\n### Input:\nNot applicable\n\n### Output:\n# Install Docker\nsudo apt-get update\nsudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg-agent \\\n    software-properties-common\n    \ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\nsudo add-apt-repository \\\n   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   $(lsb_release -cs) \\\n   stable\"\n\nsudo apt-get update\nsudo apt-get install docker-ce docker-ce-cli containerd.io\n\n# Create a docker image\ndocker build -t myproject:latest .\n\n# Push the docker image to GCP\ngcloud auth configure-docker\ndocker tag myproject:latest gcr.io/[PROJECT-ID]/[IMAGE]\ndocker push gcr.io/[PROJECT-ID]/[IMAGE]\n\n# Provision a Compute instance\ngcloud compute instances create my-instance \\\n    --boot-disk-size 50GB \\\n    --image-family ubuntu-1804-lts \\\n    --image-project ubuntu-os-cloud \\\n    --machine-type g1-small \\\n    --tags http-server \\\n    --metadata-from-file startup-script=gnupg-agent.st\n\n# Create a managed instance group\ngcloud compute instance-groups managed create my-group \\\n    --zone us-central1-a \\\n    --base-instance-name my-group \\\n    --template my-template \\\n    --size 1\n\n# Create an instance template\ngcloud compute instance-templates create my-template \\\n    --machine-type g1-small \\\n    --network my-net \\\n    --image-family ubuntu-bionic \\\n    --image-project ubuntu-os-cloud \\\n    --metadata-from-file startup-script=startup-script.sh\n\n# Download startup script\nwget https://raw.githubusercontent.com/GoogleCloudPlatform/python-docs-samples/master/container_engine/startup-script.sh"
    },
    {
        "instruction": "Create a program in Python to split a string into an array based on a given delimiter.",
        "input": "String: Hello,World\nDelimiter: ,",
        "output": "def split_string(s, delimiter): \n return s.split(delimiter)\n\nstring = 'Hello,World'\ndelimiter = ','\n\nresult = split_string(string, delimiter)\n\n# Outputs ['Hello', 'World']",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to split a string into an array based on a given delimiter.\n\n### Input:\nString: Hello,World\nDelimiter: ,\n\n### Output:\ndef split_string(s, delimiter): \n return s.split(delimiter)\n\nstring = 'Hello,World'\ndelimiter = ','\n\nresult = split_string(string, delimiter)\n\n# Outputs ['Hello', 'World']"
    },
    {
        "instruction": "Create a Python program to filter a list of numbers. The program should take as input a list of numbers and a filter function, and it should return a new list of numbers that are the result of applying the filter function to each element of the input list.",
        "input": "filter_function = lambda x: x % 2 == 0\nlist_numbers = [1,2,3,4,5,6,7,8,9,10]",
        "output": "def filter_list(filter_function, list_numbers):\n filtered_list = []\n\n for item in list_numbers:\n if filter_function(item):\n filtered_list.append(item)\n\n return filtered_list\n\nif __name__ == \"__main__\":\n filter_function = lambda x: x % 2 == 0\n list_numbers = [1,2,3,4,5,6,7,8,9,10]\n filtered_list = filter_list(filter_function, list_numbers)\n print(filtered_list)\n\nOutput:\n[2, 4, 6, 8, 10]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to filter a list of numbers. The program should take as input a list of numbers and a filter function, and it should return a new list of numbers that are the result of applying the filter function to each element of the input list.\n\n### Input:\nfilter_function = lambda x: x % 2 == 0\nlist_numbers = [1,2,3,4,5,6,7,8,9,10]\n\n### Output:\ndef filter_list(filter_function, list_numbers):\n filtered_list = []\n\n for item in list_numbers:\n if filter_function(item):\n filtered_list.append(item)\n\n return filtered_list\n\nif __name__ == \"__main__\":\n filter_function = lambda x: x % 2 == 0\n list_numbers = [1,2,3,4,5,6,7,8,9,10]\n filtered_list = filter_list(filter_function, list_numbers)\n print(filtered_list)\n\nOutput:\n[2, 4, 6, 8, 10]"
    },
    {
        "instruction": "Write a python program to repeatedly ask the user for a string and print the number of vowels in the string.",
        "input": "Example string: hello",
        "output": "while True:\n    s = input(\"Enter a string: \")\n    count = 0\n    for i in s:\n        if(i=='a' or i=='e' or i=='i' or i=='o' or i=='u'):\n            count+=1\n    print(\"The number of vowels in the string:\", count)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to repeatedly ask the user for a string and print the number of vowels in the string.\n\n### Input:\nExample string: hello\n\n### Output:\nwhile True:\n    s = input(\"Enter a string: \")\n    count = 0\n    for i in s:\n        if(i=='a' or i=='e' or i=='i' or i=='o' or i=='u'):\n            count+=1\n    print(\"The number of vowels in the string:\", count)"
    },
    {
        "instruction": "Generate a Python program that takes an array as an input and prints each element of the array in a new line.",
        "input": "[10, 20, 30, 40]",
        "output": "arr = [10, 20, 30, 40]\n\nfor num in arr:\n    print(num)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that takes an array as an input and prints each element of the array in a new line.\n\n### Input:\n[10, 20, 30, 40]\n\n### Output:\narr = [10, 20, 30, 40]\n\nfor num in arr:\n    print(num)"
    },
    {
        "instruction": "Transform the following piece of code from C to Python",
        "input": "int a = 3;\nint b = 2;\nint c = a + b;",
        "output": "a = 3\nb = 2\nc = a + b",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTransform the following piece of code from C to Python\n\n### Input:\nint a = 3;\nint b = 2;\nint c = a + b;\n\n### Output:\na = 3\nb = 2\nc = a + b"
    },
    {
        "instruction": "Generate a 3D array of size 2 x 3 x 2 in Python.",
        "input": "",
        "output": "import numpy as np\n\n# Generate a 3D array\nx = np.zeros((2, 3, 2))\n\n# Print the array\nprint(x)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a 3D array of size 2 x 3 x 2 in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\n# Generate a 3D array\nx = np.zeros((2, 3, 2))\n\n# Print the array\nprint(x)"
    },
    {
        "instruction": "Automate the simulation process from the Linux terminal for CAEBAT 1.0. To use it, place the script in the 'examples' folder, create a folder named 'Mis simulaciones' on the desktop, and run it from the terminal using 'python simulacion_basica.py'. The program will prompt for the exact name of the folder to simulate. The script will execute the simulation of the selected case, copy the simulation results to a folder on the desktop named after the simulated case and the simulation date, and delete the generated folders in the example folder.",
        "input": "",
        "output": "# -*- coding: utf-8 -*-\r\n'''\r\nCreado por Pablo Castro\r\n28/03/17\r\nObjetivo:\r\nAutomatizar todo el proceso de simulacion desde el terminal de linux.\r\nFunciona para CAEBAT 1.0\r\n\r\nComo usarlo:\r\n1- Se situa el script en la carpeta 'examples'.\r\n2- Se crea una carpeta llamada 'Mis simulaciones' en el escritorio.\r\n3- Se ejecuta normalmente desde la terminal: 'python simulacion_basica.py'\r\n4- El programa te pide el nombre exacto de la carpeta a simular.\r\n\r\nAcciones:\r\n-Ejecutar la simulacion de un caso que elijamos\r\n-Copiar la carpeta con los resultados de la simulaciones en otra carpeta\r\n situada en el escritorio y ponerle un nombre segun el caso simulado y la fecha de simulacion.\r\n-Despues de realizar esto, eliminamos las carpetas generadas por la simulacion\r\n en la carpeta ejemplo.\r\n'''\r\n\r\nimport os\r\nimport shutil\r\nfrom datetime import datetime\r\n\r\ndef copiar_simulacion(Nombre_simulacion):\r\n\t#Calculamos la fecha en la que la carpeta fue creada\r\n\tfecha = os.stat(Nombre_simulacion).st_mtime\r\n\t\r\n\t#La convertimos a un formato legible y nombramos la nueva carpeta\r\n\tnombre_carpeta_copia = Nombre_simulacion + ' ' + str(datetime.fromtimestamp(fecha))\r\n\tshutil.copytree(Nombre_simulacion,nombre_carpeta_copia)\r\n\tshutil.move(nombre_carpeta_copia,'/home/batsim/Desktop/Mis simulaciones/')\r\n\r\n\r\ndef eliminar_carpetas(Nombre_simulacion):\r\n\tshutil.rmtree('/home/batsim/caebat/vibe/examples/'+Nombre_simulacion+'/simulation_log')\r\n\tshutil.rmtree('/home/batsim/caebat/vibe/examples/'+Nombre_simulacion+'/simulation_results')\r\n\tshutil.rmtree('/home/batsim/caebat/vibe/examples/'+Nombre_simulacion+'/simulation_setup')\r\n\tshutil.rmtree('/home/batsim/caebat/vibe/examples/'+Nombre_simulacion+'/work')\r\n\r\n#Seleccionamos desde el terminal nuestra carpeta de simulacion\r\nprint('Introduce el nombre de la carpeta que quieres simular:')\r\nnombre = raw_input()\r\n\r\n#Seleccionamos el archivo .conf que vamos a simular\r\nif nombre == 'case2':\r\n\tmodelo = 'thermal_electrical_chartran_cell_twoway.conf'\r\nelif nombre == 'case3':\r\n\tmodelo = 'thermal_electrical_chartran_battery_twoway.conf'\r\nelif nombre == 'case6':\r\n\tmodelo = 'thermal_electrical_chartran_farasis.conf'\r\nelif nombre == 'case7':\r\n\tmodelo = 'thermal_electrical_chartran_module_4P.conf'\r\nelse:\r\n\tprint('Error al introducir el nombre de la carpeta')\r\n\tquit()\r\n\r\n#Cambiamos el path a la carpeta seleccionada\r\nos.chdir('/home/batsim/caebat/vibe/examples/'+nombre)\r\n\r\n\r\n#Ejectuamos la simulacion\r\nos.system('/home/batsim/caebat/oas/install/bin/ips.py --simulation='+modelo+' --log=temp.log --platform=../config/batsim.conf -a')\r\nos.chdir('/home/batsim/caebat/vibe/examples')\r\ncopiar_simulacion(nombre)\r\neliminar_carpetas(nombre)\r\nprint('Fin de la simulaci\u00f3n')\r\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAutomate the simulation process from the Linux terminal for CAEBAT 1.0. To use it, place the script in the 'examples' folder, create a folder named 'Mis simulaciones' on the desktop, and run it from the terminal using 'python simulacion_basica.py'. The program will prompt for the exact name of the folder to simulate. The script will execute the simulation of the selected case, copy the simulation results to a folder on the desktop named after the simulated case and the simulation date, and delete the generated folders in the example folder.\n\n### Input:\n\n\n### Output:\n# -*- coding: utf-8 -*-\r\n'''\r\nCreado por Pablo Castro\r\n28/03/17\r\nObjetivo:\r\nAutomatizar todo el proceso de simulacion desde el terminal de linux.\r\nFunciona para CAEBAT 1.0\r\n\r\nComo usarlo:\r\n1- Se situa el script en la carpeta 'examples'.\r\n2- Se crea una carpeta llamada 'Mis simulaciones' en el escritorio.\r\n3- Se ejecuta normalmente desde la terminal: 'python simulacion_basica.py'\r\n4- El programa te pide el nombre exacto de la carpeta a simular.\r\n\r\nAcciones:\r\n-Ejecutar la simulacion de un caso que elijamos\r\n-Copiar la carpeta con los resultados de la simulaciones en otra carpeta\r\n situada en el escritorio y ponerle un nombre segun el caso simulado y la fecha de simulacion.\r\n-Despues de realizar esto, eliminamos las carpetas generadas por la simulacion\r\n en la carpeta ejemplo.\r\n'''\r\n\r\nimport os\r\nimport shutil\r\nfrom datetime import datetime\r\n\r\ndef copiar_simulacion(Nombre_simulacion):\r\n\t#Calculamos la fecha en la que la carpeta fue creada\r\n\tfecha = os.stat(Nombre_simulacion).st_mtime\r\n\t\r\n\t#La convertimos a un formato legible y nombramos la nueva carpeta\r\n\tnombre_carpeta_copia = Nombre_simulacion + ' ' + str(datetime.fromtimestamp(fecha))\r\n\tshutil.copytree(Nombre_simulacion,nombre_carpeta_copia)\r\n\tshutil.move(nombre_carpeta_copia,'/home/batsim/Desktop/Mis simulaciones/')\r\n\r\n\r\ndef eliminar_carpetas(Nombre_simulacion):\r\n\tshutil.rmtree('/home/batsim/caebat/vibe/examples/'+Nombre_simulacion+'/simulation_log')\r\n\tshutil.rmtree('/home/batsim/caebat/vibe/examples/'+Nombre_simulacion+'/simulation_results')\r\n\tshutil.rmtree('/home/batsim/caebat/vibe/examples/'+Nombre_simulacion+'/simulation_setup')\r\n\tshutil.rmtree('/home/batsim/caebat/vibe/examples/'+Nombre_simulacion+'/work')\r\n\r\n#Seleccionamos desde el terminal nuestra carpeta de simulacion\r\nprint('Introduce el nombre de la carpeta que quieres simular:')\r\nnombre = raw_input()\r\n\r\n#Seleccionamos el archivo .conf que vamos a simular\r\nif nombre == 'case2':\r\n\tmodelo = 'thermal_electrical_chartran_cell_twoway.conf'\r\nelif nombre == 'case3':\r\n\tmodelo = 'thermal_electrical_chartran_battery_twoway.conf'\r\nelif nombre == 'case6':\r\n\tmodelo = 'thermal_electrical_chartran_farasis.conf'\r\nelif nombre == 'case7':\r\n\tmodelo = 'thermal_electrical_chartran_module_4P.conf'\r\nelse:\r\n\tprint('Error al introducir el nombre de la carpeta')\r\n\tquit()\r\n\r\n#Cambiamos el path a la carpeta seleccionada\r\nos.chdir('/home/batsim/caebat/vibe/examples/'+nombre)\r\n\r\n\r\n#Ejectuamos la simulacion\r\nos.system('/home/batsim/caebat/oas/install/bin/ips.py --simulation='+modelo+' --log=temp.log --platform=../config/batsim.conf -a')\r\nos.chdir('/home/batsim/caebat/vibe/examples')\r\ncopiar_simulacion(nombre)\r\neliminar_carpetas(nombre)\r\nprint('Fin de la simulaci\u00f3n')\r\n"
    },
    {
        "instruction": "Write a Python program to predict the probability of an employee leaving the company given their age.",
        "input": "",
        "output": "def predict_probability(age):\n    # Fit your model and get predicted probabilities\n    probabilities = model.predict_proba(age)\n    # Return probability for leaving class\n    return probabilities[0][1]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to predict the probability of an employee leaving the company given their age.\n\n### Input:\n\n\n### Output:\ndef predict_probability(age):\n    # Fit your model and get predicted probabilities\n    probabilities = model.predict_proba(age)\n    # Return probability for leaving class\n    return probabilities[0][1]"
    },
    {
        "instruction": "Build a basic web scraper in python that extracts the top 100 movies from IMDB, including their title, release date, and description.",
        "input": "Not applicable",
        "output": "import requests\nfrom bs4 import BeautifulSoup \n\nurl = \"https://www.imdb.com/chart/top\"\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\nmovies = soup.find_all('td', class_='titleColumn')\n\n# Create a list of top 100 movies\ntop_movies = []\n\nfor movie in movies:\n  # get movie title\n  title = movie.a.text\n  # get movie release date\n  release_date = movie.span.text\n  # get movie description\n  movie_page = requests.get(f'https://www.imdb.com{movie.a[\"href\"]}')\n  movie_soup = BeautifulSoup(movie_page.content, 'html.parser')\n  description = movie_soup.find('p', class_='text-muted').text.strip()\n\n  top_movies.append({\n    'title': title,\n    'release_date': release_date,\n    'description': description\n    })",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a basic web scraper in python that extracts the top 100 movies from IMDB, including their title, release date, and description.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup \n\nurl = \"https://www.imdb.com/chart/top\"\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\nmovies = soup.find_all('td', class_='titleColumn')\n\n# Create a list of top 100 movies\ntop_movies = []\n\nfor movie in movies:\n  # get movie title\n  title = movie.a.text\n  # get movie release date\n  release_date = movie.span.text\n  # get movie description\n  movie_page = requests.get(f'https://www.imdb.com{movie.a[\"href\"]}')\n  movie_soup = BeautifulSoup(movie_page.content, 'html.parser')\n  description = movie_soup.find('p', class_='text-muted').text.strip()\n\n  top_movies.append({\n    'title': title,\n    'release_date': release_date,\n    'description': description\n    })"
    },
    {
        "instruction": "Create a Python program to process a pandas dataframe and identify all duplicates in a given column.",
        "input": "Columns: Name, Age, City\nData: \nJohn, 27, London\nJames, 25, Tokyo\nJohn, 27, Tokyo",
        "output": "import pandas as pd\n\ndf = pd.DataFrame({'Name': ['John', 'James', 'John'],\n                   'Age': [27, 25, 27],\n                   'City': ['London', 'Tokyo', 'Tokyo']})\n\n# identify all duplicates in the 'Name' column\nduplicates = df[df.duplicated(['Name'], keep=False)]\nprint(duplicates)\n\n# output\n    Name  Age    City\n0   John   27  London\n2   John   27   Tokyo",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to process a pandas dataframe and identify all duplicates in a given column.\n\n### Input:\nColumns: Name, Age, City\nData: \nJohn, 27, London\nJames, 25, Tokyo\nJohn, 27, Tokyo\n\n### Output:\nimport pandas as pd\n\ndf = pd.DataFrame({'Name': ['John', 'James', 'John'],\n                   'Age': [27, 25, 27],\n                   'City': ['London', 'Tokyo', 'Tokyo']})\n\n# identify all duplicates in the 'Name' column\nduplicates = df[df.duplicated(['Name'], keep=False)]\nprint(duplicates)\n\n# output\n    Name  Age    City\n0   John   27  London\n2   John   27   Tokyo"
    },
    {
        "instruction": "Generate a Python script that takes a number and calculates its factorial.",
        "input": "4",
        "output": "def factorial(n): \n    fact = 1\n    for i in range(1,n+1): \n        fact *= i\n    return fact\n  \nnum = 4\nprint(\"Factorial of\",num,\"is\",factorial(num))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script that takes a number and calculates its factorial.\n\n### Input:\n4\n\n### Output:\ndef factorial(n): \n    fact = 1\n    for i in range(1,n+1): \n        fact *= i\n    return fact\n  \nnum = 4\nprint(\"Factorial of\",num,\"is\",factorial(num))"
    },
    {
        "instruction": "Develop a reliable Python program to compare two feature-vectors for similarity",
        "input": "[4, 6, 8, 10], [6, 8, 9, 11]",
        "output": "# Initialize the feature vectors\nfeature_vector_1 = [4, 6, 8, 10] \nfeature_vector_2 = [6, 8, 9, 11]\n\n# Create a function\ndef compareVectors(v1, v2):\n    # Initialize a score\n    score = 0\n    # Iterate through the vectors\n    for i in range(len(v1)):\n        score += min(v1[i], v2[i]) / max(v1[i], v2[i])\n    # Calculate the similarity score\n    similarity_score = score / len(v1)\n    return similarity_score\n\n# Test the function\nprint(compareVectors(feature_vector_1, feature_vector_2))\n\n# Output\n0.875",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a reliable Python program to compare two feature-vectors for similarity\n\n### Input:\n[4, 6, 8, 10], [6, 8, 9, 11]\n\n### Output:\n# Initialize the feature vectors\nfeature_vector_1 = [4, 6, 8, 10] \nfeature_vector_2 = [6, 8, 9, 11]\n\n# Create a function\ndef compareVectors(v1, v2):\n    # Initialize a score\n    score = 0\n    # Iterate through the vectors\n    for i in range(len(v1)):\n        score += min(v1[i], v2[i]) / max(v1[i], v2[i])\n    # Calculate the similarity score\n    similarity_score = score / len(v1)\n    return similarity_score\n\n# Test the function\nprint(compareVectors(feature_vector_1, feature_vector_2))\n\n# Output\n0.875"
    },
    {
        "instruction": "Create a Python program that takes a string as input and prints all permutations of it in lexicographical order.",
        "input": "ABC",
        "output": "def permutations(string):\n if len(string) == 0:\n return\n\n else:\n first_char = string[0]\n remainder = string[1:]\n permutations(remainder)\n for perm in permutations(remainder):\n for i in range(len(perm)+1):\n result = perm[:i] + first_char + perm[i:]\n print(result)\n\npermutations(\"ABC\") #run the code\n\n# Output\nABC\nACB\nBAC\nBCA\nCBA\nCAB",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a string as input and prints all permutations of it in lexicographical order.\n\n### Input:\nABC\n\n### Output:\ndef permutations(string):\n if len(string) == 0:\n return\n\n else:\n first_char = string[0]\n remainder = string[1:]\n permutations(remainder)\n for perm in permutations(remainder):\n for i in range(len(perm)+1):\n result = perm[:i] + first_char + perm[i:]\n print(result)\n\npermutations(\"ABC\") #run the code\n\n# Output\nABC\nACB\nBAC\nBCA\nCBA\nCAB"
    },
    {
        "instruction": "Create a Python class called 'Points' to store three dimensional points.",
        "input": "",
        "output": "class Points:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n        \n    def __str__(self):\n        return \"x={}, y={}, z={}\".format(self.x, self.y, self.z)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class called 'Points' to store three dimensional points.\n\n### Input:\n\n\n### Output:\nclass Points:\n    def __init__(self, x, y, z):\n        self.x = x\n        self.y = y\n        self.z = z\n        \n    def __str__(self):\n        return \"x={}, y={}, z={}\".format(self.x, self.y, self.z)"
    },
    {
        "instruction": "Rewrite the following Python code in Java.\n\nmyString = \"Hello World\"\nprint(myString[0:5])",
        "input": "No input",
        "output": "String myString = \"Hello World\";\nSystem.out.println(myString.substring(0,5));",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following Python code in Java.\n\nmyString = \"Hello World\"\nprint(myString[0:5])\n\n### Input:\nNo input\n\n### Output:\nString myString = \"Hello World\";\nSystem.out.println(myString.substring(0,5));"
    },
    {
        "instruction": "Create a sorting algorithm in Python that takes a list of numbers as an input and prints the sorted output.",
        "input": "[10, 5, 1, 8, 9, 6]",
        "output": "def sort(numbers):\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] > numbers[j]:\n                numbers[i], numbers[j] = numbers[j], numbers[i]\n    return numbers",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sorting algorithm in Python that takes a list of numbers as an input and prints the sorted output.\n\n### Input:\n[10, 5, 1, 8, 9, 6]\n\n### Output:\ndef sort(numbers):\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] > numbers[j]:\n                numbers[i], numbers[j] = numbers[j], numbers[i]\n    return numbers"
    },
    {
        "instruction": "Create a Python program for predicting prices of apartments. The program should include a way to input several parameters (number of bedrooms, area, location etc.) and an algorithm for a prediction.",
        "input": "Number of bedrooms: 2\nArea: 50\nLocation: New York",
        "output": "import pandas as pd\n\ndf = pd.read_csv('data.csv')\n\n# Features\nX=df.iloc[:,:-1]\n\n# Labels\ny=df.iloc[:,-1]\n\n# Split dataset\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1, test_size=0.2)\n\n# Fit the model\nfrom sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Get input values\ninput_data = [2, 50, 'New York']\n\n# Prediction\nprediction = model.predict([input_data])\n\nprint('Predicted price for a apartment with 2 bedrooms, 50sqm located in New York:', prediction[0])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for predicting prices of apartments. The program should include a way to input several parameters (number of bedrooms, area, location etc.) and an algorithm for a prediction.\n\n### Input:\nNumber of bedrooms: 2\nArea: 50\nLocation: New York\n\n### Output:\nimport pandas as pd\n\ndf = pd.read_csv('data.csv')\n\n# Features\nX=df.iloc[:,:-1]\n\n# Labels\ny=df.iloc[:,-1]\n\n# Split dataset\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1, test_size=0.2)\n\n# Fit the model\nfrom sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\n\n# Get input values\ninput_data = [2, 50, 'New York']\n\n# Prediction\nprediction = model.predict([input_data])\n\nprint('Predicted price for a apartment with 2 bedrooms, 50sqm located in New York:', prediction[0])"
    },
    {
        "instruction": "Design a Python program that prints \u201cHello World\u201d when the program is run.",
        "input": "",
        "output": "if __name__ == '__main__':\n    print('Hello World')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program that prints \u201cHello World\u201d when the program is run.\n\n### Input:\n\n\n### Output:\nif __name__ == '__main__':\n    print('Hello World')"
    },
    {
        "instruction": "Generate a valid Python script to replace every element in a list by a specified integer",
        "input": "",
        "output": "def replace_list_items(list_X,value):\n    new_list=[]\n    for element in list_X:\n        new_list.append(value)\n    return new_list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a valid Python script to replace every element in a list by a specified integer\n\n### Input:\n\n\n### Output:\ndef replace_list_items(list_X,value):\n    new_list=[]\n    for element in list_X:\n        new_list.append(value)\n    return new_list"
    },
    {
        "instruction": "Create a K Nearest Neighbors classifier using scikit-learn in Python.",
        "input": "Not applicable",
        "output": "#import packages\nfrom sklearn.neighbors import KNeighborsClassifier\nimport numpy as np\n\n# Create a KNearestNeighbors classifier\nknn = KNeighborsClassifier(n_neighbors=5)\n\n# Train the classifier using fit\nX = np.array([[1,2,3], [2,3,4],[4,5,6]])\ny = np.array([1,0,1])\nknn.fit(X, y)\n\n# Use the trained classifier to make predictions\nknn.predict([[1,2,2],[2,2,2]])\n# Output: array([1, 0])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a K Nearest Neighbors classifier using scikit-learn in Python.\n\n### Input:\nNot applicable\n\n### Output:\n#import packages\nfrom sklearn.neighbors import KNeighborsClassifier\nimport numpy as np\n\n# Create a KNearestNeighbors classifier\nknn = KNeighborsClassifier(n_neighbors=5)\n\n# Train the classifier using fit\nX = np.array([[1,2,3], [2,3,4],[4,5,6]])\ny = np.array([1,0,1])\nknn.fit(X, y)\n\n# Use the trained classifier to make predictions\nknn.predict([[1,2,2],[2,2,2]])\n# Output: array([1, 0])"
    },
    {
        "instruction": "Given a dictionary, write a Python code snippet to find all values that are greater than 5.",
        "input": "{'a': 1, 'b': 3, 'c': 5, 'd': 7}",
        "output": "dictionary = {'a': 1, 'b': 3, 'c': 5, 'd': 7}\n\nresult = [item for item in dictionary.values() if item > 5]\n\nprint(result)\n\n# Output:\n[7]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a dictionary, write a Python code snippet to find all values that are greater than 5.\n\n### Input:\n{'a': 1, 'b': 3, 'c': 5, 'd': 7}\n\n### Output:\ndictionary = {'a': 1, 'b': 3, 'c': 5, 'd': 7}\n\nresult = [item for item in dictionary.values() if item > 5]\n\nprint(result)\n\n# Output:\n[7]"
    },
    {
        "instruction": "Compose a Python code snippet to check if the input list contains even numbers.",
        "input": "[2, 3, 4, 5, 6]",
        "output": "def isEvenNumberPresent(list):\n    for item in list:\n        if item % 2 == 0:\n            return True\n    return False\n\nprint(isEvenNumberPresent([2, 3, 4, 5, 6]))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python code snippet to check if the input list contains even numbers.\n\n### Input:\n[2, 3, 4, 5, 6]\n\n### Output:\ndef isEvenNumberPresent(list):\n    for item in list:\n        if item % 2 == 0:\n            return True\n    return False\n\nprint(isEvenNumberPresent([2, 3, 4, 5, 6]))"
    },
    {
        "instruction": "Model a basic shopping cart with a Python 3 class. The class should provide methods for adding items to the cart, removing items, calculating the total cost of the cart's items (including discounts), and for displaying the items and costs.",
        "input": "Not applicable",
        "output": "class ShoppingCart:\n def __init__(self):\n self.items = []\n self.cost = 0\n\n def add_item(self, item):\n self.items.append(item)\n self.cost += item['price']\n\n def remove_item(self, item):\n self.items.remove(item)\n self.cost -= item['price']\n\n def get_total(self):\n return self.cost\n\n def get_items(self):\n return self.items",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModel a basic shopping cart with a Python 3 class. The class should provide methods for adding items to the cart, removing items, calculating the total cost of the cart's items (including discounts), and for displaying the items and costs.\n\n### Input:\nNot applicable\n\n### Output:\nclass ShoppingCart:\n def __init__(self):\n self.items = []\n self.cost = 0\n\n def add_item(self, item):\n self.items.append(item)\n self.cost += item['price']\n\n def remove_item(self, item):\n self.items.remove(item)\n self.cost -= item['price']\n\n def get_total(self):\n return self.cost\n\n def get_items(self):\n return self.items"
    },
    {
        "instruction": "Design a Python program for finding the median of a given list of numbers.",
        "input": "[7, 4, 5, 2, 10]",
        "output": "def find_median(lst):\n    lst.sort()\n    if len(lst)%2 == 0:\n        median1 = lst[len(lst)//2]\n        median2 = lst[len(lst)//2 - 1]\n        median = float(median1 + median2) / 2\n    else:\n        median = lst[len(lst)//2]\n    return median\n\nresult = find_median([7, 4, 5, 2, 10])\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program for finding the median of a given list of numbers.\n\n### Input:\n[7, 4, 5, 2, 10]\n\n### Output:\ndef find_median(lst):\n    lst.sort()\n    if len(lst)%2 == 0:\n        median1 = lst[len(lst)//2]\n        median2 = lst[len(lst)//2 - 1]\n        median = float(median1 + median2) / 2\n    else:\n        median = lst[len(lst)//2]\n    return median\n\nresult = find_median([7, 4, 5, 2, 10])\nprint(result)"
    },
    {
        "instruction": "Create a Python program that, given a person's Birthdate and current date, returns the age of the person.",
        "input": "Birthdate: 6 Dec 1996\nCurrent Date: 18 March 2021",
        "output": "def calculate_age(birthdate, current_date):\n    age = current_date.year - birthdate.year\n    if current_date.month < birthdate.month:\n        age -= 1\n    elif (current_date.month == birthdate.month and\n          current_date.day < birthdate.day):\n        age -= 1\n    return age\n\nimport datetime\nbirthdate = datetime.date(1996, 12, 6)\ncurrent_date = datetime.date(2021, 3, 18)\nage = calculate_age(birthdate, current_date)\nprint(age)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that, given a person's Birthdate and current date, returns the age of the person.\n\n### Input:\nBirthdate: 6 Dec 1996\nCurrent Date: 18 March 2021\n\n### Output:\ndef calculate_age(birthdate, current_date):\n    age = current_date.year - birthdate.year\n    if current_date.month < birthdate.month:\n        age -= 1\n    elif (current_date.month == birthdate.month and\n          current_date.day < birthdate.day):\n        age -= 1\n    return age\n\nimport datetime\nbirthdate = datetime.date(1996, 12, 6)\ncurrent_date = datetime.date(2021, 3, 18)\nage = calculate_age(birthdate, current_date)\nprint(age)"
    },
    {
        "instruction": "Write a script to measure temperature from a device using python",
        "input": "The device outputs an array of size 3, [Temp_C, Temp_F, Temp_K].",
        "output": "def measure_temperature(data):\n    temp_c = data[0]\n    temp_f = data[1]\n    temp_k = data[2]\n    return temp_c, temp_f, temp_k",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script to measure temperature from a device using python\n\n### Input:\nThe device outputs an array of size 3, [Temp_C, Temp_F, Temp_K].\n\n### Output:\ndef measure_temperature(data):\n    temp_c = data[0]\n    temp_f = data[1]\n    temp_k = data[2]\n    return temp_c, temp_f, temp_k"
    },
    {
        "instruction": "Suggest a solution for the following prompt.",
        "input": "Write a Python script to generate the Fibonacci sequence up until n number of terms.",
        "output": "# Python 3 program to generate Fibonacci sequence\n\ndef Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \n# Driver Program \nprint(Fibonacci(n))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a solution for the following prompt.\n\n### Input:\nWrite a Python script to generate the Fibonacci sequence up until n number of terms.\n\n### Output:\n# Python 3 program to generate Fibonacci sequence\n\ndef Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \n# Driver Program \nprint(Fibonacci(n))"
    },
    {
        "instruction": "The given code is a Python class called `isoMeasurer` that inherits from another class called `Measurer`. It contains methods for making isophotal measurements on astronomical images, including getting the file path for the contours of the isophotes, making measurements on a map and writing them to a CSV file, making a visual panel to display the composite image and the isophotal measurements, and getting the contours from an image. The class also contains some helper methods for converting between different units and for reading and writing Python pickle files. To use this code, create an instance of the `isoMeasurer` class and call its methods with appropriate parameters.",
        "input": "",
        "output": "# isomeasurer.py \n# ALS 2017/06/01\nimport os\nimport astropy.units as u\nfrom astropy.io import fits\nimport numpy as np\nimport astropy.table as at\nimport pickle\nimport scipy.ndimage as simg\n\n\nfrom ..measurer import Measurer\nfrom ... import tabtools\nfrom . import polytools\nfrom . import plottools\n\nclass isoMeasurer(Measurer):\n\n\tdef __init__(self, **kwargs):\n\t\t\"\"\"\n\t\tchild of Measurer\n\t\tdo isophotal measurements\n\t\t\"\"\"\n\t\tsuper(isoMeasurer, self).__init__(**kwargs)\n\n\t\tself.msrtype = 'iso'\n\n\n\tdef get_fp_contours(self, imgtag='OIII5008_I', onlycenter=False, suffix=''):\n\t\t\"\"\" e.g., msr_iso-OIII5008_I{suffix}_contours.pkl \n\t\t\t\\or   msr_iso-OIII5008_I{suffix}_contours-ctr.pkl \n\t\t\"\"\"\n\t\tif onlycenter:\n\t\t\tctrtag = '-ctr'\n\t\telse:\n\t\t\tctrtag = ''\n\n\t\tfp_root = self.get_fp_msrtagroot(imgtag=imgtag, suffix=suffix)\n\t\treturn fp_root+'_contours{ctrtag}.pkl'.format(ctrtag=ctrtag)\n\n\n\tdef make_measurements(self, imgtag='OIII5008_I', isocut=3.e-15*u.Unit('erg / (arcsec2 cm2 s)'), minarea=5, onlycenter=True, centerradius=5.*u.arcsec, plotsuffix='', savecontours=False, plotmsr=False, msrsuffix='', overwrite=False, append=False):\n\t\t\"\"\"\n\t\tmake measurements on a map and write to msr_iso.csv. \n\t\t\tif imgtag='OIII5008_I' then measure 'stamp-OIII5008_I.fits'\n\n\t\tParams\n\t\t------\n\t\tself\n\t\timgtag='OIII5008_I'\n\t\toverwrite = False (bool)\n\n\t\tisocut=1.e-15*u.Unit('erg / (arcsec2 cm2 s)'):\n\t\t\tisophote cut\n\t\tminarea=0:\n\t\t\tconnected contour area (# pix) above the area is counted as part of the isophote measurement\n\t\tonlycenter=False:\n\t\t\twhether to consider only the center contours\n\t\tcenterradius=2.*u.arcsec\n\t\tplotsuffix = '':\n\t\t\tplotsuffix label to be attach to the end of the plot or contour file names. \n\t\tsavecontours=False\n\t\tplotmsr=False\n\t\tmsrsuffix=''\n\t\t\tplotsuffix label in the end of the measurement csv file: msr_iso_{msrsuffix}.csv.\n\t\toverwrite=False\n\t\tappend=False\n\n\t\tReturn\n\t\t------\n\t\tstatus (bool)\n\n\t\tWrite Output \n\t\t------------\n\t\te.g., msr_iso.csv\n\t\t\"\"\"\n\t\tfn = self.get_fp_msr(msrsuffix=msrsuffix)\n\n\t\tcondi = {'imgtag': imgtag, 'isocut': isocut, 'minarea': minarea, 'onlycenter': onlycenter, 'centerradius': centerradius}\n\n\t\tif append or overwrite or (not tabtools.fn_has_row(fn, condi)):\n\t\t\tprint(\"[isomeasurer] making measurement\")\n\n\t\t\timg = self.get_stamp_img(imgtag=imgtag, wunit=True)\n\t\t\txc, yc = self._get_xc_yc(img)\n\n\t\t\t# calc\n\t\t\tif np.all(~np.isnan(img)): \n\t\t\t\tcontours = self._get_contours_from_img(img=img, isocut=isocut, xc=xc, yc=yc, minarea=minarea, onlycenter=onlycenter, centerradius=centerradius)\n\t\t\t\ttab_msr = self._get_tab_measurements_from_contours(contours=contours, xc=xc, yc=yc)\n\t\t\telse: \n\t\t\t\tcontours = []\n\t\t\t\ttab_msr = self._get_tab_measurements_nan()\n\n\t\t\ttab_params = self._get_tab_params(imgtag=imgtag, isocut=isocut, minarea=minarea, onlycenter=onlycenter, centerradius=centerradius)\n\t\t\ttabout = at.hstack([tab_params, tab_msr])\n\n\t\t\t# output\n\t\t\ttabtools.write_row(fn=fn, row=tabout, condi=condi, overwrite=overwrite, append=append)\n\n\t\t\t# optional output\n\t\t\tif savecontours:\n\t\t\t\tfn_contours = self.get_fp_contours(imgtag=imgtag, onlycenter=onlycenter, suffix=plotsuffix)\n\t\t\t\twrite_pickle(contours, fn_contours, overwrite=overwrite)\n\n\t\t\tif plotmsr:\n\t\t\t\tfn_plot = self.get_fp_msrplot(imgtag=imgtag, suffix=plotsuffix)\n\t\t\t\tplottools.make_plot_img_w_contours(fn_plot=fn_plot, img=img, contours=contours)\n\n\t\telse:\n\t\t\tprint(\"[isomeasurer] skip making measurement as files exist\")\n\n\t\treturn os.path.isfile(fn)\n\n\n\tdef make_visualpanel(self, fn=None, compo_bands ='gri', imgtag='OIII5008_I', onlycenter=True, minarea=5, centerradius=5.*u.arcsec, tocolorbar=True, totitle=True, fontsize=12, overwrite=False):\n\t\t\"\"\" \n\t\tmake panel figure to visualize the composit and the iso measurements\n\t\tsaved to e.g., 'msr_iso-OIII5008_I_panel.pdf'\n\n\t\tParams\n\t\t------\n\t\tfn = None: default: msr_iso_{imgtag}_panel.pdf\n\t\tcompo_bands ='gri', imgtag='OIII5008_I', overwrite=False\n\n\t\tReturn\n\t\t------\n\t\tstatus\n\t\t\"\"\"\n\t\tif fn is None:\n\t\t\tfn = self.get_fp_msrplot(imgtag=imgtag, suffix='_panel')\n\t\telse: \n\t\t\tfn = self.dir_obj+fn\n\n\t\tif not os.path.isfile(fn) or overwrite:\n\t\t\tprint(\"[isomeasurer] making visual panel\")\n\n\t\t\t# get files ready \n\t\t\tself.make_colorimg(bands=compo_bands, img_type='stamp', overwrite=False)\n\n\t\t\t# access data\n\t\t\timg_compo = simg.imread(self.dir_obj+'color_stamp-{}.png'.format(compo_bands))\n\t\t\timg_map = self.get_stamp_img(imgtag=imgtag, wunit=False)\n\n\t\t\tsuffix = '_3e-15'\n\t\t\tisocut = 3.e-15*u.Unit('erg / (arcsec2 cm2 s)')\n\t\t\tfn_contours3 = self.get_fp_contours(imgtag=imgtag, onlycenter=onlycenter, suffix=suffix)\n\t\t\tif not os.path.isfile(fn_contours3):\n\t\t\t\tprint(\"[isomeasurer] re-doing measurements to make contours required for visual panel plots\")\n\t\t\t\tself.make_measurements(imgtag=imgtag, isocut=isocut, plotsuffix=suffix, minarea=minarea, onlycenter=onlycenter, centerradius=centerradius, overwrite=True, savecontours=True, plotmsr=False), \n\n\t\t\tcontours3 = read_pickle(fn_contours3)\n\n\t\t\tsuffix = '_1e-15'\n\t\t\tisocut = 1.e-15*u.Unit('erg / (arcsec2 cm2 s)')\n\t\t\tfn_contours1 = self.get_fp_contours(imgtag=imgtag, onlycenter=onlycenter, suffix=suffix)\n\t\t\tif not os.path.isfile(fn_contours1):\n\t\t\t\tprint(\"[isomeasurer] re-doing measurements to make contours required for visual panel plots\")\n\t\t\t\tself.make_measurements(imgtag=imgtag, isocut=isocut, plotsuffix=suffix, minarea=minarea, onlycenter=onlycenter, centerradius=centerradius, overwrite=True, savecontours=True, plotmsr=False), \n\n\t\t\tcontours1 = read_pickle(fn_contours1)\n\n\t\t\tz = self.z\n\t\t\tpixsize = self.pixsize.to_value(u.arcsec)\n\t\t\tlegend_suffix = ' at 3'\n\t\t\tname = self.obj.name[4:]\n\n\t\t\ttitle_compo = '${}~{}~{}~$'.format(compo_bands[0], compo_bands[1], compo_bands[2])+'$\\mathrm{Composite}$'\n\t\t\ttitle_map = '$\\mathrm{[OIII]\\lambda 5007~Intensity}$'\n\t\t\tlabel_cbar = '$I~[10^{-15}~\\mathrm{erg~s^{-1}~cm^{-2}~arcsec^{-2}}]$'\n\n\t\t\tplottools.make_iso_visual_panel(fn, img_compo, img_map, contours1, contours3, z, pixsize, legend_suffix, name, title_compo, title_map, label_cbar, tocolorbar=tocolorbar, totitle=totitle, fontsize=fontsize)\n\n\t\telse:\n\t\t\tprint(\"[isomeasurer] skip making visual panel as files exist\")\n\n\t\treturn os.path.isfile(fn)\n\n\t\t\n\tdef _get_tab_params(self, imgtag, isocut, minarea, onlycenter, centerradius):\n\t\t\"\"\"\n\t\treturn a one row table of the measurement params \n\t\t\"\"\"\n\t\ttab = at.Table([[imgtag], [str(isocut)], [minarea], [onlycenter], [str(centerradius)], ], names=['imgtag', 'isocut', 'minarea', 'onlycenter', 'centerradius', ])\n\t\treturn tab\n\n\n\tdef _get_tab_measurements_from_contours(self, contours, xc, yc):\n\t\t\"\"\" \n\t\tcalculate iso measurements from contours, return a table like: \n\t\t\"\"\"\n\n\t\ttab = polytools.ShapeParamsTab_from_contours(contours, xc, yc)\n\n\t\t# unit conversion\n\t\tarea_ars = tab['area_pix'][0]*(self.pixsize/u.arcsec)**2\n\t\tdmax_ars = self._pix_to_theta(tab['dmax_pix'][0], wunit=False)\n\t\trmax_ars = self._pix_to_theta(tab['rmax_pix'][0], wunit=False)\n\t\tdper_ars = self._pix_to_theta(tab['dper_pix'][0], wunit=False)\n\n\t\tkpc_per_arcsec = np.array(self._get_kpc_proper_per_arcsec())\n\n\t\tarea_kpc = area_ars * kpc_per_arcsec**2\n\t\tdmax_kpc = dmax_ars * kpc_per_arcsec\n\t\trmax_kpc = rmax_ars * kpc_per_arcsec\n\t\tdper_kpc = dper_ars * kpc_per_arcsec\n\n\t\ttab_converted = at.Table(names=['area_kpc', 'dmax_kpc', 'rmax_kpc', 'dper_kpc', 'area_ars', 'dmax_ars', 'rmax_ars', 'dper_ars', ])\n\t\ttab_converted.add_row([area_kpc, dmax_kpc, rmax_kpc, dper_kpc, area_ars, dmax_ars, rmax_ars, dper_ars, ])\n\n\t\ttabout = at.hstack([tab_converted, tab])\n\n\t\treturn tabout\n\n\n\tdef _get_tab_measurements_nan(self):\n\t\t\"\"\" \n\t\treturn a tab measurement just like _get_tab_measurements_from_contours() but with entries all nan. \n\t\t\"\"\"\n\t\tnames = ['area_kpc', 'dmax_kpc', 'rmax_kpc', 'dper_kpc', 'area_ars', 'dmax_ars', 'rmax_ars', 'dper_ars', 'area_pix', 'dmax_pix', 'rmax_pix', 'dper_pix', 'theta_dmax', 'theta_rmax', 'theta_dper', 'aspectr']\n\n\t\ttabout = at.Table(names=names)\n\t\ttabout.add_row([np.nan for i in range(len(names))])\n\n\t\treturn tabout\n\n\n\tdef _get_contours_from_img(self, img, isocut, xc, yc, minarea=0., onlycenter=False, centerradius=2.*u.arcsec):\n\t\t\"\"\"\n\t\tmake contour at isocut of image as python pickle file (fn_contours)\n\t\talways overwrite\n\n\t\tParams\n\t\t------\n\t\tself\n\t\timg (array)\n\t\tisocut (float or quantity):\n\t\t\thas to be of the same type of unit as image\n\t\tminarea (float):\n\t\t\tminimum area (pix) to be considered as contour patch\n\t\tonlycenter (bool):\n\t\t\twhether to take only center patches as patches (they all have to pass minarea test as well)\n\t\tcenterradius (angular quantity):\n\t\t\tif onlycenter = True, then it sets the radius of the center area. only patches overlapping with that area will be considered. \n\n\t\t\"\"\"\n\n\t\t# prep\n\t\ttry: \n\t\t\timg.unit\n\t\texcept:\n\t\t\timg_nparr = img/isocut\n\t\telse:\n\t\t\timg_nparr = np.array((img/isocut).to(u.dimensionless_unscaled))\n\n\t\t# find contours -- satisfy minarea\n\t\tcontours = polytools.find_largecontours(img=img_nparr, threshold=1., minarea=minarea)\n\n\t\tif onlycenter:  # select only those at the center\n\t\t\tcenterradius_pix = self._theta_to_pix(centerradius)\n\t\t\tcontours = polytools.select_center_contours(contours, xc, yc, radius=centerradius_pix)\n\n\t\treturn contours\n\n\n\ndef read_pickle(fn):\n\twith open(fn, 'rb') as handle:\n\t\tresult = pickle.load(handle)\n\treturn result\n\n\ndef write_pickle(result, fn, overwrite=False):\n\n\tif not os.path.isfile(fn) or overwrite:\n\t\twith open(fn, 'wb') as handle:\n\t\t\tpickle.dump(result, handle)\n\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a Python class called `isoMeasurer` that inherits from another class called `Measurer`. It contains methods for making isophotal measurements on astronomical images, including getting the file path for the contours of the isophotes, making measurements on a map and writing them to a CSV file, making a visual panel to display the composite image and the isophotal measurements, and getting the contours from an image. The class also contains some helper methods for converting between different units and for reading and writing Python pickle files. To use this code, create an instance of the `isoMeasurer` class and call its methods with appropriate parameters.\n\n### Input:\n\n\n### Output:\n# isomeasurer.py \n# ALS 2017/06/01\nimport os\nimport astropy.units as u\nfrom astropy.io import fits\nimport numpy as np\nimport astropy.table as at\nimport pickle\nimport scipy.ndimage as simg\n\n\nfrom ..measurer import Measurer\nfrom ... import tabtools\nfrom . import polytools\nfrom . import plottools\n\nclass isoMeasurer(Measurer):\n\n\tdef __init__(self, **kwargs):\n\t\t\"\"\"\n\t\tchild of Measurer\n\t\tdo isophotal measurements\n\t\t\"\"\"\n\t\tsuper(isoMeasurer, self).__init__(**kwargs)\n\n\t\tself.msrtype = 'iso'\n\n\n\tdef get_fp_contours(self, imgtag='OIII5008_I', onlycenter=False, suffix=''):\n\t\t\"\"\" e.g., msr_iso-OIII5008_I{suffix}_contours.pkl \n\t\t\t\\or   msr_iso-OIII5008_I{suffix}_contours-ctr.pkl \n\t\t\"\"\"\n\t\tif onlycenter:\n\t\t\tctrtag = '-ctr'\n\t\telse:\n\t\t\tctrtag = ''\n\n\t\tfp_root = self.get_fp_msrtagroot(imgtag=imgtag, suffix=suffix)\n\t\treturn fp_root+'_contours{ctrtag}.pkl'.format(ctrtag=ctrtag)\n\n\n\tdef make_measurements(self, imgtag='OIII5008_I', isocut=3.e-15*u.Unit('erg / (arcsec2 cm2 s)'), minarea=5, onlycenter=True, centerradius=5.*u.arcsec, plotsuffix='', savecontours=False, plotmsr=False, msrsuffix='', overwrite=False, append=False):\n\t\t\"\"\"\n\t\tmake measurements on a map and write to msr_iso.csv. \n\t\t\tif imgtag='OIII5008_I' then measure 'stamp-OIII5008_I.fits'\n\n\t\tParams\n\t\t------\n\t\tself\n\t\timgtag='OIII5008_I'\n\t\toverwrite = False (bool)\n\n\t\tisocut=1.e-15*u.Unit('erg / (arcsec2 cm2 s)'):\n\t\t\tisophote cut\n\t\tminarea=0:\n\t\t\tconnected contour area (# pix) above the area is counted as part of the isophote measurement\n\t\tonlycenter=False:\n\t\t\twhether to consider only the center contours\n\t\tcenterradius=2.*u.arcsec\n\t\tplotsuffix = '':\n\t\t\tplotsuffix label to be attach to the end of the plot or contour file names. \n\t\tsavecontours=False\n\t\tplotmsr=False\n\t\tmsrsuffix=''\n\t\t\tplotsuffix label in the end of the measurement csv file: msr_iso_{msrsuffix}.csv.\n\t\toverwrite=False\n\t\tappend=False\n\n\t\tReturn\n\t\t------\n\t\tstatus (bool)\n\n\t\tWrite Output \n\t\t------------\n\t\te.g., msr_iso.csv\n\t\t\"\"\"\n\t\tfn = self.get_fp_msr(msrsuffix=msrsuffix)\n\n\t\tcondi = {'imgtag': imgtag, 'isocut': isocut, 'minarea': minarea, 'onlycenter': onlycenter, 'centerradius': centerradius}\n\n\t\tif append or overwrite or (not tabtools.fn_has_row(fn, condi)):\n\t\t\tprint(\"[isomeasurer] making measurement\")\n\n\t\t\timg = self.get_stamp_img(imgtag=imgtag, wunit=True)\n\t\t\txc, yc = self._get_xc_yc(img)\n\n\t\t\t# calc\n\t\t\tif np.all(~np.isnan(img)): \n\t\t\t\tcontours = self._get_contours_from_img(img=img, isocut=isocut, xc=xc, yc=yc, minarea=minarea, onlycenter=onlycenter, centerradius=centerradius)\n\t\t\t\ttab_msr = self._get_tab_measurements_from_contours(contours=contours, xc=xc, yc=yc)\n\t\t\telse: \n\t\t\t\tcontours = []\n\t\t\t\ttab_msr = self._get_tab_measurements_nan()\n\n\t\t\ttab_params = self._get_tab_params(imgtag=imgtag, isocut=isocut, minarea=minarea, onlycenter=onlycenter, centerradius=centerradius)\n\t\t\ttabout = at.hstack([tab_params, tab_msr])\n\n\t\t\t# output\n\t\t\ttabtools.write_row(fn=fn, row=tabout, condi=condi, overwrite=overwrite, append=append)\n\n\t\t\t# optional output\n\t\t\tif savecontours:\n\t\t\t\tfn_contours = self.get_fp_contours(imgtag=imgtag, onlycenter=onlycenter, suffix=plotsuffix)\n\t\t\t\twrite_pickle(contours, fn_contours, overwrite=overwrite)\n\n\t\t\tif plotmsr:\n\t\t\t\tfn_plot = self.get_fp_msrplot(imgtag=imgtag, suffix=plotsuffix)\n\t\t\t\tplottools.make_plot_img_w_contours(fn_plot=fn_plot, img=img, contours=contours)\n\n\t\telse:\n\t\t\tprint(\"[isomeasurer] skip making measurement as files exist\")\n\n\t\treturn os.path.isfile(fn)\n\n\n\tdef make_visualpanel(self, fn=None, compo_bands ='gri', imgtag='OIII5008_I', onlycenter=True, minarea=5, centerradius=5.*u.arcsec, tocolorbar=True, totitle=True, fontsize=12, overwrite=False):\n\t\t\"\"\" \n\t\tmake panel figure to visualize the composit and the iso measurements\n\t\tsaved to e.g., 'msr_iso-OIII5008_I_panel.pdf'\n\n\t\tParams\n\t\t------\n\t\tfn = None: default: msr_iso_{imgtag}_panel.pdf\n\t\tcompo_bands ='gri', imgtag='OIII5008_I', overwrite=False\n\n\t\tReturn\n\t\t------\n\t\tstatus\n\t\t\"\"\"\n\t\tif fn is None:\n\t\t\tfn = self.get_fp_msrplot(imgtag=imgtag, suffix='_panel')\n\t\telse: \n\t\t\tfn = self.dir_obj+fn\n\n\t\tif not os.path.isfile(fn) or overwrite:\n\t\t\tprint(\"[isomeasurer] making visual panel\")\n\n\t\t\t# get files ready \n\t\t\tself.make_colorimg(bands=compo_bands, img_type='stamp', overwrite=False)\n\n\t\t\t# access data\n\t\t\timg_compo = simg.imread(self.dir_obj+'color_stamp-{}.png'.format(compo_bands))\n\t\t\timg_map = self.get_stamp_img(imgtag=imgtag, wunit=False)\n\n\t\t\tsuffix = '_3e-15'\n\t\t\tisocut = 3.e-15*u.Unit('erg / (arcsec2 cm2 s)')\n\t\t\tfn_contours3 = self.get_fp_contours(imgtag=imgtag, onlycenter=onlycenter, suffix=suffix)\n\t\t\tif not os.path.isfile(fn_contours3):\n\t\t\t\tprint(\"[isomeasurer] re-doing measurements to make contours required for visual panel plots\")\n\t\t\t\tself.make_measurements(imgtag=imgtag, isocut=isocut, plotsuffix=suffix, minarea=minarea, onlycenter=onlycenter, centerradius=centerradius, overwrite=True, savecontours=True, plotmsr=False), \n\n\t\t\tcontours3 = read_pickle(fn_contours3)\n\n\t\t\tsuffix = '_1e-15'\n\t\t\tisocut = 1.e-15*u.Unit('erg / (arcsec2 cm2 s)')\n\t\t\tfn_contours1 = self.get_fp_contours(imgtag=imgtag, onlycenter=onlycenter, suffix=suffix)\n\t\t\tif not os.path.isfile(fn_contours1):\n\t\t\t\tprint(\"[isomeasurer] re-doing measurements to make contours required for visual panel plots\")\n\t\t\t\tself.make_measurements(imgtag=imgtag, isocut=isocut, plotsuffix=suffix, minarea=minarea, onlycenter=onlycenter, centerradius=centerradius, overwrite=True, savecontours=True, plotmsr=False), \n\n\t\t\tcontours1 = read_pickle(fn_contours1)\n\n\t\t\tz = self.z\n\t\t\tpixsize = self.pixsize.to_value(u.arcsec)\n\t\t\tlegend_suffix = ' at 3'\n\t\t\tname = self.obj.name[4:]\n\n\t\t\ttitle_compo = '${}~{}~{}~$'.format(compo_bands[0], compo_bands[1], compo_bands[2])+'$\\mathrm{Composite}$'\n\t\t\ttitle_map = '$\\mathrm{[OIII]\\lambda 5007~Intensity}$'\n\t\t\tlabel_cbar = '$I~[10^{-15}~\\mathrm{erg~s^{-1}~cm^{-2}~arcsec^{-2}}]$'\n\n\t\t\tplottools.make_iso_visual_panel(fn, img_compo, img_map, contours1, contours3, z, pixsize, legend_suffix, name, title_compo, title_map, label_cbar, tocolorbar=tocolorbar, totitle=totitle, fontsize=fontsize)\n\n\t\telse:\n\t\t\tprint(\"[isomeasurer] skip making visual panel as files exist\")\n\n\t\treturn os.path.isfile(fn)\n\n\t\t\n\tdef _get_tab_params(self, imgtag, isocut, minarea, onlycenter, centerradius):\n\t\t\"\"\"\n\t\treturn a one row table of the measurement params \n\t\t\"\"\"\n\t\ttab = at.Table([[imgtag], [str(isocut)], [minarea], [onlycenter], [str(centerradius)], ], names=['imgtag', 'isocut', 'minarea', 'onlycenter', 'centerradius', ])\n\t\treturn tab\n\n\n\tdef _get_tab_measurements_from_contours(self, contours, xc, yc):\n\t\t\"\"\" \n\t\tcalculate iso measurements from contours, return a table like: \n\t\t\"\"\"\n\n\t\ttab = polytools.ShapeParamsTab_from_contours(contours, xc, yc)\n\n\t\t# unit conversion\n\t\tarea_ars = tab['area_pix'][0]*(self.pixsize/u.arcsec)**2\n\t\tdmax_ars = self._pix_to_theta(tab['dmax_pix'][0], wunit=False)\n\t\trmax_ars = self._pix_to_theta(tab['rmax_pix'][0], wunit=False)\n\t\tdper_ars = self._pix_to_theta(tab['dper_pix'][0], wunit=False)\n\n\t\tkpc_per_arcsec = np.array(self._get_kpc_proper_per_arcsec())\n\n\t\tarea_kpc = area_ars * kpc_per_arcsec**2\n\t\tdmax_kpc = dmax_ars * kpc_per_arcsec\n\t\trmax_kpc = rmax_ars * kpc_per_arcsec\n\t\tdper_kpc = dper_ars * kpc_per_arcsec\n\n\t\ttab_converted = at.Table(names=['area_kpc', 'dmax_kpc', 'rmax_kpc', 'dper_kpc', 'area_ars', 'dmax_ars', 'rmax_ars', 'dper_ars', ])\n\t\ttab_converted.add_row([area_kpc, dmax_kpc, rmax_kpc, dper_kpc, area_ars, dmax_ars, rmax_ars, dper_ars, ])\n\n\t\ttabout = at.hstack([tab_converted, tab])\n\n\t\treturn tabout\n\n\n\tdef _get_tab_measurements_nan(self):\n\t\t\"\"\" \n\t\treturn a tab measurement just like _get_tab_measurements_from_contours() but with entries all nan. \n\t\t\"\"\"\n\t\tnames = ['area_kpc', 'dmax_kpc', 'rmax_kpc', 'dper_kpc', 'area_ars', 'dmax_ars', 'rmax_ars', 'dper_ars', 'area_pix', 'dmax_pix', 'rmax_pix', 'dper_pix', 'theta_dmax', 'theta_rmax', 'theta_dper', 'aspectr']\n\n\t\ttabout = at.Table(names=names)\n\t\ttabout.add_row([np.nan for i in range(len(names))])\n\n\t\treturn tabout\n\n\n\tdef _get_contours_from_img(self, img, isocut, xc, yc, minarea=0., onlycenter=False, centerradius=2.*u.arcsec):\n\t\t\"\"\"\n\t\tmake contour at isocut of image as python pickle file (fn_contours)\n\t\talways overwrite\n\n\t\tParams\n\t\t------\n\t\tself\n\t\timg (array)\n\t\tisocut (float or quantity):\n\t\t\thas to be of the same type of unit as image\n\t\tminarea (float):\n\t\t\tminimum area (pix) to be considered as contour patch\n\t\tonlycenter (bool):\n\t\t\twhether to take only center patches as patches (they all have to pass minarea test as well)\n\t\tcenterradius (angular quantity):\n\t\t\tif onlycenter = True, then it sets the radius of the center area. only patches overlapping with that area will be considered. \n\n\t\t\"\"\"\n\n\t\t# prep\n\t\ttry: \n\t\t\timg.unit\n\t\texcept:\n\t\t\timg_nparr = img/isocut\n\t\telse:\n\t\t\timg_nparr = np.array((img/isocut).to(u.dimensionless_unscaled))\n\n\t\t# find contours -- satisfy minarea\n\t\tcontours = polytools.find_largecontours(img=img_nparr, threshold=1., minarea=minarea)\n\n\t\tif onlycenter:  # select only those at the center\n\t\t\tcenterradius_pix = self._theta_to_pix(centerradius)\n\t\t\tcontours = polytools.select_center_contours(contours, xc, yc, radius=centerradius_pix)\n\n\t\treturn contours\n\n\n\ndef read_pickle(fn):\n\twith open(fn, 'rb') as handle:\n\t\tresult = pickle.load(handle)\n\treturn result\n\n\ndef write_pickle(result, fn, overwrite=False):\n\n\tif not os.path.isfile(fn) or overwrite:\n\t\twith open(fn, 'wb') as handle:\n\t\t\tpickle.dump(result, handle)\n\n"
    },
    {
        "instruction": "Create a Python program to compare two lists and find their common elements.",
        "input": "list1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]",
        "output": "def compare_lists(list1, list2):\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    return common_elements\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\ncommon_elements = compare_lists(list1, list2)\nprint(common_elements)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to compare two lists and find their common elements.\n\n### Input:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\n### Output:\ndef compare_lists(list1, list2):\n    common_elements = []\n    for element in list1:\n        if element in list2:\n            common_elements.append(element)\n    return common_elements\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [3, 4, 5, 6, 7]\n\ncommon_elements = compare_lists(list1, list2)\nprint(common_elements)"
    },
    {
        "instruction": "Build a tree structure for an online course program using HTML, CSS and JavaScript.",
        "input": "",
        "output": "<html>\n  <head>\n    <title>Course Tree</title>\n    <style>\n      ul {\n        list-style: none;\n      }\n    </style>\n  </head>\n  <body>\n    <ul>\n      <li>Programming\n        <ul>\n          <li>Python\n            <ul>\n              <li>Basics</li>\n              <li>Data Structures</li>\n              <li>Advanced Topics</li>\n            </ul>\n          </li>\n          <li>Javascript\n            <ul>\n              <li>Basics</li>\n              <li>Object Oriented Programming</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li>Design \n        <ul>\n          <li>UI/UX Design\n            <ul>\n              <li>Wireframing</li>\n              <li>Prototyping</li>\n              <li>Visual Design</li>\n            </ul>\n          </li>\n          <li>Graphic Design\n            <ul>\n              <li>Logo Design</li>\n              <li>Illustration</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </body>\n</html>",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a tree structure for an online course program using HTML, CSS and JavaScript.\n\n### Input:\n\n\n### Output:\n<html>\n  <head>\n    <title>Course Tree</title>\n    <style>\n      ul {\n        list-style: none;\n      }\n    </style>\n  </head>\n  <body>\n    <ul>\n      <li>Programming\n        <ul>\n          <li>Python\n            <ul>\n              <li>Basics</li>\n              <li>Data Structures</li>\n              <li>Advanced Topics</li>\n            </ul>\n          </li>\n          <li>Javascript\n            <ul>\n              <li>Basics</li>\n              <li>Object Oriented Programming</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n      <li>Design \n        <ul>\n          <li>UI/UX Design\n            <ul>\n              <li>Wireframing</li>\n              <li>Prototyping</li>\n              <li>Visual Design</li>\n            </ul>\n          </li>\n          <li>Graphic Design\n            <ul>\n              <li>Logo Design</li>\n              <li>Illustration</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </body>\n</html>"
    },
    {
        "instruction": "Generate a list of the first 10 Fibonacci numbers in Python.",
        "input": "",
        "output": "n=10\nresult=[]\n\n# first two numbers\nresult.append(0)\nresult.append(1)\n\n# iteration for generating Fibonacci numbers\nfor i in range(2, n):\n    result.append(result[i-2] + result[i-1])\n\n# print the result\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of the first 10 Fibonacci numbers in Python.\n\n### Input:\n\n\n### Output:\nn=10\nresult=[]\n\n# first two numbers\nresult.append(0)\nresult.append(1)\n\n# iteration for generating Fibonacci numbers\nfor i in range(2, n):\n    result.append(result[i-2] + result[i-1])\n\n# print the result\nprint(result)"
    },
    {
        "instruction": "Create a program in Python that takes a list of strings and returns a new list with each string reversed.",
        "input": "[\"Hello\", \"World\"]",
        "output": "def reverse_list(strings):\n    return [s[::-1] for s in strings]\n\nstrings = [\"Hello\", \"World\"]\nprint(reverse_list(strings))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes a list of strings and returns a new list with each string reversed.\n\n### Input:\n[\"Hello\", \"World\"]\n\n### Output:\ndef reverse_list(strings):\n    return [s[::-1] for s in strings]\n\nstrings = [\"Hello\", \"World\"]\nprint(reverse_list(strings))"
    },
    {
        "instruction": "Create a Python class that has the following functionality.",
        "input": "Create a class with a method to check if a given string contains any vowels or not.",
        "output": "class StringChecker:\n    def containsVowels(self, s):\n        vowels = set('aeiouAEIOU')\n        for letter in s:\n            if letter in vowels:\n                return True\n        return False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that has the following functionality.\n\n### Input:\nCreate a class with a method to check if a given string contains any vowels or not.\n\n### Output:\nclass StringChecker:\n    def containsVowels(self, s):\n        vowels = set('aeiouAEIOU')\n        for letter in s:\n            if letter in vowels:\n                return True\n        return False"
    },
    {
        "instruction": "Design a game of Hangman in Python.",
        "input": "",
        "output": "import random\nimport string\n\n# Constants\nmax_guesses = 6\nhangman_art = [\n    '''\n        +---+\n        |   |\n            |\n            |\n            |\n            |\n        =========''', '''\n        +---+\n        |   |\n        O   |\n            |\n            |\n            |\n        =========''', '''\n        +---+\n        |   |\n        O   |\n        |   |\n            |\n            |\n        =========''', '''\n        +---+\n        |   |\n        O   |\n       \\|   |\n            |\n            |\n        =========''', '''\n        +---+\n        |   |\n        O   |\n       \\|/  |\n            |\n            |\n        =========''', '''\n        +---+\n        |   |\n        O   |\n       \\|/  |\n        |   |\n            |\n        =========''', '''\n        +---+\n        |   |\n        O   |\n       \\|/  |\n        |   |\n       /    |\n        =========''', '''\n        +---+\n        |   |\n        O   |\n       \\|/  |\n        |   |\n       / \\  |\n        =========''']\n\n# State Variables\nplayer_guesses = []\nwords_list = [\"python\", \"javascript\", \"swift\", \"kotlin\"]\nword = words_list[random.randint(0, len(words_list))]\nguesses_left = max_guesses\n\n# Function Definitions\ndef generate_masked_word(word, masked_word, guessed_letters):\n    for letter in word:\n        if letter in guessed_letters:\n            masked_word += letter\n        else:\n            masked_word += '_'\n    return masked_word\n\ndef print_instructions():\n    print(\"Welcome to Hangman!\")\n    print(\"The mystery word has \" + str(len(word)) + \" letters.\")\n    print(\"You have \" + str(max_guesses) + \" guesses to guess all of the letters correctly.\")\n    print(\"See if you can win!\")\n\ndef print_game_state(guesses, hangman_art, masked_word, guessed_letters):\n    print(hangman_art[guesses-1])\n    print(\"Guessed so far: \" + str(guessed_letters))\n    print(\"Your word to guess looks like: \" + str(masked_word))\n\ndef print_win(word):\n    print(\"Congratulations! You guessed the word '\" + str(word))\n\ndef main():\n    guessed_letters = []\n    masked_word = \"\"\n    print_instructions()\n\n    while len(word) != len(masked_word) or ((len(word) == len(masked_word)) and (word != masked_word)):\n        print_game_state(guesses_left, hangman_art, masked_word, guessed_letters)\n\n        letter = input('Guess a letter: ')\n        if (letter in guessed_letters) or (letter not in string.ascii_lowercase):\n            continue\n\n        guessed_letters.append(letter)\n        masked_word = generate_masked_word(word, masked_word, guessed_letters)\n        if letter in word:\n            print(\"Yes! \" + letter + \" is in the word.\")\n            continue\n\n        guesses_left -= 1\n        print(\"No! \" + letter + \" is not in the word. You have \" + str(guesses_left) + \" guesses left.\")\n\n        if guesses_left == 0:\n            print(\"Sorry, you lost the game. The word was: \" + str(word))\n            exit()\n    \n    print_win(word)\n\nif __name__ == \"__main__\":\n    main()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a game of Hangman in Python.\n\n### Input:\n\n\n### Output:\nimport random\nimport string\n\n# Constants\nmax_guesses = 6\nhangman_art = [\n    '''\n        +---+\n        |   |\n            |\n            |\n            |\n            |\n        =========''', '''\n        +---+\n        |   |\n        O   |\n            |\n            |\n            |\n        =========''', '''\n        +---+\n        |   |\n        O   |\n        |   |\n            |\n            |\n        =========''', '''\n        +---+\n        |   |\n        O   |\n       \\|   |\n            |\n            |\n        =========''', '''\n        +---+\n        |   |\n        O   |\n       \\|/  |\n            |\n            |\n        =========''', '''\n        +---+\n        |   |\n        O   |\n       \\|/  |\n        |   |\n            |\n        =========''', '''\n        +---+\n        |   |\n        O   |\n       \\|/  |\n        |   |\n       /    |\n        =========''', '''\n        +---+\n        |   |\n        O   |\n       \\|/  |\n        |   |\n       / \\  |\n        =========''']\n\n# State Variables\nplayer_guesses = []\nwords_list = [\"python\", \"javascript\", \"swift\", \"kotlin\"]\nword = words_list[random.randint(0, len(words_list))]\nguesses_left = max_guesses\n\n# Function Definitions\ndef generate_masked_word(word, masked_word, guessed_letters):\n    for letter in word:\n        if letter in guessed_letters:\n            masked_word += letter\n        else:\n            masked_word += '_'\n    return masked_word\n\ndef print_instructions():\n    print(\"Welcome to Hangman!\")\n    print(\"The mystery word has \" + str(len(word)) + \" letters.\")\n    print(\"You have \" + str(max_guesses) + \" guesses to guess all of the letters correctly.\")\n    print(\"See if you can win!\")\n\ndef print_game_state(guesses, hangman_art, masked_word, guessed_letters):\n    print(hangman_art[guesses-1])\n    print(\"Guessed so far: \" + str(guessed_letters))\n    print(\"Your word to guess looks like: \" + str(masked_word))\n\ndef print_win(word):\n    print(\"Congratulations! You guessed the word '\" + str(word))\n\ndef main():\n    guessed_letters = []\n    masked_word = \"\"\n    print_instructions()\n\n    while len(word) != len(masked_word) or ((len(word) == len(masked_word)) and (word != masked_word)):\n        print_game_state(guesses_left, hangman_art, masked_word, guessed_letters)\n\n        letter = input('Guess a letter: ')\n        if (letter in guessed_letters) or (letter not in string.ascii_lowercase):\n            continue\n\n        guessed_letters.append(letter)\n        masked_word = generate_masked_word(word, masked_word, guessed_letters)\n        if letter in word:\n            print(\"Yes! \" + letter + \" is in the word.\")\n            continue\n\n        guesses_left -= 1\n        print(\"No! \" + letter + \" is not in the word. You have \" + str(guesses_left) + \" guesses left.\")\n\n        if guesses_left == 0:\n            print(\"Sorry, you lost the game. The word was: \" + str(word))\n            exit()\n    \n    print_win(word)\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "instruction": "Develop a Python program that calculates the sum of positive integers up to and including a given number 'n'.",
        "input": "n = 10",
        "output": "def sum_of_first_n_numbers(n): \n\tsum = 0\n\t\n\t# iterate over all numbers \n\t# from 0 to n \n\tfor num in range(0, n+1): \n\t\tsum += num \n\t\n\treturn sum\n\nn = 10\nprint(sum_of_first_n_numbers(n)) \n\n# Output: 55",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program that calculates the sum of positive integers up to and including a given number 'n'.\n\n### Input:\nn = 10\n\n### Output:\ndef sum_of_first_n_numbers(n): \n\tsum = 0\n\t\n\t# iterate over all numbers \n\t# from 0 to n \n\tfor num in range(0, n+1): \n\t\tsum += num \n\t\n\treturn sum\n\nn = 10\nprint(sum_of_first_n_numbers(n)) \n\n# Output: 55"
    },
    {
        "instruction": "Design an API endpoint in Python that takes in a PDF document and returns the number of words in it.",
        "input": "",
        "output": "@app.route('/api/getWordCount', methods=['POST'])\ndef getWordCount():\n    \"\"\"Endpoint for getting words count in PDF document\"\"\"\n    data = request.get_json()\n    pdf = data['pdf'] \n    word_count = count_words(pdf)\n    return jsonify({'wordCount': word_count})",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an API endpoint in Python that takes in a PDF document and returns the number of words in it.\n\n### Input:\n\n\n### Output:\n@app.route('/api/getWordCount', methods=['POST'])\ndef getWordCount():\n    \"\"\"Endpoint for getting words count in PDF document\"\"\"\n    data = request.get_json()\n    pdf = data['pdf'] \n    word_count = count_words(pdf)\n    return jsonify({'wordCount': word_count})"
    },
    {
        "instruction": "Create a python program to edit the given nested dictionary by adding a new element.",
        "input": "nested_dict = {\n        'makers': ['John', 'Alan'],\n        'printers':{\n            'color':['hp', 'canon'],\n            'black_white': ['epson']\n        }\n    }\nNew element to add:\n\n{'copiers':['Xerox', 'Ricoh']}",
        "output": "def edit_dict(nested_dict, new_element):\n    \"\"\"Edit the given nested dictionary by adding a new element.\"\"\"\n    nested_dict.update(new_element)\n    return nested_dict\n\n# Usage Example \nnested_dict = {\n        'makers': ['John', 'Alan'],\n        'printers':{\n            'color':['hp', 'canon'],\n            'black_white': ['epson']\n        }\n    }\n\nnew_element = {'copiers':['Xerox', 'Ricoh']}\n\nedited_dict = edit_dict(nested_dict, new_element)\nprint(edited_dict)\n# {'makers': ['John', 'Alan'], \n# 'printers': {'color': ['hp', 'canon'], 'black_white': ['epson']}, \n# 'copiers': ['Xerox', 'Ricoh']",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to edit the given nested dictionary by adding a new element.\n\n### Input:\nnested_dict = {\n        'makers': ['John', 'Alan'],\n        'printers':{\n            'color':['hp', 'canon'],\n            'black_white': ['epson']\n        }\n    }\nNew element to add:\n\n{'copiers':['Xerox', 'Ricoh']}\n\n### Output:\ndef edit_dict(nested_dict, new_element):\n    \"\"\"Edit the given nested dictionary by adding a new element.\"\"\"\n    nested_dict.update(new_element)\n    return nested_dict\n\n# Usage Example \nnested_dict = {\n        'makers': ['John', 'Alan'],\n        'printers':{\n            'color':['hp', 'canon'],\n            'black_white': ['epson']\n        }\n    }\n\nnew_element = {'copiers':['Xerox', 'Ricoh']}\n\nedited_dict = edit_dict(nested_dict, new_element)\nprint(edited_dict)\n# {'makers': ['John', 'Alan'], \n# 'printers': {'color': ['hp', 'canon'], 'black_white': ['epson']}, \n# 'copiers': ['Xerox', 'Ricoh']"
    },
    {
        "instruction": "Construct a program in Python to classify a given set of numbers into one of the four types: prime numbers, even numbers, odd numbers, and composite numbers.",
        "input": "",
        "output": "def classify_numbers(lst):\n    result = []\n    for num in lst:\n        if num <= 1:\n            result.append(\"Composite\")\n        elif num == 2:\n            result.append(\"Prime\")\n        elif num % 2 == 0:\n            result.append(\"Even\")\n        else:\n            is_prime = True\n            for i in range(2, int(num**0.5)+1):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                result.append(\"Prime\")\n            else:\n                result.append(\"Odd\")\n    return result",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program in Python to classify a given set of numbers into one of the four types: prime numbers, even numbers, odd numbers, and composite numbers.\n\n### Input:\n\n\n### Output:\ndef classify_numbers(lst):\n    result = []\n    for num in lst:\n        if num <= 1:\n            result.append(\"Composite\")\n        elif num == 2:\n            result.append(\"Prime\")\n        elif num % 2 == 0:\n            result.append(\"Even\")\n        else:\n            is_prime = True\n            for i in range(2, int(num**0.5)+1):\n                if num % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                result.append(\"Prime\")\n            else:\n                result.append(\"Odd\")\n    return result"
    },
    {
        "instruction": "Optimize the existing Python code, so that the application runs faster (on average).",
        "input": "def factorial(n):\n if n == 0:\n return 1\n else:\n return n*factorial(n-1)\n\nprint(factorial(3))",
        "output": "def factorial(n):\n result = 1\n for i in range(1, n+1):\n result *= i\n return result\n \nprint(factorial(3))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the existing Python code, so that the application runs faster (on average).\n\n### Input:\ndef factorial(n):\n if n == 0:\n return 1\n else:\n return n*factorial(n-1)\n\nprint(factorial(3))\n\n### Output:\ndef factorial(n):\n result = 1\n for i in range(1, n+1):\n result *= i\n return result\n \nprint(factorial(3))"
    },
    {
        "instruction": "Create a program in Python for generating an HTML table for a given set of inputs.",
        "input": "[('First', 'John'), ('Last', 'Doe'), ('Age', 20)]",
        "output": "def create_html_table(list_of_tuples):\n    html_string = \"<html>\\n<body>\\n<table>\\n\"\n    # Generate HTML table header\n    html_string += \"<tr>\\n\"\n    for key in list_of_tuples[0].keys():\n        html_string += \"<th>{}</th>\\n\".format(key)\n    html_string += \"</tr>\\n\"\n    # Generate HTML table content\n    for tuple_ in list_of_tuples:\n        html_string += \"<tr>\\n\"\n        for data in tuple_:\n            html_string += \"<td>{}</td>\\n\".format(data)\n        html_string += \"</tr>\\n\"\n    # Close the table\n    html_string += \"</table>\\n</body>\\n</html>\"\n\n    return html_string\n\nif __name__ == \"__main__\":\n    list_of_tuples = [('First', 'John'), ('Last', 'Doe'), ('Age', 20)]\n    html_string = create_html_table(list_of_tuples)\n    print(html_string)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python for generating an HTML table for a given set of inputs.\n\n### Input:\n[('First', 'John'), ('Last', 'Doe'), ('Age', 20)]\n\n### Output:\ndef create_html_table(list_of_tuples):\n    html_string = \"<html>\\n<body>\\n<table>\\n\"\n    # Generate HTML table header\n    html_string += \"<tr>\\n\"\n    for key in list_of_tuples[0].keys():\n        html_string += \"<th>{}</th>\\n\".format(key)\n    html_string += \"</tr>\\n\"\n    # Generate HTML table content\n    for tuple_ in list_of_tuples:\n        html_string += \"<tr>\\n\"\n        for data in tuple_:\n            html_string += \"<td>{}</td>\\n\".format(data)\n        html_string += \"</tr>\\n\"\n    # Close the table\n    html_string += \"</table>\\n</body>\\n</html>\"\n\n    return html_string\n\nif __name__ == \"__main__\":\n    list_of_tuples = [('First', 'John'), ('Last', 'Doe'), ('Age', 20)]\n    html_string = create_html_table(list_of_tuples)\n    print(html_string)"
    },
    {
        "instruction": "Using Python, create a program to get the grade corresponding to a percentage.",
        "input": "",
        "output": "def grade(percentage):\n    if percentage >= 90:\n        return 'A'\n    elif percentage >= 80:\n        return 'B'\n    elif percentage >= 70:\n        return 'C'\n    elif percentage >= 60:\n        return 'D'\n    else:\n        return 'F'",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, create a program to get the grade corresponding to a percentage.\n\n### Input:\n\n\n### Output:\ndef grade(percentage):\n    if percentage >= 90:\n        return 'A'\n    elif percentage >= 80:\n        return 'B'\n    elif percentage >= 70:\n        return 'C'\n    elif percentage >= 60:\n        return 'D'\n    else:\n        return 'F'"
    },
    {
        "instruction": "Write a Python program to sort a list of tuples using a lambda expression",
        "input": "tuple_list = [(1, 3), (2, 2), (3, 1), (2, 3)]",
        "output": "sorted_list = sorted(tuple_list, key=lambda x: (x[1], x[0]))\nprint(sorted_list)\n\n# Output: [(3, 1), (2, 2), (1, 3), (2, 3)]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a list of tuples using a lambda expression\n\n### Input:\ntuple_list = [(1, 3), (2, 2), (3, 1), (2, 3)]\n\n### Output:\nsorted_list = sorted(tuple_list, key=lambda x: (x[1], x[0]))\nprint(sorted_list)\n\n# Output: [(3, 1), (2, 2), (1, 3), (2, 3)]"
    },
    {
        "instruction": "Write a Python script to scrape web data.",
        "input": "URL: https://en.wikipedia.org/wiki/List_of_Presidents_of_the_United_States",
        "output": "import requests\nimport urllib.request\nfrom bs4 import BeautifulSoup\n\n# specify the url\nurl = 'https://en.wikipedia.org/wiki/List_of_Presidents_of_the_United_States'\n\n# query the website and return the html\npage = urllib.request.urlopen(url)\n\n# parse the html using beautiful soup\nsoup = BeautifulSoup(page, 'html.parser')\n\n# find all table rows\ntrs = soup.find_all('tr')\n\n# extract the table data \ndata = []\nfor tr in trs:\n    td = tr.find_all('td')\n    row = [element.text for element in td]\n    data.append(row)\n\n# print the scraped data\nfor row in data:\n    print(row)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to scrape web data.\n\n### Input:\nURL: https://en.wikipedia.org/wiki/List_of_Presidents_of_the_United_States\n\n### Output:\nimport requests\nimport urllib.request\nfrom bs4 import BeautifulSoup\n\n# specify the url\nurl = 'https://en.wikipedia.org/wiki/List_of_Presidents_of_the_United_States'\n\n# query the website and return the html\npage = urllib.request.urlopen(url)\n\n# parse the html using beautiful soup\nsoup = BeautifulSoup(page, 'html.parser')\n\n# find all table rows\ntrs = soup.find_all('tr')\n\n# extract the table data \ndata = []\nfor tr in trs:\n    td = tr.find_all('td')\n    row = [element.text for element in td]\n    data.append(row)\n\n# print the scraped data\nfor row in data:\n    print(row)"
    },
    {
        "instruction": "Create a searching algorithm in Python to find a target element in a list of integers.",
        "input": "target = 7\nelements = [1, 2, 3, 4, 5, 6, 7, 8]",
        "output": "def search(target, elements):\n  start = 0 \n  end = len(elements) - 1\n\n  while start <= end:\n    mid = (start + end) // 2 \n      \n    if target == elements[mid]: \n      return True \n  \n    elif target < elements[mid]: \n      end = mid - 1\n\n    else: \n      start = mid + 1\n    \n  return False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a searching algorithm in Python to find a target element in a list of integers.\n\n### Input:\ntarget = 7\nelements = [1, 2, 3, 4, 5, 6, 7, 8]\n\n### Output:\ndef search(target, elements):\n  start = 0 \n  end = len(elements) - 1\n\n  while start <= end:\n    mid = (start + end) // 2 \n      \n    if target == elements[mid]: \n      return True \n  \n    elif target < elements[mid]: \n      end = mid - 1\n\n    else: \n      start = mid + 1\n    \n  return False"
    },
    {
        "instruction": "Develop a machine learning classifier in Python to classify hand written digits.",
        "input": "",
        "output": "from sklearn.datasets import load_digits\ndigits = load_digits()\n\n# Split data into training and test set\nX_train, X_test, y_train, y_test = train_test_split(digits.data, digits.target, train_size=0.75)\n\n# Create a Random Forest classifier\nclf = RandomForestClassifier(n_estimators=100, random_state=0)\n\n# Train the model\nclf.fit(X_train, y_train)\n\n# Test the model\naccuracy = clf.score(X_test, y_test)\nprint(accuracy)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a machine learning classifier in Python to classify hand written digits.\n\n### Input:\n\n\n### Output:\nfrom sklearn.datasets import load_digits\ndigits = load_digits()\n\n# Split data into training and test set\nX_train, X_test, y_train, y_test = train_test_split(digits.data, digits.target, train_size=0.75)\n\n# Create a Random Forest classifier\nclf = RandomForestClassifier(n_estimators=100, random_state=0)\n\n# Train the model\nclf.fit(X_train, y_train)\n\n# Test the model\naccuracy = clf.score(X_test, y_test)\nprint(accuracy)"
    },
    {
        "instruction": "Generate a code to remove a given element from a dictionary in Python",
        "input": "dictionary = {\u201ca\u201d:1, \u201cb\u201d:2, \u201cc\u201d:3}\nkey = \u201cb\u201d",
        "output": "def remove_dict_element(dictionary, key):\n    # Check if the key is present in the dictionary\n    if key in dictionary:\n        # If yes, remove the key\n        del dictionary[key]\n    # Return the updated dictionary     \n    return dictionary",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to remove a given element from a dictionary in Python\n\n### Input:\ndictionary = {\u201ca\u201d:1, \u201cb\u201d:2, \u201cc\u201d:3}\nkey = \u201cb\u201d\n\n### Output:\ndef remove_dict_element(dictionary, key):\n    # Check if the key is present in the dictionary\n    if key in dictionary:\n        # If yes, remove the key\n        del dictionary[key]\n    # Return the updated dictionary     \n    return dictionary"
    },
    {
        "instruction": "Write a Python program that returns the factorial of a number.",
        "input": "5",
        "output": "def factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(5)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that returns the factorial of a number.\n\n### Input:\n5\n\n### Output:\ndef factorial(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(5)\nprint(result)"
    },
    {
        "instruction": "Create a python class that simulates an invoice with information about the item and the cost.",
        "input": "Example of an Invoice:\n\nItem: Pen\nPrice: $3",
        "output": "class Invoice:\n    def __init__(self, item, price):\n        self.item = item\n        self.price = price\n    \n    def get_item(self):\n        return self.item\n    \n    def get_price(self):\n        return self.price\n\ninvoice = Invoice(\"Pen\", 3)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python class that simulates an invoice with information about the item and the cost.\n\n### Input:\nExample of an Invoice:\n\nItem: Pen\nPrice: $3\n\n### Output:\nclass Invoice:\n    def __init__(self, item, price):\n        self.item = item\n        self.price = price\n    \n    def get_item(self):\n        return self.item\n    \n    def get_price(self):\n        return self.price\n\ninvoice = Invoice(\"Pen\", 3)"
    },
    {
        "instruction": "Create a list of words from a sentence using Python",
        "input": "The quick brown fox jumps over the lazy dog",
        "output": "sentence = \"The quick brown fox jumps over the lazy dog\" \nword_list = sentence.split(\" \") \nprint(word_list) \n\n# Output: ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a list of words from a sentence using Python\n\n### Input:\nThe quick brown fox jumps over the lazy dog\n\n### Output:\nsentence = \"The quick brown fox jumps over the lazy dog\" \nword_list = sentence.split(\" \") \nprint(word_list) \n\n# Output: ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']"
    },
    {
        "instruction": "Use Django to create an online poll application.",
        "input": "",
        "output": "# Create a Django project\ndjango-admin startproject poll_project\n\n# Navigate to the project directory\ncd poll_project\n\n# Create a Django app to handle polls\npython manage.py startapp polls\n\n# Edit polls/models.py to define the Poll data model\nfrom django.db import models\n\nclass Poll(models.Model):\n    question = models.CharField(max_length=200)\n    pub_date = models.DateTimeField('date published')\n\n# Edit polls/views.py to define views for the polls\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\nfrom polls.models import Poll\n\ndef index(request):\n    latest_poll_list = Poll.objects.order_by('-pub_date')[:5]\n    context = {'latest_poll_list': latest_poll_list}\n    return render(request, 'polls/index.html', context)\n\n# Edit polls/urls.py to define the polls app urls\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n\n# Edit poll_project/urls.py to include the polls app\nfrom django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('polls/', include('polls.urls')),\n    path('admin/', admin.site.urls),\n]\n\n# Create templates/polls/index.html to display the polls\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>My Polls</title>\n    </head>\n    <body>\n        {% if latest_poll_list %}\n            <ul>\n            {% for poll in latest_poll_list %}\n                <li><a href=\"/polls/{{ poll.id }}/\">{{ poll.question }}</a></li>\n            {% endfor %}\n            </ul>\n        {% else %}\n            <p>No polls are available.</p>\n        {% endif %}\n    </body>\n</html>",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse Django to create an online poll application.\n\n### Input:\n\n\n### Output:\n# Create a Django project\ndjango-admin startproject poll_project\n\n# Navigate to the project directory\ncd poll_project\n\n# Create a Django app to handle polls\npython manage.py startapp polls\n\n# Edit polls/models.py to define the Poll data model\nfrom django.db import models\n\nclass Poll(models.Model):\n    question = models.CharField(max_length=200)\n    pub_date = models.DateTimeField('date published')\n\n# Edit polls/views.py to define views for the polls\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\nfrom polls.models import Poll\n\ndef index(request):\n    latest_poll_list = Poll.objects.order_by('-pub_date')[:5]\n    context = {'latest_poll_list': latest_poll_list}\n    return render(request, 'polls/index.html', context)\n\n# Edit polls/urls.py to define the polls app urls\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n\n# Edit poll_project/urls.py to include the polls app\nfrom django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('polls/', include('polls.urls')),\n    path('admin/', admin.site.urls),\n]\n\n# Create templates/polls/index.html to display the polls\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>My Polls</title>\n    </head>\n    <body>\n        {% if latest_poll_list %}\n            <ul>\n            {% for poll in latest_poll_list %}\n                <li><a href=\"/polls/{{ poll.id }}/\">{{ poll.question }}</a></li>\n            {% endfor %}\n            </ul>\n        {% else %}\n            <p>No polls are available.</p>\n        {% endif %}\n    </body>\n</html>"
    },
    {
        "instruction": "Generate an HTML page with an ordered list which displays the top 5 programming languages in descending order.",
        "input": "Python, Java, JavaScript, C#, C++",
        "output": "<html>\n<head>\n    <title>Top 5 Programming Languages</title>\n</head>\n<body>\n    <ul>\n        <li>Python</li>\n        <li>Java</li>\n        <li>JavaScript</li>\n        <li>C#</li>\n        <li>C++</li>\n    </ul>\n</body>\n</html>",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an HTML page with an ordered list which displays the top 5 programming languages in descending order.\n\n### Input:\nPython, Java, JavaScript, C#, C++\n\n### Output:\n<html>\n<head>\n    <title>Top 5 Programming Languages</title>\n</head>\n<body>\n    <ul>\n        <li>Python</li>\n        <li>Java</li>\n        <li>JavaScript</li>\n        <li>C#</li>\n        <li>C++</li>\n    </ul>\n</body>\n</html>"
    },
    {
        "instruction": "Create an AI algorithm in Python that will predict the stock price of a given stock for the next day.",
        "input": "Not applicable",
        "output": "import pandas as pd\nimport numpy as np\nfrom sklearn.svm import SVR\nimport matplotlib.pyplot as plt\n\n# Load the data\ndf = pd.read_csv('stock-data.csv')\n\n# Preprocess the data\nX = np.array(df.index).reshape(-1, 1)\ny = df['price']\n\n# Use SVR to create a model\nclf = SVR(kernel='rbf')\nclf.fit(X, y)\n\n# Make prediction using the model\nx_pre = np.array([len(X) + 1])\nx_pre = x_pre.reshape(-1, 1)\nprediction = clf.predict(x_pre)\n\nprint(\"Predicted stock price: {}\".format(prediction[0]))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI algorithm in Python that will predict the stock price of a given stock for the next day.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.svm import SVR\nimport matplotlib.pyplot as plt\n\n# Load the data\ndf = pd.read_csv('stock-data.csv')\n\n# Preprocess the data\nX = np.array(df.index).reshape(-1, 1)\ny = df['price']\n\n# Use SVR to create a model\nclf = SVR(kernel='rbf')\nclf.fit(X, y)\n\n# Make prediction using the model\nx_pre = np.array([len(X) + 1])\nx_pre = x_pre.reshape(-1, 1)\nprediction = clf.predict(x_pre)\n\nprint(\"Predicted stock price: {}\".format(prediction[0]))"
    },
    {
        "instruction": "Write a Python program to calculate the sum of two integers without using the \u2018+\u2019 operator.",
        "input": "3, 4",
        "output": "def add_without_plus_operator(a, b):\n    # Iterate till there is no carry\n    while (b != 0):\n        # Carry now contains common set bits of x and y\n        carry = a & b\n\n        # Sum of bits of x and y where at least one of the bits is not set\n        a = a ^ b\n\n        # Carry is shifted by one so that adding it to x gives the required sum\n        b = carry << 1\n\n    return a\n\nif __name__ == \"__main__\":\n    a = 3\n    b = 4\n    print(add_without_plus_operator(a, b))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the sum of two integers without using the \u2018+\u2019 operator.\n\n### Input:\n3, 4\n\n### Output:\ndef add_without_plus_operator(a, b):\n    # Iterate till there is no carry\n    while (b != 0):\n        # Carry now contains common set bits of x and y\n        carry = a & b\n\n        # Sum of bits of x and y where at least one of the bits is not set\n        a = a ^ b\n\n        # Carry is shifted by one so that adding it to x gives the required sum\n        b = carry << 1\n\n    return a\n\nif __name__ == \"__main__\":\n    a = 3\n    b = 4\n    print(add_without_plus_operator(a, b))"
    },
    {
        "instruction": "Can you write a Python program to take a list and create a new list with unique elements of the first list?",
        "input": "list=[1,2,2,3,3,3]",
        "output": "def unique_list(list):\n    unique_list = []\n    for element in list:\n        if element not in unique_list:\n            unique_list.append(element)\n    return unique_list\n\nunique_elements = unique_list([1,2,2,3,3,3])\nprint(unique_elements)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you write a Python program to take a list and create a new list with unique elements of the first list?\n\n### Input:\nlist=[1,2,2,3,3,3]\n\n### Output:\ndef unique_list(list):\n    unique_list = []\n    for element in list:\n        if element not in unique_list:\n            unique_list.append(element)\n    return unique_list\n\nunique_elements = unique_list([1,2,2,3,3,3])\nprint(unique_elements)"
    },
    {
        "instruction": "Create a python program to assess whether or not a movie genre is representing violent behavior, given a review of the movie.",
        "input": "Review: The movie is full of thrilling action scenes and lots of violence.",
        "output": "\"\"\"\nCreate a program to assess whether or not a movie genre is representing violent behaviour\n\"\"\"\n\nimport nltk\nfrom nltk.tokenize import word_tokenize\n\ndef classify_movie(review):\n    # Tokenize review\n    tokens = word_tokenize(review)\n\n    # Check for violent words in the review\n    violent_words = ['violence', 'violent', 'killing', 'fight', 'bloody', 'war']\n\n    for token in tokens:\n        if token in violent_words:\n            return 'Yes'\n\n    return 'No'\n\nif __name__ == '__main__':\n    review = 'The movie is full of thrilling action scenes and lots of violence.'\n    result = classify_movie(review)\n    print(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to assess whether or not a movie genre is representing violent behavior, given a review of the movie.\n\n### Input:\nReview: The movie is full of thrilling action scenes and lots of violence.\n\n### Output:\n\"\"\"\nCreate a program to assess whether or not a movie genre is representing violent behaviour\n\"\"\"\n\nimport nltk\nfrom nltk.tokenize import word_tokenize\n\ndef classify_movie(review):\n    # Tokenize review\n    tokens = word_tokenize(review)\n\n    # Check for violent words in the review\n    violent_words = ['violence', 'violent', 'killing', 'fight', 'bloody', 'war']\n\n    for token in tokens:\n        if token in violent_words:\n            return 'Yes'\n\n    return 'No'\n\nif __name__ == '__main__':\n    review = 'The movie is full of thrilling action scenes and lots of violence.'\n    result = classify_movie(review)\n    print(result)"
    },
    {
        "instruction": "Given a list of words and a length, write a Python program that returns a list of words with length equal or greater than the given length.",
        "input": "words = ['apple', 'toy', 'trees']\nlength = 5",
        "output": "def search_by_length(words, length):\n    result = []\n    for word in words:\n        if len(word) >= length:\n            result.append(word)\n    return result\n\nwords = ['apple', 'toy', 'trees']\nlength = 5\n\nprint(search_by_length(words, length))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of words and a length, write a Python program that returns a list of words with length equal or greater than the given length.\n\n### Input:\nwords = ['apple', 'toy', 'trees']\nlength = 5\n\n### Output:\ndef search_by_length(words, length):\n    result = []\n    for word in words:\n        if len(word) >= length:\n            result.append(word)\n    return result\n\nwords = ['apple', 'toy', 'trees']\nlength = 5\n\nprint(search_by_length(words, length))"
    },
    {
        "instruction": "Write a Python method that takes a string and returns its reverse.",
        "input": "text = 'hello'",
        "output": "def reverse(text):\n return text[::-1]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python method that takes a string and returns its reverse.\n\n### Input:\ntext = 'hello'\n\n### Output:\ndef reverse(text):\n return text[::-1]"
    },
    {
        "instruction": "Create a neural network in Python to predict the probability of a person having a certain disease.",
        "input": "",
        "output": "import tensorflow as tf\nimport numpy as np\n\n# Input data\ninputData = np.array([[Age, Gender, Weight, Height, Systolic BP, Diastolic BP], ...])\n\n# Output data\noutputData = np.array([Disease_probability], ...])\n\n# Initialize variables\nnumberOfInputs = len(inputData[0])\nnumberOfOutputs = len(outputData[0])\n# Define the number of neurons in each layer\nhiddenUnits = [5,5]\n\n# Create placeholders for the inputs\nx = tf.placeholder(tf.float32, [None, numberOfInputs])\ny = tf.placeholder(tf.float32, [None, numberOfOutputs])\n\n# Create weights\nweights = {\n    \"h1\": tf.Variable(tf.random_normal([numberOfInputs, hiddenUnits[0]]) ),\n    \"h2\": tf.Variable(tf.random_normal([hiddenUnits[0], hiddenUnits[1]] )),\n    \"output\": tf.Variable(tf.random_normal([hiddenUnits[1], numberOfOutputs] ))\n}\n\n# Create biases\nbiases = {\n    \"b1\": tf.Variable(tf.random_normal([hiddenUnits[0]] )),\n    \"b2\": tf.Variable(tf.random_normal([hiddenUnits[1]] )),\n    \"output\": tf.Variable(tf.random_normal([numberOfOutputs] ))\n}\n\n# Create forward propagation step\ndef forwardPropagation(x):\n    # Hidden layer 1\n    layerOne = tf.add( tf.matmul(x, weights[\"h1\"] ), biases[\"b1\"] )\n    layerOne = tf.nn.relu(layerOne)\n\n    # Hidden layer 2\n    layerTwo = tf.add( tf.matmul(layerOne, weights[\"h2\"] ), biases[\"b2\"] )\n    layerTwo = tf.nn.relu(layerTwo)\n\n    # Output layer\n    outputLayer = tf.add( tf.matmul(layerTwo, weights[\"output\"]), biases[\"output\"] )\n    return outputLayer\n\n# Create loss calculating step\ndef computeLoss(predictions, y):\n    return tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits(logits=predictions, labels=y) )\n\n# Create optimizer step\ndef trainModel(loss):\n    learningRate = 0.001\n    return tf.train.AdamOptimizer(learningRate).minimize(loss)\n\ndef main():\n    # Run forward propagation \n    predictions = forwardPropagation(x)\n\n    # Calculate loss\n    loss = computeLoss(predictions, y)\n\n    # Train the model\n    train = trainModel(loss)\n\n    # Create session\n    with tf.Session() as sess:\n        # Initialize all the variables\n        sess.run(tf.global_variables_initializer())\n\n        # Train the model for the specified number of epochs\n        for epoch in range(50):\n            epochLoss, _ = sess.run([loss, train], feed_dict={x : inputData , y : outputData})\n            print(\"loss : ,\", epochLoss)\n\n        # Prediction\n        prediction = tf.argmax(predictions, 1)\n        correct_prediction = tf.equal(prediction, tf.argmax(y, 1))\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n        print(\"Accuracy : \", accuracy.eval({x: inputData, y: outputData}))\n\nif __name__ == '__main__':\n    main()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network in Python to predict the probability of a person having a certain disease.\n\n### Input:\n\n\n### Output:\nimport tensorflow as tf\nimport numpy as np\n\n# Input data\ninputData = np.array([[Age, Gender, Weight, Height, Systolic BP, Diastolic BP], ...])\n\n# Output data\noutputData = np.array([Disease_probability], ...])\n\n# Initialize variables\nnumberOfInputs = len(inputData[0])\nnumberOfOutputs = len(outputData[0])\n# Define the number of neurons in each layer\nhiddenUnits = [5,5]\n\n# Create placeholders for the inputs\nx = tf.placeholder(tf.float32, [None, numberOfInputs])\ny = tf.placeholder(tf.float32, [None, numberOfOutputs])\n\n# Create weights\nweights = {\n    \"h1\": tf.Variable(tf.random_normal([numberOfInputs, hiddenUnits[0]]) ),\n    \"h2\": tf.Variable(tf.random_normal([hiddenUnits[0], hiddenUnits[1]] )),\n    \"output\": tf.Variable(tf.random_normal([hiddenUnits[1], numberOfOutputs] ))\n}\n\n# Create biases\nbiases = {\n    \"b1\": tf.Variable(tf.random_normal([hiddenUnits[0]] )),\n    \"b2\": tf.Variable(tf.random_normal([hiddenUnits[1]] )),\n    \"output\": tf.Variable(tf.random_normal([numberOfOutputs] ))\n}\n\n# Create forward propagation step\ndef forwardPropagation(x):\n    # Hidden layer 1\n    layerOne = tf.add( tf.matmul(x, weights[\"h1\"] ), biases[\"b1\"] )\n    layerOne = tf.nn.relu(layerOne)\n\n    # Hidden layer 2\n    layerTwo = tf.add( tf.matmul(layerOne, weights[\"h2\"] ), biases[\"b2\"] )\n    layerTwo = tf.nn.relu(layerTwo)\n\n    # Output layer\n    outputLayer = tf.add( tf.matmul(layerTwo, weights[\"output\"]), biases[\"output\"] )\n    return outputLayer\n\n# Create loss calculating step\ndef computeLoss(predictions, y):\n    return tf.reduce_mean( tf.nn.softmax_cross_entropy_with_logits(logits=predictions, labels=y) )\n\n# Create optimizer step\ndef trainModel(loss):\n    learningRate = 0.001\n    return tf.train.AdamOptimizer(learningRate).minimize(loss)\n\ndef main():\n    # Run forward propagation \n    predictions = forwardPropagation(x)\n\n    # Calculate loss\n    loss = computeLoss(predictions, y)\n\n    # Train the model\n    train = trainModel(loss)\n\n    # Create session\n    with tf.Session() as sess:\n        # Initialize all the variables\n        sess.run(tf.global_variables_initializer())\n\n        # Train the model for the specified number of epochs\n        for epoch in range(50):\n            epochLoss, _ = sess.run([loss, train], feed_dict={x : inputData , y : outputData})\n            print(\"loss : ,\", epochLoss)\n\n        # Prediction\n        prediction = tf.argmax(predictions, 1)\n        correct_prediction = tf.equal(prediction, tf.argmax(y, 1))\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n        print(\"Accuracy : \", accuracy.eval({x: inputData, y: outputData}))\n\nif __name__ == '__main__':\n    main()"
    },
    {
        "instruction": "Write a Python snippet that prints all the stdout of a given command.",
        "input": "",
        "output": "import subprocess\n\ncommand = 'ls'\nprocess = subprocess.run([command], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)\n\nfor line in process.stdout.splitlines():\n    print( line )",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python snippet that prints all the stdout of a given command.\n\n### Input:\n\n\n### Output:\nimport subprocess\n\ncommand = 'ls'\nprocess = subprocess.run([command], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)\n\nfor line in process.stdout.splitlines():\n    print( line )"
    },
    {
        "instruction": "Make a python program to check the palindrome of a given word",
        "input": "",
        "output": "def palindrome(word): \n    if word == word[::-1]: \n        return True\n    else: \n        return False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a python program to check the palindrome of a given word\n\n### Input:\n\n\n### Output:\ndef palindrome(word): \n    if word == word[::-1]: \n        return True\n    else: \n        return False"
    },
    {
        "instruction": "Optimize an existing Python program to increase performance.",
        "input": "",
        "output": "import time\n\nstart_time = time.time()\nsum = 0\n\nfor i in range(1, 1000000):\n    sum += i\n\nend_time = time.time()\nprint(\"Time to calculate the sum: \" + str(end_time - start_time))\n\n# Optimize code\nstart_time = time.time()\nsum = 0\ntotal = 1000000\n\n# Using arithmetic series method to reduce time complexity\nsum = (total/2)*(1 + total)\n\nend_time = time.time()\nprint(\"Time to calculate the sum: \" + str(end_time - start_time))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize an existing Python program to increase performance.\n\n### Input:\n\n\n### Output:\nimport time\n\nstart_time = time.time()\nsum = 0\n\nfor i in range(1, 1000000):\n    sum += i\n\nend_time = time.time()\nprint(\"Time to calculate the sum: \" + str(end_time - start_time))\n\n# Optimize code\nstart_time = time.time()\nsum = 0\ntotal = 1000000\n\n# Using arithmetic series method to reduce time complexity\nsum = (total/2)*(1 + total)\n\nend_time = time.time()\nprint(\"Time to calculate the sum: \" + str(end_time - start_time))"
    },
    {
        "instruction": "Create a Python class for a basic calculator with addition, subtraction and multiplication operations.",
        "input": "",
        "output": "class Calculator:\n    def __init__(self):\n        \"\"\"Initialize the calculator\"\"\"\n        self.result = 0\n    \n    def add(self, a, b):\n        \"\"\"Add two numbers\"\"\"\n        self.result = a + b\n        return self.result\n    \n    def subtract(self, a, b):\n        \"\"\"Subtract two numbers\"\"\"\n        self.result = a - b\n        return self.result\n    \n    def multiply(self, a, b):\n        \"\"\"Multiply two numbers\"\"\"\n        self.result = a * b\n        return self.result",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for a basic calculator with addition, subtraction and multiplication operations.\n\n### Input:\n\n\n### Output:\nclass Calculator:\n    def __init__(self):\n        \"\"\"Initialize the calculator\"\"\"\n        self.result = 0\n    \n    def add(self, a, b):\n        \"\"\"Add two numbers\"\"\"\n        self.result = a + b\n        return self.result\n    \n    def subtract(self, a, b):\n        \"\"\"Subtract two numbers\"\"\"\n        self.result = a - b\n        return self.result\n    \n    def multiply(self, a, b):\n        \"\"\"Multiply two numbers\"\"\"\n        self.result = a * b\n        return self.result"
    },
    {
        "instruction": "Design a Python class to hold a given array of objects.",
        "input": "[1, 2, 3, 4, 5]",
        "output": "class ArrayContainer:\n  def __init__(self, arr):\n    self.arr = arr\n\n  def get_array(self):\n    return self.arr",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class to hold a given array of objects.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\nclass ArrayContainer:\n  def __init__(self, arr):\n    self.arr = arr\n\n  def get_array(self):\n    return self.arr"
    },
    {
        "instruction": "Create a a Python program to check whether an integer is even.",
        "input": "",
        "output": "def is_even(n):\n if n % 2 == 0:\n return True\n return False\n\nnum = int(input('Enter an integer: '))\nif is_even(num):\n print('The number is even.')\nelse:\n print('The number is odd.')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a a Python program to check whether an integer is even.\n\n### Input:\n\n\n### Output:\ndef is_even(n):\n if n % 2 == 0:\n return True\n return False\n\nnum = int(input('Enter an integer: '))\nif is_even(num):\n print('The number is even.')\nelse:\n print('The number is odd.')"
    },
    {
        "instruction": "Create a call to an external API in Python and process the response.",
        "input": "The API URL: 'https://www.example.com/api/data'",
        "output": "import requests\n\nurl = 'https://www.example.com/api/data'\nresponse = requests.get(url)\ndata = response.json()\n\n# Process response data\nfor item in data:\n  # Do something with item...",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a call to an external API in Python and process the response.\n\n### Input:\nThe API URL: 'https://www.example.com/api/data'\n\n### Output:\nimport requests\n\nurl = 'https://www.example.com/api/data'\nresponse = requests.get(url)\ndata = response.json()\n\n# Process response data\nfor item in data:\n  # Do something with item..."
    },
    {
        "instruction": "Develop a classifier in python to differentiate between cats and dogs",
        "input": "",
        "output": "import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\n\n# create model\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size = (3, 3), activation='relu', input_shape=(224, 224, 3)))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax'))\n\n# compile model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a classifier in python to differentiate between cats and dogs\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\n\n# create model\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size = (3, 3), activation='relu', input_shape=(224, 224, 3)))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(2, activation='softmax'))\n\n# compile model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])"
    },
    {
        "instruction": "Create a web scraper using Python's BeautifulSoup library to extract news articles from a website.",
        "input": "Not applicable",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = '<URL to scrape>'\npage = requests.get(url)\nsoup = BeautifulSoup(page.text, 'html.parser')\n\n# Find all the articles\narticles = soup.find_all('article')\n\n# Loop through the articles and print their titles\nfor article in articles:\n print(article.h2.text)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper using Python's BeautifulSoup library to extract news articles from a website.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = '<URL to scrape>'\npage = requests.get(url)\nsoup = BeautifulSoup(page.text, 'html.parser')\n\n# Find all the articles\narticles = soup.find_all('article')\n\n# Loop through the articles and print their titles\nfor article in articles:\n print(article.h2.text)"
    },
    {
        "instruction": "Create a function in Python for converting currencies from one type to another.",
        "input": "currency_from = 'USD'\ncurrency_to = 'EUR'\nexchange_rate = 0.9",
        "output": "def convert_currencies(currency_from, currency_to, exchange_rate):\n return currency_fit * exchange_rate \n\nc = convert_currencies('USD', 'EUR', 0.9)\nprint(c) # Output: 0.9",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python for converting currencies from one type to another.\n\n### Input:\ncurrency_from = 'USD'\ncurrency_to = 'EUR'\nexchange_rate = 0.9\n\n### Output:\ndef convert_currencies(currency_from, currency_to, exchange_rate):\n return currency_fit * exchange_rate \n\nc = convert_currencies('USD', 'EUR', 0.9)\nprint(c) # Output: 0.9"
    },
    {
        "instruction": "Create an algorithm in Python which takes an integer as input and prints out the binary reversed version of that number.",
        "input": "num = 8",
        "output": "bin_str = bin(num)\nrev_bin_str = '0b' + bin_str[:1:-1]\nrev_num = int(rev_bin_str,2)\n\nprint(\"The binary reversed version of {} is {}\".format(num, rev_num))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python which takes an integer as input and prints out the binary reversed version of that number.\n\n### Input:\nnum = 8\n\n### Output:\nbin_str = bin(num)\nrev_bin_str = '0b' + bin_str[:1:-1]\nrev_num = int(rev_bin_str,2)\n\nprint(\"The binary reversed version of {} is {}\".format(num, rev_num))"
    },
    {
        "instruction": "Generate Python code to search a sorted list for a given value and return its index.",
        "input": "sorted_list = [1, 4, 6, 7, 8, 11, 13]\ntarget = 8",
        "output": "def searchSortedList(sorted_list, target):\n    # Edge cases\n    if not len(sorted_list) or len(sorted_list) == 0:\n        return -1\n\n    left = 0\n    right = len(sorted_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_list[mid] == target:\n            return mid\n        if sorted_list[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to search a sorted list for a given value and return its index.\n\n### Input:\nsorted_list = [1, 4, 6, 7, 8, 11, 13]\ntarget = 8\n\n### Output:\ndef searchSortedList(sorted_list, target):\n    # Edge cases\n    if not len(sorted_list) or len(sorted_list) == 0:\n        return -1\n\n    left = 0\n    right = len(sorted_list) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if sorted_list[mid] == target:\n            return mid\n        if sorted_list[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1"
    },
    {
        "instruction": "Write a Python program to calculate the roots of a quadratic equation.",
        "input": "-2, 5, -3",
        "output": "import math\n\ndef quadratic_roots(a, b, c):\n    d = (b ** 2) - (4 * a * c) \n    if d < 0:\n        return None  # No real roots\n    elif d == 0:\n        return -b / (2 * a)  # One root \n    else:\n        x1 = (-b + math.sqrt(d)) / (2 * a) \n        x2 = (-b - math.sqrt(d)) / (2 * a) \n        return (x1, x2)  # Two roots\n\nprint(quadratic_roots(-2, 5, -3))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the roots of a quadratic equation.\n\n### Input:\n-2, 5, -3\n\n### Output:\nimport math\n\ndef quadratic_roots(a, b, c):\n    d = (b ** 2) - (4 * a * c) \n    if d < 0:\n        return None  # No real roots\n    elif d == 0:\n        return -b / (2 * a)  # One root \n    else:\n        x1 = (-b + math.sqrt(d)) / (2 * a) \n        x2 = (-b - math.sqrt(d)) / (2 * a) \n        return (x1, x2)  # Two roots\n\nprint(quadratic_roots(-2, 5, -3))"
    },
    {
        "instruction": "Write a Python program to convert a given string to its equivalent base-64 encoding.",
        "input": "",
        "output": "def encode_base64(data): \n    b64 = base64.b64encode(data.encode(\"utf-8\")) \n    return b64",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a given string to its equivalent base-64 encoding.\n\n### Input:\n\n\n### Output:\ndef encode_base64(data): \n    b64 = base64.b64encode(data.encode(\"utf-8\")) \n    return b64"
    },
    {
        "instruction": "Make a POST request using Python to the specified URL.",
        "input": "URL: http://example.com/",
        "output": "import requests\n\nurl = 'http://example.com/'\nresponse = requests.post(url)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a POST request using Python to the specified URL.\n\n### Input:\nURL: http://example.com/\n\n### Output:\nimport requests\n\nurl = 'http://example.com/'\nresponse = requests.post(url)"
    },
    {
        "instruction": "Generate a python program to output the largest element in a list.",
        "input": "Given a list x = [7, 9, 5, 8, 3, 11].",
        "output": "def largest_element(x):\n    max_element = x[0]\n    for number in x:\n        if number > max_element:\n            max_element = number\n    return max_element",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to output the largest element in a list.\n\n### Input:\nGiven a list x = [7, 9, 5, 8, 3, 11].\n\n### Output:\ndef largest_element(x):\n    max_element = x[0]\n    for number in x:\n        if number > max_element:\n            max_element = number\n    return max_element"
    },
    {
        "instruction": "Implement a CAS (Central Authentication Service) for a website using Python and Flask.",
        "input": "Not applicable",
        "output": "import flask\nfrom flask import Flask, request, redirect, session\nimport requests\n\napp = Flask(__name__)\n\napp.secret_key = 'my_secret_key'\n\n# CAS URL\ncas_base_url = 'https://my_cas.ecample.com'\n\n# Login page\n@app.route('/login')\ndef login():\n redirect(f'{cas_base_url}/login')\n \n # Callback page\n @app.route('/authblog_callback')\ndef authentication_callback():\n# Get the ticket from the CAS URL\nticket = request.args.get('ticket')\n\n# Validate the ticket\nticket_verification_url = f'{cas_base_url}/validation/{ticket}'\n\n# Get the response from CAS\ncas_response = requests.get(ticket_verification_url)\n\n# Verify the response\nif cas_response.status_code == 200:\n# Successful response\n# Create Auth Session\nsession['auth'] = True\nreturn redirect(cas_base_url)\nelse:\n# Failed response\n# Present auth failed message \nreturn redirect(cas_base_url)\n\n# Protected route\n@app.route('/protected')\ndef protected():\n if session.get('auth') == True:\n return 'You are authorized!' \n else:\n return 'You are not authorized!'",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a CAS (Central Authentication Service) for a website using Python and Flask.\n\n### Input:\nNot applicable\n\n### Output:\nimport flask\nfrom flask import Flask, request, redirect, session\nimport requests\n\napp = Flask(__name__)\n\napp.secret_key = 'my_secret_key'\n\n# CAS URL\ncas_base_url = 'https://my_cas.ecample.com'\n\n# Login page\n@app.route('/login')\ndef login():\n redirect(f'{cas_base_url}/login')\n \n # Callback page\n @app.route('/authblog_callback')\ndef authentication_callback():\n# Get the ticket from the CAS URL\nticket = request.args.get('ticket')\n\n# Validate the ticket\nticket_verification_url = f'{cas_base_url}/validation/{ticket}'\n\n# Get the response from CAS\ncas_response = requests.get(ticket_verification_url)\n\n# Verify the response\nif cas_response.status_code == 200:\n# Successful response\n# Create Auth Session\nsession['auth'] = True\nreturn redirect(cas_base_url)\nelse:\n# Failed response\n# Present auth failed message \nreturn redirect(cas_base_url)\n\n# Protected route\n@app.route('/protected')\ndef protected():\n if session.get('auth') == True:\n return 'You are authorized!' \n else:\n return 'You are not authorized!'"
    },
    {
        "instruction": "Create a Python dictionary named ``my_dict`` that associates the string \"John\" with the age 20 and the string \"Maria\" with the age 25.",
        "input": "",
        "output": "my_dict = {\n    'John': 20,\n    'Maria': 25\n}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python dictionary named ``my_dict`` that associates the string \"John\" with the age 20 and the string \"Maria\" with the age 25.\n\n### Input:\n\n\n### Output:\nmy_dict = {\n    'John': 20,\n    'Maria': 25\n}"
    },
    {
        "instruction": "Create a machine learning model in Python that predicts the probability of a person having a heart disease given their age, gender, cholesterol level, and height.",
        "input": "Input data:\nAge: 35\nGender: Male\nCholesterol Level: 200\nHeight: 5'11",
        "output": "# Import the required libraries\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\n# Load the data\ndata_file_path = \"<insert_file_path_here>\"\ndata = pd.read_csv(data_file_path)\n\n# Create X and y variables\nX = data.drop(['heart_disease'], axis=1)\ny = data['heart_disease']\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n\n# Create the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Make a prediction for the given input\nX_pred = [[35, 1, 200, 71]]  # Age, Gender, Cholesterol Level, Height\nprediction = model.predict_proba(X_pred)[0]\nprint('Probability of having heart disease: ', prediction[1])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python that predicts the probability of a person having a heart disease given their age, gender, cholesterol level, and height.\n\n### Input:\nInput data:\nAge: 35\nGender: Male\nCholesterol Level: 200\nHeight: 5'11\n\n### Output:\n# Import the required libraries\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\n\n# Load the data\ndata_file_path = \"<insert_file_path_here>\"\ndata = pd.read_csv(data_file_path)\n\n# Create X and y variables\nX = data.drop(['heart_disease'], axis=1)\ny = data['heart_disease']\n\n# Split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n\n# Create the model\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Make a prediction for the given input\nX_pred = [[35, 1, 200, 71]]  # Age, Gender, Cholesterol Level, Height\nprediction = model.predict_proba(X_pred)[0]\nprint('Probability of having heart disease: ', prediction[1])"
    },
    {
        "instruction": "Write a Python program to parse a text using a regular expression, extract only words that contain at least two consecutive vowels and print them to the console.",
        "input": "\"This is a text example with many words, some of which contain two or more consecutive vowels\"",
        "output": "import re\n\ntext = \"This is a text example with many words, some of which contain two or more consecutive vowels\"\npattern = r\"\\w*[aeiou]{2}\\w*\"\n\nfor match in re.finditer(pattern, text):\n    word = match.group()\n    print(word)\n\n\n# Output: example, contain, consecutive, vowels",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to parse a text using a regular expression, extract only words that contain at least two consecutive vowels and print them to the console.\n\n### Input:\n\"This is a text example with many words, some of which contain two or more consecutive vowels\"\n\n### Output:\nimport re\n\ntext = \"This is a text example with many words, some of which contain two or more consecutive vowels\"\npattern = r\"\\w*[aeiou]{2}\\w*\"\n\nfor match in re.finditer(pattern, text):\n    word = match.group()\n    print(word)\n\n\n# Output: example, contain, consecutive, vowels"
    },
    {
        "instruction": "Create a machine learning model in Python to predict the price of a given type of car.",
        "input": "Data Set containing 1000 rows, with columns \"Car_Model\", \"Mileage\", \"Price\".",
        "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Read in data set\ndf = pd.read_csv(\"your_data_file.csv\")\n\n# Separate predictor and target variables\nX = df[[\"Car_Model\", \"Mileage\"]]\ny = df[\"Price\"]\n\n# Split into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Instantiate Random Forest model\nrf_model = RandomForestRegressor(n_estimators=100, random_state=42)\nrf_model.fit(X_train, y_train)\n\n# Score the model\nrf_model.score(X_test, y_test)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python to predict the price of a given type of car.\n\n### Input:\nData Set containing 1000 rows, with columns \"Car_Model\", \"Mileage\", \"Price\".\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Read in data set\ndf = pd.read_csv(\"your_data_file.csv\")\n\n# Separate predictor and target variables\nX = df[[\"Car_Model\", \"Mileage\"]]\ny = df[\"Price\"]\n\n# Split into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Instantiate Random Forest model\nrf_model = RandomForestRegressor(n_estimators=100, random_state=42)\nrf_model.fit(X_train, y_train)\n\n# Score the model\nrf_model.score(X_test, y_test)"
    },
    {
        "instruction": "Estimate the square root of 15 using bisection algorithm in Python.",
        "input": "",
        "output": "# Define the function to calculate approximate root using bisection algorithm\ndef bisection(x, epsilon):\n    low = 0\n    high = x\n    guess = (high + low)/2\n    while abs(x - guess**2) > epsilon:\n        if guess**2 > x:\n            high = guess\n        else:\n            low = guess\n        guess = (high + low)/2\n    return guess\n\nprint(bisection(15, 0.001))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEstimate the square root of 15 using bisection algorithm in Python.\n\n### Input:\n\n\n### Output:\n# Define the function to calculate approximate root using bisection algorithm\ndef bisection(x, epsilon):\n    low = 0\n    high = x\n    guess = (high + low)/2\n    while abs(x - guess**2) > epsilon:\n        if guess**2 > x:\n            high = guess\n        else:\n            low = guess\n        guess = (high + low)/2\n    return guess\n\nprint(bisection(15, 0.001))"
    },
    {
        "instruction": "Sort a list in Python using the Quick Sort algorithm",
        "input": "[5, 2, 9, 1, 4, 12]",
        "output": "def quicksort (array) :\n    if len(array) <= 1 :\n        return array\n    else:\n        pivot = array[len(array) // 2]\n        left = [x for x in array if x < pivot]\n        middle = [x for x in array if x == pivot]\n        right = [x for x in array if x > pivot]\n        return quicksort(left) + middle + quicksort(right)\n\narray = [5, 2, 9, 1, 4, 12]\nresult = quicksort(array)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSort a list in Python using the Quick Sort algorithm\n\n### Input:\n[5, 2, 9, 1, 4, 12]\n\n### Output:\ndef quicksort (array) :\n    if len(array) <= 1 :\n        return array\n    else:\n        pivot = array[len(array) // 2]\n        left = [x for x in array if x < pivot]\n        middle = [x for x in array if x == pivot]\n        right = [x for x in array if x > pivot]\n        return quicksort(left) + middle + quicksort(right)\n\narray = [5, 2, 9, 1, 4, 12]\nresult = quicksort(array)\nprint(result)"
    },
    {
        "instruction": "Develop an algorithm in Python to generate a random permutation of a given list.",
        "input": "[1, 2, 3, 4, 5]",
        "output": "import random\n\ndef generate_permutation(nums):\n n = len(nums)\n permutation = []\n\n# Generate a random index and add the element at that index to the list\n for _ in range(n):\n idx = random.randint(0, len(nums) - 1)\n permutation.append(nums[idx])\n nums.pop(idx)\n\nreturn permutation\n\n# Test the function\nprint(generate_permutation([1, 2, 3, 4, 5]))    # Output: [4, 2, 5, 3, 1]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to generate a random permutation of a given list.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\nimport random\n\ndef generate_permutation(nums):\n n = len(nums)\n permutation = []\n\n# Generate a random index and add the element at that index to the list\n for _ in range(n):\n idx = random.randint(0, len(nums) - 1)\n permutation.append(nums[idx])\n nums.pop(idx)\n\nreturn permutation\n\n# Test the function\nprint(generate_permutation([1, 2, 3, 4, 5]))    # Output: [4, 2, 5, 3, 1]"
    },
    {
        "instruction": "Write a code snippet to convert a Python object to a JSON string.",
        "input": "obj = {\n  \"name\": \"John\",\n  \"age\": 42\n}",
        "output": "import json\n\nobj = {\n  \"name\": \"John\",\n  \"age\": 42\n}\n\njson_string = json.dumps(obj)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet to convert a Python object to a JSON string.\n\n### Input:\nobj = {\n  \"name\": \"John\",\n  \"age\": 42\n}\n\n### Output:\nimport json\n\nobj = {\n  \"name\": \"John\",\n  \"age\": 42\n}\n\njson_string = json.dumps(obj)"
    },
    {
        "instruction": "How do you make a Python program to traverse a tree and print the paths from root to leaf?",
        "input": "",
        "output": "class TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef traverseTree(root):\n    res = []\n    helper(root, \"\", res)\n    \ndef helper(node, path, res):\n    if not node:\n        return\n    path += str(node.val)\n    if not node.left and not node.right:\n        res.append(path)\n    helper(node.left, path, res)\n    helper(node.right, path, res)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow do you make a Python program to traverse a tree and print the paths from root to leaf?\n\n### Input:\n\n\n### Output:\nclass TreeNode:\n    def __init__(self, val):\n        self.val = val\n        self.left = None\n        self.right = None\n\ndef traverseTree(root):\n    res = []\n    helper(root, \"\", res)\n    \ndef helper(node, path, res):\n    if not node:\n        return\n    path += str(node.val)\n    if not node.left and not node.right:\n        res.append(path)\n    helper(node.left, path, res)\n    helper(node.right, path, res)"
    },
    {
        "instruction": "Use Python to create a dictionary whose keys are strings and whose values are lists containing numbers.",
        "input": "keys = [\"cat\", \"dog\", \"mouse\"]\nvalues = [1, 2, 3]",
        "output": "my_dict = {\"cat\": [1], \"dog\": [2], \"mouse\": [3]}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse Python to create a dictionary whose keys are strings and whose values are lists containing numbers.\n\n### Input:\nkeys = [\"cat\", \"dog\", \"mouse\"]\nvalues = [1, 2, 3]\n\n### Output:\nmy_dict = {\"cat\": [1], \"dog\": [2], \"mouse\": [3]}"
    },
    {
        "instruction": "Find the top 3 values in the given Python dictionary.",
        "input": "dict = {\"A\": 100, \"B\": 20, \"C\": 500, \"D\": 60}",
        "output": "top_values = []\nfor key, value in dict.items():\n    if len(top_values)<3:\n        top_values.append(value)\n    else:\n        min_value = min(top_values)\n        if value > min_value:\n            top_values.remove(min_value)\n            top_values.append(value)\n\nprint(top_values)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the top 3 values in the given Python dictionary.\n\n### Input:\ndict = {\"A\": 100, \"B\": 20, \"C\": 500, \"D\": 60}\n\n### Output:\ntop_values = []\nfor key, value in dict.items():\n    if len(top_values)<3:\n        top_values.append(value)\n    else:\n        min_value = min(top_values)\n        if value > min_value:\n            top_values.remove(min_value)\n            top_values.append(value)\n\nprint(top_values)"
    },
    {
        "instruction": "Modify the following Python script to create a new object 'obj2' that has the same data as 'obj1', but with the 'val2' value changed to 100.",
        "input": "obj1 = {'key1': 'val1', 'key2': 'val2'}",
        "output": "obj1 = {'key1': 'val1', 'key2': 'val2'}\n\n# create a copy of obj1\nobj2 = obj1.copy()\n# modify the value of key2\nobj2['key2'] = 100",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following Python script to create a new object 'obj2' that has the same data as 'obj1', but with the 'val2' value changed to 100.\n\n### Input:\nobj1 = {'key1': 'val1', 'key2': 'val2'}\n\n### Output:\nobj1 = {'key1': 'val1', 'key2': 'val2'}\n\n# create a copy of obj1\nobj2 = obj1.copy()\n# modify the value of key2\nobj2['key2'] = 100"
    },
    {
        "instruction": "Create a class in Python which calculates the area of a rectangle.",
        "input": "",
        "output": "class Rectangle: \n    # constructor \n    def __init__(self, length, width): \n        self.length = length \n        self.width = width \n\n    # member function \n    def calculate_area(self): \n        return self.length * self.width \n\n# creating an instance \nrect1 = Rectangle(5, 6) \n\n# call member function of the class \nprint(\"Area of rectangle is:\", rect1.calculate_area())",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python which calculates the area of a rectangle.\n\n### Input:\n\n\n### Output:\nclass Rectangle: \n    # constructor \n    def __init__(self, length, width): \n        self.length = length \n        self.width = width \n\n    # member function \n    def calculate_area(self): \n        return self.length * self.width \n\n# creating an instance \nrect1 = Rectangle(5, 6) \n\n# call member function of the class \nprint(\"Area of rectangle is:\", rect1.calculate_area())"
    },
    {
        "instruction": "Create a function in Python for recursively flattening a nested list",
        "input": "Not applicable",
        "output": "def flatten(lst):\n flat_list = []\n for x in lst:\n if type(x) == list:\n flat_list.extend(flatten(x))\n else:\n flat_list.append(x)\n return flat_list\n\nsample_list = [[1, 2], [3, [4, 5]]]\nprint(flatten(sample_list))\n\n# Output: [1, 2, 3, 4, 5]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python for recursively flattening a nested list\n\n### Input:\nNot applicable\n\n### Output:\ndef flatten(lst):\n flat_list = []\n for x in lst:\n if type(x) == list:\n flat_list.extend(flatten(x))\n else:\n flat_list.append(x)\n return flat_list\n\nsample_list = [[1, 2], [3, [4, 5]]]\nprint(flatten(sample_list))\n\n# Output: [1, 2, 3, 4, 5]"
    },
    {
        "instruction": "Write a Python program to generate a random key of a given length containing characters from the given set of characters.",
        "input": "6, \"ACGT\"",
        "output": "import random\n\ndef generate_random_key(length,characters):\n    key = \"\"\n    for _ in range(length):\n        key += random.choice(characters)\n    return key\n\nlength = 6\ncharacters = \"ACGT\"\n\nprint(generate_random_key(length,characters)) # GTGGCA",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a random key of a given length containing characters from the given set of characters.\n\n### Input:\n6, \"ACGT\"\n\n### Output:\nimport random\n\ndef generate_random_key(length,characters):\n    key = \"\"\n    for _ in range(length):\n        key += random.choice(characters)\n    return key\n\nlength = 6\ncharacters = \"ACGT\"\n\nprint(generate_random_key(length,characters)) # GTGGCA"
    },
    {
        "instruction": "Write a Python program to remove an item from a list whose index is specified.",
        "input": "list = ['Apple', 'Orange', 'Banana', 'Mango']",
        "output": "def removeSpecifiedIndex(list, index): \n  # using list comprehension \n  new_list = [list[i] for i in range(len(list)) if i != index]  \n\n  return new_list \n\nlist = ['Apple', 'Orange', 'Banana', 'Mango']  \nindex = 2\n\nprint(removeSpecifiedIndex(list, index))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to remove an item from a list whose index is specified.\n\n### Input:\nlist = ['Apple', 'Orange', 'Banana', 'Mango']\n\n### Output:\ndef removeSpecifiedIndex(list, index): \n  # using list comprehension \n  new_list = [list[i] for i in range(len(list)) if i != index]  \n\n  return new_list \n\nlist = ['Apple', 'Orange', 'Banana', 'Mango']  \nindex = 2\n\nprint(removeSpecifiedIndex(list, index))"
    },
    {
        "instruction": "Design a Python class for performing a heap sort on an array.",
        "input": "",
        "output": "class HeapSort: \n  \n    def __init__(self, array): \n        self.array = array \n  \n    def sort(self): \n        n = len(self.array) \n  \n        # Build a maxheap \n        for i in range(n // 2 - 1, -1, -1): \n            self._heapify(n, i) \n  \n        # One by one extract elements \n        for i in range(n - 1, 0, -1): \n            self.array[i], self.array[0] = self.array[0], self.array[i]  # swap \n            self._heapify(i, 0) \n  \n    def _heapify(self, n, i): \n        largest = i  # Initialize largest as root \n        l = 2 * i + 1  # left = 2*i + 1 \n        r = 2 * i + 2  # right = 2*i + 2 \n  \n        # See if left child of root exists and is \n        # greater than root \n        if l < n and self.array[i] < self.array[l]: \n            largest = l \n  \n        # See if right child of root exists and is \n        # greater than root \n        if r < n and self.array[largest] < self.array[r]: \n            largest = r \n  \n        # Change root, if needed \n        if largest != i: \n            self.array[i], self.array[largest] = self.array[largest], self.array[i]  # swap \n  \n            # Heapify the root \n            self._heapify(n, largest)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class for performing a heap sort on an array.\n\n### Input:\n\n\n### Output:\nclass HeapSort: \n  \n    def __init__(self, array): \n        self.array = array \n  \n    def sort(self): \n        n = len(self.array) \n  \n        # Build a maxheap \n        for i in range(n // 2 - 1, -1, -1): \n            self._heapify(n, i) \n  \n        # One by one extract elements \n        for i in range(n - 1, 0, -1): \n            self.array[i], self.array[0] = self.array[0], self.array[i]  # swap \n            self._heapify(i, 0) \n  \n    def _heapify(self, n, i): \n        largest = i  # Initialize largest as root \n        l = 2 * i + 1  # left = 2*i + 1 \n        r = 2 * i + 2  # right = 2*i + 2 \n  \n        # See if left child of root exists and is \n        # greater than root \n        if l < n and self.array[i] < self.array[l]: \n            largest = l \n  \n        # See if right child of root exists and is \n        # greater than root \n        if r < n and self.array[largest] < self.array[r]: \n            largest = r \n  \n        # Change root, if needed \n        if largest != i: \n            self.array[i], self.array[largest] = self.array[largest], self.array[i]  # swap \n  \n            # Heapify the root \n            self._heapify(n, largest)"
    },
    {
        "instruction": "Construct a python program that can predict the outcome of a game of Rock Paper Scissors",
        "input": "",
        "output": "import random\n\ndef rock_paper_scissors():\n    rps_dict = {\n        0: 'rock',\n        1: 'paper',\n        2: 'scissors',\n    }\n\n    user_input = int(input(\"Choose: 0 for rock, 1 for paper, 2 for scissors >>> \"))\n    computer_input = random.randint(0,2)\n\n    if user_input > 2 or user_input < 0:\n        print(\"Invalid input\")\n    else:\n        print(\"You chose:\", rps_dict[user_input])\n        print(\"Computer chose:\", rps_dict[computer_input])\n        if user_input == computer_input:\n            print(\"It's a draw!\")\n        else:\n            if user_input == 0 and computer_input == 2:\n                print(\"You win!\")\n            elif user_input == 1 and computer_input == 0:\n                print(\"You win!\")\n            elif user_input == 2 and computer_input ==1:\n                print(\"You win!\")\n            else:\n                print(\"Computer wins!\")\n\nrock_paper_scissors()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a python program that can predict the outcome of a game of Rock Paper Scissors\n\n### Input:\n\n\n### Output:\nimport random\n\ndef rock_paper_scissors():\n    rps_dict = {\n        0: 'rock',\n        1: 'paper',\n        2: 'scissors',\n    }\n\n    user_input = int(input(\"Choose: 0 for rock, 1 for paper, 2 for scissors >>> \"))\n    computer_input = random.randint(0,2)\n\n    if user_input > 2 or user_input < 0:\n        print(\"Invalid input\")\n    else:\n        print(\"You chose:\", rps_dict[user_input])\n        print(\"Computer chose:\", rps_dict[computer_input])\n        if user_input == computer_input:\n            print(\"It's a draw!\")\n        else:\n            if user_input == 0 and computer_input == 2:\n                print(\"You win!\")\n            elif user_input == 1 and computer_input == 0:\n                print(\"You win!\")\n            elif user_input == 2 and computer_input ==1:\n                print(\"You win!\")\n            else:\n                print(\"Computer wins!\")\n\nrock_paper_scissors()"
    },
    {
        "instruction": "Create a Python class called Department with three instance variables: name, employees, and budget.",
        "input": "Not applicable",
        "output": "class Department:\n def __init__(self, name, employees=[], budget=0):\n  self.name = name\n  self.employees = employees\n  self.budget = budget\n\n def set_name(self, name):\n  self.name = name\n\n def add_employee(self, employee):\n  self.employees.append(employee)\n\n def set_budget(self, budget):\n  self.budget = budget",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class called Department with three instance variables: name, employees, and budget.\n\n### Input:\nNot applicable\n\n### Output:\nclass Department:\n def __init__(self, name, employees=[], budget=0):\n  self.name = name\n  self.employees = employees\n  self.budget = budget\n\n def set_name(self, name):\n  self.name = name\n\n def add_employee(self, employee):\n  self.employees.append(employee)\n\n def set_budget(self, budget):\n  self.budget = budget"
    },
    {
        "instruction": "Create a Python function to sum all the middle elements of a given list.",
        "input": "numbers = [5, 10, 15, 20]",
        "output": "def middle_sum(numbers):\n    if len(numbers) == 0:\n        return None\n    \n    if len(numbers) % 2 == 1:\n        return numbers[len(numbers) // 2]\n    else:\n        return numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to sum all the middle elements of a given list.\n\n### Input:\nnumbers = [5, 10, 15, 20]\n\n### Output:\ndef middle_sum(numbers):\n    if len(numbers) == 0:\n        return None\n    \n    if len(numbers) % 2 == 1:\n        return numbers[len(numbers) // 2]\n    else:\n        return numbers[len(numbers) // 2 - 1] + numbers[len(numbers) // 2]"
    },
    {
        "instruction": "Create a web crawler in Python to collect the titles of webpages from a given seed URL.",
        "input": "seed_url: http://example.com",
        "output": "from bs4 import BeautifulSoup\nimport requests\n\nseed_url = 'http://example.com'\n\ndef crawl_titles(url): \n titles = [] \n html = requests.get(url).text \n soup = BeautifulSoup(html, \"html.parser\") \n for link in soup.find_all('a'): \n  href = link.get('href') \n  if href.startswith(url): \n   html = requests.get(href).text \n   soup = BeautifulSoup(html, \"html.parser\") \n   title = soup.title.string \n   titles.append(title) \n return titles\n\ntitles = crawl_titles(seed_url)\nprint(titles)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web crawler in Python to collect the titles of webpages from a given seed URL.\n\n### Input:\nseed_url: http://example.com\n\n### Output:\nfrom bs4 import BeautifulSoup\nimport requests\n\nseed_url = 'http://example.com'\n\ndef crawl_titles(url): \n titles = [] \n html = requests.get(url).text \n soup = BeautifulSoup(html, \"html.parser\") \n for link in soup.find_all('a'): \n  href = link.get('href') \n  if href.startswith(url): \n   html = requests.get(href).text \n   soup = BeautifulSoup(html, \"html.parser\") \n   title = soup.title.string \n   titles.append(title) \n return titles\n\ntitles = crawl_titles(seed_url)\nprint(titles)"
    },
    {
        "instruction": "Create a function in Python to compute a given number of Fibonacci numbers.",
        "input": "",
        "output": "def fibonacci(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\nnum = fibonacci(10)\nprint(num)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to compute a given number of Fibonacci numbers.\n\n### Input:\n\n\n### Output:\ndef fibonacci(n):\n    a = 0\n    b = 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n\nnum = fibonacci(10)\nprint(num)"
    },
    {
        "instruction": "Create a Python class called Point that represents a point in 2D space.",
        "input": "",
        "output": "class Point:\n    \"\"\"Class representing a Point in 2D space\"\"\"\n    def __init__(self, x, y):\n        \"\"\"Initialize the point with given x and y co-ordinates\"\"\"\n        self.x = x\n        self.y = y\n    \n    def get_x(self):\n        \"\"\"Return the x co-ordinate of the point\"\"\"\n        return self.x\n    \n    def get_y(self):\n        \"\"\"Return the y co-ordinate of the point\"\"\"\n        return self.y\n    \n    def move_to(self, x, y):\n        \"\"\"Move the point to a new position x,y\"\"\"\n        self.x = x\n        self.y = y\n        \n    def distance_to(self, point):\n        \"\"\"Calculate the distance to the other point\"\"\"\n        dx = self.x - point.get_x()\n        dy = self.y - point.get_y()\n        return (dx**2 + dy**2) ** 0.5",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class called Point that represents a point in 2D space.\n\n### Input:\n\n\n### Output:\nclass Point:\n    \"\"\"Class representing a Point in 2D space\"\"\"\n    def __init__(self, x, y):\n        \"\"\"Initialize the point with given x and y co-ordinates\"\"\"\n        self.x = x\n        self.y = y\n    \n    def get_x(self):\n        \"\"\"Return the x co-ordinate of the point\"\"\"\n        return self.x\n    \n    def get_y(self):\n        \"\"\"Return the y co-ordinate of the point\"\"\"\n        return self.y\n    \n    def move_to(self, x, y):\n        \"\"\"Move the point to a new position x,y\"\"\"\n        self.x = x\n        self.y = y\n        \n    def distance_to(self, point):\n        \"\"\"Calculate the distance to the other point\"\"\"\n        dx = self.x - point.get_x()\n        dy = self.y - point.get_y()\n        return (dx**2 + dy**2) ** 0.5"
    },
    {
        "instruction": "Create a simple webscraper using Python and Beautiful Soup.",
        "input": "URL of website to scrape: https://example.com",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n \nurl = 'https://example.com'\ncontent = requests.get(url).content\nsoup = BeautifulSoup(content, 'html.parser')\n \nfor element in soup.find_all('h2'):\n    print(element.text)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple webscraper using Python and Beautiful Soup.\n\n### Input:\nURL of website to scrape: https://example.com\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n \nurl = 'https://example.com'\ncontent = requests.get(url).content\nsoup = BeautifulSoup(content, 'html.parser')\n \nfor element in soup.find_all('h2'):\n    print(element.text)"
    },
    {
        "instruction": "Design a class in python for a student that has the following attributes: name, age, school, grade",
        "input": "",
        "output": "class Student:\n \n    def __init__(self, name, age, school, grade):\n        self.name = name\n        self.age = age\n        self.school = school\n        self.grade = grade\n        \n    def get_name(self):\n        return self.name\n        \n    def get_age(self):\n        return self.age\n    \n    def get_school(self):\n        return self.school\n    \n    def get_grade(self):\n        return self.grade",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in python for a student that has the following attributes: name, age, school, grade\n\n### Input:\n\n\n### Output:\nclass Student:\n \n    def __init__(self, name, age, school, grade):\n        self.name = name\n        self.age = age\n        self.school = school\n        self.grade = grade\n        \n    def get_name(self):\n        return self.name\n        \n    def get_age(self):\n        return self.age\n    \n    def get_school(self):\n        return self.school\n    \n    def get_grade(self):\n        return self.grade"
    },
    {
        "instruction": "Write a Python program to optimize a list of numbers so that every follower is greater than its predecessor.",
        "input": "[3, 8, 2, 6, 10]",
        "output": "def optimized_list(arr):\nn = len(arr)\nfor i in range(n):\n j = i+1\n while(j < n):\n  if arr[i] > arr[j]:\n   temp = arr[i]\n   arr[i] = arr[j]\n   arr[j] = temp\n  j+=1\n \nreturn arr\n \narr = [3, 8, 2, 6, 10]\nresult = optimized_list(arr)\nprint(result) #[2, 3, 6, 8, 10]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize a list of numbers so that every follower is greater than its predecessor.\n\n### Input:\n[3, 8, 2, 6, 10]\n\n### Output:\ndef optimized_list(arr):\nn = len(arr)\nfor i in range(n):\n j = i+1\n while(j < n):\n  if arr[i] > arr[j]:\n   temp = arr[i]\n   arr[i] = arr[j]\n   arr[j] = temp\n  j+=1\n \nreturn arr\n \narr = [3, 8, 2, 6, 10]\nresult = optimized_list(arr)\nprint(result) #[2, 3, 6, 8, 10]"
    },
    {
        "instruction": "Write a function in Python that takes a dictionary as input and splits the keys into two equally-sized sets.",
        "input": "{1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f'}",
        "output": "def split_dict(d):\n # Split the dict keys into two equally-sized sets\n keys_set_1 = list(d.keys())[:len(d)//2]\n keys_set_2 = list(d.keys())[len(d)//2:]\n \n # Return the 2 sets\n return keys_set_1, keys_set_2\n \n# Input dict\ndictionary = {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f'}\n \n# Print the result\nprint(split_dict(dictionary))  # ([1, 2, 3], [4, 5, 6])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes a dictionary as input and splits the keys into two equally-sized sets.\n\n### Input:\n{1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f'}\n\n### Output:\ndef split_dict(d):\n # Split the dict keys into two equally-sized sets\n keys_set_1 = list(d.keys())[:len(d)//2]\n keys_set_2 = list(d.keys())[len(d)//2:]\n \n # Return the 2 sets\n return keys_set_1, keys_set_2\n \n# Input dict\ndictionary = {1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f'}\n \n# Print the result\nprint(split_dict(dictionary))  # ([1, 2, 3], [4, 5, 6])"
    },
    {
        "instruction": "Write a Python function that takes two strings as arguments and returns true if the second string could be obtained by rotating the first string.",
        "input": "'waterbottle', 'erbottlewat'",
        "output": "def is_rotation(str1, str2):\n    if len(str1) == len(str2) and len(str1) > 0:\n        return (str1 + str1).find(str2) != -1\n    return False\n    \nis_rotation('waterbottle', 'erbottlewat')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes two strings as arguments and returns true if the second string could be obtained by rotating the first string.\n\n### Input:\n'waterbottle', 'erbottlewat'\n\n### Output:\ndef is_rotation(str1, str2):\n    if len(str1) == len(str2) and len(str1) > 0:\n        return (str1 + str1).find(str2) != -1\n    return False\n    \nis_rotation('waterbottle', 'erbottlewat')"
    },
    {
        "instruction": "Write a Python program to merge two given lists into a single list.",
        "input": "list1 = [1, 2, 3]\nlist2 = [4, 5, 6]",
        "output": "def merge_two_lists(list1, list2):\n return list1 + list2",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to merge two given lists into a single list.\n\n### Input:\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n\n### Output:\ndef merge_two_lists(list1, list2):\n return list1 + list2"
    },
    {
        "instruction": "Design an algorithm in Python for converting a given Roman Numeral string to its decimal value.",
        "input": "'XXII'",
        "output": "def romanToDecimal(s):\n    #dictionary containing the values of Roman Numerals\n    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    \n    #initialize result\n    result = roman[s[len(s) - 1]]\n    \n    #traverse the input in reverse order\n    for i in range(len(s) - 2, -1, -1):\n        # if the current value of character is less than or equal to its next character\n        if roman[s[i]] <= roman[s[i+1]]:\n            result -= roman[s[i]]\n        else:\n            result += roman[s[i]]\n  \n    return result\n\n# Driver Program \ns = 'XXII'\nprint(romanToDecimal(s))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python for converting a given Roman Numeral string to its decimal value.\n\n### Input:\n'XXII'\n\n### Output:\ndef romanToDecimal(s):\n    #dictionary containing the values of Roman Numerals\n    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    \n    #initialize result\n    result = roman[s[len(s) - 1]]\n    \n    #traverse the input in reverse order\n    for i in range(len(s) - 2, -1, -1):\n        # if the current value of character is less than or equal to its next character\n        if roman[s[i]] <= roman[s[i+1]]:\n            result -= roman[s[i]]\n        else:\n            result += roman[s[i]]\n  \n    return result\n\n# Driver Program \ns = 'XXII'\nprint(romanToDecimal(s))"
    },
    {
        "instruction": "Maximize a given function subject to the given constraints.",
        "input": "f(x) = x1^2 + x2^2\nsubject to: x1 + x2 <= 2",
        "output": "We can maximize the given function by solving the given constraints as a linear programming problem. We can use an optimization library in Python to solve this problem. We can also use the Simplex algorithm to solve this problem. The optimal solution is (1,1), which gives a maximum value of 2.",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMaximize a given function subject to the given constraints.\n\n### Input:\nf(x) = x1^2 + x2^2\nsubject to: x1 + x2 <= 2\n\n### Output:\nWe can maximize the given function by solving the given constraints as a linear programming problem. We can use an optimization library in Python to solve this problem. We can also use the Simplex algorithm to solve this problem. The optimal solution is (1,1), which gives a maximum value of 2."
    },
    {
        "instruction": "Implement a Python program to find all unique combinations of words from a given array of words.",
        "input": "words = [\"Test\", \"Example\", \"Unique\"]",
        "output": "def find_combinations(words):\n    if len(words) == 1:\n        return words\n\n    combinations = []\n    for i in range(len(words)):\n        for j in range(len(words)):\n            if i != j:\n                combinations.append(words[i] + words[j])\n\n    return combinations\n\ncombinations = find_combinations([\"Test\", \"Example\", \"Unique\"])\nprint(\"Combinations:\", combinations)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python program to find all unique combinations of words from a given array of words.\n\n### Input:\nwords = [\"Test\", \"Example\", \"Unique\"]\n\n### Output:\ndef find_combinations(words):\n    if len(words) == 1:\n        return words\n\n    combinations = []\n    for i in range(len(words)):\n        for j in range(len(words)):\n            if i != j:\n                combinations.append(words[i] + words[j])\n\n    return combinations\n\ncombinations = find_combinations([\"Test\", \"Example\", \"Unique\"])\nprint(\"Combinations:\", combinations)"
    },
    {
        "instruction": "Train a machine learning classifier in Python using the folowing dataset.",
        "input": "https://archive.ics.uci.edu/ml/machine-learning-databases/flags/flag.data",
        "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Load the dataset\ndata = pd.read_csv('flag.data', sep=',', header=None)\n\n# Split the dataset into training and test sets\nX = data.iloc[:, 0:8]\ny = data.iloc[:, 8]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n\n# Train a decision tree classifier\nclassifier = DecisionTreeClassifier()\nclassifier.fit(X_train, y_train)\n\n# Test and evaluate the trained classifier\nscore = classifier.score(X_test, y_test)\nprint('Accuracy: {:.2f}'.format(score))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTrain a machine learning classifier in Python using the folowing dataset.\n\n### Input:\nhttps://archive.ics.uci.edu/ml/machine-learning-databases/flags/flag.data\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\n\n# Load the dataset\ndata = pd.read_csv('flag.data', sep=',', header=None)\n\n# Split the dataset into training and test sets\nX = data.iloc[:, 0:8]\ny = data.iloc[:, 8]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)\n\n# Train a decision tree classifier\nclassifier = DecisionTreeClassifier()\nclassifier.fit(X_train, y_train)\n\n# Test and evaluate the trained classifier\nscore = classifier.score(X_test, y_test)\nprint('Accuracy: {:.2f}'.format(score))"
    },
    {
        "instruction": "Create a Python program to filter a list of words and keep only those words that are longer than 8 characters.",
        "input": "['hello', 'world', 'this', 'is', 'a', 'test', 'foobar']",
        "output": "# Filter list \nwords = ['hello', 'world', 'this', 'is', 'a', 'test', 'foobar']\n\n# Keep only words longer than 8 characters\nfiltered_words = [word for word in words if len(word) > 8]\n\nprint(filtered_words)\n# Output: ['foobar']",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to filter a list of words and keep only those words that are longer than 8 characters.\n\n### Input:\n['hello', 'world', 'this', 'is', 'a', 'test', 'foobar']\n\n### Output:\n# Filter list \nwords = ['hello', 'world', 'this', 'is', 'a', 'test', 'foobar']\n\n# Keep only words longer than 8 characters\nfiltered_words = [word for word in words if len(word) > 8]\n\nprint(filtered_words)\n# Output: ['foobar']"
    },
    {
        "instruction": "Write a code in Python for computing the maximum difference between any two elements in an array.",
        "input": "Array: [2, 9, 4, 1, 5]",
        "output": "def max_difference(arr): \n  \n    max_diff = 0\n    for i in range(0, len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = arr[j]-arr[i] \n            if(diff > max_diff): \n                max_diff = diff \n  \n    return max_diff \n  \narray = [2, 9, 4, 1, 5]\n  \nprint(\"Maximum difference =\", max_difference(array))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python for computing the maximum difference between any two elements in an array.\n\n### Input:\nArray: [2, 9, 4, 1, 5]\n\n### Output:\ndef max_difference(arr): \n  \n    max_diff = 0\n    for i in range(0, len(arr)): \n        for j in range(i+1, len(arr)): \n            diff = arr[j]-arr[i] \n            if(diff > max_diff): \n                max_diff = diff \n  \n    return max_diff \n  \narray = [2, 9, 4, 1, 5]\n  \nprint(\"Maximum difference =\", max_difference(array))"
    },
    {
        "instruction": "Develop an algorithm in Python to find the numbers that are divisible by 3 and 5 from a given array.",
        "input": "[5, 15, 20, 7, 10]",
        "output": "def divisible_by_3_5(array):\n    result = []\n    for num in array:\n        if (num % 3 == 0) and (num % 5 == 0):\n            result.append(num)\n    return result\n\nprint(divisible_by_3_5([5, 15, 20, 7, 10])) # [15]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to find the numbers that are divisible by 3 and 5 from a given array.\n\n### Input:\n[5, 15, 20, 7, 10]\n\n### Output:\ndef divisible_by_3_5(array):\n    result = []\n    for num in array:\n        if (num % 3 == 0) and (num % 5 == 0):\n            result.append(num)\n    return result\n\nprint(divisible_by_3_5([5, 15, 20, 7, 10])) # [15]"
    },
    {
        "instruction": "Design a Python program to find out the Armstrong number in a given range.",
        "input": "",
        "output": "def is_armstrong(num):\n   # calculate the total of each digits power to the length of digits \n    temp = num\n    order = len(str(num))\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n  \n    if (num == sum):\n        return True\n    else:\n        return False \n\ndef find_armstrong_numbers(start, end):\n    armstrong_numbers = []\n    for num in range(start, end + 1):\n        if is_armstrong(num):\n            armstrong_numbers.append(num)\n    return armstrong_numbers",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to find out the Armstrong number in a given range.\n\n### Input:\n\n\n### Output:\ndef is_armstrong(num):\n   # calculate the total of each digits power to the length of digits \n    temp = num\n    order = len(str(num))\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** order\n        temp //= 10\n  \n    if (num == sum):\n        return True\n    else:\n        return False \n\ndef find_armstrong_numbers(start, end):\n    armstrong_numbers = []\n    for num in range(start, end + 1):\n        if is_armstrong(num):\n            armstrong_numbers.append(num)\n    return armstrong_numbers"
    },
    {
        "instruction": "Write a Python program to determine the median of three numbers.",
        "input": "6, 8, 4",
        "output": "def median(num1, num2, num3): \n  \n    if (num1 > num2): \n        if (num3 > num1): \n            median = num1 \n        elif (num3 > num2): \n            median = num3\n        else: \n            median = num2\n    else: \n        if (num3 > num2): \n            median = num2\n        elif (num3 > num1): \n            median = num3\n        else: \n            median = num1\n    return median\n\nprint(\"Median is: \" + str(median(6, 8, 4)))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to determine the median of three numbers.\n\n### Input:\n6, 8, 4\n\n### Output:\ndef median(num1, num2, num3): \n  \n    if (num1 > num2): \n        if (num3 > num1): \n            median = num1 \n        elif (num3 > num2): \n            median = num3\n        else: \n            median = num2\n    else: \n        if (num3 > num2): \n            median = num2\n        elif (num3 > num1): \n            median = num3\n        else: \n            median = num1\n    return median\n\nprint(\"Median is: \" + str(median(6, 8, 4)))"
    },
    {
        "instruction": "Design an algorithm in Python that takes in a string and searches for a given pattern, returning it or -1 if not found.",
        "input": "String = \"aaaaabbbbbbcccccc\"\nPattern = \"bbb\"",
        "output": "def pattern_search(string, pattern):\n    i = 0\n    while i < len(string):\n        j = 0\n        while j < len(pattern):\n            if string[i+j] != pattern[j]:\n                break\n            j += 1\n        if j == len(pattern):\n            return i\n        i += 1\n    return -1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that takes in a string and searches for a given pattern, returning it or -1 if not found.\n\n### Input:\nString = \"aaaaabbbbbbcccccc\"\nPattern = \"bbb\"\n\n### Output:\ndef pattern_search(string, pattern):\n    i = 0\n    while i < len(string):\n        j = 0\n        while j < len(pattern):\n            if string[i+j] != pattern[j]:\n                break\n            j += 1\n        if j == len(pattern):\n            return i\n        i += 1\n    return -1"
    },
    {
        "instruction": "Can you design a Python program that evaluates the following formula?",
        "input": "\"2*x + 4*y - z = 10\"",
        "output": "def evaluate_formula(x, y, z):\n return 2*x + 4*y - z == 10",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you design a Python program that evaluates the following formula?\n\n### Input:\n\"2*x + 4*y - z = 10\"\n\n### Output:\ndef evaluate_formula(x, y, z):\n return 2*x + 4*y - z == 10"
    },
    {
        "instruction": "Convert this JavaScript code to Python.",
        "input": "const a = 1;\nconst b = 2;\nconst c = a + b;\nconsole.log(c);",
        "output": "a = 1\nb = 2\nc = a + b\nprint(c)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert this JavaScript code to Python.\n\n### Input:\nconst a = 1;\nconst b = 2;\nconst c = a + b;\nconsole.log(c);\n\n### Output:\na = 1\nb = 2\nc = a + b\nprint(c)"
    },
    {
        "instruction": "Generate a Python program to output a machine-learning model stacked with feature-selection, extraction and preprocessing.",
        "input": "",
        "output": "import pandas as pd\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_extraction import DictVectorizer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Data Preprocessing\nfeatures = pd.read_csv('features.csv')\nX = features.iloc[:, :-1].values\ny = features.iloc[:, -1].values\n\n#Feature Selection\nselector = SelectKBest(k=10)\nselector.fit(X, y)\nX_new = selector.transform(X)\n\n#Feature Extraction\nvectorizer = DictVectorizer(sparse=False)\nX_final = vectorizer.fit_transform(X)\n\n#Feature Scaling\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_final)\n\n#Training and Testing\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2)\n\n#Model Stacking\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(X_train, y_train)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to output a machine-learning model stacked with feature-selection, extraction and preprocessing.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_extraction import DictVectorizer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Data Preprocessing\nfeatures = pd.read_csv('features.csv')\nX = features.iloc[:, :-1].values\ny = features.iloc[:, -1].values\n\n#Feature Selection\nselector = SelectKBest(k=10)\nselector.fit(X, y)\nX_new = selector.transform(X)\n\n#Feature Extraction\nvectorizer = DictVectorizer(sparse=False)\nX_final = vectorizer.fit_transform(X)\n\n#Feature Scaling\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X_final)\n\n#Training and Testing\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2)\n\n#Model Stacking\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(X_train, y_train)"
    },
    {
        "instruction": "Write a python code that searches for a specified value in a given 2-dimensional array.",
        "input": "arr = [ [2, 3, 4], [5, 6, 7], [8, 9, 10] ]\nvalue = 6",
        "output": "def find_value_in_2d_array(arr, value):\n    \"\"\"\n    This function searches for a specified value in a given 2-dimensional array.\n    \n    Parameters:\n    arr (list): 2-dimensional array \n    value (int/str/float): Value to be searched\n    \n    Returns:\n    list: list of indices representing the location of the searched value\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] == value:\n                return [i, j]\n    return None",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code that searches for a specified value in a given 2-dimensional array.\n\n### Input:\narr = [ [2, 3, 4], [5, 6, 7], [8, 9, 10] ]\nvalue = 6\n\n### Output:\ndef find_value_in_2d_array(arr, value):\n    \"\"\"\n    This function searches for a specified value in a given 2-dimensional array.\n    \n    Parameters:\n    arr (list): 2-dimensional array \n    value (int/str/float): Value to be searched\n    \n    Returns:\n    list: list of indices representing the location of the searched value\n    \"\"\"\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if arr[i][j] == value:\n                return [i, j]\n    return None"
    },
    {
        "instruction": "Make a program to search for a given string in a list of strings.",
        "input": "search_string = 'python'\nlist_of_strings = ['java', 'javascript', 'python', 'ruby']",
        "output": "def search_string(search_string, list_of_strings):\n    for string in list_of_strings:\n        if string == search_string:\n            return True\n    return False\n\nresult = search_string('python', ['java', 'javascript', 'python', 'ruby']) \nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a program to search for a given string in a list of strings.\n\n### Input:\nsearch_string = 'python'\nlist_of_strings = ['java', 'javascript', 'python', 'ruby']\n\n### Output:\ndef search_string(search_string, list_of_strings):\n    for string in list_of_strings:\n        if string == search_string:\n            return True\n    return False\n\nresult = search_string('python', ['java', 'javascript', 'python', 'ruby']) \nprint(result)"
    },
    {
        "instruction": "Generate a Python Program that sorts a list of numbers in non-increasing order",
        "input": "[3, 8, 1, 5]",
        "output": "def descending_sort(list): \n    list.sort(reverse=True) \n    return list\n\nlist = [3, 8, 1, 5]\nresult = descending_sort(list)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python Program that sorts a list of numbers in non-increasing order\n\n### Input:\n[3, 8, 1, 5]\n\n### Output:\ndef descending_sort(list): \n    list.sort(reverse=True) \n    return list\n\nlist = [3, 8, 1, 5]\nresult = descending_sort(list)\nprint(result)"
    },
    {
        "instruction": "Develop a function in Python that takes two strings as input and returns a value indicating whether one string is an anagram of the other.",
        "input": "\"listen\", \"silent\"",
        "output": "def anagramCheck(str1, str2): \n    # Get the length of string \n    n1 = len(str1) \n    n2 = len(str2) \n      \n    # If length of both strings is not same, then \n    # they cannot be anagram \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\n# Driver code \nprint(anagramCheck(\"listen\", \"silent\"))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python that takes two strings as input and returns a value indicating whether one string is an anagram of the other.\n\n### Input:\n\"listen\", \"silent\"\n\n### Output:\ndef anagramCheck(str1, str2): \n    # Get the length of string \n    n1 = len(str1) \n    n2 = len(str2) \n      \n    # If length of both strings is not same, then \n    # they cannot be anagram \n    if n1 != n2: \n        return False\n  \n    # Sort both strings \n    str1 = sorted(str1) \n    str2 = sorted(str2) \n  \n    # Compare sorted strings \n    for i in range(0, n1): \n        if str1[i] != str2[i]: \n            return False\n  \n    return True\n\n# Driver code \nprint(anagramCheck(\"listen\", \"silent\"))"
    },
    {
        "instruction": "Implement a function in Python to extract all the words from the given string with their keyboard shifted character. For example, a letter \"a\" should be replaced by \"b\".",
        "input": "String: \"hello world\"",
        "output": "def shift_words(s):\n    shifted_s = \"\"\n    for c in s:\n        if c.isalpha():\n            shifted_s += chr(ord(c)+1)\n        else:\n            shifted_s += c\n    return shifted_s\n\nprint(shift_words(\"hello world\"))\n# Output: ifmmp xpsme",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python to extract all the words from the given string with their keyboard shifted character. For example, a letter \"a\" should be replaced by \"b\".\n\n### Input:\nString: \"hello world\"\n\n### Output:\ndef shift_words(s):\n    shifted_s = \"\"\n    for c in s:\n        if c.isalpha():\n            shifted_s += chr(ord(c)+1)\n        else:\n            shifted_s += c\n    return shifted_s\n\nprint(shift_words(\"hello world\"))\n# Output: ifmmp xpsme"
    },
    {
        "instruction": "Create a function in Python that takes a list of strings as an argument and sorts the strings in alphabetical order.",
        "input": "[\"Hello\", \"World\", \"Foo\", \"Bar\"]",
        "output": "def sort_strings(strings):\n    strings.sort()\n    return strings",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes a list of strings as an argument and sorts the strings in alphabetical order.\n\n### Input:\n[\"Hello\", \"World\", \"Foo\", \"Bar\"]\n\n### Output:\ndef sort_strings(strings):\n    strings.sort()\n    return strings"
    },
    {
        "instruction": "You have received a text and you need to generate a program that counts the number of vowels in the text.",
        "input": "\"Python is a great language for developers\"",
        "output": "def count_vowels(text):\n  # Initialize a counter\n  count = 0\n  # Loop through the text\n  for char in text.lower():\n    # If the character is a vowel\n    if char in \"aeiou\":\n      # Increment the counter\n      count += 1\n  \n  return count\n\n# call the function\ntext = \"Python is a great language for developers\"\nnum_vowels = count_vowels(text)\nprint(\"Number of vowels: \" + str(num_vowels))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nYou have received a text and you need to generate a program that counts the number of vowels in the text.\n\n### Input:\n\"Python is a great language for developers\"\n\n### Output:\ndef count_vowels(text):\n  # Initialize a counter\n  count = 0\n  # Loop through the text\n  for char in text.lower():\n    # If the character is a vowel\n    if char in \"aeiou\":\n      # Increment the counter\n      count += 1\n  \n  return count\n\n# call the function\ntext = \"Python is a great language for developers\"\nnum_vowels = count_vowels(text)\nprint(\"Number of vowels: \" + str(num_vowels))"
    },
    {
        "instruction": "Generate a python program to find the most frequent element in a given array.",
        "input": "Given array: [1, 2, 2, 3, 3]",
        "output": "def most_frequent(arr):\n    max_val = 0\n    max_count = 0\n    counts = {}\n    for i in arr:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n        if counts[i] > max_count:\n            max_val = i\n            max_count = counts[i]\n    return max_val",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to find the most frequent element in a given array.\n\n### Input:\nGiven array: [1, 2, 2, 3, 3]\n\n### Output:\ndef most_frequent(arr):\n    max_val = 0\n    max_count = 0\n    counts = {}\n    for i in arr:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n        if counts[i] > max_count:\n            max_val = i\n            max_count = counts[i]\n    return max_val"
    },
    {
        "instruction": "Create a Python script to fill empty cells in a Pandas DataFrame with the median value for that column.",
        "input": "A sample Pandas DataFrame",
        "output": "import pandas as pd\n\n# Replace empty cells with the median value of the column\ndf = df.fillna(df.median())\n\n# Check if the null values have been replaced\nprint(df.isnull().sum())",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to fill empty cells in a Pandas DataFrame with the median value for that column.\n\n### Input:\nA sample Pandas DataFrame\n\n### Output:\nimport pandas as pd\n\n# Replace empty cells with the median value of the column\ndf = df.fillna(df.median())\n\n# Check if the null values have been replaced\nprint(df.isnull().sum())"
    },
    {
        "instruction": "Develop a python class to model a book with attributes title and authors.",
        "input": "",
        "output": "class Book:\n    def __init__(self, title, authors):\n        self.title = title\n        self.authors = authors\n\nmyBook = Book('The Great Gatsby', 'F. Scott Fitzgerald')\nprint(myBook.title, myBook.authors)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python class to model a book with attributes title and authors.\n\n### Input:\n\n\n### Output:\nclass Book:\n    def __init__(self, title, authors):\n        self.title = title\n        self.authors = authors\n\nmyBook = Book('The Great Gatsby', 'F. Scott Fitzgerald')\nprint(myBook.title, myBook.authors)"
    },
    {
        "instruction": "Write a Python function that finds the smallest number among three numbers",
        "input": "",
        "output": "def find_smallest(num1, num2, num3):\n    return min(num1, num2, num3)\n\n# Example\nprint(find_smallest(2, 5, 8))  # Prints 2",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that finds the smallest number among three numbers\n\n### Input:\n\n\n### Output:\ndef find_smallest(num1, num2, num3):\n    return min(num1, num2, num3)\n\n# Example\nprint(find_smallest(2, 5, 8))  # Prints 2"
    },
    {
        "instruction": "Create a Python program which takes in a list of tuples (name, age) and outputs an array containing the average age of each name.",
        "input": "[(\"John\",20), (\"Jacob\", 18), (\"John\", 22), (\"Jingleheimerschmidt\", 15), (\"John\", 18)]",
        "output": "# input list\ntup_list = [(\"John\",20), (\"Jacob\", 18), (\"John\", 22), (\"Jingleheimerschmidt\", 15), (\"John\", 18)]\n\n# create an empty dictionary\nnameAgeDict = {}\n\n# loop through list to create dictionary\nfor (name,age) in tup_list:\n if name in nameAgeDict:\n  nameAgeDict[name].append(age)\n else:\n  nameAgeDict[name] = [age]\n\n# create an empty array to store average age of each name\naveAgeArray = []\n\n# loop through each name in the dictionary\nfor name,ageList in nameAgeDict.items():\n aveAgeArray.append((name,sum(ageList)/len(ageList)))\n\nprint(aveAgeArray)\n# Output: [('John', 19.333333333333332), ('Jacob', 18.0), ('Jingleheimerschmidt', 15.0)]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program which takes in a list of tuples (name, age) and outputs an array containing the average age of each name.\n\n### Input:\n[(\"John\",20), (\"Jacob\", 18), (\"John\", 22), (\"Jingleheimerschmidt\", 15), (\"John\", 18)]\n\n### Output:\n# input list\ntup_list = [(\"John\",20), (\"Jacob\", 18), (\"John\", 22), (\"Jingleheimerschmidt\", 15), (\"John\", 18)]\n\n# create an empty dictionary\nnameAgeDict = {}\n\n# loop through list to create dictionary\nfor (name,age) in tup_list:\n if name in nameAgeDict:\n  nameAgeDict[name].append(age)\n else:\n  nameAgeDict[name] = [age]\n\n# create an empty array to store average age of each name\naveAgeArray = []\n\n# loop through each name in the dictionary\nfor name,ageList in nameAgeDict.items():\n aveAgeArray.append((name,sum(ageList)/len(ageList)))\n\nprint(aveAgeArray)\n# Output: [('John', 19.333333333333332), ('Jacob', 18.0), ('Jingleheimerschmidt', 15.0)]"
    },
    {
        "instruction": "Take the following Python code and refactor it using list comprehensions.",
        "input": "arr = [1, 2, 3, 4, 5, 6] \nnew_arr = [] \n\nfor i in arr: \n    if i % 2 == 0: \n        new_arr.append(i**2)",
        "output": "arr = [1, 2, 3, 4, 5, 6] \nnew_arr = [i**2 for i in arr if i % 2 == 0]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTake the following Python code and refactor it using list comprehensions.\n\n### Input:\narr = [1, 2, 3, 4, 5, 6] \nnew_arr = [] \n\nfor i in arr: \n    if i % 2 == 0: \n        new_arr.append(i**2)\n\n### Output:\narr = [1, 2, 3, 4, 5, 6] \nnew_arr = [i**2 for i in arr if i % 2 == 0]"
    },
    {
        "instruction": "Construct a Python script that uses regular expressions to find phone numbers in a text.",
        "input": "The following numbers belong to us: 888-555-0000, +1-217-543-1000.",
        "output": "import re\n\ntext = 'The following numbers belong to us: 888-555-0000, +1-217-543-1000.'\n\n# Find all phone numbers\nnumbers = re.findall(r'\\+?\\d[\\d -]{8,12}\\d', text)\n\n# Output\nprint(numbers)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python script that uses regular expressions to find phone numbers in a text.\n\n### Input:\nThe following numbers belong to us: 888-555-0000, +1-217-543-1000.\n\n### Output:\nimport re\n\ntext = 'The following numbers belong to us: 888-555-0000, +1-217-543-1000.'\n\n# Find all phone numbers\nnumbers = re.findall(r'\\+?\\d[\\d -]{8,12}\\d', text)\n\n# Output\nprint(numbers)"
    },
    {
        "instruction": "Create a program in Python that prints the Fibonacci Series up to N terms, where N is a user-input number.",
        "input": "",
        "output": "def fibonacci_series(N):\n    a = 0\n    b = 1\n \n    if N < 0:\n        print(\"Incorrect input\")\n    elif N == 0:\n        print(\"Series up to 0 terms: \")\n    else:\n        print(\"Series up to\", N,\"terms:\")\n    \n    for i in range(0, N):\n        print(a, end=\" \")\n        c = a + b\n        a = b\n        b = c\n\nN = int(input(\"Enter a number: \"))\nfibonacci_series(N)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that prints the Fibonacci Series up to N terms, where N is a user-input number.\n\n### Input:\n\n\n### Output:\ndef fibonacci_series(N):\n    a = 0\n    b = 1\n \n    if N < 0:\n        print(\"Incorrect input\")\n    elif N == 0:\n        print(\"Series up to 0 terms: \")\n    else:\n        print(\"Series up to\", N,\"terms:\")\n    \n    for i in range(0, N):\n        print(a, end=\" \")\n        c = a + b\n        a = b\n        b = c\n\nN = int(input(\"Enter a number: \"))\nfibonacci_series(N)"
    },
    {
        "instruction": "Write Python code to generate a random password of length 8, but with a restriction on maximum of 4 consecutive vowels.",
        "input": "",
        "output": "import random \ncharacters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()? \"\nvowels = ['a','e','i','o','u']\npassword = \"\"\nprevious = ''\n\nfor i in range(8): \n    \n    char = random.choice(characters)\n    if char in vowels and i > 0 and previous in vowels:\n        continue   \n    password = password + char\n    previous = char\n\nprint (\"Your password is: \", password)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to generate a random password of length 8, but with a restriction on maximum of 4 consecutive vowels.\n\n### Input:\n\n\n### Output:\nimport random \ncharacters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890!@#$%^&*()? \"\nvowels = ['a','e','i','o','u']\npassword = \"\"\nprevious = ''\n\nfor i in range(8): \n    \n    char = random.choice(characters)\n    if char in vowels and i > 0 and previous in vowels:\n        continue   \n    password = password + char\n    previous = char\n\nprint (\"Your password is: \", password)"
    },
    {
        "instruction": "Write a python program to detect palindromes in a given list of strings",
        "input": "['malayalam', 'rotator', 'civic']",
        "output": "def is_palindrome(word):\n    # reverse word\n    reverse_word = word[::-1]\n    # Compare reverse word and original word\n    if reverse_word == word:\n        return True\n    else:\n        return False\n\n# main\nwords = ['malayalam', 'rotator', 'civic']\n\nfor word in words:\n    if is_palindrome(word):\n        print(f'{word} is a palindrome.')\n    else:\n        print(f'{word} is not a palindrome.')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to detect palindromes in a given list of strings\n\n### Input:\n['malayalam', 'rotator', 'civic']\n\n### Output:\ndef is_palindrome(word):\n    # reverse word\n    reverse_word = word[::-1]\n    # Compare reverse word and original word\n    if reverse_word == word:\n        return True\n    else:\n        return False\n\n# main\nwords = ['malayalam', 'rotator', 'civic']\n\nfor word in words:\n    if is_palindrome(word):\n        print(f'{word} is a palindrome.')\n    else:\n        print(f'{word} is not a palindrome.')"
    },
    {
        "instruction": "Create a class in Python representing a basketball player with data attributes for field goals attempted, field goals made, and free throws made.",
        "input": "Not applicable",
        "output": "class Player:\n  def __init__(self):\n      self.fga = 0 \n      self.fgm = 0\n      self.ftm = 0\n      \n  def set_fga(self, fga):\n      self.fga = fga\n  \n  def get_fga(self):\n      return self.fga\n  \n  def set_fgm(self, fgm):\n      self.fgm = fgm\n      \n  def get_fgm(self):\n      return self.fgm\n  \n  def set_ftm(self, ftm):\n      self.ftm = ftm\n      \n  def get_ftm(self):\n      return self.ftm",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python representing a basketball player with data attributes for field goals attempted, field goals made, and free throws made.\n\n### Input:\nNot applicable\n\n### Output:\nclass Player:\n  def __init__(self):\n      self.fga = 0 \n      self.fgm = 0\n      self.ftm = 0\n      \n  def set_fga(self, fga):\n      self.fga = fga\n  \n  def get_fga(self):\n      return self.fga\n  \n  def set_fgm(self, fgm):\n      self.fgm = fgm\n      \n  def get_fgm(self):\n      return self.fgm\n  \n  def set_ftm(self, ftm):\n      self.ftm = ftm\n      \n  def get_ftm(self):\n      return self.ftm"
    },
    {
        "instruction": "Write a Python program to convert a list of numbers into a comma-separated string.",
        "input": "[7, 8, 9, 10]",
        "output": "def listToString(numbers):\n return ','.join(str(num) for num in numbers)\n\nlist = [7, 8, 9, 10]\nresult = listToString(list)\n\nprint(result)\n\n# Output: '7,8,9,10'",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a list of numbers into a comma-separated string.\n\n### Input:\n[7, 8, 9, 10]\n\n### Output:\ndef listToString(numbers):\n return ','.join(str(num) for num in numbers)\n\nlist = [7, 8, 9, 10]\nresult = listToString(list)\n\nprint(result)\n\n# Output: '7,8,9,10'"
    },
    {
        "instruction": "Create a Python function to print out a matrix of numbers.",
        "input": "",
        "output": "def print_matrix(matrix):\n    \"\"\"\n    Function to print out a matrix of numbers.\n    \"\"\"\n    for row in matrix:\n        for num in row:\n            print(str(num).ljust(4), end=\"\")\n        print()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to print out a matrix of numbers.\n\n### Input:\n\n\n### Output:\ndef print_matrix(matrix):\n    \"\"\"\n    Function to print out a matrix of numbers.\n    \"\"\"\n    for row in matrix:\n        for num in row:\n            print(str(num).ljust(4), end=\"\")\n        print()"
    },
    {
        "instruction": "Create a Python program to display the Fibonacci sequence up to the nth term, as specified by the user.",
        "input": "n = 20",
        "output": "def fibonacci(n): \n # Fibonacci numbers are 0, 1, 1, 2, 3, 5,... \n a = 0\n b = 1\n if n < 0: \n print(\"Incorrect input\") \n elif n == 0: \n return a \n elif n == 1: \n return b \n else: \n for i in range(2,n): \n c = a + b \n a = b \n b = c \n return b \n\nprint(fibonacci(n))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to display the Fibonacci sequence up to the nth term, as specified by the user.\n\n### Input:\nn = 20\n\n### Output:\ndef fibonacci(n): \n # Fibonacci numbers are 0, 1, 1, 2, 3, 5,... \n a = 0\n b = 1\n if n < 0: \n print(\"Incorrect input\") \n elif n == 0: \n return a \n elif n == 1: \n return b \n else: \n for i in range(2,n): \n c = a + b \n a = b \n b = c \n return b \n\nprint(fibonacci(n))"
    },
    {
        "instruction": "Develop a Python script to remove all punctuation from a given string, and capitalize the first letter of each word.",
        "input": "String: \"Hello, World!\"",
        "output": "def clean_string(string):\n    '''\n    Function to remove all punctuation from a string and capitalize the first letter of each word\n    \n    Parameters\n    string: string\n    \n    Returns\n    cleaned string with no punctuation and first letter of each word capitalized\n    '''\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    cleaned_string = \"\"\n    for char in string:\n        if char not in punctuations:\n            cleaned_string += char\n    words = cleaned_string.split()\n    capitalized_words = [word.capitalize() for word in words]\n    return ' '.join(capitalized_words)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to remove all punctuation from a given string, and capitalize the first letter of each word.\n\n### Input:\nString: \"Hello, World!\"\n\n### Output:\ndef clean_string(string):\n    '''\n    Function to remove all punctuation from a string and capitalize the first letter of each word\n    \n    Parameters\n    string: string\n    \n    Returns\n    cleaned string with no punctuation and first letter of each word capitalized\n    '''\n    punctuations = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''\n    cleaned_string = \"\"\n    for char in string:\n        if char not in punctuations:\n            cleaned_string += char\n    words = cleaned_string.split()\n    capitalized_words = [word.capitalize() for word in words]\n    return ' '.join(capitalized_words)"
    },
    {
        "instruction": "Create a Python 2 program to print the following pattern.",
        "input": "Pattern to display:\n\n1\n2 3\n4 5 6\n7 8 9 10",
        "output": "for i in range(1, 11):\n    for j in range(1, i+1):\n        print(i+(j-1)*i, end=\" \")\n    print()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python 2 program to print the following pattern.\n\n### Input:\nPattern to display:\n\n1\n2 3\n4 5 6\n7 8 9 10\n\n### Output:\nfor i in range(1, 11):\n    for j in range(1, i+1):\n        print(i+(j-1)*i, end=\" \")\n    print()"
    },
    {
        "instruction": "Create a Python statement that prints a list of numbers 0 to n (inclusive).",
        "input": "n = 10",
        "output": "for i in range(n+1):\n    print(i)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python statement that prints a list of numbers 0 to n (inclusive).\n\n### Input:\nn = 10\n\n### Output:\nfor i in range(n+1):\n    print(i)"
    },
    {
        "instruction": "Create a software application in Python for predicting heart failure from cardiac data.",
        "input": "Not applicable.",
        "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# Load the data\ndata = pd.read_csv('heart_data.csv')\n\n# Split the data into features (X) and the labels (Y)\nX = data.drop('chd', axis=1)\nY = data['chd']\n\n# Split the data into training and testing sets\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=0)\n\n# Create a logistic regression model and train it\nmodel = LogisticRegression()\nmodel.fit(X_train, Y_train)\n\n# Test the model\nY_pred = model.predict(X_test)\nacc = accuracy_score(Y_test, Y_pred)\nprint(acc) # Prints accuracy score",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a software application in Python for predicting heart failure from cardiac data.\n\n### Input:\nNot applicable.\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\n# Load the data\ndata = pd.read_csv('heart_data.csv')\n\n# Split the data into features (X) and the labels (Y)\nX = data.drop('chd', axis=1)\nY = data['chd']\n\n# Split the data into training and testing sets\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.25, random_state=0)\n\n# Create a logistic regression model and train it\nmodel = LogisticRegression()\nmodel.fit(X_train, Y_train)\n\n# Test the model\nY_pred = model.predict(X_test)\nacc = accuracy_score(Y_test, Y_pred)\nprint(acc) # Prints accuracy score"
    },
    {
        "instruction": "Construct a for-loop in Python to print the numbers from 1 to 10 (including 1 and 10).",
        "input": "",
        "output": "for i in range(1,11):\n    print(i)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a for-loop in Python to print the numbers from 1 to 10 (including 1 and 10).\n\n### Input:\n\n\n### Output:\nfor i in range(1,11):\n    print(i)"
    },
    {
        "instruction": "Generate a Python dictionary comprehension that creates a new dictionary where the keys are the numbers from 1 to 10 and the values are their squares.",
        "input": "Not applicable",
        "output": "squares = {x: x**2 for x in range(1, 11)}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python dictionary comprehension that creates a new dictionary where the keys are the numbers from 1 to 10 and the values are their squares.\n\n### Input:\nNot applicable\n\n### Output:\nsquares = {x: x**2 for x in range(1, 11)}"
    },
    {
        "instruction": "Generate a code for multiple linear regression in Python",
        "input": "",
        "output": "import numpy as np\n\ndef multiple_linear_regression(x, y):\n    # add ones column\n    X = np.concatenate((np.ones((x.shape[0], 1)), x), axis=1)\n    # calculate the parameters \n    theta = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)\n    return theta",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code for multiple linear regression in Python\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\ndef multiple_linear_regression(x, y):\n    # add ones column\n    X = np.concatenate((np.ones((x.shape[0], 1)), x), axis=1)\n    # calculate the parameters \n    theta = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)\n    return theta"
    },
    {
        "instruction": "Re-write a given Python code snippet using list comprehensions.",
        "input": "squares = []\nfor n in range(10):\n    squares.append(n**2)",
        "output": "squares = [n**2 for n in range(10)]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRe-write a given Python code snippet using list comprehensions.\n\n### Input:\nsquares = []\nfor n in range(10):\n    squares.append(n**2)\n\n### Output:\nsquares = [n**2 for n in range(10)]"
    },
    {
        "instruction": "create a function in Python to add 10 to any given number.",
        "input": "",
        "output": "def add_ten(number):\n    \"\"\"\n    This function takes a number as an argument and adds 10 to it.\n    \"\"\"\n    return number + 10\n\n\nif __name__ == '__main__':\n    print(add_ten(5)) # Output: 15",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\ncreate a function in Python to add 10 to any given number.\n\n### Input:\n\n\n### Output:\ndef add_ten(number):\n    \"\"\"\n    This function takes a number as an argument and adds 10 to it.\n    \"\"\"\n    return number + 10\n\n\nif __name__ == '__main__':\n    print(add_ten(5)) # Output: 15"
    },
    {
        "instruction": "Design a Python program to replace all e with @ in an array of strings",
        "input": "['abc', 'xyz', '111']",
        "output": "def replace_e(arr): \n    return [i.replace('e','@') for i in arr] \n  \narr = ['abc','xyz','111']\nprint(replace_e(arr))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to replace all e with @ in an array of strings\n\n### Input:\n['abc', 'xyz', '111']\n\n### Output:\ndef replace_e(arr): \n    return [i.replace('e','@') for i in arr] \n  \narr = ['abc','xyz','111']\nprint(replace_e(arr))"
    },
    {
        "instruction": "Create a Python script that transforms a customer's address from one format to another.",
        "input": "Input format: \"Street address, City, State, Zip code\"\nOutput format: \"City, State Zip code\"\nInput: \"123 Main Street, Orlando, FL, 32801\"",
        "output": "inputString = \"123 Main Street, Orlando, FL, 32801\"\n\nwords = inputString.split(\",\")\nif len(words) > 3:\n    outputString = words[1] + \", \" + words[2] + \" \" + words[3]\n    print(outputString)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that transforms a customer's address from one format to another.\n\n### Input:\nInput format: \"Street address, City, State, Zip code\"\nOutput format: \"City, State Zip code\"\nInput: \"123 Main Street, Orlando, FL, 32801\"\n\n### Output:\ninputString = \"123 Main Street, Orlando, FL, 32801\"\n\nwords = inputString.split(\",\")\nif len(words) > 3:\n    outputString = words[1] + \", \" + words[2] + \" \" + words[3]\n    print(outputString)"
    },
    {
        "instruction": "Write a Python function that takes two integer arguments, x and y, and returns the result of the formula (x+y)^2.",
        "input": "Not applicable",
        "output": "def compute_formula(x, y):\n    return (x + y)**2",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes two integer arguments, x and y, and returns the result of the formula (x+y)^2.\n\n### Input:\nNot applicable\n\n### Output:\ndef compute_formula(x, y):\n    return (x + y)**2"
    },
    {
        "instruction": "Create a Python program to traverse a 2D array and print the values in spiral order, starting from the center.",
        "input": "2D array:\n  [1,  2,  3, 4]\n  [5,  6,  7, 8]\n  [9, 10, 11, 12]\n  [13, 14, 15, 16]",
        "output": "def spiralTraverse(matrix):\n    startRow, startCol = 0, 0\n    endRow, endCol = len(matrix) - 1, len(matrix[0]) - 1\n    result = []\n\n    while startRow <= endRow and startCol <= endCol:\n        # Traverse from left to right\n        for col in range(startCol, endCol + 1):\n            result.append(matrix[startRow][col])\n\n        # Traverse from top to bottom\n        for row in range(startRow + 1, endRow + 1):\n            result.append(matrix[row][endCol])\n\n        # Traverse from right to left\n        for col in range(endCol - 1, startCol - 1, -1):\n            result.append(matrix[endRow][col])\n\n        # Traverse from bottom to top\n        for row in range(endRow - 1, startRow, -1):\n            result.append(matrix[row][startCol])\n\n        startRow += 1\n        endRow -= 1\n        startCol += 1\n        endCol -= 1\n    \n    return result\n\nmatrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n\nprint(spiralTraverse(matrix))\n\n# Output: [7, 8, 9, 6, 3, 4, 5, 2, 11, 12, 13, 14, 15, 10, 1, 16]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to traverse a 2D array and print the values in spiral order, starting from the center.\n\n### Input:\n2D array:\n  [1,  2,  3, 4]\n  [5,  6,  7, 8]\n  [9, 10, 11, 12]\n  [13, 14, 15, 16]\n\n### Output:\ndef spiralTraverse(matrix):\n    startRow, startCol = 0, 0\n    endRow, endCol = len(matrix) - 1, len(matrix[0]) - 1\n    result = []\n\n    while startRow <= endRow and startCol <= endCol:\n        # Traverse from left to right\n        for col in range(startCol, endCol + 1):\n            result.append(matrix[startRow][col])\n\n        # Traverse from top to bottom\n        for row in range(startRow + 1, endRow + 1):\n            result.append(matrix[row][endCol])\n\n        # Traverse from right to left\n        for col in range(endCol - 1, startCol - 1, -1):\n            result.append(matrix[endRow][col])\n\n        # Traverse from bottom to top\n        for row in range(endRow - 1, startRow, -1):\n            result.append(matrix[row][startCol])\n\n        startRow += 1\n        endRow -= 1\n        startCol += 1\n        endCol -= 1\n    \n    return result\n\nmatrix = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]\n\nprint(spiralTraverse(matrix))\n\n# Output: [7, 8, 9, 6, 3, 4, 5, 2, 11, 12, 13, 14, 15, 10, 1, 16]"
    },
    {
        "instruction": "Design a function in Python that implements a decision tree classifier for two classes.",
        "input": "",
        "output": "def decision_tree_classifier(data):\n    # check for base cases\n    if len(data) == 0:\n        return None\n    elif len(data[0]) == 1:\n        # all columns are the same => return the most frequent label\n        return find_most_frequent_label(data)\n\n    # find the best split attribute\n    attr_idx, split_val = find_best_split_attr(data)\n\n    # create a decision tree node\n    tree = TreeNode(attr_idx, split_val)\n\n    # create subtrees based on split attribute\n    left, right = split_data(data, attr_idx, split_val)\n    tree.add_left_subtree(decision_tree_classifier(left))\n    tree.add_right_subtree(decision_tree_classifier(right))\n    \n    return tree",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python that implements a decision tree classifier for two classes.\n\n### Input:\n\n\n### Output:\ndef decision_tree_classifier(data):\n    # check for base cases\n    if len(data) == 0:\n        return None\n    elif len(data[0]) == 1:\n        # all columns are the same => return the most frequent label\n        return find_most_frequent_label(data)\n\n    # find the best split attribute\n    attr_idx, split_val = find_best_split_attr(data)\n\n    # create a decision tree node\n    tree = TreeNode(attr_idx, split_val)\n\n    # create subtrees based on split attribute\n    left, right = split_data(data, attr_idx, split_val)\n    tree.add_left_subtree(decision_tree_classifier(left))\n    tree.add_right_subtree(decision_tree_classifier(right))\n    \n    return tree"
    },
    {
        "instruction": "Write a python function to sort a list of elements using quick sort algorithm.",
        "input": "",
        "output": "def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python function to sort a list of elements using quick sort algorithm.\n\n### Input:\n\n\n### Output:\ndef quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)"
    },
    {
        "instruction": "Write a python program that computes the average of 5 numbers.",
        "input": "",
        "output": "def average(a, b, c, d, e):\n    \"\"\"This program computes the average of 5 numbers\"\"\"\n    return (a+b+c+d+e)/5",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that computes the average of 5 numbers.\n\n### Input:\n\n\n### Output:\ndef average(a, b, c, d, e):\n    \"\"\"This program computes the average of 5 numbers\"\"\"\n    return (a+b+c+d+e)/5"
    },
    {
        "instruction": "Use Python to sort the list of words in descending alphabetical order.",
        "input": "correct, tango, apple, banana",
        "output": "words = [\"correct\", \"tango\", \"apple\", \"banana\"] \n\n# Sort words in reverse alphabetical order \nwords.sort(reverse=True) \n\n# Print list in descending order \nprint(words)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse Python to sort the list of words in descending alphabetical order.\n\n### Input:\ncorrect, tango, apple, banana\n\n### Output:\nwords = [\"correct\", \"tango\", \"apple\", \"banana\"] \n\n# Sort words in reverse alphabetical order \nwords.sort(reverse=True) \n\n# Print list in descending order \nprint(words)"
    },
    {
        "instruction": "Write a Python function to sort the given list of strings using the length of the strings instead of alphabetically.",
        "input": "",
        "output": "def sortStringByLength(string_list):\n    string_list.sort(key = lambda x:len(x)) \n    return string_list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to sort the given list of strings using the length of the strings instead of alphabetically.\n\n### Input:\n\n\n### Output:\ndef sortStringByLength(string_list):\n    string_list.sort(key = lambda x:len(x)) \n    return string_list"
    },
    {
        "instruction": "Create a Python program to demonstrate inheritance between two classes.",
        "input": "",
        "output": "class Person: \n    def __init__(self, name): \n        self.name = name \n  \n    def show_name(self): \n        print(\"Name : \", self.name) \n       \n    def greeting(self):\n        print(\"Hello, my name is {}\".format(self.name))\n\nclass Student(Person):\n    def __init__(self, name, rollnum):\n        Person.__init__(self, name)\n        self.rollnum = rollnum \n\n    def show_rollnum(self):\n        print(\"Roll Number: \", self.rollnum)\n\n\ns = Student(\"Jill\", \"15\")\ns.show_name()\ns.show_rollnum()\ns.greeting()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to demonstrate inheritance between two classes.\n\n### Input:\n\n\n### Output:\nclass Person: \n    def __init__(self, name): \n        self.name = name \n  \n    def show_name(self): \n        print(\"Name : \", self.name) \n       \n    def greeting(self):\n        print(\"Hello, my name is {}\".format(self.name))\n\nclass Student(Person):\n    def __init__(self, name, rollnum):\n        Person.__init__(self, name)\n        self.rollnum = rollnum \n\n    def show_rollnum(self):\n        print(\"Roll Number: \", self.rollnum)\n\n\ns = Student(\"Jill\", \"15\")\ns.show_name()\ns.show_rollnum()\ns.greeting()"
    },
    {
        "instruction": "Write a Python function to find the maximum and minimum numbers from a given list.",
        "input": "",
        "output": "def minMax(numbers):\n    max_num = numbers[0]\n    min_num = numbers[0]\n   \n    for num in numbers:\n        if num > max_num: \n            max_num = num\n        elif num < min_num:\n            min_num = num\n   \n    return (min_num, max_num)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to find the maximum and minimum numbers from a given list.\n\n### Input:\n\n\n### Output:\ndef minMax(numbers):\n    max_num = numbers[0]\n    min_num = numbers[0]\n   \n    for num in numbers:\n        if num > max_num: \n            max_num = num\n        elif num < min_num:\n            min_num = num\n   \n    return (min_num, max_num)"
    },
    {
        "instruction": "Design and implement a class in Python that merges two sorted lists in linear time.",
        "input": "list1: [2, 5, 6]\nlist2: [1, 8, 10]",
        "output": "class MergeSort:\n    # Merges two sorted lists\n    def merge(self, list1, list2):\n        i = 0\n        j = 0\n        merged_list = []\n        while i < len(list1) and j < len(list2):\n            if list1[i] <= list2[j]:\n                merged_list.append(list1[i])\n                i += 1\n            else:\n                merged_list.append(list2[j])\n                j += 1\n\n        # Lists might be of different lengths, so append the rest of the elements\n        if i < len(list1):\n            merged_list += list1[i:]\n        elif j < len(list2):\n            merged_list += list2[j:]\n\n        return merged_list\n\n\n# Test\nlist1 = [2, 5, 6]\nlist2 = [1, 8, 10]\n\nms = MergeSort()\nprint(ms.merge(list1, list2))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and implement a class in Python that merges two sorted lists in linear time.\n\n### Input:\nlist1: [2, 5, 6]\nlist2: [1, 8, 10]\n\n### Output:\nclass MergeSort:\n    # Merges two sorted lists\n    def merge(self, list1, list2):\n        i = 0\n        j = 0\n        merged_list = []\n        while i < len(list1) and j < len(list2):\n            if list1[i] <= list2[j]:\n                merged_list.append(list1[i])\n                i += 1\n            else:\n                merged_list.append(list2[j])\n                j += 1\n\n        # Lists might be of different lengths, so append the rest of the elements\n        if i < len(list1):\n            merged_list += list1[i:]\n        elif j < len(list2):\n            merged_list += list2[j:]\n\n        return merged_list\n\n\n# Test\nlist1 = [2, 5, 6]\nlist2 = [1, 8, 10]\n\nms = MergeSort()\nprint(ms.merge(list1, list2))"
    },
    {
        "instruction": "Design a Black scholes pricing model using Python classes",
        "input": "Not applicable",
        "output": "import math\n\n\nclass BlackScholes():\n def __init__(self, S, K, T, r, sigma):\n self.S = S\n self.K = K\n self.T = T\n self.r = r\n self.sigma = sigma\n \n def d1(self):\n return (math.log(self.S/self.K) + (self.r + 0.5 * self.sigma ** 2)*self.T)/(self.sigma * math.sqrt(self.T))\n \n def d2(self):\n return self.d1() - self.sigma * math.sqrt(self.T)\n \n def call_price(self):\n return self.S * stats.norm.cdf(self.d1()) - self.K * math.exp(-self.r * self.T) * stats.norm.cdf(self.d2())\n \n def put_price(self):\n return -self.S * stats.norm.cdf(-self.d1()) + self.K * math.exp(-self.r * self.T) * stats.norm.cdf(-self.d2())",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Black scholes pricing model using Python classes\n\n### Input:\nNot applicable\n\n### Output:\nimport math\n\n\nclass BlackScholes():\n def __init__(self, S, K, T, r, sigma):\n self.S = S\n self.K = K\n self.T = T\n self.r = r\n self.sigma = sigma\n \n def d1(self):\n return (math.log(self.S/self.K) + (self.r + 0.5 * self.sigma ** 2)*self.T)/(self.sigma * math.sqrt(self.T))\n \n def d2(self):\n return self.d1() - self.sigma * math.sqrt(self.T)\n \n def call_price(self):\n return self.S * stats.norm.cdf(self.d1()) - self.K * math.exp(-self.r * self.T) * stats.norm.cdf(self.d2())\n \n def put_price(self):\n return -self.S * stats.norm.cdf(-self.d1()) + self.K * math.exp(-self.r * self.T) * stats.norm.cdf(-self.d2())"
    },
    {
        "instruction": "Write a recursive python function to generate a Fibonacci sequence up to n number of elements",
        "input": "",
        "output": "def fibonacci(n):\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        fib_list = fibonacci(n - 1)\n        fib_list.append(fib_list[-1] + fib_list[-2])\n        return fib_list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a recursive python function to generate a Fibonacci sequence up to n number of elements\n\n### Input:\n\n\n### Output:\ndef fibonacci(n):\n    if n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        fib_list = fibonacci(n - 1)\n        fib_list.append(fib_list[-1] + fib_list[-2])\n        return fib_list"
    },
    {
        "instruction": "Using the given data, write a Python program to extract each name along with its age in the following format:",
        "input": "data = [{\"name\": \"John\", \"age\": 25}, {\"name\": \"James\", \"age\": 26}]",
        "output": "for item in data:\n    print(f'Name: {item[\"name\"]}, Age: {item[\"age\"]}')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the given data, write a Python program to extract each name along with its age in the following format:\n\n### Input:\ndata = [{\"name\": \"John\", \"age\": 25}, {\"name\": \"James\", \"age\": 26}]\n\n### Output:\nfor item in data:\n    print(f'Name: {item[\"name\"]}, Age: {item[\"age\"]}')"
    },
    {
        "instruction": "Generate a Python dictionary to store the average scores for 10 different students.",
        "input": "",
        "output": "student_scores = {\n    'John': 88.0, \n    'Jane': 91.2, \n    'Adam': 70.6, \n    'Josh': 75.1,\n    'Paul': 95.5,\n    'Abby': 87.3,\n    'Brian': 67.3,\n    'Kim': 80.5,\n    'Mark': 93.2,\n    'Sarah': 86.7\n}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python dictionary to store the average scores for 10 different students.\n\n### Input:\n\n\n### Output:\nstudent_scores = {\n    'John': 88.0, \n    'Jane': 91.2, \n    'Adam': 70.6, \n    'Josh': 75.1,\n    'Paul': 95.5,\n    'Abby': 87.3,\n    'Brian': 67.3,\n    'Kim': 80.5,\n    'Mark': 93.2,\n    'Sarah': 86.7\n}"
    },
    {
        "instruction": "Construct a function in Python to calculate interest rate of a given loan amount",
        "input": "",
        "output": "def calculate_interest_rate(principal, rate, period):\n  return principal * (rate / 100) * period\n  \ncalculate_interest_rate(2000, 4.5, 5) #900",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function in Python to calculate interest rate of a given loan amount\n\n### Input:\n\n\n### Output:\ndef calculate_interest_rate(principal, rate, period):\n  return principal * (rate / 100) * period\n  \ncalculate_interest_rate(2000, 4.5, 5) #900"
    },
    {
        "instruction": "Given a list of numbers, write a Python program to calculate the median.",
        "input": "[3, 4, 5, 9, 12, 15]",
        "output": "def median(nums):\n    nums.sort()\n    n = len(nums)\n    if n % 2 == 0:\n        return (nums[n//2] + nums[(n//2) - 1]) / 2\n    return nums[n//2]\n\nnums = [3, 4, 5, 9, 12, 15]\nprint(median(nums))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of numbers, write a Python program to calculate the median.\n\n### Input:\n[3, 4, 5, 9, 12, 15]\n\n### Output:\ndef median(nums):\n    nums.sort()\n    n = len(nums)\n    if n % 2 == 0:\n        return (nums[n//2] + nums[(n//2) - 1]) / 2\n    return nums[n//2]\n\nnums = [3, 4, 5, 9, 12, 15]\nprint(median(nums))"
    },
    {
        "instruction": "Create a class hierarchy with a base class and two derived classes using inheritance in python.",
        "input": "",
        "output": "class Base:\n    # Base class\n    def __init__(self, value):\n        self.value = value\n\nclass Derived1(Base):\n    # First derived class\n    def __init__(self, value, name):\n        super().__init__(value)\n        self.name = name\n\nclass Derived2(Base):\n    # Second derived class\n    def __init__(self, value, age):\n        super().__init__(value)\n        self.age = age",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class hierarchy with a base class and two derived classes using inheritance in python.\n\n### Input:\n\n\n### Output:\nclass Base:\n    # Base class\n    def __init__(self, value):\n        self.value = value\n\nclass Derived1(Base):\n    # First derived class\n    def __init__(self, value, name):\n        super().__init__(value)\n        self.name = name\n\nclass Derived2(Base):\n    # Second derived class\n    def __init__(self, value, age):\n        super().__init__(value)\n        self.age = age"
    },
    {
        "instruction": "Write Python code to search a given collection of books to find all books containing the text \u201cAlice in Wonderland\u201d",
        "input": "",
        "output": "def find_books_with_alice(books):\n    found_books = []\n    for book in books:\n        if \"Alice in Wonderland\" in book.Text:\n            found_books.append(book)\n    return found_books",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to search a given collection of books to find all books containing the text \u201cAlice in Wonderland\u201d\n\n### Input:\n\n\n### Output:\ndef find_books_with_alice(books):\n    found_books = []\n    for book in books:\n        if \"Alice in Wonderland\" in book.Text:\n            found_books.append(book)\n    return found_books"
    },
    {
        "instruction": "Design a Python program to sort a given numeric array in increasing order.",
        "input": "",
        "output": "def sort_array(arr):\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                temp = arr[j]\n                arr[j] = arr[j+1]\n                arr[j+1] = temp\n    return arr",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to sort a given numeric array in increasing order.\n\n### Input:\n\n\n### Output:\ndef sort_array(arr):\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-i-1):\n            if arr[j] > arr[j+1]:\n                temp = arr[j]\n                arr[j] = arr[j+1]\n                arr[j+1] = temp\n    return arr"
    },
    {
        "instruction": "Write a python program to automatically extract the following grade scores from the given text.",
        "input": "Text: \u201cJohnny got 85 in Maths and 63 in English\u201d",
        "output": "maths_score = 85\nenglish_score = 63",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to automatically extract the following grade scores from the given text.\n\n### Input:\nText: \u201cJohnny got 85 in Maths and 63 in English\u201d\n\n### Output:\nmaths_score = 85\nenglish_score = 63"
    },
    {
        "instruction": "Generate Python code to generate a list which contains squares of all the numbers from 1 to 10",
        "input": "",
        "output": "squares = []\nfor i in range(1, 11):\n squares.append(i*i)\nprint(squares)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to generate a list which contains squares of all the numbers from 1 to 10\n\n### Input:\n\n\n### Output:\nsquares = []\nfor i in range(1, 11):\n squares.append(i*i)\nprint(squares)"
    },
    {
        "instruction": "Create a Python program to compute the sum of all elements in a given array.",
        "input": "array = [1, 2, 3, 4, 5]",
        "output": "def compute_sum(array):\n    sum = 0\n    for element in array:\n        sum += element\n    return sum\n    \nif __name__ == '__main__':\n    array = [1, 2, 3, 4, 5]\n    print(compute_sum(array))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to compute the sum of all elements in a given array.\n\n### Input:\narray = [1, 2, 3, 4, 5]\n\n### Output:\ndef compute_sum(array):\n    sum = 0\n    for element in array:\n        sum += element\n    return sum\n    \nif __name__ == '__main__':\n    array = [1, 2, 3, 4, 5]\n    print(compute_sum(array))"
    },
    {
        "instruction": "Rewrite the following list comprehension in a more pythonic way.",
        "input": "values = [x*2 for x in range(10)]",
        "output": "values = list(map(lambda x: x*2, range(10)))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following list comprehension in a more pythonic way.\n\n### Input:\nvalues = [x*2 for x in range(10)]\n\n### Output:\nvalues = list(map(lambda x: x*2, range(10)))"
    },
    {
        "instruction": "Write a Python program to generate a table of values for sin and cos functions between 0 and 10.",
        "input": "Not applicable",
        "output": "import math          \n\ndef generate_table(): \n \n # headers \n print (\"angle (in degrees) sin(angle) cos(angle)\") \n \n # values \n for angle in range(0, 370, 10): \n  print(\"{:7} {:15.4f} {:15.4f}\".format(angle,math.sin(math.radians(angle)),math.cos(math.radians(angle)))) \n\nif __name__ == \"__main__\": \n generate_table()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a table of values for sin and cos functions between 0 and 10.\n\n### Input:\nNot applicable\n\n### Output:\nimport math          \n\ndef generate_table(): \n \n # headers \n print (\"angle (in degrees) sin(angle) cos(angle)\") \n \n # values \n for angle in range(0, 370, 10): \n  print(\"{:7} {:15.4f} {:15.4f}\".format(angle,math.sin(math.radians(angle)),math.cos(math.radians(angle)))) \n\nif __name__ == \"__main__\": \n generate_table()"
    },
    {
        "instruction": "Create a Python class for a shopping cart that allows customers to add and remove items.",
        "input": "N/A",
        "output": "class ShoppingCart:\n def __init__(self):\n self.items = {}\n\n def add_item(self, item, quantity):\n if item in self.items:\n self.items[item] += quantity\n else:\n self.items[item] = quantity\n\n def remove_item(self, item, quantity):\n if item not in self.items:\n return\n if self.items[item] > quantity:\n self.items[item] -= quantity\n else:\n del self.items[item]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for a shopping cart that allows customers to add and remove items.\n\n### Input:\nN/A\n\n### Output:\nclass ShoppingCart:\n def __init__(self):\n self.items = {}\n\n def add_item(self, item, quantity):\n if item in self.items:\n self.items[item] += quantity\n else:\n self.items[item] = quantity\n\n def remove_item(self, item, quantity):\n if item not in self.items:\n return\n if self.items[item] > quantity:\n self.items[item] -= quantity\n else:\n del self.items[item]"
    },
    {
        "instruction": "Write a Python script to rewrite the four-digit year of birth in the YYYY-MM-DD format.",
        "input": "Year: 1985",
        "output": "def formatYear (birthYear):\n return str(birthYear)+\"-01-01\"",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to rewrite the four-digit year of birth in the YYYY-MM-DD format.\n\n### Input:\nYear: 1985\n\n### Output:\ndef formatYear (birthYear):\n return str(birthYear)+\"-01-01\""
    },
    {
        "instruction": "Write a function in Python that prints the multiplication table of a given number.",
        "input": "number=7",
        "output": "def print_multiplication_table(number): \n    for i in range(1, 11): \n        print(number,\"X\",i,\"=\",number*i)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that prints the multiplication table of a given number.\n\n### Input:\nnumber=7\n\n### Output:\ndef print_multiplication_table(number): \n    for i in range(1, 11): \n        print(number,\"X\",i,\"=\",number*i)"
    },
    {
        "instruction": "Write a Python program that accepts user input and prints the most common word from the input.",
        "input": "\"I like to eat apples and oranges and bananas\"",
        "output": "# get user input\ninput_str = input('Enter a sentence: ')\n\n# split into words\nwords = input_str.split(' ')\n\n# create an empty dictionary\ndic = {}\n\n# loop over words\nfor word in words:\n # update dictionary\n if word in dic:\n  dic[word] += 1\n else:\n  dic[word] = 1\n\n# find the most common word\nmost_common_word = ''\nhighest_count = 0\n\nfor word, count in dic.items():\n if count > highest_count:\n  most_common_word = word\n  highest_count = count\n\n# print the result\nprint(f'The most common word is \"{most_common_word}\" with {highest_count} occurences.')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that accepts user input and prints the most common word from the input.\n\n### Input:\n\"I like to eat apples and oranges and bananas\"\n\n### Output:\n# get user input\ninput_str = input('Enter a sentence: ')\n\n# split into words\nwords = input_str.split(' ')\n\n# create an empty dictionary\ndic = {}\n\n# loop over words\nfor word in words:\n # update dictionary\n if word in dic:\n  dic[word] += 1\n else:\n  dic[word] = 1\n\n# find the most common word\nmost_common_word = ''\nhighest_count = 0\n\nfor word, count in dic.items():\n if count > highest_count:\n  most_common_word = word\n  highest_count = count\n\n# print the result\nprint(f'The most common word is \"{most_common_word}\" with {highest_count} occurences.')"
    },
    {
        "instruction": "Generate a function in Python to determine the largest element in an array.",
        "input": "[3, 2, 1, 4, 5]",
        "output": "def find_max(arr):\n max_val = arr[0]\n for num in arr:\n if num > max_val:\n max_val = num\n return max_val\n\narray = [3, 2, 1, 4, 5]\nprint(find_max(array))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python to determine the largest element in an array.\n\n### Input:\n[3, 2, 1, 4, 5]\n\n### Output:\ndef find_max(arr):\n max_val = arr[0]\n for num in arr:\n if num > max_val:\n max_val = num\n return max_val\n\narray = [3, 2, 1, 4, 5]\nprint(find_max(array))"
    },
    {
        "instruction": "Change the following Python code such that it prints the difference between two numbers.",
        "input": "n1 = 9\nn2 = 4\nprint(n1+n2)",
        "output": "n1 = 9\nn2 = 4\nprint(n1 - n2)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nChange the following Python code such that it prints the difference between two numbers.\n\n### Input:\nn1 = 9\nn2 = 4\nprint(n1+n2)\n\n### Output:\nn1 = 9\nn2 = 4\nprint(n1 - n2)"
    },
    {
        "instruction": "Write a Python code snippet to print Hello multipe times as per a given number.",
        "input": "number = 10",
        "output": "for i in range(number):\n    print(\"Hello\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code snippet to print Hello multipe times as per a given number.\n\n### Input:\nnumber = 10\n\n### Output:\nfor i in range(number):\n    print(\"Hello\")"
    },
    {
        "instruction": "Build a web scraper in Python that retrieves all the news headlines from a given website",
        "input": "Website URL: 'https://www.example.com/news'",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\n# Get the website HTML\nurl = 'https://www.example.com/news'\nresp = requests.get(url)\n\n# Parse the website HTML\nsoup = BeautifulSoup(resp.text, \"lxml\")\n\n# Find all headlines\nheadlines = soup.findAll(\"div\", {\"class\": \"news-item__headline\"})\n\n# Print the headlines\nfor headline in headlines:\n    print(headline.text)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a web scraper in Python that retrieves all the news headlines from a given website\n\n### Input:\nWebsite URL: 'https://www.example.com/news'\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Get the website HTML\nurl = 'https://www.example.com/news'\nresp = requests.get(url)\n\n# Parse the website HTML\nsoup = BeautifulSoup(resp.text, \"lxml\")\n\n# Find all headlines\nheadlines = soup.findAll(\"div\", {\"class\": \"news-item__headline\"})\n\n# Print the headlines\nfor headline in headlines:\n    print(headline.text)"
    },
    {
        "instruction": "Create a GUI interface in Python to multiply two matrices.",
        "input": "",
        "output": "import tkinter \n\n# create the UI\nroot = tkinter.Tk() \nroot.title(\"Matrix Multiplication\") \n\n# define the input fields\nmatrix_1_entry = tkinter.Label(root, text=\"Matrix 1\")\nmatrix_1_entry.grid(row=0, column=0)\nmatrix_1_input = tkinter.Entry(root)\nmatrix_1_input.grid(row=0, column=1)\n\nmatrix_2_entry = tkinter.Label(root, text=\"Matrix 2\")\nmatrix_2_entry.grid(row=1, column=0)\nmatrix_2_input = tkinter.Entry(root)\nmatrix_2_input.grid(row=1, column=1)\n\n# set up the button for multiplication\nmultiply_button = tkinter.Button(root, text=\"Multiply\") \nmultiply_button.grid(row=2, column=0)\n\n# display the output\nresult_label = tkinter.Label(root, text=\"Result:\")\nresult_label.grid(row=3, column=0)\nresult_display = tkinter.Entry(root)\nresult_display.grid(row=3, column=1)\n\n# define the function for matrix multiplication\ndef multiply_matrices():\n    matrix_1 = eval(matrix_1_input.get())\n    matrix_2 = eval(matrix_2_input.get())\n    result = [[sum(a*b for a,b in zip(x_row,y_column)) for y_column in zip(*matrix_2)] for x_row in matrix_1] \n    result_display.delete(0, tkinter.END)\n    result_display.insert(0, str(result))\n\nmultiply_button.configure(command=multiply_matrices) \n\nroot.mainloop()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a GUI interface in Python to multiply two matrices.\n\n### Input:\n\n\n### Output:\nimport tkinter \n\n# create the UI\nroot = tkinter.Tk() \nroot.title(\"Matrix Multiplication\") \n\n# define the input fields\nmatrix_1_entry = tkinter.Label(root, text=\"Matrix 1\")\nmatrix_1_entry.grid(row=0, column=0)\nmatrix_1_input = tkinter.Entry(root)\nmatrix_1_input.grid(row=0, column=1)\n\nmatrix_2_entry = tkinter.Label(root, text=\"Matrix 2\")\nmatrix_2_entry.grid(row=1, column=0)\nmatrix_2_input = tkinter.Entry(root)\nmatrix_2_input.grid(row=1, column=1)\n\n# set up the button for multiplication\nmultiply_button = tkinter.Button(root, text=\"Multiply\") \nmultiply_button.grid(row=2, column=0)\n\n# display the output\nresult_label = tkinter.Label(root, text=\"Result:\")\nresult_label.grid(row=3, column=0)\nresult_display = tkinter.Entry(root)\nresult_display.grid(row=3, column=1)\n\n# define the function for matrix multiplication\ndef multiply_matrices():\n    matrix_1 = eval(matrix_1_input.get())\n    matrix_2 = eval(matrix_2_input.get())\n    result = [[sum(a*b for a,b in zip(x_row,y_column)) for y_column in zip(*matrix_2)] for x_row in matrix_1] \n    result_display.delete(0, tkinter.END)\n    result_display.insert(0, str(result))\n\nmultiply_button.configure(command=multiply_matrices) \n\nroot.mainloop()"
    },
    {
        "instruction": "Write a function in Python that takes in a size n and returns the n-th prime number.",
        "input": "n = 5",
        "output": "def nth_prime_number(n):\n    prime_numbers = [2]\n    i = 3\n    while len(prime_numbers) < n:\n        for number in prime_numbers:\n            if i % number == 0:\n                break\n        else:\n            prime_numbers.append(i)\n        i+= 2\n    return prime_numbers[-1]\n\n\n# test \nprime_number = nth_prime_number(5)\nprint(prime_number) # Output: 11",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes in a size n and returns the n-th prime number.\n\n### Input:\nn = 5\n\n### Output:\ndef nth_prime_number(n):\n    prime_numbers = [2]\n    i = 3\n    while len(prime_numbers) < n:\n        for number in prime_numbers:\n            if i % number == 0:\n                break\n        else:\n            prime_numbers.append(i)\n        i+= 2\n    return prime_numbers[-1]\n\n\n# test \nprime_number = nth_prime_number(5)\nprint(prime_number) # Output: 11"
    },
    {
        "instruction": "Create a text classifier in Python using Naive Bayes.",
        "input": "",
        "output": "from sklearn.naive_bayes import MultinomialNB \n\nclf = MultinomialNB(alpha=1.0)\nclf.fit(X_train, y_train)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a text classifier in Python using Naive Bayes.\n\n### Input:\n\n\n### Output:\nfrom sklearn.naive_bayes import MultinomialNB \n\nclf = MultinomialNB(alpha=1.0)\nclf.fit(X_train, y_train)"
    },
    {
        "instruction": "Rewrite the following Python program using the try/except approach.",
        "input": "a = 3\nb = 0\nc = a / b",
        "output": "try:\n    c = a / b\nexcept ZeroDivisionError:\n   print(\"Division by zero error!\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following Python program using the try/except approach.\n\n### Input:\na = 3\nb = 0\nc = a / b\n\n### Output:\ntry:\n    c = a / b\nexcept ZeroDivisionError:\n   print(\"Division by zero error!\")"
    },
    {
        "instruction": "Optimize an algorithm written in Python that sorts an array of integers.",
        "input": "Any populated array of integers",
        "output": "def sort_array(arr):\n# Bubble sort algorithm \n n = len(arr) \n  \n# Traverse through all array elements \nfor i in range(n): \n    # Last i elements are already in place \n    for j in range(0, n-i-1): \n  \n        # traverse the array from 0 to n-i-1 \n        # Swap if the element found is greater \n        # than the next element \n        if arr[j] > arr[j+1] : \n            arr[j], arr[j+1] = arr[j+1], arr[j] \n  \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nsort_array(arr) \n  \nprint (\"Sorted array:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize an algorithm written in Python that sorts an array of integers.\n\n### Input:\nAny populated array of integers\n\n### Output:\ndef sort_array(arr):\n# Bubble sort algorithm \n n = len(arr) \n  \n# Traverse through all array elements \nfor i in range(n): \n    # Last i elements are already in place \n    for j in range(0, n-i-1): \n  \n        # traverse the array from 0 to n-i-1 \n        # Swap if the element found is greater \n        # than the next element \n        if arr[j] > arr[j+1] : \n            arr[j], arr[j+1] = arr[j+1], arr[j] \n  \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nsort_array(arr) \n  \nprint (\"Sorted array:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),"
    },
    {
        "instruction": "Create a recommendation engine using a K Nearest Neighbors model in Python that can recommend books based on a user's previous read selections.",
        "input": "A list of previously read book titles",
        "output": "import pandas as pd\nfrom sklearn.neighbors import NearestNeighbors\n\n#load the prepared dataset\ndata = pd.read_csv('book_data.csv')\n\n#prepare the feature and target variables\nX = data.drop('Book Title', axis=1)\ny = data['Book Title']\n\n#fit the KNN model\nmodel = NearestNeighbors(metric='cosine', algorithm='brute')\nmodel.fit(X)\n\n#make recommendations\ninput_books = 'Input a list of previously read book titles here'\ndistances, indices = model.kneighbors(input_books, n_neighbors=3)\n\n#display the recommended book titles\nfor i in indices:\n    print(y[i])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a recommendation engine using a K Nearest Neighbors model in Python that can recommend books based on a user's previous read selections.\n\n### Input:\nA list of previously read book titles\n\n### Output:\nimport pandas as pd\nfrom sklearn.neighbors import NearestNeighbors\n\n#load the prepared dataset\ndata = pd.read_csv('book_data.csv')\n\n#prepare the feature and target variables\nX = data.drop('Book Title', axis=1)\ny = data['Book Title']\n\n#fit the KNN model\nmodel = NearestNeighbors(metric='cosine', algorithm='brute')\nmodel.fit(X)\n\n#make recommendations\ninput_books = 'Input a list of previously read book titles here'\ndistances, indices = model.kneighbors(input_books, n_neighbors=3)\n\n#display the recommended book titles\nfor i in indices:\n    print(y[i])"
    },
    {
        "instruction": "Write Python code to create a new list from the given list based on a condition",
        "input": "Given list : [1,2,3,4,5], condition: only include elements whose corresponding index is divisible by 2.",
        "output": "new_list = []\nfor i, v in enumerate(list):\n    if (i+1) % 2 == 0: # +1 since your list is 0 indexed\n        new_list.append(v)\nprint(new_list) # prints [2,4]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to create a new list from the given list based on a condition\n\n### Input:\nGiven list : [1,2,3,4,5], condition: only include elements whose corresponding index is divisible by 2.\n\n### Output:\nnew_list = []\nfor i, v in enumerate(list):\n    if (i+1) % 2 == 0: # +1 since your list is 0 indexed\n        new_list.append(v)\nprint(new_list) # prints [2,4]"
    },
    {
        "instruction": "Create an algorithm in Python to search for a value in a linked list.",
        "input": "",
        "output": "def search(head, key): \n    current = head \n    while current is not None: \n        if current.data == key: \n            return current \n        current = current.next\n    return None",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to search for a value in a linked list.\n\n### Input:\n\n\n### Output:\ndef search(head, key): \n    current = head \n    while current is not None: \n        if current.data == key: \n            return current \n        current = current.next\n    return None"
    },
    {
        "instruction": "Create a JSON-based API for a simple book search system using Python.",
        "input": "Not applicable",
        "output": "import pandas as pd\nimport json\n\n# define the result structure\nclass SearchResult:\n  def __init__(self, title, author, year):\n    self.title = title\n    self.author = author\n    self.year = year\n\n# define the search function\ndef search_book(title):\n  # read the dataset\n  books = pd.read_csv('books.csv')\n\n  # search for the book\n  result_df = books[books['title'].str.startswith(title)]\n\n  # create a list of results\n  results = []\n  for _, row in result_df.iterrows():\n    results.append(SearchResult(row['title'], row['author'], row['year']))\n\n  # return results as JSON\n  return json.dumps([res.__dict__ for res in results])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a JSON-based API for a simple book search system using Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nimport json\n\n# define the result structure\nclass SearchResult:\n  def __init__(self, title, author, year):\n    self.title = title\n    self.author = author\n    self.year = year\n\n# define the search function\ndef search_book(title):\n  # read the dataset\n  books = pd.read_csv('books.csv')\n\n  # search for the book\n  result_df = books[books['title'].str.startswith(title)]\n\n  # create a list of results\n  results = []\n  for _, row in result_df.iterrows():\n    results.append(SearchResult(row['title'], row['author'], row['year']))\n\n  # return results as JSON\n  return json.dumps([res.__dict__ for res in results])"
    },
    {
        "instruction": "Create a web server in Python.",
        "input": "<no input>",
        "output": "import http.server\nimport socketserver\n\nPORT = 8080\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(\"Server running at http://localhost:{}/\".format(PORT))\n    httpd.serve_forever()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web server in Python.\n\n### Input:\n<no input>\n\n### Output:\nimport http.server\nimport socketserver\n\nPORT = 8080\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(\"Server running at http://localhost:{}/\".format(PORT))\n    httpd.serve_forever()"
    },
    {
        "instruction": "Suggest a code snippet to generate a histogram in Python.",
        "input": "",
        "output": "\"\"\"\nSuggest a code snippet to generate a histogram in Python\n\"\"\"\n\n# import the required libraries\nimport matplotlib.pyplot as plt\n\n# set the data to plot\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# generate the histogram\nplt.hist(data, bins=7, color='blue', edgecolor='black')\nplt.title('A Histogram')\nplt.xlabel('Values')\nplt.ylabel('Frequency')\n\n# show the plot\nplt.show()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a code snippet to generate a histogram in Python.\n\n### Input:\n\n\n### Output:\n\"\"\"\nSuggest a code snippet to generate a histogram in Python\n\"\"\"\n\n# import the required libraries\nimport matplotlib.pyplot as plt\n\n# set the data to plot\ndata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# generate the histogram\nplt.hist(data, bins=7, color='blue', edgecolor='black')\nplt.title('A Histogram')\nplt.xlabel('Values')\nplt.ylabel('Frequency')\n\n# show the plot\nplt.show()"
    },
    {
        "instruction": "Create a Python script to decrypt a given message using a Vigenere cipher.",
        "input": "XJN\u0419\u03a4\u0418\u042eTS\u0398,DIZVHT\u03a9.",
        "output": "def decrypt(message, key):\n    # Convert message characters to numbers\n    message_nums = [ord(c) - 65 for c in message]\n    # Convert key characters to numbers\n    key_nums = [ord(c) - 65 for c in key]\n    # Repeat the key until it is the same length as the message\n    key_nums *= len(message_nums) // len(key_nums) + 1\n    # Perform the decryption\n    decrypted_nums = [(message_nums[i] - key_nums[i]) % 26 for i in range(len(message_nums))]\n    # Convert numbers to characters\n    decrypted = ''.join([chr(num + 65) for num in decrypted_nums])\n\n    return decrypted\n\n# Decrypt given message\nkey = 'SECRET'\nmessage = 'XJN\u0419\u03a4\u0418\u042eTS\u0398,DIZVHT\u03a9.'\ndecrypted_message = decrypt(message, key)\nprint(f'Decrypted message: {decrypted_message}')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to decrypt a given message using a Vigenere cipher.\n\n### Input:\nXJN\u0419\u03a4\u0418\u042eTS\u0398,DIZVHT\u03a9.\n\n### Output:\ndef decrypt(message, key):\n    # Convert message characters to numbers\n    message_nums = [ord(c) - 65 for c in message]\n    # Convert key characters to numbers\n    key_nums = [ord(c) - 65 for c in key]\n    # Repeat the key until it is the same length as the message\n    key_nums *= len(message_nums) // len(key_nums) + 1\n    # Perform the decryption\n    decrypted_nums = [(message_nums[i] - key_nums[i]) % 26 for i in range(len(message_nums))]\n    # Convert numbers to characters\n    decrypted = ''.join([chr(num + 65) for num in decrypted_nums])\n\n    return decrypted\n\n# Decrypt given message\nkey = 'SECRET'\nmessage = 'XJN\u0419\u03a4\u0418\u042eTS\u0398,DIZVHT\u03a9.'\ndecrypted_message = decrypt(message, key)\nprint(f'Decrypted message: {decrypted_message}')"
    },
    {
        "instruction": "Using the given Python code, update its style using pep 8 conventions.",
        "input": "def factorial (x):\n if x <= 1:\n return 1\n return x * factorial (x-1)",
        "output": "def factorial(x):\n    if x <= 1:\n        return 1\n    return x * factorial(x - 1)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the given Python code, update its style using pep 8 conventions.\n\n### Input:\ndef factorial (x):\n if x <= 1:\n return 1\n return x * factorial (x-1)\n\n### Output:\ndef factorial(x):\n    if x <= 1:\n        return 1\n    return x * factorial(x - 1)"
    },
    {
        "instruction": "Write a Python program to shuffle the items of a list.",
        "input": "",
        "output": "import random\n\nlis = [1, 2, 3, 4, 5]\nrandom.shuffle(lis)\nprint(lis)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to shuffle the items of a list.\n\n### Input:\n\n\n### Output:\nimport random\n\nlis = [1, 2, 3, 4, 5]\nrandom.shuffle(lis)\nprint(lis)"
    },
    {
        "instruction": "Create an algorithm to detect plagiarism using Python. The algorithm should compare two pieces of text and return a score between 0 and 1 indicating the likelihood of plagiarism.",
        "input": "Text 1:\n\nThis is an example of text I just made up.\n\nText 2:\n\nThis is an example of text I wrote.",
        "output": "def detect_plagiarism(txt1, txt2):\n txt1_words = txt1.split(' ')\n txt2_words = txt2.split(' ')\n\n num_common_words = len(set(txt1_words) & set(txt2_words))\n total_words = len(txt1_words) + len(txt2_words)\n score = 2 * num_common_words / total_words\n\n return score\n\ntxt1 = 'This is an example of text I just made up.'\ntxt2 = 'This is an example of text I wrote.'\n\nprint(detect_plagiarism(txt1, txt2))  # Output: 0.5",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to detect plagiarism using Python. The algorithm should compare two pieces of text and return a score between 0 and 1 indicating the likelihood of plagiarism.\n\n### Input:\nText 1:\n\nThis is an example of text I just made up.\n\nText 2:\n\nThis is an example of text I wrote.\n\n### Output:\ndef detect_plagiarism(txt1, txt2):\n txt1_words = txt1.split(' ')\n txt2_words = txt2.split(' ')\n\n num_common_words = len(set(txt1_words) & set(txt2_words))\n total_words = len(txt1_words) + len(txt2_words)\n score = 2 * num_common_words / total_words\n\n return score\n\ntxt1 = 'This is an example of text I just made up.'\ntxt2 = 'This is an example of text I wrote.'\n\nprint(detect_plagiarism(txt1, txt2))  # Output: 0.5"
    },
    {
        "instruction": "Develop a function in Python to sort a given array of strings.",
        "input": "",
        "output": "def sort_strings(strings):\n  return sorted(strings)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python to sort a given array of strings.\n\n### Input:\n\n\n### Output:\ndef sort_strings(strings):\n  return sorted(strings)"
    },
    {
        "instruction": "Produce a Python script that checks if a given input string is a valid IP address.",
        "input": "\"192.168.0.1\"",
        "output": "import re\n\ndef is_valid_ip(ip):\n    #https://www.regular-expressions.info/ip.html\n    pattern = r\"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\"\n    matcher = re.match(pattern, ip)\n    if matcher:\n        return True\n    else:\n        return False\n\nis_ip_valid = is_valid_ip(\"192.168.0.1\")\nif is_ip_valid:\n    print(\"IP is valid\")\nelse:\n    print(\"IP is not valid\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a Python script that checks if a given input string is a valid IP address.\n\n### Input:\n\"192.168.0.1\"\n\n### Output:\nimport re\n\ndef is_valid_ip(ip):\n    #https://www.regular-expressions.info/ip.html\n    pattern = r\"^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$\"\n    matcher = re.match(pattern, ip)\n    if matcher:\n        return True\n    else:\n        return False\n\nis_ip_valid = is_valid_ip(\"192.168.0.1\")\nif is_ip_valid:\n    print(\"IP is valid\")\nelse:\n    print(\"IP is not valid\")"
    },
    {
        "instruction": "Create an algorithm in Python that can determine if two strings are anagrams.",
        "input": "\"cat\", \"tac\"",
        "output": "def is_anagram(string1, string2):\n  # Removing spaces from both strings\n    string1 = string1.replace(' ', '')\n    string2 = string2.replace(' ', '')\n \n    # Calculating lengths of both strings\n    n1 = len(string1)\n    n2 = len(string2)\n \n    # Comparing lengths of both strings\n    if n1 != n2:\n        return False\n \n    # Sorting strings\n    string1 = sorted(string1)\n    string2 = sorted(string2)\n \n    # Comparing both strings\n    for i in range(0, n1):\n        if string1[i] != string2[i]:\n            return False\n \n    return True\n \n# Driver program\nstring1 = \"cat\";\nstring2 = \"tac\";\n \n# Calling for anagram detection\nif is_anagram(string1, string2):\n    print(\"Yes\")\nelse:\n    print(\"No\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python that can determine if two strings are anagrams.\n\n### Input:\n\"cat\", \"tac\"\n\n### Output:\ndef is_anagram(string1, string2):\n  # Removing spaces from both strings\n    string1 = string1.replace(' ', '')\n    string2 = string2.replace(' ', '')\n \n    # Calculating lengths of both strings\n    n1 = len(string1)\n    n2 = len(string2)\n \n    # Comparing lengths of both strings\n    if n1 != n2:\n        return False\n \n    # Sorting strings\n    string1 = sorted(string1)\n    string2 = sorted(string2)\n \n    # Comparing both strings\n    for i in range(0, n1):\n        if string1[i] != string2[i]:\n            return False\n \n    return True\n \n# Driver program\nstring1 = \"cat\";\nstring2 = \"tac\";\n \n# Calling for anagram detection\nif is_anagram(string1, string2):\n    print(\"Yes\")\nelse:\n    print(\"No\")"
    },
    {
        "instruction": "Create an implementation of the Quicksort algorithm in Python.",
        "input": "[5, 4, 3, 1, 2]",
        "output": "def quicksort(nums):\n    if len(nums) <= 1:\n        return nums\n \n    pivot = nums[len(nums) // 2]\n    left = [x for x in nums if x < pivot]\n    middle = [x for x in nums if x == pivot]\n    right = [x for x in nums if x > pivot]\n \n    return quicksort(left) + middle + quicksort(right)\n \ninput_list = [5, 4, 3, 1, 2]\nresult = quicksort(input_list)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an implementation of the Quicksort algorithm in Python.\n\n### Input:\n[5, 4, 3, 1, 2]\n\n### Output:\ndef quicksort(nums):\n    if len(nums) <= 1:\n        return nums\n \n    pivot = nums[len(nums) // 2]\n    left = [x for x in nums if x < pivot]\n    middle = [x for x in nums if x == pivot]\n    right = [x for x in nums if x > pivot]\n \n    return quicksort(left) + middle + quicksort(right)\n \ninput_list = [5, 4, 3, 1, 2]\nresult = quicksort(input_list)\nprint(result)"
    },
    {
        "instruction": "Create a command line application in Python that takes two numbers as arguments and prints the addition of them.",
        "input": "Not applicable",
        "output": "import sys\n\ndef add(num1, num2):\n  return num1 + num2\n\nif __name__ == '__main__':\n  num1 = int(sys.argv[1])\n  num2 = int(sys.argv[2])\n  print(add(num1, num2))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a command line application in Python that takes two numbers as arguments and prints the addition of them.\n\n### Input:\nNot applicable\n\n### Output:\nimport sys\n\ndef add(num1, num2):\n  return num1 + num2\n\nif __name__ == '__main__':\n  num1 = int(sys.argv[1])\n  num2 = int(sys.argv[2])\n  print(add(num1, num2))"
    },
    {
        "instruction": "Optimize the following Python code for counting the number of vowels in a string.",
        "input": "def count_vowels(str):\n count = 0\n vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n for i in str:\n  if i in vowels:\n   count += 1\n return count",
        "output": "def count_vowels(str):\n count = 0\n vowels = set(\"aeiou\")\n for i in str:\n  if i in vowels:\n   count += 1\n return count",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following Python code for counting the number of vowels in a string.\n\n### Input:\ndef count_vowels(str):\n count = 0\n vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n for i in str:\n  if i in vowels:\n   count += 1\n return count\n\n### Output:\ndef count_vowels(str):\n count = 0\n vowels = set(\"aeiou\")\n for i in str:\n  if i in vowels:\n   count += 1\n return count"
    },
    {
        "instruction": "Design a class in Python which models a board game.",
        "input": "",
        "output": "class BoardGame:\n \n    # Attributes\n    num_players = 0\n    game_state = None\n    max_turns = 0\n \n    # Methods\n \n    def __init__(self, num_players, max_turns):\n        self.num_players = num_players\n        self.max_turns = max_turns\n        self.game_state = self.initialize_state()\n \n    def initialize_state(self):\n        # Initialize variables, boards, etc.\n        return # BoardGame's state \n \n    def play_turn(self):\n        # Perform actions of current turn\n        self.game_state = # Game's state after turn\n \n    def check_end_game(self):\n        # Determine if max turns has reached\n        return # True or False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python which models a board game.\n\n### Input:\n\n\n### Output:\nclass BoardGame:\n \n    # Attributes\n    num_players = 0\n    game_state = None\n    max_turns = 0\n \n    # Methods\n \n    def __init__(self, num_players, max_turns):\n        self.num_players = num_players\n        self.max_turns = max_turns\n        self.game_state = self.initialize_state()\n \n    def initialize_state(self):\n        # Initialize variables, boards, etc.\n        return # BoardGame's state \n \n    def play_turn(self):\n        # Perform actions of current turn\n        self.game_state = # Game's state after turn\n \n    def check_end_game(self):\n        # Determine if max turns has reached\n        return # True or False"
    },
    {
        "instruction": "Create a design pattern to make a python program more efficient.",
        "input": "",
        "output": "The Factory Pattern is a design pattern that can be used to create an efficient Python program. This pattern is used when a program needs to create an object based on a specific type of input. For example, if an application needs to create objects for different types of data, it can use the Factory Pattern to create these objects in a more efficient manner.",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a design pattern to make a python program more efficient.\n\n### Input:\n\n\n### Output:\nThe Factory Pattern is a design pattern that can be used to create an efficient Python program. This pattern is used when a program needs to create an object based on a specific type of input. For example, if an application needs to create objects for different types of data, it can use the Factory Pattern to create these objects in a more efficient manner."
    },
    {
        "instruction": "Program a Python script that has a given list of integers as input and returns the sum of the list elements.",
        "input": "my_list = [3, 2, 5, 4, 9]",
        "output": "def sum_list(my_list):\n\ttotal = 0\n\tfor i in my_list:\n\t\ttotal += i\n\treturn total",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProgram a Python script that has a given list of integers as input and returns the sum of the list elements.\n\n### Input:\nmy_list = [3, 2, 5, 4, 9]\n\n### Output:\ndef sum_list(my_list):\n\ttotal = 0\n\tfor i in my_list:\n\t\ttotal += i\n\treturn total"
    },
    {
        "instruction": "Build a decision tree classifier in Python that classfies the given data points.",
        "input": "[[2,1,1], [2,2,0], [2,0,1], [1,1,1], [1,0,1], [1,2,0], [0,2,0], [0,1,1], [0,0,1]]",
        "output": "import numpy as np\nfrom sklearn.tree import DecisionTreeClassifier\n\nX = np.matrix('2 1 1; 2 2 0; 2 0 1; 1 1 1; 1 0 1; 1 2 0; 0 2 0; 0 1 1; 0 0 1')\nY = np.array([1, 0, 1, 1, 1, 0, 0, 1, 1])\n\nmodel = DecisionTreeClassifier().fit(X,Y)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a decision tree classifier in Python that classfies the given data points.\n\n### Input:\n[[2,1,1], [2,2,0], [2,0,1], [1,1,1], [1,0,1], [1,2,0], [0,2,0], [0,1,1], [0,0,1]]\n\n### Output:\nimport numpy as np\nfrom sklearn.tree import DecisionTreeClassifier\n\nX = np.matrix('2 1 1; 2 2 0; 2 0 1; 1 1 1; 1 0 1; 1 2 0; 0 2 0; 0 1 1; 0 0 1')\nY = np.array([1, 0, 1, 1, 1, 0, 0, 1, 1])\n\nmodel = DecisionTreeClassifier().fit(X,Y)"
    },
    {
        "instruction": "Design a Regex pattern in Python to validate a phone number format.",
        "input": "",
        "output": "import re\n\nphonePattern = re.compile(r'^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$') \n\ndef validate_phone(phone_number): \n    if phone_pattern.search(phone_number): \n        return true\n    else: \n        return false",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Regex pattern in Python to validate a phone number format.\n\n### Input:\n\n\n### Output:\nimport re\n\nphonePattern = re.compile(r'^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$') \n\ndef validate_phone(phone_number): \n    if phone_pattern.search(phone_number): \n        return true\n    else: \n        return false"
    },
    {
        "instruction": "Rewrite the following function from Java to Python:\n\nint findMax(int[] arr) { \n   int max = arr[0]; \n   for (int i = 0; i < arr.length; i ++) {\n     if (arr[i] > max) {\n        max = arr[i]; \n     }\n   }\n   return max;\n}",
        "input": "Not applicable",
        "output": "def find_max(arr):\n max = arr[0]\n for i in range(len(arr)):\n if arr[i] > max:\n max = arr[i]\n return max",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following function from Java to Python:\n\nint findMax(int[] arr) { \n   int max = arr[0]; \n   for (int i = 0; i < arr.length; i ++) {\n     if (arr[i] > max) {\n        max = arr[i]; \n     }\n   }\n   return max;\n}\n\n### Input:\nNot applicable\n\n### Output:\ndef find_max(arr):\n max = arr[0]\n for i in range(len(arr)):\n if arr[i] > max:\n max = arr[i]\n return max"
    },
    {
        "instruction": "Create a function in Python to calculate the standard deviation from a given array of numbers.",
        "input": "[2, 4, 4, 4, 5, 5, 7, 9]",
        "output": "def compute_std_dev(nums): \n\tmean = sum(nums) / len(nums)\n\tvariance = 0\n\tfor n in nums:\n\t\tvariance += (n - mean) ** 2\n\tvariance /= len(nums)\n\n\tstd_dev = variance ** 0.5\n\treturn std_dev",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to calculate the standard deviation from a given array of numbers.\n\n### Input:\n[2, 4, 4, 4, 5, 5, 7, 9]\n\n### Output:\ndef compute_std_dev(nums): \n\tmean = sum(nums) / len(nums)\n\tvariance = 0\n\tfor n in nums:\n\t\tvariance += (n - mean) ** 2\n\tvariance /= len(nums)\n\n\tstd_dev = variance ** 0.5\n\treturn std_dev"
    },
    {
        "instruction": "Construct a decision tree classifier in Python, to classify an animal based on body characteristics.",
        "input": "Not applicable",
        "output": "from sklearn import tree\n\n# features (characteristicsof animals)\n# 0 for false, 1 for true\nfeatures = [[1, 0], [1, 1], [0, 1], [0, 0]]\n\n# labels of features (types of animals)\nlabels = [0, 0, 1, 1]\n\n# decision tree classifier\nclf = tree.DecisionTreeClassifier()\n\n# train the classifier with the data\nclf = clf.fit(features, labels)\n\n# test a prediction\nprediction = clf.predict([[1, 0]])\n\n# print the result\nprint(prediction) # [0]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a decision tree classifier in Python, to classify an animal based on body characteristics.\n\n### Input:\nNot applicable\n\n### Output:\nfrom sklearn import tree\n\n# features (characteristicsof animals)\n# 0 for false, 1 for true\nfeatures = [[1, 0], [1, 1], [0, 1], [0, 0]]\n\n# labels of features (types of animals)\nlabels = [0, 0, 1, 1]\n\n# decision tree classifier\nclf = tree.DecisionTreeClassifier()\n\n# train the classifier with the data\nclf = clf.fit(features, labels)\n\n# test a prediction\nprediction = clf.predict([[1, 0]])\n\n# print the result\nprint(prediction) # [0]"
    },
    {
        "instruction": "Create a Python code snippet to store the login credentials in a dictionary.",
        "input": "username: testuser\npassword: test123",
        "output": "creds = {\n \"username\": \"testuser\",\n \"password\": \"test123\"\n}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code snippet to store the login credentials in a dictionary.\n\n### Input:\nusername: testuser\npassword: test123\n\n### Output:\ncreds = {\n \"username\": \"testuser\",\n \"password\": \"test123\"\n}"
    },
    {
        "instruction": "Use a Python web framework to create a web service that allows users to save and view a simple text message.",
        "input": "Not applicable",
        "output": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/message', methods=['POST'])\ndef save_message():\n    message = request.data\n    # save the message to database\n\n@app.route('/message', methods=['GET'])\ndef retrieve_message():\n    message = db.get_message()\n    return message\n\nif __name__ == '__main__':\n    app.run()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse a Python web framework to create a web service that allows users to save and view a simple text message.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/message', methods=['POST'])\ndef save_message():\n    message = request.data\n    # save the message to database\n\n@app.route('/message', methods=['GET'])\ndef retrieve_message():\n    message = db.get_message()\n    return message\n\nif __name__ == '__main__':\n    app.run()"
    },
    {
        "instruction": "Construct a Python program to check if a given array of numbers is sorted in ascending order or not.",
        "input": "[1, 2, 3, 4]",
        "output": "def is_sorted(arr):\n    return arr == sorted(arr)\n\nprint(is_sorted([1, 2, 3, 4]))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to check if a given array of numbers is sorted in ascending order or not.\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\ndef is_sorted(arr):\n    return arr == sorted(arr)\n\nprint(is_sorted([1, 2, 3, 4]))"
    },
    {
        "instruction": "Create a Python program that computes the median of an array of numbers.",
        "input": "[5, 4, 3, 2, 1]",
        "output": "def median(array):\n    sorted_array = sorted(array)\n    length = len(sorted_array)\n    if (length % 2 == 0):\n        median = (sorted_array[length//2] + sorted_array[length//2 - 1]) / 2\n    else:\n        median = sorted_array[length//2]\n\n    return median\n\narray = [5, 4, 3, 2, 1]\nprint(median(array))  # Output: 3",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that computes the median of an array of numbers.\n\n### Input:\n[5, 4, 3, 2, 1]\n\n### Output:\ndef median(array):\n    sorted_array = sorted(array)\n    length = len(sorted_array)\n    if (length % 2 == 0):\n        median = (sorted_array[length//2] + sorted_array[length//2 - 1]) / 2\n    else:\n        median = sorted_array[length//2]\n\n    return median\n\narray = [5, 4, 3, 2, 1]\nprint(median(array))  # Output: 3"
    },
    {
        "instruction": "Write a Python program to find all the common elements between two lists.",
        "input": "",
        "output": "def intersection(list1, list2): \n    return list(set(list1) & set(list2))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find all the common elements between two lists.\n\n### Input:\n\n\n### Output:\ndef intersection(list1, list2): \n    return list(set(list1) & set(list2))"
    },
    {
        "instruction": "Create a machine learning application using Python and the scikit-learn library. The application should include a step for training a Logistic Regression model and predicting the output for a given input.",
        "input": "X_train, y_train = datasets.load_wine(return_X_y=True)",
        "output": "import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import datasets, linear_model\n\n# Loading the dataset\nX_train, y_train = datasets.load_wine(return_X_y=True)\n\n# Creating a Logistic Regression model\nlogreg = linear_model.LogisticRegression()\n\n# Training the model\nlogreg.fit(X_train, y_train)\n\n# Making predictions\npredictions = logreg.predict(X_test) \n\n# Evaluating the model\nprint(\"Accuracy: \", metrics.accuracy_score(y_test, predictions))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning application using Python and the scikit-learn library. The application should include a step for training a Logistic Regression model and predicting the output for a given input.\n\n### Input:\nX_train, y_train = datasets.load_wine(return_X_y=True)\n\n### Output:\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import datasets, linear_model\n\n# Loading the dataset\nX_train, y_train = datasets.load_wine(return_X_y=True)\n\n# Creating a Logistic Regression model\nlogreg = linear_model.LogisticRegression()\n\n# Training the model\nlogreg.fit(X_train, y_train)\n\n# Making predictions\npredictions = logreg.predict(X_test) \n\n# Evaluating the model\nprint(\"Accuracy: \", metrics.accuracy_score(y_test, predictions))"
    },
    {
        "instruction": "Find and fix the errors in this Python code.",
        "input": "a = 10\nb = 15\nc = a b\n\nprint (c)",
        "output": "a = 10\nb = 15\nc = a + b\n\nprint(c)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind and fix the errors in this Python code.\n\n### Input:\na = 10\nb = 15\nc = a b\n\nprint (c)\n\n### Output:\na = 10\nb = 15\nc = a + b\n\nprint(c)"
    },
    {
        "instruction": "Generate a python program to calculate the number of elements in a set.",
        "input": "{1, 2, 3, 4, 5}",
        "output": "# calculate the number of elements in a set\n\nmy_set = {1, 2, 3, 4, 5}\nnum_elements = len(my_set)\n\nprint(\"Number of elements in the set:\", num_elements)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to calculate the number of elements in a set.\n\n### Input:\n{1, 2, 3, 4, 5}\n\n### Output:\n# calculate the number of elements in a set\n\nmy_set = {1, 2, 3, 4, 5}\nnum_elements = len(my_set)\n\nprint(\"Number of elements in the set:\", num_elements)"
    },
    {
        "instruction": "Generate a Python script to classify emails into spam/ham categories.",
        "input": "",
        "output": "import pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.model_selection import train_test_split\n\n# Read the data\ndf = pd.read_csv('data.csv')\n\n# Split the data into features and labels\nfeatures = df['text']\nlabels = df['label']\n\n# Extract features\nvectorizer = TfidfVectorizer()\nfeatures_transformed = vectorizer.fit_transform(features)\n\n# Split into train and test datasets\nx_train, x_test, y_train, y_test = train_test_split(features_transformed, labels, test_size = 0.2)\n\n# Build the classification model\nmodel = MultinomialNB()\nmodel.fit(x_train, y_train)\n\n# Make predictions\ny_pred = model.predict(x_test)\n\n# Calculate the accuracy\naccuracy = np.mean(y_pred == y_test)\n\n# Print the accuracy\nprint(\"Model accuracy: {}%\".format(accuracy*100))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to classify emails into spam/ham categories.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.model_selection import train_test_split\n\n# Read the data\ndf = pd.read_csv('data.csv')\n\n# Split the data into features and labels\nfeatures = df['text']\nlabels = df['label']\n\n# Extract features\nvectorizer = TfidfVectorizer()\nfeatures_transformed = vectorizer.fit_transform(features)\n\n# Split into train and test datasets\nx_train, x_test, y_train, y_test = train_test_split(features_transformed, labels, test_size = 0.2)\n\n# Build the classification model\nmodel = MultinomialNB()\nmodel.fit(x_train, y_train)\n\n# Make predictions\ny_pred = model.predict(x_test)\n\n# Calculate the accuracy\naccuracy = np.mean(y_pred == y_test)\n\n# Print the accuracy\nprint(\"Model accuracy: {}%\".format(accuracy*100))"
    },
    {
        "instruction": "Construct a Python program that calculates average of numbers stored in a list.",
        "input": "",
        "output": "def list_average(nums):\n    return float(sum(nums)) / float(len(nums))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program that calculates average of numbers stored in a list.\n\n### Input:\n\n\n### Output:\ndef list_average(nums):\n    return float(sum(nums)) / float(len(nums))"
    },
    {
        "instruction": "Develop a function to multiply two matrices of different dimensions in Python.",
        "input": "X = [[3, 2], \n     [4, 5]]\nY = [[4, 5, 6], \n     [6, 7, 8]]",
        "output": "def multiply_matrix(matrixA, matrixB): \n    if len(matrixA[0]) != len(matrixB): \n        return \"Invalid matrices. Cannot multiply.\" \n    else: \n        result_rows = len(matrixA) \n        result_columns = len(matrixB[0]) \n        result = [[0 for x in range(result_columns)] for y in range(result_rows)] \n\n        # iterate through rows of matrixA \n        for i in range(len(matrixA)): \n            # iterate through columns of matrixB \n            for j in range(len(matrixB[0])): \n                # iterate through rows of matrixB \n                for k in range(len(matrixB)): \n                    result[i][j] += matrixA[i][k] * matrixB[k][j] \n\n        return result \n\nX = [[3, 2], \n     [4, 5]]\nY = [[4, 5, 6], \n     [6, 7, 8]]\n\nresult = multiply_matrix(X, Y)  \nfor r in result: \n    print(r)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function to multiply two matrices of different dimensions in Python.\n\n### Input:\nX = [[3, 2], \n     [4, 5]]\nY = [[4, 5, 6], \n     [6, 7, 8]]\n\n### Output:\ndef multiply_matrix(matrixA, matrixB): \n    if len(matrixA[0]) != len(matrixB): \n        return \"Invalid matrices. Cannot multiply.\" \n    else: \n        result_rows = len(matrixA) \n        result_columns = len(matrixB[0]) \n        result = [[0 for x in range(result_columns)] for y in range(result_rows)] \n\n        # iterate through rows of matrixA \n        for i in range(len(matrixA)): \n            # iterate through columns of matrixB \n            for j in range(len(matrixB[0])): \n                # iterate through rows of matrixB \n                for k in range(len(matrixB)): \n                    result[i][j] += matrixA[i][k] * matrixB[k][j] \n\n        return result \n\nX = [[3, 2], \n     [4, 5]]\nY = [[4, 5, 6], \n     [6, 7, 8]]\n\nresult = multiply_matrix(X, Y)  \nfor r in result: \n    print(r)"
    },
    {
        "instruction": "Create a script in Python that displays \"Hello World!\" in your console.",
        "input": "Not applicable",
        "output": "print('Hello World!')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a script in Python that displays \"Hello World!\" in your console.\n\n### Input:\nNot applicable\n\n### Output:\nprint('Hello World!')"
    },
    {
        "instruction": "Write a Python program to generate a list that contains the first 10 fibonacci numbers.",
        "input": "",
        "output": "# Initialize a list\nfibonacci_numbers = [1, 1]\n\n# Generate the first 10 fibonacci numbers\nfor i in range(2, 10):\n    fibonacci_numbers.append(fibonacci_numbers[i - 1] + fibonacci_numbers[i - 2])\n\nprint(fibonacci_numbers)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a list that contains the first 10 fibonacci numbers.\n\n### Input:\n\n\n### Output:\n# Initialize a list\nfibonacci_numbers = [1, 1]\n\n# Generate the first 10 fibonacci numbers\nfor i in range(2, 10):\n    fibonacci_numbers.append(fibonacci_numbers[i - 1] + fibonacci_numbers[i - 2])\n\nprint(fibonacci_numbers)"
    },
    {
        "instruction": "Create a code in Python to send automated email notifications to customers when their orders have been delivered.",
        "input": "",
        "output": "import smtplib\n\ndef send_notification(email):\n    '''This function will send automated email notifications to customers when their orders have been delivered'''\n    sender = eamil@example.com\n    receiver = email\n    message = f\"Your order has been delivered. Thank you for choosing us. \"\n    try:\n        smtpObj = smtplib.SMTP('smtp.example.com', 587)\n        smtpObj.login('email@example.com', 'password')\n        smtpObj.sendmail(sender, receiver, message)\n        print('Notification sent successfully')\n    except Exception as e:\n        print('Could not send notification.')\n        print(e)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code in Python to send automated email notifications to customers when their orders have been delivered.\n\n### Input:\n\n\n### Output:\nimport smtplib\n\ndef send_notification(email):\n    '''This function will send automated email notifications to customers when their orders have been delivered'''\n    sender = eamil@example.com\n    receiver = email\n    message = f\"Your order has been delivered. Thank you for choosing us. \"\n    try:\n        smtpObj = smtplib.SMTP('smtp.example.com', 587)\n        smtpObj.login('email@example.com', 'password')\n        smtpObj.sendmail(sender, receiver, message)\n        print('Notification sent successfully')\n    except Exception as e:\n        print('Could not send notification.')\n        print(e)"
    },
    {
        "instruction": "Create an automatic speech recognition system in Python.",
        "input": "Not applicable",
        "output": "# Import modules\nimport speech_recognition as sr\n\n# Record audio\nr = sr.Recognizer()\nwith sr.Microphone() as source:\n print('Say something!')\n audio = r.listen(source)\n\n# Transform the audio file into text\ntext = r.recognize_google(audio)\n\nprint('You said: ', text)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an automatic speech recognition system in Python.\n\n### Input:\nNot applicable\n\n### Output:\n# Import modules\nimport speech_recognition as sr\n\n# Record audio\nr = sr.Recognizer()\nwith sr.Microphone() as source:\n print('Say something!')\n audio = r.listen(source)\n\n# Transform the audio file into text\ntext = r.recognize_google(audio)\n\nprint('You said: ', text)"
    },
    {
        "instruction": "Create an AI-based system for automated code generation. The system should be able to generate code in Python, JavaScript, and Java given a prompt.",
        "input": "Not applicable.",
        "output": "import nltk\nfrom nltk.tokenize import word_tokenize\nimport pycparser\nimport pylox\nimport slime\nimport os\n\nclass CodeGenerator:\n \n def __init__(self, language):\n self.language = language\n \n def generate(self, prompt):\n # Tokenize the prompt\n tokens = word_tokenize(prompt)\n \n # Parse the tokens\n parser = Parser(tokens)\n tree = parser.parse()\n \n # Generate code\n if self.language == 'python':\n code_generator = pycparser.CPythonGenerator()\n code = code_generator.generate_code(tree)\n \n elif self.language == 'javascript':\n code_generator = pylox.JavascriptGenerator()\n code = code_generator.generate_code(tree)\n \n elif self.language == 'java':\n code_generator = slime.JavaGenerator()\n code = code_generator.generate_code(tree)\n \n return code",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI-based system for automated code generation. The system should be able to generate code in Python, JavaScript, and Java given a prompt.\n\n### Input:\nNot applicable.\n\n### Output:\nimport nltk\nfrom nltk.tokenize import word_tokenize\nimport pycparser\nimport pylox\nimport slime\nimport os\n\nclass CodeGenerator:\n \n def __init__(self, language):\n self.language = language\n \n def generate(self, prompt):\n # Tokenize the prompt\n tokens = word_tokenize(prompt)\n \n # Parse the tokens\n parser = Parser(tokens)\n tree = parser.parse()\n \n # Generate code\n if self.language == 'python':\n code_generator = pycparser.CPythonGenerator()\n code = code_generator.generate_code(tree)\n \n elif self.language == 'javascript':\n code_generator = pylox.JavascriptGenerator()\n code = code_generator.generate_code(tree)\n \n elif self.language == 'java':\n code_generator = slime.JavaGenerator()\n code = code_generator.generate_code(tree)\n \n return code"
    },
    {
        "instruction": "Design and write a python program that simplifies user input.",
        "input": "",
        "output": "import re\n\ndef simplify_user_input(user_input):\n    words = user_input.split(\" \")\n    filtered_words = [word for word in words if len(word) > 2]\n    return \" \".join(filtered_words)\n\nuser_input = \"I have a great idea   !    Let's  do it\"\nsimplified_string = simplify_user_input(user_input) # \"idea great Let's do\"",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and write a python program that simplifies user input.\n\n### Input:\n\n\n### Output:\nimport re\n\ndef simplify_user_input(user_input):\n    words = user_input.split(\" \")\n    filtered_words = [word for word in words if len(word) > 2]\n    return \" \".join(filtered_words)\n\nuser_input = \"I have a great idea   !    Let's  do it\"\nsimplified_string = simplify_user_input(user_input) # \"idea great Let's do\""
    },
    {
        "instruction": "Create a Python script to generate a random list of integers of the specified length.",
        "input": "",
        "output": "import random\n\ndef generate_list(length):\n    lst = []\n    for i in range(length):\n        lst.append(random.randint(0, 100))\n    return lst",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to generate a random list of integers of the specified length.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_list(length):\n    lst = []\n    for i in range(length):\n        lst.append(random.randint(0, 100))\n    return lst"
    },
    {
        "instruction": "Create a Python script to classify a given set of tweets based on whether or not they contain hate speech.",
        "input": "Not applicable",
        "output": "# import necessary packages\nimport pandas as pd\nimport numpy as np\nimport scipy as sp\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# read in data\ndata = pd.read_csv('tweets.csv')\n\n# transform data into feature vector\nvect = CountVectorizer()\nX = vect.fit_transform(data.tweet)\n\n# define target\ny = data.label\n\n# train model\nmodel = MultinomialNB()\nmodel.fit(X,y)\n\n# classify new tweets\nnew_tweets = [\"You are so stupid\", \"I totally hate you\"]\nX_new = vect.transform(new_tweets)\ny_pred = model.predict(X_new)\nprint(y_pred)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to classify a given set of tweets based on whether or not they contain hate speech.\n\n### Input:\nNot applicable\n\n### Output:\n# import necessary packages\nimport pandas as pd\nimport numpy as np\nimport scipy as sp\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# read in data\ndata = pd.read_csv('tweets.csv')\n\n# transform data into feature vector\nvect = CountVectorizer()\nX = vect.fit_transform(data.tweet)\n\n# define target\ny = data.label\n\n# train model\nmodel = MultinomialNB()\nmodel.fit(X,y)\n\n# classify new tweets\nnew_tweets = [\"You are so stupid\", \"I totally hate you\"]\nX_new = vect.transform(new_tweets)\ny_pred = model.predict(X_new)\nprint(y_pred)"
    },
    {
        "instruction": "Create a Python program for solving the LeetCode \u201cTwo Sum\u201d problem.",
        "input": "nums = [2, 7, 11, 15], target = 9",
        "output": "def two_sum(nums, target):\n    # Create a Map to store the lookup\n    lookup = {}\n    # Loop over the input array\n    for i, num in enumerate(nums):\n        # Check if the target-num is present in the lookup\n        if target-num in lookup:\n            return [lookup[target-num], i]\n        # Otherwise, add the num to the lookup\n        lookup[num] = i\n\nnums = [2, 7, 11, 15]\ntarget = 9\n\nprint(two_sum(nums, target)) # [0, 1]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for solving the LeetCode \u201cTwo Sum\u201d problem.\n\n### Input:\nnums = [2, 7, 11, 15], target = 9\n\n### Output:\ndef two_sum(nums, target):\n    # Create a Map to store the lookup\n    lookup = {}\n    # Loop over the input array\n    for i, num in enumerate(nums):\n        # Check if the target-num is present in the lookup\n        if target-num in lookup:\n            return [lookup[target-num], i]\n        # Otherwise, add the num to the lookup\n        lookup[num] = i\n\nnums = [2, 7, 11, 15]\ntarget = 9\n\nprint(two_sum(nums, target)) # [0, 1]"
    },
    {
        "instruction": "Create a Python script to send an email.",
        "input": "",
        "output": "import smtplib\n\ndef send_email(sender, recipient, subject, message):\n    # set up the audience and message\n    message = \"\"\"\\\n\nFrom: %s\nTo: %s\nSubject: %s\n\n%s\n\"\"\" % (sender, recipient, subject, message)\n\n    # set up the SMTP connection and send the message\n    session = smtplib.SMTP('smtp.example.com', 25)\n    session.login(\"sender_username\", \"sender_password\")\n    session.sendmail(sender, recipient, message)\n    session.quit()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to send an email.\n\n### Input:\n\n\n### Output:\nimport smtplib\n\ndef send_email(sender, recipient, subject, message):\n    # set up the audience and message\n    message = \"\"\"\\\n\nFrom: %s\nTo: %s\nSubject: %s\n\n%s\n\"\"\" % (sender, recipient, subject, message)\n\n    # set up the SMTP connection and send the message\n    session = smtplib.SMTP('smtp.example.com', 25)\n    session.login(\"sender_username\", \"sender_password\")\n    session.sendmail(sender, recipient, message)\n    session.quit()"
    },
    {
        "instruction": "Generate a Python program to generate a dictionary from two lists.",
        "input": "list1 = [1, 2, 3]\nlist2 = ['a', 'b', 'c']",
        "output": "def generate_dictionary(list1, list2):\n  \"\"\"Generate a dictionary from two lists\"\"\"\n  # Check if both the lists have the same length\n  if len(list1) == len(list2):\n    # Create a dictionary\n    dictionary = {}\n    # Create a loop\n    for i in range(len(list1)):\n      # Map the corresponding elements of the lists\n      dictionary[list1[i]] = list2[i]\n    return dictionary\n  else:\n    raise Exception('Two lists must have the same length')\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = ['a', 'b', 'c']\n    result = generate_dictionary(list1, list2)\n    print('Dictionary from two lists: ', result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to generate a dictionary from two lists.\n\n### Input:\nlist1 = [1, 2, 3]\nlist2 = ['a', 'b', 'c']\n\n### Output:\ndef generate_dictionary(list1, list2):\n  \"\"\"Generate a dictionary from two lists\"\"\"\n  # Check if both the lists have the same length\n  if len(list1) == len(list2):\n    # Create a dictionary\n    dictionary = {}\n    # Create a loop\n    for i in range(len(list1)):\n      # Map the corresponding elements of the lists\n      dictionary[list1[i]] = list2[i]\n    return dictionary\n  else:\n    raise Exception('Two lists must have the same length')\n\nif __name__ == '__main__':\n    list1 = [1, 2, 3]\n    list2 = ['a', 'b', 'c']\n    result = generate_dictionary(list1, list2)\n    print('Dictionary from two lists: ', result)"
    },
    {
        "instruction": "Construct a for loop in Python to iterate over a list of strings and print each string.",
        "input": "",
        "output": "for word in list_of_strings:\n    print(word)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a for loop in Python to iterate over a list of strings and print each string.\n\n### Input:\n\n\n### Output:\nfor word in list_of_strings:\n    print(word)"
    },
    {
        "instruction": "Create a Python program to compute the greatest common divisor (GCD) for two given numbers.",
        "input": "24 and 32",
        "output": "def gcd(x, y):\n \n    # Using Euclidean algorithm \n    while(y): \n        x, y = y, x % y \n  \n    return x \n  \n# Driver Code \na = 24\nb = 32\n  \ngcd = gcd(a, b) \nprint(\"GCD of\", a, \"and\", b, \"is:\", gcd)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to compute the greatest common divisor (GCD) for two given numbers.\n\n### Input:\n24 and 32\n\n### Output:\ndef gcd(x, y):\n \n    # Using Euclidean algorithm \n    while(y): \n        x, y = y, x % y \n  \n    return x \n  \n# Driver Code \na = 24\nb = 32\n  \ngcd = gcd(a, b) \nprint(\"GCD of\", a, \"and\", b, \"is:\", gcd)"
    },
    {
        "instruction": "Convert the given code to a comprehensible, more readable form that follows PEP 8 and Python best practices.",
        "input": "number_list = [-5, 0, 4, 78, -3]\n result = [] \n for i in number_list:\n  if i >= 0:\n   result.append(i ** 2)",
        "output": "number_list = [-5, 0, 4, 78, -3]\nresult = [num ** 2 for num in number_list if num >= 0]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the given code to a comprehensible, more readable form that follows PEP 8 and Python best practices.\n\n### Input:\nnumber_list = [-5, 0, 4, 78, -3]\n result = [] \n for i in number_list:\n  if i >= 0:\n   result.append(i ** 2)\n\n### Output:\nnumber_list = [-5, 0, 4, 78, -3]\nresult = [num ** 2 for num in number_list if num >= 0]"
    },
    {
        "instruction": "How would you convert this comma separated string to a list in Python?",
        "input": "Str= \"apple, banana, orange, grapes\"",
        "output": "Str = \"apple, banana, orange, grapes\"\nmy_list = Str.split(\", \")\n\n# Output\nmy_list = [\"apple\",\"banana\",\"orange\",\"grapes\"]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow would you convert this comma separated string to a list in Python?\n\n### Input:\nStr= \"apple, banana, orange, grapes\"\n\n### Output:\nStr = \"apple, banana, orange, grapes\"\nmy_list = Str.split(\", \")\n\n# Output\nmy_list = [\"apple\",\"banana\",\"orange\",\"grapes\"]"
    },
    {
        "instruction": "Design a Python function to simulate Conway's Game of Life.",
        "input": "Not applicable",
        "output": "def neighbors(cell):\n x, y = cell\n nb = [(x-1, y-1), (x, y-1), (x+1, y-1), (x-1, y), (x+1, y), (x-1, y+1), (x, y+1), (x+1, y+1)]\n return [nb for nb in nb if 0 <= nb[0] < 8 and 0 <= nb[1] < 8]\n\ndef conway(world):\n new_world = set()\n for cell in world:\n  total = sum(1 for neighbor in neighbors(cell) if neighbor in world)\n  if (total == 3) or (total == 2 and cell in world):\n   new_world.add(cell)\n return new_world\n\ndef main():\n world = {(0,0), (0, 1), (1, 0)}\n print('Initial World:', *world)\n while True:\n  world = conway(world)\n  print('Next World:', *world)\n\nif __name__ == '__main__':\n main()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python function to simulate Conway's Game of Life.\n\n### Input:\nNot applicable\n\n### Output:\ndef neighbors(cell):\n x, y = cell\n nb = [(x-1, y-1), (x, y-1), (x+1, y-1), (x-1, y), (x+1, y), (x-1, y+1), (x, y+1), (x+1, y+1)]\n return [nb for nb in nb if 0 <= nb[0] < 8 and 0 <= nb[1] < 8]\n\ndef conway(world):\n new_world = set()\n for cell in world:\n  total = sum(1 for neighbor in neighbors(cell) if neighbor in world)\n  if (total == 3) or (total == 2 and cell in world):\n   new_world.add(cell)\n return new_world\n\ndef main():\n world = {(0,0), (0, 1), (1, 0)}\n print('Initial World:', *world)\n while True:\n  world = conway(world)\n  print('Next World:', *world)\n\nif __name__ == '__main__':\n main()"
    },
    {
        "instruction": "Write a python program to shuffle a given list in random order.",
        "input": "[3, 8, 2, 5, 4]",
        "output": "import random\n\ndef shuffle_list(lst):\n    random.shuffle(lst)\n    return lst\n\nprint(shuffle_list([3, 8, 2, 5, 4])) # prints [2, 3, 5, 4, 8] or any other combination",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to shuffle a given list in random order.\n\n### Input:\n[3, 8, 2, 5, 4]\n\n### Output:\nimport random\n\ndef shuffle_list(lst):\n    random.shuffle(lst)\n    return lst\n\nprint(shuffle_list([3, 8, 2, 5, 4])) # prints [2, 3, 5, 4, 8] or any other combination"
    },
    {
        "instruction": "Optimize a neural network model in Python using grid search to increase its classification accuracy.",
        "input": "A pre-existing model with associated dataset.",
        "output": "# Importing libraries\nfrom keras import models, layers\nfrom sklearn.model_selection import GridSearchCV\nimport numpy as np\n\n# Creating model\nnum_inputs = X_train.shape[1]\nmodel = models.Sequential()\nmodel.add(layers.Dense(10, activation='relu', input_shape=(num_inputs,)))\nmodel.add(layers.Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n# Creating grid search parameters\nparams = {'optimizer':['sgd', 'adam', 'rmsprop'],\n          'batch_size':[8, 16, 32, 64],\n          'epochs':[10, 20]}\n\n# Running grid search\ngrid_search = GridSearchCV(estimator=model,\n                           param_grid=params)\ngrid_search_results = grid_search.fit(X_train, y_train)\n\n# Outputting best parameters\nprint(\"Best parameters: {}\".format(grid_search_results.best_params_))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a neural network model in Python using grid search to increase its classification accuracy.\n\n### Input:\nA pre-existing model with associated dataset.\n\n### Output:\n# Importing libraries\nfrom keras import models, layers\nfrom sklearn.model_selection import GridSearchCV\nimport numpy as np\n\n# Creating model\nnum_inputs = X_train.shape[1]\nmodel = models.Sequential()\nmodel.add(layers.Dense(10, activation='relu', input_shape=(num_inputs,)))\nmodel.add(layers.Dense(1, activation='sigmoid'))\n\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n\n# Creating grid search parameters\nparams = {'optimizer':['sgd', 'adam', 'rmsprop'],\n          'batch_size':[8, 16, 32, 64],\n          'epochs':[10, 20]}\n\n# Running grid search\ngrid_search = GridSearchCV(estimator=model,\n                           param_grid=params)\ngrid_search_results = grid_search.fit(X_train, y_train)\n\n# Outputting best parameters\nprint(\"Best parameters: {}\".format(grid_search_results.best_params_))"
    },
    {
        "instruction": "Build a web scraper with Python to extract the text of a website.",
        "input": "Link to a website.",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\n# Copy the link to the website\nurl = 'https://www.example.com/'\n\n# Make a request for the page\nr = requests.get(url)\n\n# Parse the response using BeautifulSoup\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Extract the text from the page\ntext = soup.find_all(text=True)\n\n# Output the text\nfor t in text:\n print(t.strip())",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a web scraper with Python to extract the text of a website.\n\n### Input:\nLink to a website.\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Copy the link to the website\nurl = 'https://www.example.com/'\n\n# Make a request for the page\nr = requests.get(url)\n\n# Parse the response using BeautifulSoup\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Extract the text from the page\ntext = soup.find_all(text=True)\n\n# Output the text\nfor t in text:\n print(t.strip())"
    },
    {
        "instruction": "Create a loop in Python to print out all odd numbers from 0 to 10.",
        "input": "Not applicable",
        "output": "for i in range(0, 11):\n if i % 2 != 0:\n  print(i)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a loop in Python to print out all odd numbers from 0 to 10.\n\n### Input:\nNot applicable\n\n### Output:\nfor i in range(0, 11):\n if i % 2 != 0:\n  print(i)"
    },
    {
        "instruction": "Produce a Python script to display the first n Fibonacci numbers",
        "input": "n = 5",
        "output": "def printFibo(n):\n    first = 0\n    second = 1\n\n    print(first)\n    print(second)\n\n    for i in range(2, n):\n        next = first + second\n        print(next)\n        first = second\n        second = next\n\n#Test\nprintFibo(5)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a Python script to display the first n Fibonacci numbers\n\n### Input:\nn = 5\n\n### Output:\ndef printFibo(n):\n    first = 0\n    second = 1\n\n    print(first)\n    print(second)\n\n    for i in range(2, n):\n        next = first + second\n        print(next)\n        first = second\n        second = next\n\n#Test\nprintFibo(5)"
    },
    {
        "instruction": "Generate a Python function to convert radar data in polar coordinates into Cartesian coordinates.",
        "input": "",
        "output": "def polar_to_cartesian(r, theta):\n    x = r * np.cos(theta)\n    y = r * np.sin(theta)\n    return x, y",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to convert radar data in polar coordinates into Cartesian coordinates.\n\n### Input:\n\n\n### Output:\ndef polar_to_cartesian(r, theta):\n    x = r * np.cos(theta)\n    y = r * np.sin(theta)\n    return x, y"
    },
    {
        "instruction": "Create an algorithm in Python to find the closest pair of points out of given set of points.",
        "input": "",
        "output": "import math \n\ndef closest_pair(points):\n    # Initialize minimum distance \n    min_dist = float(\"inf\")\n\n    # Iterate over the points \n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n\n            # Calculate the euclidean distance\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            dist = math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\n            \n            # Update minimum distance if needed\n            if dist < min_dist:\n                min_dist = dist\n                closest_pair = (x1, y1), (x2, y2)\n\n    return closest_pair",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to find the closest pair of points out of given set of points.\n\n### Input:\n\n\n### Output:\nimport math \n\ndef closest_pair(points):\n    # Initialize minimum distance \n    min_dist = float(\"inf\")\n\n    # Iterate over the points \n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n\n            # Calculate the euclidean distance\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            dist = math.sqrt((x1 - x2)**2 + (y1 - y2)**2)\n            \n            # Update minimum distance if needed\n            if dist < min_dist:\n                min_dist = dist\n                closest_pair = (x1, y1), (x2, y2)\n\n    return closest_pair"
    },
    {
        "instruction": "Create a function in Python which takes three strings as parameters and concats them into one string.",
        "input": "",
        "output": "def concat_strings(str1, str2, str3):\n  return str1 + str2 + str3",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python which takes three strings as parameters and concats them into one string.\n\n### Input:\n\n\n### Output:\ndef concat_strings(str1, str2, str3):\n  return str1 + str2 + str3"
    },
    {
        "instruction": "Create a Lambda function in Python to process an integer array and return the square of the even numbers in the array.",
        "input": "The integer array: [2, 4, 7, 9, 12, 14]",
        "output": "def lambda_handler(event, context):\n    numbers = event['numbers']\n    result = [num ** 2 for num in numbers if num % 2 == 0]\n    return {'result': result}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Lambda function in Python to process an integer array and return the square of the even numbers in the array.\n\n### Input:\nThe integer array: [2, 4, 7, 9, 12, 14]\n\n### Output:\ndef lambda_handler(event, context):\n    numbers = event['numbers']\n    result = [num ** 2 for num in numbers if num % 2 == 0]\n    return {'result': result}"
    },
    {
        "instruction": "In Python, explain when to use \"try\", \"except\" and \"finally\".",
        "input": "",
        "output": "The \"try\" block is used to test a piece of code to see if any errors occur while executing that code. If an error occurs, the code in the \"except\" block will be executed. The \"finally\" block is used to execute code regardless of whether an error occurs or not. The \"finally\" block should be used for cleanup tasks, such as releasing resources or closing files.",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, explain when to use \"try\", \"except\" and \"finally\".\n\n### Input:\n\n\n### Output:\nThe \"try\" block is used to test a piece of code to see if any errors occur while executing that code. If an error occurs, the code in the \"except\" block will be executed. The \"finally\" block is used to execute code regardless of whether an error occurs or not. The \"finally\" block should be used for cleanup tasks, such as releasing resources or closing files."
    },
    {
        "instruction": "Design an algorithm in Python to find all unique combinations of three numbers that sum to a given value.",
        "input": "Target Sum: 6",
        "output": "def findUniqueCombos(targetSum): \n  result = []\n  for i in range(targetSum+1): \n    for j in range(i+1): \n      for k in range(j+1): \n        if i + j + k == targetSum: \n          uniqueCombo = [i, j, k] \n          result.append(uniqueCombo) \n  \n  return result",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to find all unique combinations of three numbers that sum to a given value.\n\n### Input:\nTarget Sum: 6\n\n### Output:\ndef findUniqueCombos(targetSum): \n  result = []\n  for i in range(targetSum+1): \n    for j in range(i+1): \n      for k in range(j+1): \n        if i + j + k == targetSum: \n          uniqueCombo = [i, j, k] \n          result.append(uniqueCombo) \n  \n  return result"
    },
    {
        "instruction": "Implement a Python method that builds a binary search tree from an unsorted array",
        "input": "[4, 3, 8, 15, 1, 5]",
        "output": "# Node class\nclass Node: \n    def __init__(self, val): \n        self.val = val\n        self.left = None\n        self.right = None\n\n# Function to construct a Binary Search Tree  \n# from a given array\ndef constructBst(arr): \n    # check if list is empty or not \n    if (len(arr) == 0): \n        return None\n  \n    # create a new root \n    root = Node(arr[0]) \n    arr.pop(0) \n  \n    # assign left and right child  \n    # of root node \n    left_arr, right_arr = [], []\n    for item in arr: \n        if (item <= root.val): \n            left_arr.append(item) \n        else: \n            right_arr.append(item)\n              \n    # recursively construct  \n    # left and right sub tree \n    root.left = constructBst(left_arr) \n    root.right = constructBst(right_arr) \n    return root \n\n# Function to traverse a Binary Search Tree  \n# and print its elements in inorder \ndef inorderTraversal(root): \n    if (root != None): \n        inorderTraversal(root.left) \n        print(root.val, end = \" \") \n        inorderTraversal(root.right) \n\n# Driver Code  \nif __name__ == '__main__': \n    arr =[4, 3, 8, 15, 1, 5]\n    root = constructBst(arr)  \n    inorderTraversal(root)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python method that builds a binary search tree from an unsorted array\n\n### Input:\n[4, 3, 8, 15, 1, 5]\n\n### Output:\n# Node class\nclass Node: \n    def __init__(self, val): \n        self.val = val\n        self.left = None\n        self.right = None\n\n# Function to construct a Binary Search Tree  \n# from a given array\ndef constructBst(arr): \n    # check if list is empty or not \n    if (len(arr) == 0): \n        return None\n  \n    # create a new root \n    root = Node(arr[0]) \n    arr.pop(0) \n  \n    # assign left and right child  \n    # of root node \n    left_arr, right_arr = [], []\n    for item in arr: \n        if (item <= root.val): \n            left_arr.append(item) \n        else: \n            right_arr.append(item)\n              \n    # recursively construct  \n    # left and right sub tree \n    root.left = constructBst(left_arr) \n    root.right = constructBst(right_arr) \n    return root \n\n# Function to traverse a Binary Search Tree  \n# and print its elements in inorder \ndef inorderTraversal(root): \n    if (root != None): \n        inorderTraversal(root.left) \n        print(root.val, end = \" \") \n        inorderTraversal(root.right) \n\n# Driver Code  \nif __name__ == '__main__': \n    arr =[4, 3, 8, 15, 1, 5]\n    root = constructBst(arr)  \n    inorderTraversal(root)"
    },
    {
        "instruction": "Create a Python script that makes an API request and returns the results. The API endpoint should return a list of countries and their capital cities.",
        "input": "Not applicable",
        "output": "import requests\n \n# Make the API request\nurl = 'https://restcountries.eu/rest/v2/all'\nr = requests.get(url)\ndata = r.json()\n \n# Initialize an empty list for the results\nresults = []\n \n# Extract the relevant information and append to the list\nfor country in data:\n  results.append((country['name'], country['capital']))\n \n# Print the results\nfor result in results:\n print(f'{result[0]}: {result[1]}')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that makes an API request and returns the results. The API endpoint should return a list of countries and their capital cities.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\n \n# Make the API request\nurl = 'https://restcountries.eu/rest/v2/all'\nr = requests.get(url)\ndata = r.json()\n \n# Initialize an empty list for the results\nresults = []\n \n# Extract the relevant information and append to the list\nfor country in data:\n  results.append((country['name'], country['capital']))\n \n# Print the results\nfor result in results:\n print(f'{result[0]}: {result[1]}')"
    },
    {
        "instruction": "Write a Python program to process an array of strings. The program should print out the characters in each string in reverse order.",
        "input": "[ \"Hello\", \"World\" ]",
        "output": "# Input array\narr = [\"Hello\", \"World\"]\n\n# Loop through each string\nfor s in arr:\n # Print the string in reverse order\n print(s[::-1])\n\n# Output\nolleH\ndlroW",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to process an array of strings. The program should print out the characters in each string in reverse order.\n\n### Input:\n[ \"Hello\", \"World\" ]\n\n### Output:\n# Input array\narr = [\"Hello\", \"World\"]\n\n# Loop through each string\nfor s in arr:\n # Print the string in reverse order\n print(s[::-1])\n\n# Output\nolleH\ndlroW"
    },
    {
        "instruction": "Edit a given Python program to add error handling to it.",
        "input": "def read_csv(filename):\n    with open(filename, 'r') as f: \n        data = f.readlines()\n    return data",
        "output": "def read_csv(filename):\n    try:\n        with open(filename, 'r') as f: \n            data = f.readlines()\n            return data\n    except FileNotFoundError: \n        print(\"File not found. Please provide a valid filename\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit a given Python program to add error handling to it.\n\n### Input:\ndef read_csv(filename):\n    with open(filename, 'r') as f: \n        data = f.readlines()\n    return data\n\n### Output:\ndef read_csv(filename):\n    try:\n        with open(filename, 'r') as f: \n            data = f.readlines()\n            return data\n    except FileNotFoundError: \n        print(\"File not found. Please provide a valid filename\")"
    },
    {
        "instruction": "Create a recursive function in Python that calculates the factorial of a given number.",
        "input": "n = 5",
        "output": "def factorial(n): \n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(5)\nprint(result) # prints 120",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a recursive function in Python that calculates the factorial of a given number.\n\n### Input:\nn = 5\n\n### Output:\ndef factorial(n): \n    if n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\nresult = factorial(5)\nprint(result) # prints 120"
    },
    {
        "instruction": "Write abstract methods in Python to implement a stack",
        "input": "",
        "output": "class MYStack:\n    def __init__(self):\n        self._items = []\n\n    def push(self, item):\n        self._items.append(item)\n\n    def pop(self):\n        return self._items.pop()\n\n    def size(self):\n        return len(self._items)\n\n    def is_empty(self):\n        return self.size() == 0",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite abstract methods in Python to implement a stack\n\n### Input:\n\n\n### Output:\nclass MYStack:\n    def __init__(self):\n        self._items = []\n\n    def push(self, item):\n        self._items.append(item)\n\n    def pop(self):\n        return self._items.pop()\n\n    def size(self):\n        return len(self._items)\n\n    def is_empty(self):\n        return self.size() == 0"
    },
    {
        "instruction": "Create a program in Python to sort a given list of numbers in ascending order.",
        "input": "[9, 5, 7, 4, 1]",
        "output": "def sort_asc(lst):\n    return sorted(lst)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to sort a given list of numbers in ascending order.\n\n### Input:\n[9, 5, 7, 4, 1]\n\n### Output:\ndef sort_asc(lst):\n    return sorted(lst)"
    },
    {
        "instruction": "Create a GUI using Tkinter in Python that displays a message when a button is pressed.",
        "input": "",
        "output": "import tkinter as tk\n\nroot = tk.Tk()\n\ndef displayMessage():\n    print(\"Button was pressed!\")\n\nbutton = tk.Button(root,text=\"Press Me\",width=25,command=displayMessage)\nbutton.pack()\n\nroot.mainloop()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a GUI using Tkinter in Python that displays a message when a button is pressed.\n\n### Input:\n\n\n### Output:\nimport tkinter as tk\n\nroot = tk.Tk()\n\ndef displayMessage():\n    print(\"Button was pressed!\")\n\nbutton = tk.Button(root,text=\"Press Me\",width=25,command=displayMessage)\nbutton.pack()\n\nroot.mainloop()"
    },
    {
        "instruction": "Develop a Python program to generate random sentences from a given grammar.",
        "input": "not: ['do not', 'doesn\\'t', 'no'],\nverb: ['play', 'study', 'work'],\nobject: ['soccer', 'math', 'the guitar']",
        "output": "grammar = {\n \"not\": [\"do not\", \"doesn't\", \"no\"],\n \"verb\": [\"play\", \"study\", \"work\"],\n \"object\": [\"soccer\", \"math\", \"the guitar\"]\n}\n\nimport random\n\ndef generate():\n not_ = random.choice(grammar[\"not\"])\n verb = random.choice(grammar[\"verb\"])\n obj = random.choice(grammar[\"object\"])\n return f\"{not_} {verb} {obj}.\"\n \nprint(generate())",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to generate random sentences from a given grammar.\n\n### Input:\nnot: ['do not', 'doesn\\'t', 'no'],\nverb: ['play', 'study', 'work'],\nobject: ['soccer', 'math', 'the guitar']\n\n### Output:\ngrammar = {\n \"not\": [\"do not\", \"doesn't\", \"no\"],\n \"verb\": [\"play\", \"study\", \"work\"],\n \"object\": [\"soccer\", \"math\", \"the guitar\"]\n}\n\nimport random\n\ndef generate():\n not_ = random.choice(grammar[\"not\"])\n verb = random.choice(grammar[\"verb\"])\n obj = random.choice(grammar[\"object\"])\n return f\"{not_} {verb} {obj}.\"\n \nprint(generate())"
    },
    {
        "instruction": "Define and implement a Python class to represent a date object that stores the day, month, and year as separate fields.",
        "input": "",
        "output": "class Date:\n    # Constructor\n    def __init__(self, day=1, month=1, year=1990):\n        self.day = day\n        self.month = month\n        self.year = year\n    \n    # String representation\n    def __str__(self):\n        return '%02d/%02d/%4d' % (self.day, self.month, self.year)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDefine and implement a Python class to represent a date object that stores the day, month, and year as separate fields.\n\n### Input:\n\n\n### Output:\nclass Date:\n    # Constructor\n    def __init__(self, day=1, month=1, year=1990):\n        self.day = day\n        self.month = month\n        self.year = year\n    \n    # String representation\n    def __str__(self):\n        return '%02d/%02d/%4d' % (self.day, self.month, self.year)"
    },
    {
        "instruction": "Write an algorithm in Python to find the maximum and minimum of two given numbers.",
        "input": "a = 10, b = 12",
        "output": "def max_and_min(a,b):\n    \"\"\"Function to find the maximum and minimum of two given numbers.\"\"\"\n    max = a if a > b else b\n    min = a if a < b else b\n    return max, min\n\n#Example:\nprint(\"Maximum is: \",max_and_min(a,b)[0])\nprint(\"Minimum is: \",max_and_min(a,b)[1])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to find the maximum and minimum of two given numbers.\n\n### Input:\na = 10, b = 12\n\n### Output:\ndef max_and_min(a,b):\n    \"\"\"Function to find the maximum and minimum of two given numbers.\"\"\"\n    max = a if a > b else b\n    min = a if a < b else b\n    return max, min\n\n#Example:\nprint(\"Maximum is: \",max_and_min(a,b)[0])\nprint(\"Minimum is: \",max_and_min(a,b)[1])"
    },
    {
        "instruction": "Implement an AI-driven chatbot that can answer questions about programming languages.",
        "input": "Not applicable",
        "output": "import taiko\n\n# Define the intents\nintents = {\n    'greeting': [\"Hi, I'm here to answer any questions you have about programming languages.\"],\n    'python': [\"Python is a high-level programming language, often used for creating dynamic web applications and data science.\"],\n    'javascript': [\"JavaScript is a scripting language for browsers used for creating dynamic web applications.\"],\n    'java': [\"Java is a general-purpose, object-oriented programming language often used for creating large-scale enterprise applications.\"]\n}\n\n# Define a function to check if an intent is present\ndef check_intent(message):\n    for intent, phrases in intents.items():\n        for phrase in phrases:\n            if phrase.lower() in message.lower():\n                return intent\n    return None\n\n# Initialize the Taiko bot\nbot = taiko.Bot()\nbot.set_greeting_message(\"Hello, I'm a chatbot that can answer questions about programming languages! What do you want to know about?\")\n\n# Set the response handler\n@bot.handle\ndef handle_message(message):\n    intent = check_intent(message)\n    if intent in intents:\n        return intents[intent]\n    else:\n        return \"I'm sorry, I didn't understand that. Could you please rephrase your question?\"\n\n# Run the bot\nbot.run()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an AI-driven chatbot that can answer questions about programming languages.\n\n### Input:\nNot applicable\n\n### Output:\nimport taiko\n\n# Define the intents\nintents = {\n    'greeting': [\"Hi, I'm here to answer any questions you have about programming languages.\"],\n    'python': [\"Python is a high-level programming language, often used for creating dynamic web applications and data science.\"],\n    'javascript': [\"JavaScript is a scripting language for browsers used for creating dynamic web applications.\"],\n    'java': [\"Java is a general-purpose, object-oriented programming language often used for creating large-scale enterprise applications.\"]\n}\n\n# Define a function to check if an intent is present\ndef check_intent(message):\n    for intent, phrases in intents.items():\n        for phrase in phrases:\n            if phrase.lower() in message.lower():\n                return intent\n    return None\n\n# Initialize the Taiko bot\nbot = taiko.Bot()\nbot.set_greeting_message(\"Hello, I'm a chatbot that can answer questions about programming languages! What do you want to know about?\")\n\n# Set the response handler\n@bot.handle\ndef handle_message(message):\n    intent = check_intent(message)\n    if intent in intents:\n        return intents[intent]\n    else:\n        return \"I'm sorry, I didn't understand that. Could you please rephrase your question?\"\n\n# Run the bot\nbot.run()"
    },
    {
        "instruction": "Create a text classification model in Python using a synthetic dataset.",
        "input": "Not applicable",
        "output": "import numpy as np\nimport pandas as pd\n\n# Load the data\ndata = pd.read_csv('data.csv')\n\n# Split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(data['Text'], data['Label'], test_size=0.2)\n\n# Initialize a count vectorizer \ncount_vectorizer = CountVectorizer()\nX_train_counts = count_vectorizer.fit_transform(X_train)\nX_test_counts = count_vectorizer.transform(X_test)\n\n# Train a classifier\nclassifier = MultinomialNB()\nclassifier.fit(X_train_counts, y_train)\n\n# Make predictions\npredicted = classifier.predict(X_test_counts)\n\n# Evaluate accuracy\naccuracy = np.mean(predicted == y_test)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a text classification model in Python using a synthetic dataset.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nimport pandas as pd\n\n# Load the data\ndata = pd.read_csv('data.csv')\n\n# Split into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(data['Text'], data['Label'], test_size=0.2)\n\n# Initialize a count vectorizer \ncount_vectorizer = CountVectorizer()\nX_train_counts = count_vectorizer.fit_transform(X_train)\nX_test_counts = count_vectorizer.transform(X_test)\n\n# Train a classifier\nclassifier = MultinomialNB()\nclassifier.fit(X_train_counts, y_train)\n\n# Make predictions\npredicted = classifier.predict(X_test_counts)\n\n# Evaluate accuracy\naccuracy = np.mean(predicted == y_test)"
    },
    {
        "instruction": "This code is a configuration file for building documentation using Sphinx. It imports necessary modules, sets up extensions, and defines various options for the output format. To use this code, create a new Sphinx documentation project and replace the default configuration file with this code. Then, modify the options as needed for your specific project.",
        "input": "",
        "output": "# -*- coding: utf-8 -*-\n#\n# pwntools documentation build configuration file, created by\n# sphinx-quickstart on Wed May 28 15:00:52 2014.\n#\n# This file is execfile()d with the current directory set to its containing dir.\n#\n# Note that not all possible configuration values are present in this\n# autogenerated file.\n#\n# All configuration values have a default; values that are commented out\n# serve to show the default.\n\nimport os\nimport subprocess\nimport sys\n\nbuild_dash = tags.has('dash')\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\nsys.path.insert(0, os.path.abspath('../..'))\n\nimport pwnlib\n\n# -- General configuration -----------------------------------------------------\n\n# If your documentation needs a minimal Sphinx version, state it here.\n#needs_sphinx = '1.0'\n\n# Add any Sphinx extension module names here, as strings. They can be extensions\n# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.\nextensions = [\n    'pwnlib.internal.dochelper',\n    'sphinx.ext.autodoc',\n    'sphinx.ext.doctest',\n    'sphinx.ext.linkcode',\n    'sphinx.ext.autosummary',\n    'sphinx.ext.coverage',\n    'sphinx.ext.todo',\n    'sphinx.ext.intersphinx',\n    'sphinxcontrib.autoprogram',\n    'sphinxcontrib.napoleon'\n]\n\ndoctest_global_setup = '''\nimport sys, os\nos.environ['PWNLIB_NOTERM'] = '1'\nos.environ['PWNLIB_RANDOMIZE'] = '0'\nimport pwnlib\npwnlib.context.context.reset_local()\npwnlib.context.ContextType.defaults['log_level'] = 'ERROR'\npwnlib.context.ContextType.defaults['randomize'] = False\npwnlib.term.text.when = 'never'\npwnlib.log.install_default_handler()\npwnlib.log.rootlogger.setLevel(1)\n\n# Sphinx modifies sys.stdout, and context.log_terminal has\n# a reference to the original instance.  We need to update\n# it for logging to be captured.\nclass stdout(object):\n    def __getattr__(self, name):\n        return getattr(sys.stdout, name)\n    def __setattr__(self, name, value):\n        return setattr(sys.stdout, name, value)\npwnlib.context.ContextType.defaults['log_console'] = stdout()\n'''\n\nautodoc_member_order = 'alphabetical'\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n\ndoctest_test_doctest_blocks = True\n\n# The suffix of source filenames.\nsource_suffix = '.rst'\n\n# The encoding of source files.\nsource_encoding = 'utf-8-sig'\n\n# The master toctree document.\nmaster_doc = 'index'\n\n# General information about the project.\nproject = u'pwntools'\ncopyright = u'2016, Gallopsled et al.'\n\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nrelease = pwnlib.__version__\nversion = release.rsplit('.', 1)[0]\n\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#language = \"zh_CN\"\n\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = []\n\n# The reST default role (used for this markup: `text`) to use for all documents.\n#default_role = None\n\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n\n\n# -- Options for HTML output ---------------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = 'sphinx_rtd_theme'\n\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n\n# Add any paths that contain custom themes here, relative to this directory.\n#html_theme_path = []\n\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\n#html_title = None\n\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\n\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = []\n\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n#html_last_updated_fmt = '%b %d, %Y'\n\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n\n# If false, no module index is generated.\nhtml_domain_indices = not build_dash\n\n# If false, no index is generated.\nhtml_use_index = not build_dash\n\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = None\n\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'pwntoolsdoc'\n\n\n# -- Options for LaTeX output --------------------------------------------------\n\nlatex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n\n# The font size ('10pt', '11pt' or '12pt').\n#'pointsize': '10pt',\n\n# Additional stuff for the LaTeX preamble.\n#'preamble': '',\n}\n\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title, author, documentclass [howto/manual]).\nlatex_documents = [\n  ('index', 'pwntools.tex', u'pwntools Documentation',\n   u'2016, Gallopsled et al.', 'manual'),\n]\n\nintersphinx_mapping = {'python': ('https://docs.python.org/2.7', None),\n                       'paramiko': ('https://paramiko-docs.readthedocs.org/en/1.15/', None)}\n\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n#latex_logo = None\n\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False\n\n# If true, show page references after internal links.\n#latex_show_pagerefs = False\n\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n\n# If false, no module index is generated.\n#latex_domain_indices = True\n\n\n# -- Options for manual page output --------------------------------------------\n\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    ('index', 'pwntools', u'pwntools Documentation',\n     [u'2016, Gallopsled et al.'], 1)\n]\n\n# If true, show URL addresses after external links.\n#man_show_urls = False\n\n\n# -- Options for Texinfo output ------------------------------------------------\n\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n  ('index', 'pwntools', u'pwntools Documentation',\n   u'', 'pwntools', 'CTF exploit writing toolkit.',\n   'Miscellaneous'),\n]\n\n# Documents to append as an appendix to all manuals.\n#texinfo_appendices = []\n\n# If false, no module index is generated.\n#texinfo_domain_indices = True\n\n# How to display URL addresses: 'footnote', 'no', or 'inline'.\n#texinfo_show_urls = 'footnote'\n\nbranch = release\n\ntry:\n    git_branch = subprocess.check_output('git describe --tags', shell = True)\nexcept subprocess.CalledProcessError:\n    git_branch = '-'\n\ntry:\n    if '-' in git_branch:\n        branch = subprocess.check_output('git rev-parse HEAD', shell = True).strip()[:10]\nexcept subprocess.CalledProcessError:\n    pass\n\ndef linkcode_resolve(domain, info):\n    if domain != 'py':\n        return None\n    if not info['module']:\n        return None\n\n    import importlib, inspect, types\n    mod = importlib.import_module(info['module'])\n\n    # Try to find the value\n    val = mod\n    for k in info['fullname'].split('.'):\n        val = getattr(val, k, None)\n        if val == None:\n            break\n\n    # Special case for shellcraft\n    if info['module'].startswith('pwnlib.shellcraft.'):\n        filename = 'pwnlib/shellcraft/templates/%s' % val._relpath\n\n    # Case for everything else\n    else:\n        filename = info['module'].replace('.', '/') + '.py'\n\n        if isinstance(val, (types.ModuleType, types.ClassType, types.MethodType, types.FunctionType, types.TracebackType, types.FrameType, types.CodeType)):\n            try:\n                lines, first = inspect.getsourcelines(val)\n                filename += '#L%d-%d' % (first, first + len(lines) - 1)\n            except IOError:\n                pass\n\n    return \"https://github.com/Gallopsled/pwntools/blob/%s/%s\" % (branch, filename)\n\n\n# The readthedocs theme is used by the Dash generator. (Can be used for HTML too.)\n\nif build_dash:\n\n    # on_rtd is whether we are on readthedocs.org\n    on_rtd = os.environ.get('READTHEDOCS', None) == 'True'\n\n    if not on_rtd:  # only import and set the theme if we're building docs locally\n        import sphinx_rtd_theme\n        html_theme = 'sphinx_rtd_theme'\n        html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n\n    # otherwise, readthedocs.org uses their theme by default, so no need to specify it\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a configuration file for building documentation using Sphinx. It imports necessary modules, sets up extensions, and defines various options for the output format. To use this code, create a new Sphinx documentation project and replace the default configuration file with this code. Then, modify the options as needed for your specific project.\n\n### Input:\n\n\n### Output:\n# -*- coding: utf-8 -*-\n#\n# pwntools documentation build configuration file, created by\n# sphinx-quickstart on Wed May 28 15:00:52 2014.\n#\n# This file is execfile()d with the current directory set to its containing dir.\n#\n# Note that not all possible configuration values are present in this\n# autogenerated file.\n#\n# All configuration values have a default; values that are commented out\n# serve to show the default.\n\nimport os\nimport subprocess\nimport sys\n\nbuild_dash = tags.has('dash')\n\n# If extensions (or modules to document with autodoc) are in another directory,\n# add these directories to sys.path here. If the directory is relative to the\n# documentation root, use os.path.abspath to make it absolute, like shown here.\nsys.path.insert(0, os.path.abspath('../..'))\n\nimport pwnlib\n\n# -- General configuration -----------------------------------------------------\n\n# If your documentation needs a minimal Sphinx version, state it here.\n#needs_sphinx = '1.0'\n\n# Add any Sphinx extension module names here, as strings. They can be extensions\n# coming with Sphinx (named 'sphinx.ext.*') or your custom ones.\nextensions = [\n    'pwnlib.internal.dochelper',\n    'sphinx.ext.autodoc',\n    'sphinx.ext.doctest',\n    'sphinx.ext.linkcode',\n    'sphinx.ext.autosummary',\n    'sphinx.ext.coverage',\n    'sphinx.ext.todo',\n    'sphinx.ext.intersphinx',\n    'sphinxcontrib.autoprogram',\n    'sphinxcontrib.napoleon'\n]\n\ndoctest_global_setup = '''\nimport sys, os\nos.environ['PWNLIB_NOTERM'] = '1'\nos.environ['PWNLIB_RANDOMIZE'] = '0'\nimport pwnlib\npwnlib.context.context.reset_local()\npwnlib.context.ContextType.defaults['log_level'] = 'ERROR'\npwnlib.context.ContextType.defaults['randomize'] = False\npwnlib.term.text.when = 'never'\npwnlib.log.install_default_handler()\npwnlib.log.rootlogger.setLevel(1)\n\n# Sphinx modifies sys.stdout, and context.log_terminal has\n# a reference to the original instance.  We need to update\n# it for logging to be captured.\nclass stdout(object):\n    def __getattr__(self, name):\n        return getattr(sys.stdout, name)\n    def __setattr__(self, name, value):\n        return setattr(sys.stdout, name, value)\npwnlib.context.ContextType.defaults['log_console'] = stdout()\n'''\n\nautodoc_member_order = 'alphabetical'\n\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n\ndoctest_test_doctest_blocks = True\n\n# The suffix of source filenames.\nsource_suffix = '.rst'\n\n# The encoding of source files.\nsource_encoding = 'utf-8-sig'\n\n# The master toctree document.\nmaster_doc = 'index'\n\n# General information about the project.\nproject = u'pwntools'\ncopyright = u'2016, Gallopsled et al.'\n\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nrelease = pwnlib.__version__\nversion = release.rsplit('.', 1)[0]\n\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#language = \"zh_CN\"\n\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n\n# List of patterns, relative to source directory, that match files and\n# directories to ignore when looking for source files.\nexclude_patterns = []\n\n# The reST default role (used for this markup: `text`) to use for all documents.\n#default_role = None\n\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\n#add_module_names = True\n\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n\n# A list of ignored prefixes for module index sorting.\n#modindex_common_prefix = []\n\n\n# -- Options for HTML output ---------------------------------------------------\n\n# The theme to use for HTML and HTML Help pages.  See the documentation for\n# a list of builtin themes.\nhtml_theme = 'sphinx_rtd_theme'\n\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\n#html_theme_options = {}\n\n# Add any paths that contain custom themes here, relative to this directory.\n#html_theme_path = []\n\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\n#html_title = None\n\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\n#html_logo = None\n\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\n#html_favicon = None\n\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = []\n\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n#html_last_updated_fmt = '%b %d, %Y'\n\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n\n# If false, no module index is generated.\nhtml_domain_indices = not build_dash\n\n# If false, no index is generated.\nhtml_use_index = not build_dash\n\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\n#html_show_sphinx = True\n\n# If true, \"(C) Copyright ...\" is shown in the HTML footer. Default is True.\n#html_show_copyright = True\n\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n\n# This is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = None\n\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'pwntoolsdoc'\n\n\n# -- Options for LaTeX output --------------------------------------------------\n\nlatex_elements = {\n# The paper size ('letterpaper' or 'a4paper').\n#'papersize': 'letterpaper',\n\n# The font size ('10pt', '11pt' or '12pt').\n#'pointsize': '10pt',\n\n# Additional stuff for the LaTeX preamble.\n#'preamble': '',\n}\n\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title, author, documentclass [howto/manual]).\nlatex_documents = [\n  ('index', 'pwntools.tex', u'pwntools Documentation',\n   u'2016, Gallopsled et al.', 'manual'),\n]\n\nintersphinx_mapping = {'python': ('https://docs.python.org/2.7', None),\n                       'paramiko': ('https://paramiko-docs.readthedocs.org/en/1.15/', None)}\n\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n#latex_logo = None\n\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False\n\n# If true, show page references after internal links.\n#latex_show_pagerefs = False\n\n# If true, show URL addresses after external links.\n#latex_show_urls = False\n\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n\n# If false, no module index is generated.\n#latex_domain_indices = True\n\n\n# -- Options for manual page output --------------------------------------------\n\n# One entry per manual page. List of tuples\n# (source start file, name, description, authors, manual section).\nman_pages = [\n    ('index', 'pwntools', u'pwntools Documentation',\n     [u'2016, Gallopsled et al.'], 1)\n]\n\n# If true, show URL addresses after external links.\n#man_show_urls = False\n\n\n# -- Options for Texinfo output ------------------------------------------------\n\n# Grouping the document tree into Texinfo files. List of tuples\n# (source start file, target name, title, author,\n#  dir menu entry, description, category)\ntexinfo_documents = [\n  ('index', 'pwntools', u'pwntools Documentation',\n   u'', 'pwntools', 'CTF exploit writing toolkit.',\n   'Miscellaneous'),\n]\n\n# Documents to append as an appendix to all manuals.\n#texinfo_appendices = []\n\n# If false, no module index is generated.\n#texinfo_domain_indices = True\n\n# How to display URL addresses: 'footnote', 'no', or 'inline'.\n#texinfo_show_urls = 'footnote'\n\nbranch = release\n\ntry:\n    git_branch = subprocess.check_output('git describe --tags', shell = True)\nexcept subprocess.CalledProcessError:\n    git_branch = '-'\n\ntry:\n    if '-' in git_branch:\n        branch = subprocess.check_output('git rev-parse HEAD', shell = True).strip()[:10]\nexcept subprocess.CalledProcessError:\n    pass\n\ndef linkcode_resolve(domain, info):\n    if domain != 'py':\n        return None\n    if not info['module']:\n        return None\n\n    import importlib, inspect, types\n    mod = importlib.import_module(info['module'])\n\n    # Try to find the value\n    val = mod\n    for k in info['fullname'].split('.'):\n        val = getattr(val, k, None)\n        if val == None:\n            break\n\n    # Special case for shellcraft\n    if info['module'].startswith('pwnlib.shellcraft.'):\n        filename = 'pwnlib/shellcraft/templates/%s' % val._relpath\n\n    # Case for everything else\n    else:\n        filename = info['module'].replace('.', '/') + '.py'\n\n        if isinstance(val, (types.ModuleType, types.ClassType, types.MethodType, types.FunctionType, types.TracebackType, types.FrameType, types.CodeType)):\n            try:\n                lines, first = inspect.getsourcelines(val)\n                filename += '#L%d-%d' % (first, first + len(lines) - 1)\n            except IOError:\n                pass\n\n    return \"https://github.com/Gallopsled/pwntools/blob/%s/%s\" % (branch, filename)\n\n\n# The readthedocs theme is used by the Dash generator. (Can be used for HTML too.)\n\nif build_dash:\n\n    # on_rtd is whether we are on readthedocs.org\n    on_rtd = os.environ.get('READTHEDOCS', None) == 'True'\n\n    if not on_rtd:  # only import and set the theme if we're building docs locally\n        import sphinx_rtd_theme\n        html_theme = 'sphinx_rtd_theme'\n        html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]\n\n    # otherwise, readthedocs.org uses their theme by default, so no need to specify it\n"
    },
    {
        "instruction": "Build an interactive chatbot in Python using the Chatterbot library.",
        "input": "Not applicable",
        "output": "from chatterbot import ChatBot\nfrom chatterbot.trainers import ListTrainer\n\nbot = ChatBot('Bot')\nbot.set_trainer(ListTrainer)\n\nconversation = [\n    'Hello',\n    'Hi there!',\n    'What is your name?',\n    'My name is Bot. Nice to meet you!'\n]\n\nbot.train(conversation)\n\nwhile True:\n    request = input('You: ')\n    response = bot.get_response(request)\n    print('Bot: ', response)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild an interactive chatbot in Python using the Chatterbot library.\n\n### Input:\nNot applicable\n\n### Output:\nfrom chatterbot import ChatBot\nfrom chatterbot.trainers import ListTrainer\n\nbot = ChatBot('Bot')\nbot.set_trainer(ListTrainer)\n\nconversation = [\n    'Hello',\n    'Hi there!',\n    'What is your name?',\n    'My name is Bot. Nice to meet you!'\n]\n\nbot.train(conversation)\n\nwhile True:\n    request = input('You: ')\n    response = bot.get_response(request)\n    print('Bot: ', response)"
    },
    {
        "instruction": "Write a Python program to complete a given list of operations on a given data set.",
        "input": "dataset: [[\u2018Car\u2019, \u2018Red\u2019], [\u2019Bike\u2019, \u2019Blue\u2019], [\u2018Van\u2019, \u2018Green]]\noperations: subtract 1 from each element and transform it to upper case",
        "output": "def apply_operations(dataset, operations):\n result = []\n for item in dataset:\n   item[0] = str(int(item[0]) - 1).upper()\n   item[1] = str(int(item[1]) - 1).upper()\n   result.append(item)\n return result\n\ndataset = [['Car', 'Red'], ['Bike', 'Blue'], ['Van', 'Green']]\noperations = [\"subtract 1 from each element and transform it to upper case\"]\n\nresult = apply_operations(dataset, operations)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to complete a given list of operations on a given data set.\n\n### Input:\ndataset: [[\u2018Car\u2019, \u2018Red\u2019], [\u2019Bike\u2019, \u2019Blue\u2019], [\u2018Van\u2019, \u2018Green]]\noperations: subtract 1 from each element and transform it to upper case\n\n### Output:\ndef apply_operations(dataset, operations):\n result = []\n for item in dataset:\n   item[0] = str(int(item[0]) - 1).upper()\n   item[1] = str(int(item[1]) - 1).upper()\n   result.append(item)\n return result\n\ndataset = [['Car', 'Red'], ['Bike', 'Blue'], ['Van', 'Green']]\noperations = [\"subtract 1 from each element and transform it to upper case\"]\n\nresult = apply_operations(dataset, operations)\nprint(result)"
    },
    {
        "instruction": "Write a Python program to print the number of prime numbers that exist within a given range.",
        "input": "",
        "output": "def primeCounet(start, end):\n    count = 0\n    for num in range(start, end + 1): \n        if num > 1: \n            for i in range(2, num): \n                if (num % i) == 0: \n                    break \n            else: \n                count = count + 1\n    return count\n\nif __name__ == \"__main__\":\n    start = 10\n    end = 30\n    print(primeCounet(start, end))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print the number of prime numbers that exist within a given range.\n\n### Input:\n\n\n### Output:\ndef primeCounet(start, end):\n    count = 0\n    for num in range(start, end + 1): \n        if num > 1: \n            for i in range(2, num): \n                if (num % i) == 0: \n                    break \n            else: \n                count = count + 1\n    return count\n\nif __name__ == \"__main__\":\n    start = 10\n    end = 30\n    print(primeCounet(start, end))"
    },
    {
        "instruction": "Implement an algorithm in Python that evaluates an expression with multiple parentheses.",
        "input": "3 + (2 \u00d7 (4-1))",
        "output": "def evaluateExpression(exp):\n  st = [] \n  exp = list(exp) \n\n  # Traverse the expression \n  for i in exp:\n    # If the current character in exp is a \n    # opening parenthesis, then push it  \n    # in stack \n    if i == \"(\": \n      st.append(i)\n\n    # If the current character in exp is a \n    # closing parenthesis, then pop from stack \n    elif i == \")\": \n      st.pop() \n      \n  # After complete traversal, if there \n  # is some starting parenthesis left in \n  # stack then \u201cnot balanced\u201d \n  if len(st) != 0:\n    return \"Not Balanced\"\n  else:\n    return \"Balanced\"",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm in Python that evaluates an expression with multiple parentheses.\n\n### Input:\n3 + (2 \u00d7 (4-1))\n\n### Output:\ndef evaluateExpression(exp):\n  st = [] \n  exp = list(exp) \n\n  # Traverse the expression \n  for i in exp:\n    # If the current character in exp is a \n    # opening parenthesis, then push it  \n    # in stack \n    if i == \"(\": \n      st.append(i)\n\n    # If the current character in exp is a \n    # closing parenthesis, then pop from stack \n    elif i == \")\": \n      st.pop() \n      \n  # After complete traversal, if there \n  # is some starting parenthesis left in \n  # stack then \u201cnot balanced\u201d \n  if len(st) != 0:\n    return \"Not Balanced\"\n  else:\n    return \"Balanced\""
    },
    {
        "instruction": "Design a function in Python that takes two dictionaries with string keys and integer values and returns a new dictionary that contains only the key-value pairs with matching keys.",
        "input": "dict_1 = {'a': 1, 'b': 2, 'c': 3}\ndict_2 = {'a': 4, 'd': 5, 'c': 6}",
        "output": "def match_dict_keys(dict_1, dict_2):\n  new_dict = {}\n\n  for key in dict_1.keys():\n    if key in dict_2.keys():\n      new_dict[key] = (dict_1[key], dict_2[key])\n\n  return new_dict\n\nresult = match_dict_keys(dict_1, dict_2)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python that takes two dictionaries with string keys and integer values and returns a new dictionary that contains only the key-value pairs with matching keys.\n\n### Input:\ndict_1 = {'a': 1, 'b': 2, 'c': 3}\ndict_2 = {'a': 4, 'd': 5, 'c': 6}\n\n### Output:\ndef match_dict_keys(dict_1, dict_2):\n  new_dict = {}\n\n  for key in dict_1.keys():\n    if key in dict_2.keys():\n      new_dict[key] = (dict_1[key], dict_2[key])\n\n  return new_dict\n\nresult = match_dict_keys(dict_1, dict_2)\nprint(result)"
    },
    {
        "instruction": "Design a Python program to detect if a given number is in the Fibonacci Sequence or not",
        "input": "",
        "output": "def is_fib(num):\n  if num == 0 or num == 1:\n    return True\n  first = 0\n  second = 1\n  while(num >= second):\n    if second == num:\n      return True\n    third = first + second\n    first = second\n    second = third\n  return False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to detect if a given number is in the Fibonacci Sequence or not\n\n### Input:\n\n\n### Output:\ndef is_fib(num):\n  if num == 0 or num == 1:\n    return True\n  first = 0\n  second = 1\n  while(num >= second):\n    if second == num:\n      return True\n    third = first + second\n    first = second\n    second = third\n  return False"
    },
    {
        "instruction": "Design 3 user-defined functions in Python which compute the smallest, largest, and average of a list of numbers?",
        "input": "[3, 5, 7, 9, 11]",
        "output": "def smallest_of_list(nums):\n    smallest = float(\"inf\")\n    for num in nums:\n        if num < smallest:\n            smallest = num\n    return smallest\n\ndef largest_of_list(nums):\n    largest = float(\"-inf\")\n    for num in nums:\n        if num > largest:\n            largest = num\n    return largest\n\ndef avg_of_list(nums):\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum/len(nums)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign 3 user-defined functions in Python which compute the smallest, largest, and average of a list of numbers?\n\n### Input:\n[3, 5, 7, 9, 11]\n\n### Output:\ndef smallest_of_list(nums):\n    smallest = float(\"inf\")\n    for num in nums:\n        if num < smallest:\n            smallest = num\n    return smallest\n\ndef largest_of_list(nums):\n    largest = float(\"-inf\")\n    for num in nums:\n        if num > largest:\n            largest = num\n    return largest\n\ndef avg_of_list(nums):\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum/len(nums)"
    },
    {
        "instruction": "Generate a cross-platform program in Python that takes in two sets of numbers and returns a list with the common elements found in both sets.",
        "input": "",
        "output": "def find_common_elements(set1, set2):\n    result = []\n    for element in set1:\n        if element in set2:\n            result.append(element)\n    \n    return result",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a cross-platform program in Python that takes in two sets of numbers and returns a list with the common elements found in both sets.\n\n### Input:\n\n\n### Output:\ndef find_common_elements(set1, set2):\n    result = []\n    for element in set1:\n        if element in set2:\n            result.append(element)\n    \n    return result"
    },
    {
        "instruction": "Using Python, write a program to calculate the sum (full addition) of two decimal numbers.",
        "input": "3.4, 2.6",
        "output": "def addDecimals(a, b):\n    return a + b\n\nx = 3.4\ny = 2.6\nprint (addDecimals(x, y)) # 6.0",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, write a program to calculate the sum (full addition) of two decimal numbers.\n\n### Input:\n3.4, 2.6\n\n### Output:\ndef addDecimals(a, b):\n    return a + b\n\nx = 3.4\ny = 2.6\nprint (addDecimals(x, y)) # 6.0"
    },
    {
        "instruction": "Design a feed-forward neural network class in Python.",
        "input": "",
        "output": "# Define a Feed-Forward Neural Network class in Python\nclass NeuralNetwork(object):\n\n    def __init__(self):\n        # Define the parameters of network\n        self.input_nodes = 0\n        self.hidden_nodes = 0\n        self.output_nodes = 0\n\n    def forward(self, inputs):\n        # Initialize the weights for the inputs and hidden layers\n        self.weights_input_to_hidden = np.random.normal(0.0, self.input_nodes**-0.5, \n                                       (self.input_nodes, self.hidden_nodes))\n\n        self.weights_hidden_to_output = np.random.normal(0.0, self.hidden_nodes**-0.5, \n                                       (self.hidden_nodes, self.output_nodes))\n\n        # Calculate signals going into hidden layer\n        hidden_inputs = np.dot(inputs, self.weights_input_to_hidden)\n        hidden_outputs = self.activation_function(hidden_inputs)\n        \n        # Calculate signals going into output layer\n        final_inputs = np.dot(hidden_outputs, self.weights_hidden_to_output)\n        final_outputs = final_inputs\n        \n        return final_outputs\n\n    def activation_function(self, x):\n        # Define a sigmoid activation function\n        return 1 / (1 + (np.exp(-x)))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a feed-forward neural network class in Python.\n\n### Input:\n\n\n### Output:\n# Define a Feed-Forward Neural Network class in Python\nclass NeuralNetwork(object):\n\n    def __init__(self):\n        # Define the parameters of network\n        self.input_nodes = 0\n        self.hidden_nodes = 0\n        self.output_nodes = 0\n\n    def forward(self, inputs):\n        # Initialize the weights for the inputs and hidden layers\n        self.weights_input_to_hidden = np.random.normal(0.0, self.input_nodes**-0.5, \n                                       (self.input_nodes, self.hidden_nodes))\n\n        self.weights_hidden_to_output = np.random.normal(0.0, self.hidden_nodes**-0.5, \n                                       (self.hidden_nodes, self.output_nodes))\n\n        # Calculate signals going into hidden layer\n        hidden_inputs = np.dot(inputs, self.weights_input_to_hidden)\n        hidden_outputs = self.activation_function(hidden_inputs)\n        \n        # Calculate signals going into output layer\n        final_inputs = np.dot(hidden_outputs, self.weights_hidden_to_output)\n        final_outputs = final_inputs\n        \n        return final_outputs\n\n    def activation_function(self, x):\n        # Define a sigmoid activation function\n        return 1 / (1 + (np.exp(-x)))"
    },
    {
        "instruction": "Design a Python class to define a person.",
        "input": "",
        "output": "class Person:\n\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n\n    def get_name(self):\n        return self.name\n\n    def get_age(self):\n        return self.age\n\n    def get_gender(self):\n        return self.gender",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class to define a person.\n\n### Input:\n\n\n### Output:\nclass Person:\n\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n\n    def get_name(self):\n        return self.name\n\n    def get_age(self):\n        return self.age\n\n    def get_gender(self):\n        return self.gender"
    },
    {
        "instruction": "Write a Python program that takes a sequence of strings, sorts them alphabetically, and prints them to the console.",
        "input": "sequence = [\"Hello\", \"world\", \"Welcome\", \"to\", \"the\", \"Coding\", \"Revolution\"]",
        "output": "sequence = [\"Hello\", \"world\", \"Welcome\", \"to\", \"the\", \"Coding\", \"Revolution\"]\n\nsorted_sequence = sorted(sequence)\n\nfor word in sorted_sequence:\n    print(word)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that takes a sequence of strings, sorts them alphabetically, and prints them to the console.\n\n### Input:\nsequence = [\"Hello\", \"world\", \"Welcome\", \"to\", \"the\", \"Coding\", \"Revolution\"]\n\n### Output:\nsequence = [\"Hello\", \"world\", \"Welcome\", \"to\", \"the\", \"Coding\", \"Revolution\"]\n\nsorted_sequence = sorted(sequence)\n\nfor word in sorted_sequence:\n    print(word)"
    },
    {
        "instruction": "Given a string \u201cPython Exercises\u201d, write a Python function to convert it into \u201cpython exercises\u201d.",
        "input": "",
        "output": "def convert_string(input_string): \n    return input_string.lower()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a string \u201cPython Exercises\u201d, write a Python function to convert it into \u201cpython exercises\u201d.\n\n### Input:\n\n\n### Output:\ndef convert_string(input_string): \n    return input_string.lower()"
    },
    {
        "instruction": "Build a Python program to take a given list and create a dictionary with the elements and their corresponding indices.",
        "input": "L=[\"a\",\"b\",\"c\"]",
        "output": "def create_dict(L):\n    dict = {}\n    for i in range(len(L)): \n        dict[L[i]] = i\n    return dict\n\ndict_list = dict(create_dict([\"a\",\"b\",\"c\"]))\nprint(dict_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python program to take a given list and create a dictionary with the elements and their corresponding indices.\n\n### Input:\nL=[\"a\",\"b\",\"c\"]\n\n### Output:\ndef create_dict(L):\n    dict = {}\n    for i in range(len(L)): \n        dict[L[i]] = i\n    return dict\n\ndict_list = dict(create_dict([\"a\",\"b\",\"c\"]))\nprint(dict_list)"
    },
    {
        "instruction": "Develop a REST API endpoint in Python to return a user's profile information from a database.",
        "input": "",
        "output": "@app.route('/api/profile', methods=['GET'])\ndef get_user_profile():\n    user_id = request.args.get('user_id')\n    user = User.query.filter_by(id=user_id).first_or_404()\n    return jsonify({\n        'username': user.username,\n        'name': user.name,\n        'email': user.email\n    })",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a REST API endpoint in Python to return a user's profile information from a database.\n\n### Input:\n\n\n### Output:\n@app.route('/api/profile', methods=['GET'])\ndef get_user_profile():\n    user_id = request.args.get('user_id')\n    user = User.query.filter_by(id=user_id).first_or_404()\n    return jsonify({\n        'username': user.username,\n        'name': user.name,\n        'email': user.email\n    })"
    },
    {
        "instruction": "Create a Python program for predicting the stock market trend.",
        "input": "Historical Stock Prices:\n[50, 55, 53, 57, 52, 49, 54]",
        "output": "import numpy as np\nfrom sklearn.linear_model import LinearRegression\n\ndata = np.array([[50], [55], [53], [57], [52], [49], [54]]).reshape(-1, 1)\n\nmodel = LinearRegression()\nmodel.fit(data[:-1], data[1:])\n\npredicted_value = model.predict([[54]])\n\nprint(\"The trend of stock price next day:\", predicted_value[0][0])\n\n# Output: The trend of stock price next day: 53.428571429",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for predicting the stock market trend.\n\n### Input:\nHistorical Stock Prices:\n[50, 55, 53, 57, 52, 49, 54]\n\n### Output:\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\ndata = np.array([[50], [55], [53], [57], [52], [49], [54]]).reshape(-1, 1)\n\nmodel = LinearRegression()\nmodel.fit(data[:-1], data[1:])\n\npredicted_value = model.predict([[54]])\n\nprint(\"The trend of stock price next day:\", predicted_value[0][0])\n\n# Output: The trend of stock price next day: 53.428571429"
    },
    {
        "instruction": "Write a function in Python to find the longest palindrome within the given string.",
        "input": "text = \u201cbabad\u201d",
        "output": "def longest_palindrome(text):\n    longest_palindrome = \"\"\n    for index1, char1 in enumerate(text):\n        for index2 in range(len(text)-1, index1-1, -1):\n            if index2-index1+1 <= len(longest_palindrome):\n                break\n            if text[index1:index2+1] == text[index2:index1:-1]:\n                longest_palindrome = text[index1:index2+1]\n    return longest_palindrome",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to find the longest palindrome within the given string.\n\n### Input:\ntext = \u201cbabad\u201d\n\n### Output:\ndef longest_palindrome(text):\n    longest_palindrome = \"\"\n    for index1, char1 in enumerate(text):\n        for index2 in range(len(text)-1, index1-1, -1):\n            if index2-index1+1 <= len(longest_palindrome):\n                break\n            if text[index1:index2+1] == text[index2:index1:-1]:\n                longest_palindrome = text[index1:index2+1]\n    return longest_palindrome"
    },
    {
        "instruction": "Generate a Python program that given a list of numbers, finds the largest pair sum.",
        "input": "[7, 8, 12, 10]",
        "output": "def max_pair_sum(arr):\n    if len(arr) == 0:\n        return 0\n\n    max_sum = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_sum = max(max_sum, arr[i] + arr[j])\n    \n    return max_sum",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that given a list of numbers, finds the largest pair sum.\n\n### Input:\n[7, 8, 12, 10]\n\n### Output:\ndef max_pair_sum(arr):\n    if len(arr) == 0:\n        return 0\n\n    max_sum = 0\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            max_sum = max(max_sum, arr[i] + arr[j])\n    \n    return max_sum"
    },
    {
        "instruction": "Develop a program in Python to check the validity of a given password  and return true or false accordingly.",
        "input": "password = \"PASSWORD123\"\nmin_length = 8\nuppercase_required = True\nspecial_character_required = False",
        "output": "def validate_password(password, min_length, uppercase_required, special_character_required):\n  #check password length\n  if len(password) < min_length:\n    return False\n    \n  #check for uppercase\n  if uppercase_required and not any(char.isupper() for char in password):\n    return False\n    \n  #check for special characters\n  if special_character_required and not any(char.isalnum() for char in password):\n    return False\n  \n  #if all conditions are met, return True\n  return True\n  \nvalidate_password(password, min_length, uppercase_required, special_character_required)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program in Python to check the validity of a given password  and return true or false accordingly.\n\n### Input:\npassword = \"PASSWORD123\"\nmin_length = 8\nuppercase_required = True\nspecial_character_required = False\n\n### Output:\ndef validate_password(password, min_length, uppercase_required, special_character_required):\n  #check password length\n  if len(password) < min_length:\n    return False\n    \n  #check for uppercase\n  if uppercase_required and not any(char.isupper() for char in password):\n    return False\n    \n  #check for special characters\n  if special_character_required and not any(char.isalnum() for char in password):\n    return False\n  \n  #if all conditions are met, return True\n  return True\n  \nvalidate_password(password, min_length, uppercase_required, special_character_required)"
    },
    {
        "instruction": "Create a function to replace substring 'old' with 'new' in the given string.",
        "input": "Python is very old",
        "output": "def replace_substring(string, old, new):\n  new_string = \"\"\n  l = len(old)\n  for i in range(len(string)-l+1):\n    if string[i:i+l] == old:\n      new_string += new\n    else:\n      new_string += string[i]\n  return new_string\n\nprint(replace_substring('Python is very old', 'old', 'new'))\n\n# Output: Python is very new",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to replace substring 'old' with 'new' in the given string.\n\n### Input:\nPython is very old\n\n### Output:\ndef replace_substring(string, old, new):\n  new_string = \"\"\n  l = len(old)\n  for i in range(len(string)-l+1):\n    if string[i:i+l] == old:\n      new_string += new\n    else:\n      new_string += string[i]\n  return new_string\n\nprint(replace_substring('Python is very old', 'old', 'new'))\n\n# Output: Python is very new"
    },
    {
        "instruction": "Develop a function in Python to calculate the n factorial.",
        "input": "",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python to calculate the n factorial.\n\n### Input:\n\n\n### Output:\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n*factorial(n-1)"
    },
    {
        "instruction": "Transform the following code from JavaScript to Python.",
        "input": "if (cur_price > max_price) {\n  max_price = cur_price;\n}",
        "output": "if cur_price > max_price:\n  max_price = cur_price",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTransform the following code from JavaScript to Python.\n\n### Input:\nif (cur_price > max_price) {\n  max_price = cur_price;\n}\n\n### Output:\nif cur_price > max_price:\n  max_price = cur_price"
    },
    {
        "instruction": "Write a code in Python to generate a text classification model using an LSTM network.",
        "input": "The data consists of tweets from a variety of topics.",
        "output": "import numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Embedding, Dense, LSTM\n\n# For text data preprocessing\nfrom keras.preprocessing.text import Tokenizer\n\n# For splitting the data into train, test and validation sets\nfrom sklearn.model_selection import train_test_split\n\n# Initialize the tokenizer \ntokenizer = Tokenizer(num_words=None, lower=True)\n\n# Tokenize the text data\ntokenizer.fit_on_texts(tweets_data)\n\n# Generate sequence data\nsequences = tokenizer.texts_to_sequences(tweets_data)\n\n# Get the max_length of the sequences\nmax_length = max([len(seq) for seq in sequences])\n\n# Pad sequences\npadded_seq = pad_sequences(sequences, maxlen=max_length, padding='post')\n\n# Split data into train, test and validation sets\nX_train, X_test, y_train, y_test = train_test_split(padded_seq, \n                                                    target, \n                                                    test_size=0.2,\n                                                    random_state=42)\n\n# Define the model\nmodel = Sequential()\nmodel.add(Embedding(vocab_size, 64, input_length=max_length))\nmodel.add(LSTM(64))\nmodel.add(Dense(vocab_size, activation='softmax'))\n\n# Compile and fit the model\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(X_train, y_train, epochs=4, validation_data=(X_test,y_test))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python to generate a text classification model using an LSTM network.\n\n### Input:\nThe data consists of tweets from a variety of topics.\n\n### Output:\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Embedding, Dense, LSTM\n\n# For text data preprocessing\nfrom keras.preprocessing.text import Tokenizer\n\n# For splitting the data into train, test and validation sets\nfrom sklearn.model_selection import train_test_split\n\n# Initialize the tokenizer \ntokenizer = Tokenizer(num_words=None, lower=True)\n\n# Tokenize the text data\ntokenizer.fit_on_texts(tweets_data)\n\n# Generate sequence data\nsequences = tokenizer.texts_to_sequences(tweets_data)\n\n# Get the max_length of the sequences\nmax_length = max([len(seq) for seq in sequences])\n\n# Pad sequences\npadded_seq = pad_sequences(sequences, maxlen=max_length, padding='post')\n\n# Split data into train, test and validation sets\nX_train, X_test, y_train, y_test = train_test_split(padded_seq, \n                                                    target, \n                                                    test_size=0.2,\n                                                    random_state=42)\n\n# Define the model\nmodel = Sequential()\nmodel.add(Embedding(vocab_size, 64, input_length=max_length))\nmodel.add(LSTM(64))\nmodel.add(Dense(vocab_size, activation='softmax'))\n\n# Compile and fit the model\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(X_train, y_train, epochs=4, validation_data=(X_test,y_test))"
    },
    {
        "instruction": "Create an algorithm in Python that takes a number n as its input and returns the nth fibonacci number.",
        "input": "",
        "output": "def Fibonacci(n): \n\tif n<0: \n\t\tprint(\"Incorrect input\") \n\t# First Fibonacci number is 0 \n\telif n==1: \n\t\treturn 0\n\t# Second Fibonacci number is 1 \n\telif n==2: \n\t\treturn 1\n\telse: \n\t\treturn Fibonacci(n-1)+Fibonacci(n-2) \n\t\t\n# Driver Program \n \nprint(Fibonacci(9))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python that takes a number n as its input and returns the nth fibonacci number.\n\n### Input:\n\n\n### Output:\ndef Fibonacci(n): \n\tif n<0: \n\t\tprint(\"Incorrect input\") \n\t# First Fibonacci number is 0 \n\telif n==1: \n\t\treturn 0\n\t# Second Fibonacci number is 1 \n\telif n==2: \n\t\treturn 1\n\telse: \n\t\treturn Fibonacci(n-1)+Fibonacci(n-2) \n\t\t\n# Driver Program \n \nprint(Fibonacci(9))"
    },
    {
        "instruction": "Write a Python program to create a bar chart from a given dataset.",
        "input": "dataset = [5, 8, 10, 12, 3, 6]",
        "output": "import matplotlib.pyplot as plt \n\n# Data to plot \ndata = [5, 8, 10, 12, 3, 6] \n\n# Plot the data \nplt.bar(data, data) \n\n# Set labels \nplt.xlabel('Data') \nplt.ylabel('Values') \n\n# Title \nplt.title('Bar Chart of Data Set') \n\n# Show the plot \nplt.show()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a bar chart from a given dataset.\n\n### Input:\ndataset = [5, 8, 10, 12, 3, 6]\n\n### Output:\nimport matplotlib.pyplot as plt \n\n# Data to plot \ndata = [5, 8, 10, 12, 3, 6] \n\n# Plot the data \nplt.bar(data, data) \n\n# Set labels \nplt.xlabel('Data') \nplt.ylabel('Values') \n\n# Title \nplt.title('Bar Chart of Data Set') \n\n# Show the plot \nplt.show()"
    },
    {
        "instruction": "Write a Python program to solve the quicksort algorithm.",
        "input": "Array = [10, 7, 8, 9, 1, 5]",
        "output": "def quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to solve the quicksort algorithm.\n\n### Input:\nArray = [10, 7, 8, 9, 1, 5]\n\n### Output:\ndef quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)"
    },
    {
        "instruction": "Create a Naive Bayes classifier in Python to classify text.",
        "input": "Not applicable",
        "output": "from sklearn.naive_bayes import MultinomialNB\nimport pandas as pd\n\n# Data Preparation\n# Read the data\ndata = pd.read_csv('./data.csv')\n# Create train and test sets\nX_train, X_test, y_train, y_test = train_test_split(data['text'], data['label'], test_size=0.2, random_state=0)\n\n# Vectorization\n# Create a vectorizer object\nvectorizer = CountVectorizer()\n# Fit and transform the train and test sets\nX_train_vec = vectorizer.fit_transform(X_train)\nX_test_vec = vectorizer.transform(X_test)\n\n# Naive Bayes Classifier\n# Create a Naive Bayes Classifier\nclf = MultinomialNB()\n# Fit the model\nclf.fit(X_train_vec, y_train)\n# Print the accuracy\nprint(\"Accuracy:\", clf.score(X_test_vec, y_test))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Naive Bayes classifier in Python to classify text.\n\n### Input:\nNot applicable\n\n### Output:\nfrom sklearn.naive_bayes import MultinomialNB\nimport pandas as pd\n\n# Data Preparation\n# Read the data\ndata = pd.read_csv('./data.csv')\n# Create train and test sets\nX_train, X_test, y_train, y_test = train_test_split(data['text'], data['label'], test_size=0.2, random_state=0)\n\n# Vectorization\n# Create a vectorizer object\nvectorizer = CountVectorizer()\n# Fit and transform the train and test sets\nX_train_vec = vectorizer.fit_transform(X_train)\nX_test_vec = vectorizer.transform(X_test)\n\n# Naive Bayes Classifier\n# Create a Naive Bayes Classifier\nclf = MultinomialNB()\n# Fit the model\nclf.fit(X_train_vec, y_train)\n# Print the accuracy\nprint(\"Accuracy:\", clf.score(X_test_vec, y_test))"
    },
    {
        "instruction": "Create a Python module for a spiral matrix with the following functions: createSpiralMatrix, printSpiralMatrix, and transposeSpiralMatrix.",
        "input": "Not applicable",
        "output": "def createSpiralMatrix(n):\n matrix = [[0] * n for i in range(n)]\n row = 0\n col = -1\n total = n * n\n spiral = 1\n\n while total > 0:\n # move left -> right\n while col + 1 < n and matrix[row][col + 1] == 0:\n col += 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n # move up -> down\n while row + 1 < n and matrix[row + 1][col] == 0:\n row += 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n # move right -> left\n while col - 1 >= 0 and matrix[row][col - 1] == 0:\n col -= 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n # move down -> up\n while row - 1 >= 0 and matrix[row - 1][col] == 0:\n row -= 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n # move left -> right\n while col + 1 < n and matrix[row][col + 1] == 0:\n col += 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n return matrix\n\ndef printSpiralMatrix(matrix):\n for row in matrix:\n print(*row)\n\ndef transposeSpiralMatrix(matrix):\n return [list(x) for x in zip(*matrix)]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module for a spiral matrix with the following functions: createSpiralMatrix, printSpiralMatrix, and transposeSpiralMatrix.\n\n### Input:\nNot applicable\n\n### Output:\ndef createSpiralMatrix(n):\n matrix = [[0] * n for i in range(n)]\n row = 0\n col = -1\n total = n * n\n spiral = 1\n\n while total > 0:\n # move left -> right\n while col + 1 < n and matrix[row][col + 1] == 0:\n col += 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n # move up -> down\n while row + 1 < n and matrix[row + 1][col] == 0:\n row += 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n # move right -> left\n while col - 1 >= 0 and matrix[row][col - 1] == 0:\n col -= 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n # move down -> up\n while row - 1 >= 0 and matrix[row - 1][col] == 0:\n row -= 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n # move left -> right\n while col + 1 < n and matrix[row][col + 1] == 0:\n col += 1\n matrix[row][col] = spiral\n total -= 1\n spiral += 1\n\n return matrix\n\ndef printSpiralMatrix(matrix):\n for row in matrix:\n print(*row)\n\ndef transposeSpiralMatrix(matrix):\n return [list(x) for x in zip(*matrix)]"
    },
    {
        "instruction": "Optimize a Python program to sort numeric data in ascending order.",
        "input": "[3, 5, 2, 1, 4]",
        "output": "def sort_list(nums):\n  for i in range(len(nums)):\n    min_value = min(nums[i:])\n    min_index = nums[i:].index(min_value)\n    nums[i], nums[i + min_index] = min_value, nums[i] \n  return nums\n\nunsorted_list = [3, 5, 2, 1, 4]\nsorted_list = sort_list(unsorted_list)\nprint(sorted_list) # [1, 2, 3, 4, 5]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Python program to sort numeric data in ascending order.\n\n### Input:\n[3, 5, 2, 1, 4]\n\n### Output:\ndef sort_list(nums):\n  for i in range(len(nums)):\n    min_value = min(nums[i:])\n    min_index = nums[i:].index(min_value)\n    nums[i], nums[i + min_index] = min_value, nums[i] \n  return nums\n\nunsorted_list = [3, 5, 2, 1, 4]\nsorted_list = sort_list(unsorted_list)\nprint(sorted_list) # [1, 2, 3, 4, 5]"
    },
    {
        "instruction": "Implement a Python function to check if all n numbers in an array are equal.",
        "input": "[1,1,1]",
        "output": "def checkEqual(arr):\n    if len(arr) == 0:\n        return False\n    return all(arr[0] == x for x in arr)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python function to check if all n numbers in an array are equal.\n\n### Input:\n[1,1,1]\n\n### Output:\ndef checkEqual(arr):\n    if len(arr) == 0:\n        return False\n    return all(arr[0] == x for x in arr)"
    },
    {
        "instruction": "Write a Python program to convert miles to kilometers",
        "input": "miles=10",
        "output": "miles = 10\nkilometers = miles * 1.60934\nprint(f\"{miles} miles is equal to {kilometers} kilometers\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert miles to kilometers\n\n### Input:\nmiles=10\n\n### Output:\nmiles = 10\nkilometers = miles * 1.60934\nprint(f\"{miles} miles is equal to {kilometers} kilometers\")"
    },
    {
        "instruction": "Generate a Python regular expression that can identify valid email addresses.",
        "input": "Not applicable",
        "output": "^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python regular expression that can identify valid email addresses.\n\n### Input:\nNot applicable\n\n### Output:\n^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$"
    },
    {
        "instruction": "Write a Python program to convert a string containing a number in base 8 to base 10.",
        "input": "input_num='45'",
        "output": "def conv(input_num):\n    decimal_num = int(input_Num, 8)\n    return decimal_num",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a string containing a number in base 8 to base 10.\n\n### Input:\ninput_num='45'\n\n### Output:\ndef conv(input_num):\n    decimal_num = int(input_Num, 8)\n    return decimal_num"
    },
    {
        "instruction": "Create a WebSocket server in Python.",
        "input": "Not applicable",
        "output": "import asyncio\nimport websockets\n\nasync def hello(websocket, path):\n greeting = await websocket.recv()\n print(f\"< {greeting}\")\n\nasync def hello_server():\n server = await websockets.serve(hello, '127.0.0.1', 8765)\n await server.wait_closed()\n\nasyncio.get_event_loop().run_until_complete(hello_server())\nasyncio.get_event_loop().run_forever()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a WebSocket server in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport asyncio\nimport websockets\n\nasync def hello(websocket, path):\n greeting = await websocket.recv()\n print(f\"< {greeting}\")\n\nasync def hello_server():\n server = await websockets.serve(hello, '127.0.0.1', 8765)\n await server.wait_closed()\n\nasyncio.get_event_loop().run_until_complete(hello_server())\nasyncio.get_event_loop().run_forever()"
    },
    {
        "instruction": "Create a basic Python game that allows a user to guess a number from 1 to 10. The game should display appropriate messages based on the player's input.",
        "input": "Not applicable",
        "output": "# Game script\nimport random\n\n# Welcome message\nprint(\"Welcome to the guessing game!\")\n\n# Generate a random number\ntarget_number = random.randint(1, 10)\n\n# Initialise variables and flags\nguessed = False\nattempts = 0\n\nwhile not guessed:\n attempts += 1\n guess = int(input(\"Guess a number (1-10): \"))\n\n if guess < target_number:\n  print(\"That's too low. Try again!\")\n elif guess > target_number:\n  print(\"That's too high. Try again!\")\n else:\n  guessed = True\n\n# Congratulations message\nif guessed:\n print(\"Congratulations! You guessed the number in {} attempts\".format(attempts))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic Python game that allows a user to guess a number from 1 to 10. The game should display appropriate messages based on the player's input.\n\n### Input:\nNot applicable\n\n### Output:\n# Game script\nimport random\n\n# Welcome message\nprint(\"Welcome to the guessing game!\")\n\n# Generate a random number\ntarget_number = random.randint(1, 10)\n\n# Initialise variables and flags\nguessed = False\nattempts = 0\n\nwhile not guessed:\n attempts += 1\n guess = int(input(\"Guess a number (1-10): \"))\n\n if guess < target_number:\n  print(\"That's too low. Try again!\")\n elif guess > target_number:\n  print(\"That's too high. Try again!\")\n else:\n  guessed = True\n\n# Congratulations message\nif guessed:\n print(\"Congratulations! You guessed the number in {} attempts\".format(attempts))"
    },
    {
        "instruction": "Create a program in Python that performs text classification. The program should take a text as input and classify it according to a pre-trained model.",
        "input": "Text: \"This is a test of a text classification program.\"",
        "output": "import pandas as pd\n\n# text to be classified\ntext = \"This is a test of a text classification program.\"\n\n# load pre-trained model\nmodel = pickle.load(open(\"pre_trained_model.pkl\", 'rb'))\n\n# predict the class based on text input\nprediction = model.predict([text])\n\nprint(prediction)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that performs text classification. The program should take a text as input and classify it according to a pre-trained model.\n\n### Input:\nText: \"This is a test of a text classification program.\"\n\n### Output:\nimport pandas as pd\n\n# text to be classified\ntext = \"This is a test of a text classification program.\"\n\n# load pre-trained model\nmodel = pickle.load(open(\"pre_trained_model.pkl\", 'rb'))\n\n# predict the class based on text input\nprediction = model.predict([text])\n\nprint(prediction)"
    },
    {
        "instruction": "You are given a list of integers and a number n. Write a python program that checks if any two numbers in the list sum up to n.",
        "input": "numbers = [1, 5, 6, 10, 8, 20]\nn = 11",
        "output": "def sum_check(numbers, n):\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == n:\n                return True\n    return False\n\nnumbers = [1, 5, 6, 10, 8, 20]\nn = 11\n\nprint(sum_check(numbers, n))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are given a list of integers and a number n. Write a python program that checks if any two numbers in the list sum up to n.\n\n### Input:\nnumbers = [1, 5, 6, 10, 8, 20]\nn = 11\n\n### Output:\ndef sum_check(numbers, n):\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == n:\n                return True\n    return False\n\nnumbers = [1, 5, 6, 10, 8, 20]\nn = 11\n\nprint(sum_check(numbers, n))"
    },
    {
        "instruction": "Provide a Python program to find the average number of elements in the nested list.",
        "input": "[[1, 2, 3], [4, 5], [6, 7, 8, 9]]",
        "output": "def avg_elements(list_of_lists):\n    total_elements = 0\n    for sublist in list_of_lists:\n        total_elements += len(sublist)\n    return total_elements / len(list_of_lists)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProvide a Python program to find the average number of elements in the nested list.\n\n### Input:\n[[1, 2, 3], [4, 5], [6, 7, 8, 9]]\n\n### Output:\ndef avg_elements(list_of_lists):\n    total_elements = 0\n    for sublist in list_of_lists:\n        total_elements += len(sublist)\n    return total_elements / len(list_of_lists)"
    },
    {
        "instruction": "Write a Python program to find the longest common sub-string within two given strings.",
        "input": "str1 = \"geeksforbridforg\"\nstr2 = \"bridgelabz\"",
        "output": "def longest_common_substring(str1, str2):\n # initialise a 2D list with all 0s\n matrix = [[0] * ( len(str2) + 1 )] * (len(str1) + 1)\n\n longest = 0\n x_longest = 0\n y_longest = 0\n\n # fill the 2D matrix\n for x in range(1, len(str1) + 1):\n    for y in range(1, len(str2) + 1):\n        if str1[x - 1] == str2[y - 1]:\n            matrix[x][y] = matrix[x - 1][y - 1] + 1\n            if matrix[x][y] > longest:\n                longest = matrix[x][y]\n                x_longest = x\n                y_longest = y\n        else:\n            matrix[x][y] = 0\n\n # extract the longest common substring\n return str1[ x_longest - longest : x_longest ]\n\nstr1 = \"geeksforbridge\"\nstr2 = \"bridgelabz\"\n\nprint(longest_common_substring(str1, str2))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the longest common sub-string within two given strings.\n\n### Input:\nstr1 = \"geeksforbridforg\"\nstr2 = \"bridgelabz\"\n\n### Output:\ndef longest_common_substring(str1, str2):\n # initialise a 2D list with all 0s\n matrix = [[0] * ( len(str2) + 1 )] * (len(str1) + 1)\n\n longest = 0\n x_longest = 0\n y_longest = 0\n\n # fill the 2D matrix\n for x in range(1, len(str1) + 1):\n    for y in range(1, len(str2) + 1):\n        if str1[x - 1] == str2[y - 1]:\n            matrix[x][y] = matrix[x - 1][y - 1] + 1\n            if matrix[x][y] > longest:\n                longest = matrix[x][y]\n                x_longest = x\n                y_longest = y\n        else:\n            matrix[x][y] = 0\n\n # extract the longest common substring\n return str1[ x_longest - longest : x_longest ]\n\nstr1 = \"geeksforbridge\"\nstr2 = \"bridgelabz\"\n\nprint(longest_common_substring(str1, str2))"
    },
    {
        "instruction": "Create a machine learning model in Python to predict the number of people attending an event given the date of the event, the type of the event, and the location of the event.",
        "input": "The date: 28/02/2021\nThe type: Party\nThe location: San Francisco, CA",
        "output": "import pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Load the dataset\ndata = pd.read_csv('data.csv')\n\n# Create features\ndata['date'] = pd.to_datetime(data['date'])\ndata['month'] = data['date'].dt.month\ndata['day'] = data['date'].dt.day\ndata['day_of_week'] = data['date'].dt.dayofweek\ndata['year'] = data['date'].dt.year\n\n# Define input and output features\nX = data[['month', 'day', 'day_of_week', 'year', 'type', 'location']]\ny = data['attendees']\n\n# Encode categorical features\ncat_features = ['type', 'location']\nX = pd.get_dummies(X, columns=cat_features)\n\n# Build and evaluate the model\nmodel = RandomForestRegressor(n_estimators=100)\nmodel.fit(X, y)\n\n# Test our input\ntest_input = [[2, 28, 0, 2021, 'Party', 'San Francisco, CA']]\nencoded_test_input = pd.get_dummies(pd.DataFrame(test_input, columns=X.columns))\nprediction = model.predict(encoded_test_input)[0]\nprint(f'We predict a total of {prediction:.2f} people will attend the event.')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python to predict the number of people attending an event given the date of the event, the type of the event, and the location of the event.\n\n### Input:\nThe date: 28/02/2021\nThe type: Party\nThe location: San Francisco, CA\n\n### Output:\nimport pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import RandomForestRegressor\n\n# Load the dataset\ndata = pd.read_csv('data.csv')\n\n# Create features\ndata['date'] = pd.to_datetime(data['date'])\ndata['month'] = data['date'].dt.month\ndata['day'] = data['date'].dt.day\ndata['day_of_week'] = data['date'].dt.dayofweek\ndata['year'] = data['date'].dt.year\n\n# Define input and output features\nX = data[['month', 'day', 'day_of_week', 'year', 'type', 'location']]\ny = data['attendees']\n\n# Encode categorical features\ncat_features = ['type', 'location']\nX = pd.get_dummies(X, columns=cat_features)\n\n# Build and evaluate the model\nmodel = RandomForestRegressor(n_estimators=100)\nmodel.fit(X, y)\n\n# Test our input\ntest_input = [[2, 28, 0, 2021, 'Party', 'San Francisco, CA']]\nencoded_test_input = pd.get_dummies(pd.DataFrame(test_input, columns=X.columns))\nprediction = model.predict(encoded_test_input)[0]\nprint(f'We predict a total of {prediction:.2f} people will attend the event.')"
    },
    {
        "instruction": "Create a program in Python that will calculate the mean of a given set of numbers.",
        "input": "[1, 2, 3, 4, 5]",
        "output": "nums = [1, 2, 3, 4, 5]\n\ndef mean(nums):\n total = 0\n for i in nums:\n  total += i\n mean = total/len(nums)\n return mean\n\nprint(mean(nums)) # 3.0",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that will calculate the mean of a given set of numbers.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\nnums = [1, 2, 3, 4, 5]\n\ndef mean(nums):\n total = 0\n for i in nums:\n  total += i\n mean = total/len(nums)\n return mean\n\nprint(mean(nums)) # 3.0"
    },
    {
        "instruction": "Write a Python program that can detect emails within a given text.",
        "input": "Hello! My name is John and my email is john@example.com.",
        "output": "import re\n\ntext = 'Hello! My name is John and my email is john@example.com.'\n\n# Find all occurrences of an email using regex\nemail_regex = r\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}\"\nresult = re.findall(email_regex, text)\n\n# Print emails found\nprint(\"Emails found: \\n\")\nfor email in result:\n print(email)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that can detect emails within a given text.\n\n### Input:\nHello! My name is John and my email is john@example.com.\n\n### Output:\nimport re\n\ntext = 'Hello! My name is John and my email is john@example.com.'\n\n# Find all occurrences of an email using regex\nemail_regex = r\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}\"\nresult = re.findall(email_regex, text)\n\n# Print emails found\nprint(\"Emails found: \\n\")\nfor email in result:\n print(email)"
    },
    {
        "instruction": "Write a python program that adds two numbers together.",
        "input": "8, 10",
        "output": "def add_numbers(num1, num2):\n  return num1 + num2\n  \nresult = add_numbers(8, 10)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that adds two numbers together.\n\n### Input:\n8, 10\n\n### Output:\ndef add_numbers(num1, num2):\n  return num1 + num2\n  \nresult = add_numbers(8, 10)\nprint(result)"
    },
    {
        "instruction": "Create a Python web scraper for an online store that generate a list of products and their prices.",
        "input": "Not applicable",
        "output": "from bs4 import BeautifulSoup\nimport requests\n\n# Make an HTTP request to the website\nresponse = requests.get('http://example.com/store/')\n\n# Parse the response using BeautifulSoup\nsoup = BeautifulSoup(response.content, 'html.parser')\n\n# Extract all product names\nproducts = soup.find_all(class_='product')\n\n# Extract product names and prices from each product\nproducts_list = []\nfor product in products:\n name = product.find(class_='name').text\n price = product.find(class_='price').text\n products_list.append((name, price))\n\n# Print the product list\nprint(products_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python web scraper for an online store that generate a list of products and their prices.\n\n### Input:\nNot applicable\n\n### Output:\nfrom bs4 import BeautifulSoup\nimport requests\n\n# Make an HTTP request to the website\nresponse = requests.get('http://example.com/store/')\n\n# Parse the response using BeautifulSoup\nsoup = BeautifulSoup(response.content, 'html.parser')\n\n# Extract all product names\nproducts = soup.find_all(class_='product')\n\n# Extract product names and prices from each product\nproducts_list = []\nfor product in products:\n name = product.find(class_='name').text\n price = product.find(class_='price').text\n products_list.append((name, price))\n\n# Print the product list\nprint(products_list)"
    },
    {
        "instruction": "Optimize the Python code below to improve the performance of the search algorithm.",
        "input": "# Search for a value in a list\ndef search(lst, value):\n for item in lst:\n if item == value:\n return True\n return False",
        "output": "# Search for a value in a list using Binary Search\ndef search(lst, value):\n # Sort the list before performing the search\n lst.sort()\n\n # Initialize the lower and upper bounds\n lower_bound = 0\n upper_bound = len(lst) - 1\n\n # Perform the Binary Search\n while lower_bound <= upper_bound:\n mid = (lower_bound + upper_bound) // 2\n if lst[mid] == value:\n return True\n if lst[mid] < value:\n lower_bound = mid + 1\n else:\n upper_bound = mid - 1\n\n # If the value isn't found in the list\n return False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the Python code below to improve the performance of the search algorithm.\n\n### Input:\n# Search for a value in a list\ndef search(lst, value):\n for item in lst:\n if item == value:\n return True\n return False\n\n### Output:\n# Search for a value in a list using Binary Search\ndef search(lst, value):\n # Sort the list before performing the search\n lst.sort()\n\n # Initialize the lower and upper bounds\n lower_bound = 0\n upper_bound = len(lst) - 1\n\n # Perform the Binary Search\n while lower_bound <= upper_bound:\n mid = (lower_bound + upper_bound) // 2\n if lst[mid] == value:\n return True\n if lst[mid] < value:\n lower_bound = mid + 1\n else:\n upper_bound = mid - 1\n\n # If the value isn't found in the list\n return False"
    },
    {
        "instruction": "Make an API call using Python that fetches a list of people from a given API endpoint and create a function to find all people born after a given date.",
        "input": "",
        "output": "import requests\n\ndef get_people_born_after(date):\n    people = []\n    endpoint = \"https://example.com/people\"\n    r = requests.get(endpoint)\n     \n    if r.status_code == 200:\n        data = r.json()\n        for person in data:\n            birth_date = datetime.fromisoformat(person[\"birth_date\"])\n            if birth_date > date:\n                people.append(person)\n     return people",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake an API call using Python that fetches a list of people from a given API endpoint and create a function to find all people born after a given date.\n\n### Input:\n\n\n### Output:\nimport requests\n\ndef get_people_born_after(date):\n    people = []\n    endpoint = \"https://example.com/people\"\n    r = requests.get(endpoint)\n     \n    if r.status_code == 200:\n        data = r.json()\n        for person in data:\n            birth_date = datetime.fromisoformat(person[\"birth_date\"])\n            if birth_date > date:\n                people.append(person)\n     return people"
    },
    {
        "instruction": "Design a Python algorithm to identify the longest common subsequence from two strings.",
        "input": "",
        "output": "def lcs(a, b):\n    # Generate a 2D matrix from the two strings\n    arr = [[0 for x in range(len(b)+1)] for x in range(len(a)+1)]\n    # Initialize the matrix\n    for i in range(len(a) + 1): \n        for j in range(len(b) + 1): \n            if i == 0 or j == 0: \n                arr[i][j] = 0\n            # If the characters at i and j match \n            elif a[i-1] == b[j-1]: \n                arr[i][j] = arr[i-1][j-1] + 1\n            # If the characters dont match \n            else: \n                arr[i][j] = max(arr[i-1][j], arr[i][j-1])\n    # Traverse the 2D matrix and find the longest common subsequence\n    index = arr[len(a)][len(b)]\n    lcs = [\"\"] * (index+1) \n    lcs[index] = \"\" \n    i = len(a) \n    j = len(b)\n    while i > 0 and j > 0: \n        if a[i-1] == b[j-1]: \n            lcs[index-1] = a[i-1]\n            i-=1\n            j-=1\n            index-=1\n        elif arr[i-1][j] > arr[i][j-1]: \n            i-=1\n        else: \n            j-=1\n    return \"\".join(lcs)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python algorithm to identify the longest common subsequence from two strings.\n\n### Input:\n\n\n### Output:\ndef lcs(a, b):\n    # Generate a 2D matrix from the two strings\n    arr = [[0 for x in range(len(b)+1)] for x in range(len(a)+1)]\n    # Initialize the matrix\n    for i in range(len(a) + 1): \n        for j in range(len(b) + 1): \n            if i == 0 or j == 0: \n                arr[i][j] = 0\n            # If the characters at i and j match \n            elif a[i-1] == b[j-1]: \n                arr[i][j] = arr[i-1][j-1] + 1\n            # If the characters dont match \n            else: \n                arr[i][j] = max(arr[i-1][j], arr[i][j-1])\n    # Traverse the 2D matrix and find the longest common subsequence\n    index = arr[len(a)][len(b)]\n    lcs = [\"\"] * (index+1) \n    lcs[index] = \"\" \n    i = len(a) \n    j = len(b)\n    while i > 0 and j > 0: \n        if a[i-1] == b[j-1]: \n            lcs[index-1] = a[i-1]\n            i-=1\n            j-=1\n            index-=1\n        elif arr[i-1][j] > arr[i][j-1]: \n            i-=1\n        else: \n            j-=1\n    return \"\".join(lcs)"
    },
    {
        "instruction": "Write a Python script to remove all repeated characters from a string.",
        "input": "string = \"aaabbccddeeff\"",
        "output": "def removeRepeatedChars(str):\n    result = \"\"\n    for c in str:\n        if c not in result:\n            result += c\n    return result\n\nprint(removeRepeatedChars(\"aaabbccddeeff\"))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to remove all repeated characters from a string.\n\n### Input:\nstring = \"aaabbccddeeff\"\n\n### Output:\ndef removeRepeatedChars(str):\n    result = \"\"\n    for c in str:\n        if c not in result:\n            result += c\n    return result\n\nprint(removeRepeatedChars(\"aaabbccddeeff\"))"
    },
    {
        "instruction": "Write an algorithm in Python to calculate the determinant of a 3x3 matrix.",
        "input": "",
        "output": "def determinant(mat): \n \n    # Initialize result \n    result = 0\n  \n    # Iterate for each element of the matrix \n    for i in range(len(mat)): \n  \n        # Calculation for each element of the matrix \n        sub_mat = [row[:i] + row[i + 1:] for row in mat[1:]] \n        sign = (-1) ** (i % 2) \n        sub_det = determinant(sub_mat) \n  \n        result += sign * mat[0][i] * sub_det \n  \n    return result",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to calculate the determinant of a 3x3 matrix.\n\n### Input:\n\n\n### Output:\ndef determinant(mat): \n \n    # Initialize result \n    result = 0\n  \n    # Iterate for each element of the matrix \n    for i in range(len(mat)): \n  \n        # Calculation for each element of the matrix \n        sub_mat = [row[:i] + row[i + 1:] for row in mat[1:]] \n        sign = (-1) ** (i % 2) \n        sub_det = determinant(sub_mat) \n  \n        result += sign * mat[0][i] * sub_det \n  \n    return result"
    },
    {
        "instruction": "Create a Python program for predicting movie ratings from IMDB reviews. The program should clean the text, build a classifier, and make predictions.",
        "input": "import pandas as pd\n\nreviews = {\n 'movie_id': [123, 456, 789],\n 'review': ['This movie was great!',\n 'The plot was confusing.',\n 'The ending was predictable.']\n}\ndf = pd.DataFrame(reviews)",
        "output": "import pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Retrieve the review column from the dataframe\nreviews = df['review']\n\n# Clean the text\nreviews = reviews.apply(lambda row: row.lower())\nreviews = reviews.apply(lambda row: re.sub(r'\\W+', ' ', row))\n\n# Create the feature matrix\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(reviews)\n\n# Create the labels\nlabels = [1, 0, 0]\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.2, random_state=0)\n\n# Build and train the classifier\nclf = LogisticRegression()\nclf.fit(X_train, y_train)\n\n# Test the model\naccuracy = clf.score(X_test, y_test)\n\n# Make predictions\npredictions = clf.predict(X_test)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for predicting movie ratings from IMDB reviews. The program should clean the text, build a classifier, and make predictions.\n\n### Input:\nimport pandas as pd\n\nreviews = {\n 'movie_id': [123, 456, 789],\n 'review': ['This movie was great!',\n 'The plot was confusing.',\n 'The ending was predictable.']\n}\ndf = pd.DataFrame(reviews)\n\n### Output:\nimport pandas as pd\nimport re\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\n\n# Retrieve the review column from the dataframe\nreviews = df['review']\n\n# Clean the text\nreviews = reviews.apply(lambda row: row.lower())\nreviews = reviews.apply(lambda row: re.sub(r'\\W+', ' ', row))\n\n# Create the feature matrix\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(reviews)\n\n# Create the labels\nlabels = [1, 0, 0]\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, labels, test_size=0.2, random_state=0)\n\n# Build and train the classifier\nclf = LogisticRegression()\nclf.fit(X_train, y_train)\n\n# Test the model\naccuracy = clf.score(X_test, y_test)\n\n# Make predictions\npredictions = clf.predict(X_test)"
    },
    {
        "instruction": "Create a program in Python to simulate the queue data structure.",
        "input": "Not applicable",
        "output": "class Queue(object):\n    def __init__(self):\n        self.items = []\n\n    def isEmpty(self):\n        return self.items == []\n\n    def enqueue(self, item):\n        self.items.insert(0, item)\n\n    def dequeue(self):\n        return self.items.pop()\n\n    def size(self):\n        return len(self.items)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to simulate the queue data structure.\n\n### Input:\nNot applicable\n\n### Output:\nclass Queue(object):\n    def __init__(self):\n        self.items = []\n\n    def isEmpty(self):\n        return self.items == []\n\n    def enqueue(self, item):\n        self.items.insert(0, item)\n\n    def dequeue(self):\n        return self.items.pop()\n\n    def size(self):\n        return len(self.items)"
    },
    {
        "instruction": "Write a Python program to sort the input list according to its length.",
        "input": "list = [\"Hello\", \"World\", \"This is a test\"]",
        "output": "list = [\"Hello\", \"World\", \"This is a test\"]\n\ndef sort_list_length(list):\n    '''\n    Function to sort the list according to its length\n    '''\n    return sorted(list, key=len)\n\nif __name__ == \"__main__\":\n    list = [\"Hello\", \"World\", \"This is a test\"]\n    sorted_list = sort_list_length(list)\n    print(sorted_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort the input list according to its length.\n\n### Input:\nlist = [\"Hello\", \"World\", \"This is a test\"]\n\n### Output:\nlist = [\"Hello\", \"World\", \"This is a test\"]\n\ndef sort_list_length(list):\n    '''\n    Function to sort the list according to its length\n    '''\n    return sorted(list, key=len)\n\nif __name__ == \"__main__\":\n    list = [\"Hello\", \"World\", \"This is a test\"]\n    sorted_list = sort_list_length(list)\n    print(sorted_list)"
    },
    {
        "instruction": "Create an algorithm in Python that can compress a string of text and convert it to a URL-friendly format.",
        "input": "Input string: This is a sample string",
        "output": "def compress_string(s): \n    # Count occurences of each character \n    dict = {} \n    for c in s: \n        if c in dict: \n            dict[c] += 1\n        else: \n            dict[c] = 1\n    \n    # Create a new string with the format \n    # <character><number_of_occurences>\n    compressed = [] \n    for c in dict.keys(): \n        compressed.append(c + str(dict[c])) \n    \n    # Join all the characters inside the list \n    return ''.join(compressed)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python that can compress a string of text and convert it to a URL-friendly format.\n\n### Input:\nInput string: This is a sample string\n\n### Output:\ndef compress_string(s): \n    # Count occurences of each character \n    dict = {} \n    for c in s: \n        if c in dict: \n            dict[c] += 1\n        else: \n            dict[c] = 1\n    \n    # Create a new string with the format \n    # <character><number_of_occurences>\n    compressed = [] \n    for c in dict.keys(): \n        compressed.append(c + str(dict[c])) \n    \n    # Join all the characters inside the list \n    return ''.join(compressed)"
    },
    {
        "instruction": "Generate a valid python code to find the length of string without using built-in functions",
        "input": "",
        "output": "def length_of_string(string): \n    count = 0\n    for char in string: \n        count += 1\n    return count",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a valid python code to find the length of string without using built-in functions\n\n### Input:\n\n\n### Output:\ndef length_of_string(string): \n    count = 0\n    for char in string: \n        count += 1\n    return count"
    },
    {
        "instruction": "Edit the following Python function to raise an exception if the given number is lower than 0.",
        "input": "def square(num):\n    return num**2",
        "output": "def square(num):\n    if num < 0:\n        raise ValueError('Cannot square negative numbers.')\n    return num**2",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python function to raise an exception if the given number is lower than 0.\n\n### Input:\ndef square(num):\n    return num**2\n\n### Output:\ndef square(num):\n    if num < 0:\n        raise ValueError('Cannot square negative numbers.')\n    return num**2"
    },
    {
        "instruction": "Write a function to calculate the average of a Python list of integers.",
        "input": "numbers = [2, 4, 5, 7, 8]",
        "output": "def calculate_average(numbers):\n  return sum(numbers)/len(numbers)\n\nnumbers = [2, 4, 5, 7, 8]\nprint(calculate_average(numbers)) # Output: 5.6",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to calculate the average of a Python list of integers.\n\n### Input:\nnumbers = [2, 4, 5, 7, 8]\n\n### Output:\ndef calculate_average(numbers):\n  return sum(numbers)/len(numbers)\n\nnumbers = [2, 4, 5, 7, 8]\nprint(calculate_average(numbers)) # Output: 5.6"
    },
    {
        "instruction": "Write a function in Python that takes in a string and then reverses each word in the string.",
        "input": "string = \"This is a string\"",
        "output": "def reverse_words(s):\n  words = s.split()\n  reversed_words = [word[::-1] for word in words]\n  return ' '.join(reversed_words)\n\nstring = \"This is a string\"\nprint(reverse_words(string))\n// Output: sihT si a gnirts",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes in a string and then reverses each word in the string.\n\n### Input:\nstring = \"This is a string\"\n\n### Output:\ndef reverse_words(s):\n  words = s.split()\n  reversed_words = [word[::-1] for word in words]\n  return ' '.join(reversed_words)\n\nstring = \"This is a string\"\nprint(reverse_words(string))\n// Output: sihT si a gnirts"
    },
    {
        "instruction": "Convert a given text into speech using Python",
        "input": "Text: Hello world!",
        "output": "import pyttsx3\n\nengine = pyttsx3.init()\nengine.say(\"Hello world!\")\nengine.runAndWait()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a given text into speech using Python\n\n### Input:\nText: Hello world!\n\n### Output:\nimport pyttsx3\n\nengine = pyttsx3.init()\nengine.say(\"Hello world!\")\nengine.runAndWait()"
    },
    {
        "instruction": "Create a Python program to make a copy of an array.",
        "input": "",
        "output": "\"\"\"\nCreate a Python program to make a copy of an array. \n\"\"\"\n\ndef copy_array(arr):\n    return arr[:]\n\nif __name__ == '__main__':\n    arr = [1,2,3,4,5]\n    print(copy_array(arr))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to make a copy of an array.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a Python program to make a copy of an array. \n\"\"\"\n\ndef copy_array(arr):\n    return arr[:]\n\nif __name__ == '__main__':\n    arr = [1,2,3,4,5]\n    print(copy_array(arr))"
    },
    {
        "instruction": "Create a Python module to parse and analyze the following XML document:",
        "input": "Document:\n\n<?xml version=\"1.0\"?>\n<root>\n  <items>\n    <item><name>Pencil</name><price>1.00</price></item>\n    <item><name>Pen</name><price>2.50</price></item>\n    <item><name>Eraser</name><price>1.50</price></item>\n  </items>\n</root>",
        "output": "import xml.etree.ElementTree as ET\n\ndef parse_document(document):\n    root = ET.fromstring(document)\n    items = root.find('items')\n    data = []\n    for item in items:\n        name = item.find('name').text\n        price = item.find('price').text\n        data.append({'name': name, 'price': price})\n    return data",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module to parse and analyze the following XML document:\n\n### Input:\nDocument:\n\n<?xml version=\"1.0\"?>\n<root>\n  <items>\n    <item><name>Pencil</name><price>1.00</price></item>\n    <item><name>Pen</name><price>2.50</price></item>\n    <item><name>Eraser</name><price>1.50</price></item>\n  </items>\n</root>\n\n### Output:\nimport xml.etree.ElementTree as ET\n\ndef parse_document(document):\n    root = ET.fromstring(document)\n    items = root.find('items')\n    data = []\n    for item in items:\n        name = item.find('name').text\n        price = item.find('price').text\n        data.append({'name': name, 'price': price})\n    return data"
    },
    {
        "instruction": "Create an algorithm in Python that takes a string and returns a new string with all the consonants replaced with underscores.",
        "input": "\"Hello World\"",
        "output": "def replace_consonants(string): \n    new_str = \"\" \n  \n    VOWELS = (\"a\", \"e\", \"i\", \"o\", \"u\") \n  \n    for letter in string: \n        if letter.lower() in VOWELS: \n            new_str += letter \n        else: \n            new_str += \"_\"\n  \n    return new_str\n  \nprint(replace_consonants(\"Hello World\"))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python that takes a string and returns a new string with all the consonants replaced with underscores.\n\n### Input:\n\"Hello World\"\n\n### Output:\ndef replace_consonants(string): \n    new_str = \"\" \n  \n    VOWELS = (\"a\", \"e\", \"i\", \"o\", \"u\") \n  \n    for letter in string: \n        if letter.lower() in VOWELS: \n            new_str += letter \n        else: \n            new_str += \"_\"\n  \n    return new_str\n  \nprint(replace_consonants(\"Hello World\"))"
    },
    {
        "instruction": "Enhance a given program in python so that it prints all divisors of a given number.",
        "input": "def printDivisorsOfNumber(n): \n    print(\"The divisors of the number are: \")",
        "output": "def printDivisorsOfNumber(n): \n    print(\"The divisors of the number are: \")\n    for x in range(1, n+1):\n        if n%x == 0: \n            print(x)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEnhance a given program in python so that it prints all divisors of a given number.\n\n### Input:\ndef printDivisorsOfNumber(n): \n    print(\"The divisors of the number are: \")\n\n### Output:\ndef printDivisorsOfNumber(n): \n    print(\"The divisors of the number are: \")\n    for x in range(1, n+1):\n        if n%x == 0: \n            print(x)"
    },
    {
        "instruction": "Create a Python script for fetching Hacker News articles and printing the title of each article.",
        "input": "Not applicable",
        "output": "import requests\nimport json\n\nresponse = requests.get('https://hacker-news.firebaseio.com/v0/topstories.json')\ntop_stories = json.loads(response.content)\n\nfor story_id in top_stories:\n response = requests.get(f'https://hacker-news.firebaseio.com/v0/item/{story_id}.json')\n story_info = json.loads(response.content)\n print(story_info['title'])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script for fetching Hacker News articles and printing the title of each article.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nimport json\n\nresponse = requests.get('https://hacker-news.firebaseio.com/v0/topstories.json')\ntop_stories = json.loads(response.content)\n\nfor story_id in top_stories:\n response = requests.get(f'https://hacker-news.firebaseio.com/v0/item/{story_id}.json')\n story_info = json.loads(response.content)\n print(story_info['title'])"
    },
    {
        "instruction": "Create a basic AI chatbot with TensorFlow to answer questions about programming.",
        "input": "Not applicable",
        "output": "import tensorflow as tf\nimport numpy as np\nimport nltk\nnltk.download('punkt')\nfrom nltk.stem import WordNetLemmatizer\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Input(shape=(256, )),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(24, activation='softmax')\n])\n\n# Tokenize sentences\nlemmatizer = WordNetLemmatizer()\ndef tokenize(sentence):\n    words  = nltk.word_tokenize(sentence)\n    clean_words = [lemmatizer.lemmatize(w.lower()) for w in words]\n    return clean_words\n\n# Process data\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Make chatbot\ndef response(input_text):\n    clean_words = tokenize(input_text)\n    inputs = np.array(clean_words).reshape(1,256)\n    pred = model.predict(inputs)\n    pred = np.argmax(pred)\n    # Choose the response\n    if pred == 0:\n        return 'Python is a popular programming language.'\n    if pred == 1:\n        return 'C++ is a powerful programming language.'\n    if pred == 2:\n        return 'Java is an object-oriented programming language.'\n    if pred == 3:\n        return 'HTML is used to create webpages.'\n\nprint(response('what is java'))\n# Output: Java is an object-oriented programming language.",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic AI chatbot with TensorFlow to answer questions about programming.\n\n### Input:\nNot applicable\n\n### Output:\nimport tensorflow as tf\nimport numpy as np\nimport nltk\nnltk.download('punkt')\nfrom nltk.stem import WordNetLemmatizer\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Input(shape=(256, )),\n    tf.keras.layers.Dense(128, activation='relu'),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(24, activation='softmax')\n])\n\n# Tokenize sentences\nlemmatizer = WordNetLemmatizer()\ndef tokenize(sentence):\n    words  = nltk.word_tokenize(sentence)\n    clean_words = [lemmatizer.lemmatize(w.lower()) for w in words]\n    return clean_words\n\n# Process data\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\n# Make chatbot\ndef response(input_text):\n    clean_words = tokenize(input_text)\n    inputs = np.array(clean_words).reshape(1,256)\n    pred = model.predict(inputs)\n    pred = np.argmax(pred)\n    # Choose the response\n    if pred == 0:\n        return 'Python is a popular programming language.'\n    if pred == 1:\n        return 'C++ is a powerful programming language.'\n    if pred == 2:\n        return 'Java is an object-oriented programming language.'\n    if pred == 3:\n        return 'HTML is used to create webpages.'\n\nprint(response('what is java'))\n# Output: Java is an object-oriented programming language."
    },
    {
        "instruction": "Generate a machine learning model to predict the probability of a customer churning in Python.",
        "input": "Not applicable",
        "output": "# imports\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# load data\ndata = pd.read_csv('data.csv')\n\n# preprocessing\nX = data.iloc[:, :-1]\ny = data.iloc[:, -1]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# model\nmodel = RandomForestClassifier(n_estimators=200)\nmodel.fit(X_train, y_train)\n\n# predict\npredictions = model.predict_proba(X_test)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a machine learning model to predict the probability of a customer churning in Python.\n\n### Input:\nNot applicable\n\n### Output:\n# imports\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\n# load data\ndata = pd.read_csv('data.csv')\n\n# preprocessing\nX = data.iloc[:, :-1]\ny = data.iloc[:, -1]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n# model\nmodel = RandomForestClassifier(n_estimators=200)\nmodel.fit(X_train, y_train)\n\n# predict\npredictions = model.predict_proba(X_test)"
    },
    {
        "instruction": "Develop a Python Class that retrieves and displays web page content.",
        "input": "",
        "output": "import requests\n\nclass WebPageContent:\n    def __init__(self, url):\n        self.url = url\n\n    def get_content(self):\n        response = requests.get(self.url)\n        if response.status_code == 200:\n            return response.text\n    \n    def display_content(self):\n        content = self.get_content()\n        if content is not None:\n            print(content)\n\n# Usage\nurl = \"https://www.example.com\"\nweb_page = WebPageContent(url)\nweb_page.display_content()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python Class that retrieves and displays web page content.\n\n### Input:\n\n\n### Output:\nimport requests\n\nclass WebPageContent:\n    def __init__(self, url):\n        self.url = url\n\n    def get_content(self):\n        response = requests.get(self.url)\n        if response.status_code == 200:\n            return response.text\n    \n    def display_content(self):\n        content = self.get_content()\n        if content is not None:\n            print(content)\n\n# Usage\nurl = \"https://www.example.com\"\nweb_page = WebPageContent(url)\nweb_page.display_content()"
    },
    {
        "instruction": "Write a Python program to compare two lists of numbers and return any combination of numbers that occur in both lists.",
        "input": "list1=[1,2,3,4,5,6]\nlist2=[3,4,5,7,8,9]",
        "output": "combinedList = [] \n\nfor num1 in list1:\n for num2 in list2:\n if num1 == num2:\n combinedList.append(num1)\n\nprint(combinedList) # [3,4,5]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to compare two lists of numbers and return any combination of numbers that occur in both lists.\n\n### Input:\nlist1=[1,2,3,4,5,6]\nlist2=[3,4,5,7,8,9]\n\n### Output:\ncombinedList = [] \n\nfor num1 in list1:\n for num2 in list2:\n if num1 == num2:\n combinedList.append(num1)\n\nprint(combinedList) # [3,4,5]"
    },
    {
        "instruction": "Write a Python program to convert a list of numeric values into an array of even numbered values.",
        "input": "[2, 3, 4, 5, 6, 7]",
        "output": "even_arr = [x for x in arr if x % 2 == 0]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a list of numeric values into an array of even numbered values.\n\n### Input:\n[2, 3, 4, 5, 6, 7]\n\n### Output:\neven_arr = [x for x in arr if x % 2 == 0]"
    },
    {
        "instruction": "Write a Python script which can remove all the punctuation characters from a text.",
        "input": "",
        "output": "import string\n\ndef remove_punctuation(text):\n    #convert punctuation chars into a string\n    punctuation_chars = ''.join(string.punctuation)\n    \n    #iterate through input text and replace punctuation chars with an empty string\n    for char in punctuation_chars:\n        if char in text:\n            text = text.replace(char, '')\n    \n    return text",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script which can remove all the punctuation characters from a text.\n\n### Input:\n\n\n### Output:\nimport string\n\ndef remove_punctuation(text):\n    #convert punctuation chars into a string\n    punctuation_chars = ''.join(string.punctuation)\n    \n    #iterate through input text and replace punctuation chars with an empty string\n    for char in punctuation_chars:\n        if char in text:\n            text = text.replace(char, '')\n    \n    return text"
    },
    {
        "instruction": "Generate Python code to render a web page.",
        "input": "",
        "output": "import webbrowser \n\nurl = \"http://example.com/\" \n\n# open url in new window, with autoraise \n# possible options are: \n# 1. open a browser window \n# 2. open a new tab \n# 3. open a background tab \n\nwebbrowser.open_new_tab(url + 'page.html')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to render a web page.\n\n### Input:\n\n\n### Output:\nimport webbrowser \n\nurl = \"http://example.com/\" \n\n# open url in new window, with autoraise \n# possible options are: \n# 1. open a browser window \n# 2. open a new tab \n# 3. open a background tab \n\nwebbrowser.open_new_tab(url + 'page.html')"
    },
    {
        "instruction": "Develop a Python program to calculate the total area of a group of rectangles.",
        "input": "[[3, 4], [6, 6], [1, 8]]",
        "output": "rectangles = [[3, 4], [6, 6], [1, 8]]\n\n# calculate the total area\ndef calculateTotalArea(rectangles):\n total_area = 0\n for x, y in rectangles:\n total_area += x * y\n return total_area\n\ntotal_area = calculateTotalArea(rectangles)\nprint(total_area) # 81",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to calculate the total area of a group of rectangles.\n\n### Input:\n[[3, 4], [6, 6], [1, 8]]\n\n### Output:\nrectangles = [[3, 4], [6, 6], [1, 8]]\n\n# calculate the total area\ndef calculateTotalArea(rectangles):\n total_area = 0\n for x, y in rectangles:\n total_area += x * y\n return total_area\n\ntotal_area = calculateTotalArea(rectangles)\nprint(total_area) # 81"
    },
    {
        "instruction": "Given an array and a number, write a Python function that will determine if the number is present in the array.",
        "input": "arr=[1,2,3]\nnumber = 4",
        "output": "def is_present(arr, number):\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return True\n    return False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array and a number, write a Python function that will determine if the number is present in the array.\n\n### Input:\narr=[1,2,3]\nnumber = 4\n\n### Output:\ndef is_present(arr, number):\n    for i in range(len(arr)):\n        if arr[i] == number:\n            return True\n    return False"
    },
    {
        "instruction": "Generate a python program that takes input as a string and prints out each word in the string in reverse order.",
        "input": "This is an example.",
        "output": "# Take input\ntext = input('Enter a string: ')\n\n# Split string into words\nwords = text.split(' ') \n\n# Reverse order\nwords.reverse() \n\n# Print\nfor word in words:\n print(word)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program that takes input as a string and prints out each word in the string in reverse order.\n\n### Input:\nThis is an example.\n\n### Output:\n# Take input\ntext = input('Enter a string: ')\n\n# Split string into words\nwords = text.split(' ') \n\n# Reverse order\nwords.reverse() \n\n# Print\nfor word in words:\n print(word)"
    },
    {
        "instruction": "Explore the performance of a Python code using profiling.",
        "input": "",
        "output": "import cProfile\n\ncProfile.run('target_function()')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplore the performance of a Python code using profiling.\n\n### Input:\n\n\n### Output:\nimport cProfile\n\ncProfile.run('target_function()')"
    },
    {
        "instruction": "Create a python function to extract the intersection of two lists.",
        "input": "listOne = [5,4,3]\nlistTwo = [3,2,1]",
        "output": "def intersection(listOne, listTwo):\n    return list(set(listOne).intersection(set(listTwo)))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function to extract the intersection of two lists.\n\n### Input:\nlistOne = [5,4,3]\nlistTwo = [3,2,1]\n\n### Output:\ndef intersection(listOne, listTwo):\n    return list(set(listOne).intersection(set(listTwo)))"
    },
    {
        "instruction": "Create a Python function that takes in an array of integers and returns the maximum value.",
        "input": "[2,3,5,1]",
        "output": "def max_value(int_arr):\n    max_val = int_arr[0]\n    for i in int_arr:\n        if i > max_val:\n            max_val = i\n    return max_val",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes in an array of integers and returns the maximum value.\n\n### Input:\n[2,3,5,1]\n\n### Output:\ndef max_value(int_arr):\n    max_val = int_arr[0]\n    for i in int_arr:\n        if i > max_val:\n            max_val = i\n    return max_val"
    },
    {
        "instruction": "Generate a program in Python to compute the maximum of two given numbers.",
        "input": "Number 1: 8\nNumber 2: 4",
        "output": "num1 = 8\nnum2 = 4\n \nif (num1 > num2):\n    print(\"The maximum of the given numbers is: \"+str(num1))\nelse:\n    print(\"The maximum of the given numbers is: \"+str(num2))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python to compute the maximum of two given numbers.\n\n### Input:\nNumber 1: 8\nNumber 2: 4\n\n### Output:\nnum1 = 8\nnum2 = 4\n \nif (num1 > num2):\n    print(\"The maximum of the given numbers is: \"+str(num1))\nelse:\n    print(\"The maximum of the given numbers is: \"+str(num2))"
    },
    {
        "instruction": "Utilizing the given data, write a Python program to identify the peak of maximum values in the data.",
        "input": "The given data is \"[9, 2, 10, 5, 4, 8, 3, 7]\"",
        "output": "def find_peaks(data):\n    max_val = None\n    max_idx = None\n    for i, val in enumerate(data):\n        if max_val is None or val > max_val:\n            max_val = val\n            max_idx = i\n    return max_idx\n\ndata = [9, 2, 10, 5, 4, 8, 3, 7]\npeak_index = find_peaks(data)\nprint('The peak of maximum values in the data is at index {} with value {}'.format(peak_index, data[peak_index]))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUtilizing the given data, write a Python program to identify the peak of maximum values in the data.\n\n### Input:\nThe given data is \"[9, 2, 10, 5, 4, 8, 3, 7]\"\n\n### Output:\ndef find_peaks(data):\n    max_val = None\n    max_idx = None\n    for i, val in enumerate(data):\n        if max_val is None or val > max_val:\n            max_val = val\n            max_idx = i\n    return max_idx\n\ndata = [9, 2, 10, 5, 4, 8, 3, 7]\npeak_index = find_peaks(data)\nprint('The peak of maximum values in the data is at index {} with value {}'.format(peak_index, data[peak_index]))"
    },
    {
        "instruction": "Write Python code to find the length of the smallest subarray whose sum is greater than or equal to a given number.",
        "input": "arr = [2, 3, 1, 2, 4, 3]\nsum = 7",
        "output": "def mini_subarray_sum(arr, sum): \n  \n    n = len(arr) \n    curr_sum = 0\n    min_len = n + 1\n    start = 0\n    end = 0\n    i = 0\n  \n    while i < n: \n        if curr_sum < sum:\n            curr_sum += arr[i]\n            end += 1\n        else:\n            min_len = min(min_len, end - start)\n            curr_sum -= arr[start]\n            start += 1\n        i += 1\n    return min_len",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to find the length of the smallest subarray whose sum is greater than or equal to a given number.\n\n### Input:\narr = [2, 3, 1, 2, 4, 3]\nsum = 7\n\n### Output:\ndef mini_subarray_sum(arr, sum): \n  \n    n = len(arr) \n    curr_sum = 0\n    min_len = n + 1\n    start = 0\n    end = 0\n    i = 0\n  \n    while i < n: \n        if curr_sum < sum:\n            curr_sum += arr[i]\n            end += 1\n        else:\n            min_len = min(min_len, end - start)\n            curr_sum -= arr[start]\n            start += 1\n        i += 1\n    return min_len"
    },
    {
        "instruction": "Write a Python function to generate a random list containing n numbers from 0 to n-1.",
        "input": "",
        "output": "import random\n\ndef generate_random_list(n):\n return random.sample(range(n), n)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to generate a random list containing n numbers from 0 to n-1.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_random_list(n):\n return random.sample(range(n), n)"
    },
    {
        "instruction": "Produce a Python program to take a list and return the elements containing the largest number of characters.",
        "input": "[\u201cHello\u201d, \u201cworld\u201d, \u201cthis\u201d, \u201cis\u201d, \u201ca\u201d, \u201ctest\u201d, \u201cstring\u201d]",
        "output": "def findLargestCount(list):\n    max_count = 0\n    result = []\n    \n    for item in list:\n        length_item = len(item)\n        if length_item > max_count:\n            max_count = length_item\n            result = [item]\n        elif length_item == max_count:\n            result.append(item)\n            \n    return result",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a Python program to take a list and return the elements containing the largest number of characters.\n\n### Input:\n[\u201cHello\u201d, \u201cworld\u201d, \u201cthis\u201d, \u201cis\u201d, \u201ca\u201d, \u201ctest\u201d, \u201cstring\u201d]\n\n### Output:\ndef findLargestCount(list):\n    max_count = 0\n    result = []\n    \n    for item in list:\n        length_item = len(item)\n        if length_item > max_count:\n            max_count = length_item\n            result = [item]\n        elif length_item == max_count:\n            result.append(item)\n            \n    return result"
    },
    {
        "instruction": "Create a class in Python to add two matrices.",
        "input": "",
        "output": "class MatrixAddition:\n \n    def addTwoMatrices(self, X, Y):\n        result = [[0, 0, 0],\n                  [0, 0, 0],\n                  [0, 0, 0]]\n \n        for i in range(len(X)):\n            for j in range(len(X[0])):\n                result[i][j] = X[i][j] + Y[i][j]\n        for r in result:\n            print(r)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to add two matrices.\n\n### Input:\n\n\n### Output:\nclass MatrixAddition:\n \n    def addTwoMatrices(self, X, Y):\n        result = [[0, 0, 0],\n                  [0, 0, 0],\n                  [0, 0, 0]]\n \n        for i in range(len(X)):\n            for j in range(len(X[0])):\n                result[i][j] = X[i][j] + Y[i][j]\n        for r in result:\n            print(r)"
    },
    {
        "instruction": "Design a Python program to calculate the GCD (Greatest Common Divisor) of two numbers.",
        "input": "",
        "output": "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\na = 15\nb = 20\n\nprint(\"GCD of\", a, \"and\", b, \"is\", gcd(a, b))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to calculate the GCD (Greatest Common Divisor) of two numbers.\n\n### Input:\n\n\n### Output:\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\na = 15\nb = 20\n\nprint(\"GCD of\", a, \"and\", b, \"is\", gcd(a, b))"
    },
    {
        "instruction": "Create a program in Python to sort a list of tuples (words and their frequency) in descending order.",
        "input": "[(\"hello\", 10), (\"world\", 15), (\"foo\", 8)]",
        "output": "def sortTuples(tuples):\n    tuples.sort(key=lambda x: x[1],reverse=True)\n    return tuples",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to sort a list of tuples (words and their frequency) in descending order.\n\n### Input:\n[(\"hello\", 10), (\"world\", 15), (\"foo\", 8)]\n\n### Output:\ndef sortTuples(tuples):\n    tuples.sort(key=lambda x: x[1],reverse=True)\n    return tuples"
    },
    {
        "instruction": "Create a python function that given an input array of integers produces a new array that contains the unique integers of the input array.",
        "input": "[1, 1, 2, 2, 3]",
        "output": "def unique_list(input_list):\n    uniques = []\n    for i in input_list:\n        if i not in uniques:\n            uniques.append(i)\n\n    return uniques",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function that given an input array of integers produces a new array that contains the unique integers of the input array.\n\n### Input:\n[1, 1, 2, 2, 3]\n\n### Output:\ndef unique_list(input_list):\n    uniques = []\n    for i in input_list:\n        if i not in uniques:\n            uniques.append(i)\n\n    return uniques"
    },
    {
        "instruction": "Code a Monte-Carlo simulation in Python.",
        "input": "",
        "output": "import random\n\n# Monte Carlo simulation to estimate an integral\n# The integral can be of any function f(x)\n\n# N is the number of samples to take\n# a, b is the interval\nN = 10000\na, b = 0.0, 1.0\n\n# initialize a variable to store the running sum\nsum = 0\n\n# take N samples\nfor i in range(N):\n    x = random.uniform(a, b)\n    sum += f(x) \n\n# compute the estimated integral\nestimated_integral = (b - a) / N * sum \n\nprint(\"The estimated integral is: \", estimated_integral)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a Monte-Carlo simulation in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\n# Monte Carlo simulation to estimate an integral\n# The integral can be of any function f(x)\n\n# N is the number of samples to take\n# a, b is the interval\nN = 10000\na, b = 0.0, 1.0\n\n# initialize a variable to store the running sum\nsum = 0\n\n# take N samples\nfor i in range(N):\n    x = random.uniform(a, b)\n    sum += f(x) \n\n# compute the estimated integral\nestimated_integral = (b - a) / N * sum \n\nprint(\"The estimated integral is: \", estimated_integral)"
    },
    {
        "instruction": "Generate a Python function to reverse the order of each word in a string, leaving the absolute order of each word unchanged.",
        "input": "hello, world.",
        "output": "def reverser(string):\n    reversed_string = []\n    words = string.split()\n    for word in words:\n        reversed_string.append(word[::-1])\n    return \" \".join(reversed_string)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to reverse the order of each word in a string, leaving the absolute order of each word unchanged.\n\n### Input:\nhello, world.\n\n### Output:\ndef reverser(string):\n    reversed_string = []\n    words = string.split()\n    for word in words:\n        reversed_string.append(word[::-1])\n    return \" \".join(reversed_string)"
    },
    {
        "instruction": "Design a data structure in Python to keep track of a student's attendance.",
        "input": "",
        "output": "class Student:\n    def __init__(self, name):\n        self.name = name\n        self.attendance_record = {}\n \n    def mark_attendance(self, date, attended):\n        self.attendance_record[date] = attended\n \n    def get_attendance_record(self):\n        return self.attendance_record",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a data structure in Python to keep track of a student's attendance.\n\n### Input:\n\n\n### Output:\nclass Student:\n    def __init__(self, name):\n        self.name = name\n        self.attendance_record = {}\n \n    def mark_attendance(self, date, attended):\n        self.attendance_record[date] = attended\n \n    def get_attendance_record(self):\n        return self.attendance_record"
    },
    {
        "instruction": "Create a machine learning model in Python to classify spam emails. The model should be able to classify an email as either spam or not spam.",
        "input": "Not applicable",
        "output": "import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Read in the csv dataset\ndf = pd.read_csv(\u2018spam_data.csv')\n\n# Create the CountVectorizer\ncv = CountVectorizer()\n\n# Fit the CountVectorizer to the text\nwords_cv = cv.fit_transform(df['text'])\n\n# Create a Multinomial Naive Bayes classifier and fit it to our text\nclf = MultinomialNB()\nclf.fit(words_cv, df['spam'])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python to classify spam emails. The model should be able to classify an email as either spam or not spam.\n\n### Input:\nNot applicable\n\n### Output:\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Read in the csv dataset\ndf = pd.read_csv(\u2018spam_data.csv')\n\n# Create the CountVectorizer\ncv = CountVectorizer()\n\n# Fit the CountVectorizer to the text\nwords_cv = cv.fit_transform(df['text'])\n\n# Create a Multinomial Naive Bayes classifier and fit it to our text\nclf = MultinomialNB()\nclf.fit(words_cv, df['spam'])"
    },
    {
        "instruction": "Create an AI program in Python to detect fraudulent transactions.",
        "input": "csv file containing data about customer transactions, including customer name, amount, date, time and type of transaction.",
        "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import IsolationForest\n\n# read the csv file\ndata = pd.read_csv('transaction_data.csv')\n\n# define feature and target variables\nX = data.drop(['Date', 'Time', 'Type', 'Fraud'],axis=1).values\ny = data['Fraud'].values\n\n# split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y,random_state=0)\n\n# train the model\nclf = IsolationForest(n_estimators=100,random_state=0)\nclf.fit(X_train, y_train)\n\n# make predictions \ny_pred = clf.predict(X_test)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI program in Python to detect fraudulent transactions.\n\n### Input:\ncsv file containing data about customer transactions, including customer name, amount, date, time and type of transaction.\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import IsolationForest\n\n# read the csv file\ndata = pd.read_csv('transaction_data.csv')\n\n# define feature and target variables\nX = data.drop(['Date', 'Time', 'Type', 'Fraud'],axis=1).values\ny = data['Fraud'].values\n\n# split the data into train and test sets\nX_train, X_test, y_train, y_test = train_test_split(X, y,random_state=0)\n\n# train the model\nclf = IsolationForest(n_estimators=100,random_state=0)\nclf.fit(X_train, y_train)\n\n# make predictions \ny_pred = clf.predict(X_test)"
    },
    {
        "instruction": "Generate a method for a Python class that returns the most commonly used words in a text document.",
        "input": "Not applicable",
        "output": "def most_common_words(self):\n words = {}\n words_list = self.text.split(' ')\n \n for word in words_list:\n if word in words.keys():\n words[word] += 1\n else:\n words[word] = 1\n \n return sorted(words, key=words.get, reverse=True)[:10]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a method for a Python class that returns the most commonly used words in a text document.\n\n### Input:\nNot applicable\n\n### Output:\ndef most_common_words(self):\n words = {}\n words_list = self.text.split(' ')\n \n for word in words_list:\n if word in words.keys():\n words[word] += 1\n else:\n words[word] = 1\n \n return sorted(words, key=words.get, reverse=True)[:10]"
    },
    {
        "instruction": "Create a GUI application in Python to display a simple message.",
        "input": "",
        "output": "# importing tkinter module \nfrom tkinter import *\n  \n# creating a GUI window \nroot = Tk() \n  \n# setting a geometry to the GUI window \nroot.geometry(\"300x200\") \n  \n# creating a label widget to display a message \n# this label is child of root window \nLabel(root, text=\"Hello, World!\").pack() \n  \n# looping the GUI window using an infinite loop \nroot.mainloop()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a GUI application in Python to display a simple message.\n\n### Input:\n\n\n### Output:\n# importing tkinter module \nfrom tkinter import *\n  \n# creating a GUI window \nroot = Tk() \n  \n# setting a geometry to the GUI window \nroot.geometry(\"300x200\") \n  \n# creating a label widget to display a message \n# this label is child of root window \nLabel(root, text=\"Hello, World!\").pack() \n  \n# looping the GUI window using an infinite loop \nroot.mainloop()"
    },
    {
        "instruction": "Create a Python script that checks whether a given word is a palindrome.",
        "input": "\"racecar\"",
        "output": "def is_palindrome(word):\n  rev_word = word[::-1]\n  if rev_word == word:\n    return True\n  else:\n    return False\n  \nword = \"racecar\"\nprint(is_palindrome(word)) # True",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that checks whether a given word is a palindrome.\n\n### Input:\n\"racecar\"\n\n### Output:\ndef is_palindrome(word):\n  rev_word = word[::-1]\n  if rev_word == word:\n    return True\n  else:\n    return False\n  \nword = \"racecar\"\nprint(is_palindrome(word)) # True"
    },
    {
        "instruction": "Write a python program to create a connection to a given database.",
        "input": "Database Name: test\nUsername: admin\nPassword: admin123",
        "output": "import pymysql\n\n# Create connection to database\nconn = pymysql.connect(host=\"localhost\",\n                       user=\"admin\",\n                       passwd=\"admin123\",\n                       db=\"test\")\n\n# Create a cursor and execute a query\ncur = conn.cursor()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to create a connection to a given database.\n\n### Input:\nDatabase Name: test\nUsername: admin\nPassword: admin123\n\n### Output:\nimport pymysql\n\n# Create connection to database\nconn = pymysql.connect(host=\"localhost\",\n                       user=\"admin\",\n                       passwd=\"admin123\",\n                       db=\"test\")\n\n# Create a cursor and execute a query\ncur = conn.cursor()"
    },
    {
        "instruction": "write a python code to filter 'mylist' and remove odd numbers",
        "input": "mylist = [2, 3, 5, 7, 11, 13, 17, 19]",
        "output": "mylist = [x for x in mylist if x % 2 == 0]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nwrite a python code to filter 'mylist' and remove odd numbers\n\n### Input:\nmylist = [2, 3, 5, 7, 11, 13, 17, 19]\n\n### Output:\nmylist = [x for x in mylist if x % 2 == 0]"
    },
    {
        "instruction": "Write a Python program that will ask the user to enter a word or phrase and then print out the individual characters, sorted alphabetically.",
        "input": "",
        "output": "word = input('Enter a word or phrase: ')\n\ncharacters = sorted(list(word))\n\nfor character in characters:\n    print(character)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that will ask the user to enter a word or phrase and then print out the individual characters, sorted alphabetically.\n\n### Input:\n\n\n### Output:\nword = input('Enter a word or phrase: ')\n\ncharacters = sorted(list(word))\n\nfor character in characters:\n    print(character)"
    },
    {
        "instruction": "Write a Python script to find the longest word in an array.",
        "input": "arr_of_words = ['cat', 'elephant', 'dog', 'bird']",
        "output": "def find_longest_word(arr):\n longest = ''\n for word in arr:\n if len(word) > len(longest):\n longest = word\n return longest\n\nword = find_longest_word(arr_of_words)\nprint(word)  # Output: elephant",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to find the longest word in an array.\n\n### Input:\narr_of_words = ['cat', 'elephant', 'dog', 'bird']\n\n### Output:\ndef find_longest_word(arr):\n longest = ''\n for word in arr:\n if len(word) > len(longest):\n longest = word\n return longest\n\nword = find_longest_word(arr_of_words)\nprint(word)  # Output: elephant"
    },
    {
        "instruction": "Design a class in Python to perform the following:",
        "input": "Write a basic class to store a list of students and their details such as name, age, and address. It should also have the functionality to add and delete a student.",
        "output": "\"\"\"\nDesign a class in Python to store a list of students and their details\n\"\"\"\n\nclass Student(object):\n    def __init__(self):\n        self.students = []\n \n    def add_student(self, name, age, address):\n        student = {\n            'name': name,\n            'age': age,\n            'address': address\n        }\n        self.students.append(student)\n    \n    def delete_student(self, name):\n        for student in self.students:\n            if student['name'] == name:\n                self.students.remove(student)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in Python to perform the following:\n\n### Input:\nWrite a basic class to store a list of students and their details such as name, age, and address. It should also have the functionality to add and delete a student.\n\n### Output:\n\"\"\"\nDesign a class in Python to store a list of students and their details\n\"\"\"\n\nclass Student(object):\n    def __init__(self):\n        self.students = []\n \n    def add_student(self, name, age, address):\n        student = {\n            'name': name,\n            'age': age,\n            'address': address\n        }\n        self.students.append(student)\n    \n    def delete_student(self, name):\n        for student in self.students:\n            if student['name'] == name:\n                self.students.remove(student)"
    },
    {
        "instruction": "Generate a Python statement to find all prime numbers between 1 and 10.",
        "input": "",
        "output": "lst = []\nfor num in range(1,11):\n   if all(num%i!=0 for i in range(2,num)):\n       lst.append(num)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python statement to find all prime numbers between 1 and 10.\n\n### Input:\n\n\n### Output:\nlst = []\nfor num in range(1,11):\n   if all(num%i!=0 for i in range(2,num)):\n       lst.append(num)"
    },
    {
        "instruction": "Create a class in Python that checks if a given integer is prime.",
        "input": "",
        "output": "class PrimeChecker:\n    def __init__(self, number):\n        self.number = number\n\n    def is_prime(self):\n        for i in range(2, self.number // 2):\n            if self.number % i == 0:\n                return False\n\n        return True\n\n# Create an instance of PrimeChecker\nprime_checker = PrimeChecker(7)\n\n# Check if the number is prime\nis_prime = prime_checker.is_prime()\n\nif is_prime:\n    print('The number is prime')\nelse:\n    print('The number is not prime')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that checks if a given integer is prime.\n\n### Input:\n\n\n### Output:\nclass PrimeChecker:\n    def __init__(self, number):\n        self.number = number\n\n    def is_prime(self):\n        for i in range(2, self.number // 2):\n            if self.number % i == 0:\n                return False\n\n        return True\n\n# Create an instance of PrimeChecker\nprime_checker = PrimeChecker(7)\n\n# Check if the number is prime\nis_prime = prime_checker.is_prime()\n\nif is_prime:\n    print('The number is prime')\nelse:\n    print('The number is not prime')"
    },
    {
        "instruction": "Produce a Python program that takes a string as its input and prints out a compressed version of it.",
        "input": "",
        "output": "def compress_string(s):\n    # base case: the input string is empty\n    if len(s) == 0:\n        return ''\n\n    compressed = ''\n    # maintain a count of each character\n    count = 1\n    # iterate through all characters in the string\n    for i, c in enumerate(s):\n        # if this is not the last character\n        if i < len(s) - 1:\n            # if this character is the same as the next one\n            if s[i+1] == c:\n                # increment the count\n                count += 1\n            # otherwise, add this character and its count to the compressed output\n            else:\n                compressed += c + str(count)\n                # and reset the count to 1\n                count = 1\n        # if this is the last character\n        else:\n            compressed += c + str(count)\n\n    return compressed\n  \n# Example\nstring = 'aaaaabbccd'\nprint(compress_string(string)) # a5b2c2d1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a Python program that takes a string as its input and prints out a compressed version of it.\n\n### Input:\n\n\n### Output:\ndef compress_string(s):\n    # base case: the input string is empty\n    if len(s) == 0:\n        return ''\n\n    compressed = ''\n    # maintain a count of each character\n    count = 1\n    # iterate through all characters in the string\n    for i, c in enumerate(s):\n        # if this is not the last character\n        if i < len(s) - 1:\n            # if this character is the same as the next one\n            if s[i+1] == c:\n                # increment the count\n                count += 1\n            # otherwise, add this character and its count to the compressed output\n            else:\n                compressed += c + str(count)\n                # and reset the count to 1\n                count = 1\n        # if this is the last character\n        else:\n            compressed += c + str(count)\n\n    return compressed\n  \n# Example\nstring = 'aaaaabbccd'\nprint(compress_string(string)) # a5b2c2d1"
    },
    {
        "instruction": "Train a Python model to classify a given text string as either positive or negative sentiment.",
        "input": "",
        "output": "import numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n \ndef sentiment_model(text):\n    # Read in data\n    data = pd.DataFrame([text])\n \n    # Convert text data to bag of words\n    vectorizer = CountVectorizer()\n    vectorized_data = vectorizer.fit_transform(data[0])\n \n    # Split data into train and test sets\n    labels = np.array([1, 0])\n    X_train, X_test, y_train, y_test = train_test_split(vectorized_data.toarray(),\n                                                        labels,\n                                                        test_size=0.1, \n                                                        random_state=42)\n \n    # Fit Naive Bayes model\n    clf = MultinomialNB()\n    clf.fit(X_train, y_train)\n \n    # Make predictions\n    return clf.predict(X_test)\n\nif __name__ == '__main__':\n    text = \"<PUT INPUT HERE>\"\n    print(sentiment_model(text))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTrain a Python model to classify a given text string as either positive or negative sentiment.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n \ndef sentiment_model(text):\n    # Read in data\n    data = pd.DataFrame([text])\n \n    # Convert text data to bag of words\n    vectorizer = CountVectorizer()\n    vectorized_data = vectorizer.fit_transform(data[0])\n \n    # Split data into train and test sets\n    labels = np.array([1, 0])\n    X_train, X_test, y_train, y_test = train_test_split(vectorized_data.toarray(),\n                                                        labels,\n                                                        test_size=0.1, \n                                                        random_state=42)\n \n    # Fit Naive Bayes model\n    clf = MultinomialNB()\n    clf.fit(X_train, y_train)\n \n    # Make predictions\n    return clf.predict(X_test)\n\nif __name__ == '__main__':\n    text = \"<PUT INPUT HERE>\"\n    print(sentiment_model(text))"
    },
    {
        "instruction": "Write a function in Python to print every other element in a list.",
        "input": "[1, 2, 3, 4, 5]",
        "output": "def print_every_other(lst):\n for i in range(0, len(lst), 2):\n print(lst[i])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to print every other element in a list.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Output:\ndef print_every_other(lst):\n for i in range(0, len(lst), 2):\n print(lst[i])"
    },
    {
        "instruction": "Generate a Python program to remove vowels from a string.",
        "input": "This is a string.",
        "output": "def removeVowels(string):\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    stringWithoutVowels = \"\"\n    for char in string:\n        if char not in vowels:\n            stringWithoutVowels += char\n    return stringWithoutVowels\n\nstring = input(\"Enter a string: \")\nresult = removeVowels(string)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to remove vowels from a string.\n\n### Input:\nThis is a string.\n\n### Output:\ndef removeVowels(string):\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    stringWithoutVowels = \"\"\n    for char in string:\n        if char not in vowels:\n            stringWithoutVowels += char\n    return stringWithoutVowels\n\nstring = input(\"Enter a string: \")\nresult = removeVowels(string)\nprint(result)"
    },
    {
        "instruction": "Write a Python function to convert a list of integers into a comma separated string.",
        "input": "int_list = [1, 4, 5, 6, 7]",
        "output": "def list_to_string(int_list):\n    string = \"\"\n\n    for i in int_list:\n        string += str(i) + \",\"\n\n    # Remove trailing comma\n    string = string[:-1]\n\n    return string\n\nint_list = [1, 4, 5, 6, 7] \nprint(list_to_string(int_list)) // \"1,4,5,6,7\"",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to convert a list of integers into a comma separated string.\n\n### Input:\nint_list = [1, 4, 5, 6, 7]\n\n### Output:\ndef list_to_string(int_list):\n    string = \"\"\n\n    for i in int_list:\n        string += str(i) + \",\"\n\n    # Remove trailing comma\n    string = string[:-1]\n\n    return string\n\nint_list = [1, 4, 5, 6, 7] \nprint(list_to_string(int_list)) // \"1,4,5,6,7\""
    },
    {
        "instruction": "Create an artificial neural network in Python to recognize handwritten digits with 97% accuracy.",
        "input": "Not applicable",
        "output": "import keras\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\n\n# Data is already split into input (X) and output (y)\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# Flatten the 28 x 28 images into vectors of size 784\nnum_pixels = X_train.shape[1] * X_train.shape[2]\nX_train = X_train.reshape((X_train.shape[0], num_pixels)).astype('float32')\nX_test = X_test.reshape((X_test.shape[0], num_pixels)).astype('float32')\n\n# Normalize inputs from 0-255 to 0-1\nX_train = X_train / 255\nX_test = X_test / 255\n\n# One-hot encode the labels\ny_train = keras.utils.to_categorical(y_train)\ny_test = keras.utils.to_categorical(y_test)\n\n# Define a model\ndef create_model():\n model = Sequential()\n model.add(Dense(num_pixels, input_dim=num_pixels, activation='relu'))\n model.add(Dense(128, activation='relu'))\n model.add(Dense(10, activation='softmax'))\n \n sgd = SGD(lr=0.01, momentum=0.8, decay=1e-6, nesterov=False)\n \n model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])\n return model\n\n# Create the model and fit it to the data\nmodel = create_model()\nmodel.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, batch_size=200)\n\n# Evaluate the model\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Accuracy: %.2f%%\" % (scores[1]*100)) # accuracy of 97%",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an artificial neural network in Python to recognize handwritten digits with 97% accuracy.\n\n### Input:\nNot applicable\n\n### Output:\nimport keras\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.optimizers import SGD\n\n# Data is already split into input (X) and output (y)\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# Flatten the 28 x 28 images into vectors of size 784\nnum_pixels = X_train.shape[1] * X_train.shape[2]\nX_train = X_train.reshape((X_train.shape[0], num_pixels)).astype('float32')\nX_test = X_test.reshape((X_test.shape[0], num_pixels)).astype('float32')\n\n# Normalize inputs from 0-255 to 0-1\nX_train = X_train / 255\nX_test = X_test / 255\n\n# One-hot encode the labels\ny_train = keras.utils.to_categorical(y_train)\ny_test = keras.utils.to_categorical(y_test)\n\n# Define a model\ndef create_model():\n model = Sequential()\n model.add(Dense(num_pixels, input_dim=num_pixels, activation='relu'))\n model.add(Dense(128, activation='relu'))\n model.add(Dense(10, activation='softmax'))\n \n sgd = SGD(lr=0.01, momentum=0.8, decay=1e-6, nesterov=False)\n \n model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])\n return model\n\n# Create the model and fit it to the data\nmodel = create_model()\nmodel.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, batch_size=200)\n\n# Evaluate the model\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Accuracy: %.2f%%\" % (scores[1]*100)) # accuracy of 97%"
    },
    {
        "instruction": "Write a Python program that inputs two sorted lists of numbers and produces a sorted result list which contains all the elements in both input lists",
        "input": "list1 = [1,2,3,4,5]\nlist2 = [6,7,8,9,10]",
        "output": "def sorted_list_merge(list1, list2):\n    result = []\n    index1 = 0\n    index2 = 0\n    while index1 < len(list1) and index2 < len(list2):\n        if list1[index1] < list2[index2]:\n            result.append(list1[index1])\n            index1 += 1\n        else:\n            result.append(list2[index2])\n            index2 += 1\n    result += list1[index1:] + list2[index2:]\n    return result",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that inputs two sorted lists of numbers and produces a sorted result list which contains all the elements in both input lists\n\n### Input:\nlist1 = [1,2,3,4,5]\nlist2 = [6,7,8,9,10]\n\n### Output:\ndef sorted_list_merge(list1, list2):\n    result = []\n    index1 = 0\n    index2 = 0\n    while index1 < len(list1) and index2 < len(list2):\n        if list1[index1] < list2[index2]:\n            result.append(list1[index1])\n            index1 += 1\n        else:\n            result.append(list2[index2])\n            index2 += 1\n    result += list1[index1:] + list2[index2:]\n    return result"
    },
    {
        "instruction": "Write a Python program to calculate the coefficients of a linear regression model using the gradient descent algorithm.",
        "input": "-xs = [1,2,3,4]\n-ys = [2,4,6,8]",
        "output": "import numpy as np\n\n# Set initial values for coefficients\nb0, b1 = 0, 0\n\n# Set learning rate and number of iterations\nlearning_rate = 0.01\niterations = 1000\n\n# Initialize arrays for coefficients and losses\ncoefficients, losses = [], []\n\n# Generate the data\nxs = np.array([1,2,3,4])\nys = np.array([2,4,6,8])\n\n# Calculate loss with initial values of coefficients\np = np.poly1d([b0, b1])\nyhat = p(xs)\nmse = np.mean((ys - yhat)**2) / 2\n\n# Gradient descent loop\nfor i in range(iterations):\n b0_grad = -(ys - yhat).dot(xs) / len(ys)\n b1_grad = -(ys - yhat).sum() / len(ys) \n b0 -= learning_rate * b0_grad\n b1 -= learning_rate * b1_grad\n # Append values of coefficients at every iteration\n coefficients.append((b0, b1))\n p = np.poly1d([b0, b1])\n yhat = p(xs)\n losses.append(np.mean((ys - yhat)**2) / 2)\n\n# The coefficients of the optimized model\nprint(f'Optimized coefficients: {b0}, {b1}')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the coefficients of a linear regression model using the gradient descent algorithm.\n\n### Input:\n-xs = [1,2,3,4]\n-ys = [2,4,6,8]\n\n### Output:\nimport numpy as np\n\n# Set initial values for coefficients\nb0, b1 = 0, 0\n\n# Set learning rate and number of iterations\nlearning_rate = 0.01\niterations = 1000\n\n# Initialize arrays for coefficients and losses\ncoefficients, losses = [], []\n\n# Generate the data\nxs = np.array([1,2,3,4])\nys = np.array([2,4,6,8])\n\n# Calculate loss with initial values of coefficients\np = np.poly1d([b0, b1])\nyhat = p(xs)\nmse = np.mean((ys - yhat)**2) / 2\n\n# Gradient descent loop\nfor i in range(iterations):\n b0_grad = -(ys - yhat).dot(xs) / len(ys)\n b1_grad = -(ys - yhat).sum() / len(ys) \n b0 -= learning_rate * b0_grad\n b1 -= learning_rate * b1_grad\n # Append values of coefficients at every iteration\n coefficients.append((b0, b1))\n p = np.poly1d([b0, b1])\n yhat = p(xs)\n losses.append(np.mean((ys - yhat)**2) / 2)\n\n# The coefficients of the optimized model\nprint(f'Optimized coefficients: {b0}, {b1}')"
    },
    {
        "instruction": "Implement the Quicksort algorithm in Python.",
        "input": "",
        "output": "def quicksort(arr):\n  if len(arr) <= 1:\n    return arr\n  pivot = arr[len(arr) // 2]\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\nprint(quicksort([3,6,8,10,1,2,1]))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement the Quicksort algorithm in Python.\n\n### Input:\n\n\n### Output:\ndef quicksort(arr):\n  if len(arr) <= 1:\n    return arr\n  pivot = arr[len(arr) // 2]\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\n\nprint(quicksort([3,6,8,10,1,2,1]))"
    },
    {
        "instruction": "Generate a method to remove all duplicates from a Python list.",
        "input": "[4, 4, 5, 7, 8, 8, 1]",
        "output": "def removeDuplicates(in_list):\n    out_list = []\n    for item in in_list:\n        if item not in out_list:\n            out_list.append(item)\n    return out_list\n\nmy_list = [4, 4, 5, 7, 8, 8, 1] \nprint(removeDuplicates(my_list))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a method to remove all duplicates from a Python list.\n\n### Input:\n[4, 4, 5, 7, 8, 8, 1]\n\n### Output:\ndef removeDuplicates(in_list):\n    out_list = []\n    for item in in_list:\n        if item not in out_list:\n            out_list.append(item)\n    return out_list\n\nmy_list = [4, 4, 5, 7, 8, 8, 1] \nprint(removeDuplicates(my_list))"
    },
    {
        "instruction": "Design an algorithm in Python that accepts two strings and prints out how many times each letter appears in both strings.",
        "input": "str1: apple\nstr2: pplea",
        "output": "def char_frequency(str1, str2):\n    # Create dictionaries\n    frequencies = {}\n    frequencies2 = {}\n\n    # Count frequency of all characters in first string\n    for i in range (len(str1)):\n        if str1[i] in frequencies:\n            frequencies[str1[i]] += 1\n        else:\n            frequencies[str1[i]] = 1\n\n    # Count frequency of all characters in second string\n    for i in range (len(str2)):\n        if str2[i] in frequencies2:\n            frequencies2[str2[i]] += 1\n        else:\n            frequencies2[str2[i]] = 1\n    \n    # Print the frequencies of each character\n    for ch in frequencies:\n        total_frequency = 0\n        if ch in frequencies2:\n            total_frequency = frequencies[ch] + frequencies2[ch]\n            print(\"'\" + ch + '\"', ':', total_frequency)\n        else:\n            print(\"'\" + ch + '\"', ':', frequencies[ch])\n\nstr1 = 'apple'\nstr2 = 'pplea'\nchar_frequency(str1, str2)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that accepts two strings and prints out how many times each letter appears in both strings.\n\n### Input:\nstr1: apple\nstr2: pplea\n\n### Output:\ndef char_frequency(str1, str2):\n    # Create dictionaries\n    frequencies = {}\n    frequencies2 = {}\n\n    # Count frequency of all characters in first string\n    for i in range (len(str1)):\n        if str1[i] in frequencies:\n            frequencies[str1[i]] += 1\n        else:\n            frequencies[str1[i]] = 1\n\n    # Count frequency of all characters in second string\n    for i in range (len(str2)):\n        if str2[i] in frequencies2:\n            frequencies2[str2[i]] += 1\n        else:\n            frequencies2[str2[i]] = 1\n    \n    # Print the frequencies of each character\n    for ch in frequencies:\n        total_frequency = 0\n        if ch in frequencies2:\n            total_frequency = frequencies[ch] + frequencies2[ch]\n            print(\"'\" + ch + '\"', ':', total_frequency)\n        else:\n            print(\"'\" + ch + '\"', ':', frequencies[ch])\n\nstr1 = 'apple'\nstr2 = 'pplea'\nchar_frequency(str1, str2)"
    },
    {
        "instruction": "Create a class in Python and add two functions to it.",
        "input": "",
        "output": "class MyClass:\n    def say_hello(self):\n        print(\"Hello world!\")\n    \n    def say_goodbye(self):\n        print(\"Goodbye!\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python and add two functions to it.\n\n### Input:\n\n\n### Output:\nclass MyClass:\n    def say_hello(self):\n        print(\"Hello world!\")\n    \n    def say_goodbye(self):\n        print(\"Goodbye!\")"
    },
    {
        "instruction": "Create a function using Python that parses a given string and returns a dictionary containing each word in the string as key and its frequency as value.",
        "input": "string = \"This is a random sentence.\"",
        "output": "def parseString(string):\n    freqDict = dict()\n    stringWords = string.split(\" \") \n    for word in stringWords:\n        if word in freqDict:\n            freqDict[word] += 1\n        else:\n            freqDict[word] = 1\n    return freqDict",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function using Python that parses a given string and returns a dictionary containing each word in the string as key and its frequency as value.\n\n### Input:\nstring = \"This is a random sentence.\"\n\n### Output:\ndef parseString(string):\n    freqDict = dict()\n    stringWords = string.split(\" \") \n    for word in stringWords:\n        if word in freqDict:\n            freqDict[word] += 1\n        else:\n            freqDict[word] = 1\n    return freqDict"
    },
    {
        "instruction": "Write a Bash script to check if a specific program is installed on the current system.",
        "input": "Program Name = Python",
        "output": "#!/usr/bin/env bash\n\nif type -p python &> /dev/null; then\n  echo 'Python is installed!'\nelse \n  echo 'Python is not installed!'\nfi",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Bash script to check if a specific program is installed on the current system.\n\n### Input:\nProgram Name = Python\n\n### Output:\n#!/usr/bin/env bash\n\nif type -p python &> /dev/null; then\n  echo 'Python is installed!'\nelse \n  echo 'Python is not installed!'\nfi"
    },
    {
        "instruction": "Create a quicksort algorithm in Python.",
        "input": "",
        "output": "def quicksort(array):\n    if len(array) < 2:\n        return array\n    else:\n        pivot = array[0] \n        less = [i for i in array[1:] if i <= pivot]\n        greater = [i for i in array[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a quicksort algorithm in Python.\n\n### Input:\n\n\n### Output:\ndef quicksort(array):\n    if len(array) < 2:\n        return array\n    else:\n        pivot = array[0] \n        less = [i for i in array[1:] if i <= pivot]\n        greater = [i for i in array[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)"
    },
    {
        "instruction": "Develop a python code to optimize a mathematical model.",
        "input": "The mathematical model takes two inputs; x and y.",
        "output": "def model(x, y):\n    # Write the mathematical model here\n  \ndef optimize(x_min, x_max, y_min, y_max):\n    best_x = 0\n    best_y = 0\n    best_value = 0\n    \n    for x in range(x_min, x_max+1):\n        for y in range(y_min, y_max+1):\n            value = model(x, y)\n            if value > best_value:\n                best_x = x\n                best_y = y\n                best_value = value\n    \n    return best_x, best_y",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python code to optimize a mathematical model.\n\n### Input:\nThe mathematical model takes two inputs; x and y.\n\n### Output:\ndef model(x, y):\n    # Write the mathematical model here\n  \ndef optimize(x_min, x_max, y_min, y_max):\n    best_x = 0\n    best_y = 0\n    best_value = 0\n    \n    for x in range(x_min, x_max+1):\n        for y in range(y_min, y_max+1):\n            value = model(x, y)\n            if value > best_value:\n                best_x = x\n                best_y = y\n                best_value = value\n    \n    return best_x, best_y"
    },
    {
        "instruction": "Generate a function in Python to create a list of the nth prime number.",
        "input": "n=3",
        "output": "def get_nth_prime(n): \n    prime_nums = [2] \n    check_num = 3 \n    while len(prime_nums) < n: \n        is_prime = True \n        for i in prime_nums: \n            if check_num % i == 0: \n                is_prime = False \n                break \n        if is_prime: \n            prime_nums.append(check_num) \n        check_num += 2 \n    return prime_nums[-1]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python to create a list of the nth prime number.\n\n### Input:\nn=3\n\n### Output:\ndef get_nth_prime(n): \n    prime_nums = [2] \n    check_num = 3 \n    while len(prime_nums) < n: \n        is_prime = True \n        for i in prime_nums: \n            if check_num % i == 0: \n                is_prime = False \n                break \n        if is_prime: \n            prime_nums.append(check_num) \n        check_num += 2 \n    return prime_nums[-1]"
    },
    {
        "instruction": "Create a python function that prints out the largest element in an array.",
        "input": "[1,4,7,12,-1]",
        "output": "def findLargestElement(arr):\n    largest_element = arr[0]\n    for element in arr:\n        if element > largest_element:\n            largest_element = element\n    return largest_element\n\narr = [1,4,7,12,-1]\nprint(findLargestElement(arr))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function that prints out the largest element in an array.\n\n### Input:\n[1,4,7,12,-1]\n\n### Output:\ndef findLargestElement(arr):\n    largest_element = arr[0]\n    for element in arr:\n        if element > largest_element:\n            largest_element = element\n    return largest_element\n\narr = [1,4,7,12,-1]\nprint(findLargestElement(arr))"
    },
    {
        "instruction": "Generate a Python script for displaying the top 10 most used words from any given list of words.",
        "input": "[\"Hello\", \"World\", \"Hello\", \"there\", \"World\", \"Hello\", \"Python\", \"JavaScript\", \"C++\"]",
        "output": "words = [\"Hello\", \"World\", \"Hello\", \"there\", \"World\", \"Hello\", \"Python\", \"JavaScript\", \"C++\"]\n\n# Create a dictionary to store word counts\nword_counts = {}\n\n# Count occurrences of each word\nfor word in words:\n    if word in word_counts:\n        word_counts[word] += 1\n    else:\n        word_counts[word] = 1\n\n# Sort words by count\nword_count_sorted = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n\n# Print top 10 words\ntop_10_words = word_count_sorted[:10]\n\nprint(\"Top 10 words are:\")\nfor word, count in top_10_words:\n    print(f'{word}: {count}')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script for displaying the top 10 most used words from any given list of words.\n\n### Input:\n[\"Hello\", \"World\", \"Hello\", \"there\", \"World\", \"Hello\", \"Python\", \"JavaScript\", \"C++\"]\n\n### Output:\nwords = [\"Hello\", \"World\", \"Hello\", \"there\", \"World\", \"Hello\", \"Python\", \"JavaScript\", \"C++\"]\n\n# Create a dictionary to store word counts\nword_counts = {}\n\n# Count occurrences of each word\nfor word in words:\n    if word in word_counts:\n        word_counts[word] += 1\n    else:\n        word_counts[word] = 1\n\n# Sort words by count\nword_count_sorted = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)\n\n# Print top 10 words\ntop_10_words = word_count_sorted[:10]\n\nprint(\"Top 10 words are:\")\nfor word, count in top_10_words:\n    print(f'{word}: {count}')"
    },
    {
        "instruction": "Come up with a function in Python that predicts the future value of stocks given some parameters.",
        "input": "parameters:  market condition, news, historical data",
        "output": "def predict_stock_value(parameters):\n    \"\"\"\n    Predicts the future value of stocks based on given parameters.\n    \n    Parameters: \n        - Market condition (trends, developments, etc.) \n        - News (industry-specific news, news sources) \n        - Historical data (stock prices, stock returns)\n\n    Returns:\n        A float value representing predicted stock price.\n    \"\"\"\n    # Code to generate predicted stock value goes here\n    ...\n    return predicted_stock_value",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a function in Python that predicts the future value of stocks given some parameters.\n\n### Input:\nparameters:  market condition, news, historical data\n\n### Output:\ndef predict_stock_value(parameters):\n    \"\"\"\n    Predicts the future value of stocks based on given parameters.\n    \n    Parameters: \n        - Market condition (trends, developments, etc.) \n        - News (industry-specific news, news sources) \n        - Historical data (stock prices, stock returns)\n\n    Returns:\n        A float value representing predicted stock price.\n    \"\"\"\n    # Code to generate predicted stock value goes here\n    ...\n    return predicted_stock_value"
    },
    {
        "instruction": "Construct a code in Python to count the number of alphabets in an user-entered string.",
        "input": "String: \"Hello World\"",
        "output": "def countAlpha(str): \n\tcount = 0\n\tfor char in str:\n\t\tif char.isalpha():\n\t\t\tcount += 1\n\treturn count \n\nstr = \"Hello World\"\nresult = countAlpha(str)\nprint(\"Number of alphabets:\", result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a code in Python to count the number of alphabets in an user-entered string.\n\n### Input:\nString: \"Hello World\"\n\n### Output:\ndef countAlpha(str): \n\tcount = 0\n\tfor char in str:\n\t\tif char.isalpha():\n\t\t\tcount += 1\n\treturn count \n\nstr = \"Hello World\"\nresult = countAlpha(str)\nprint(\"Number of alphabets:\", result)"
    },
    {
        "instruction": "Compute the factorial of n using python code",
        "input": "",
        "output": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return (n*factorial(n-1))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the factorial of n using python code\n\n### Input:\n\n\n### Output:\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return (n*factorial(n-1))"
    },
    {
        "instruction": "Write a Python script to calculate the area of a triangle given its three vertices.",
        "input": "(2, 0), (3, 4), (6, 2)",
        "output": "def calculate_area_of_triangle(p1, p2, p3):\n    a = ((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2) ** 0.5 \n    b = ((p3[0] - p2[0]) ** 2 + (p3[1] - p2[1]) ** 2) ** 0.5\n    c = ((p3[0] - p1[0]) ** 2 + (p3[1] - p1[1]) ** 2) ** 0.5\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\n\nresult = calculate_area_of_triangle((2, 0), (3, 4), (6, 2))\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to calculate the area of a triangle given its three vertices.\n\n### Input:\n(2, 0), (3, 4), (6, 2)\n\n### Output:\ndef calculate_area_of_triangle(p1, p2, p3):\n    a = ((p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2) ** 0.5 \n    b = ((p3[0] - p2[0]) ** 2 + (p3[1] - p2[1]) ** 2) ** 0.5\n    c = ((p3[0] - p1[0]) ** 2 + (p3[1] - p1[1]) ** 2) ** 0.5\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return area\n\nresult = calculate_area_of_triangle((2, 0), (3, 4), (6, 2))\nprint(result)"
    },
    {
        "instruction": "Refactor a Python program to improve its readability and maintainability.",
        "input": "The program is given below.\n\ndef main():\n    result = []\n    for item in range(10):\n        if item % 3 == 0:\n            result.append(item * item)\n    return result",
        "output": "def main():\n    result = [item * item for item in range(10) if item % 3 == 0]\n    return result",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRefactor a Python program to improve its readability and maintainability.\n\n### Input:\nThe program is given below.\n\ndef main():\n    result = []\n    for item in range(10):\n        if item % 3 == 0:\n            result.append(item * item)\n    return result\n\n### Output:\ndef main():\n    result = [item * item for item in range(10) if item % 3 == 0]\n    return result"
    },
    {
        "instruction": "Can you generate the Fibonacci sequence up to 20 using Python?",
        "input": "",
        "output": "# Fibonacci Sequence up to 20\na, b = 0, 1\nwhile a < 20:\n    print(a)\n    a, b = b, a+b",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you generate the Fibonacci sequence up to 20 using Python?\n\n### Input:\n\n\n### Output:\n# Fibonacci Sequence up to 20\na, b = 0, 1\nwhile a < 20:\n    print(a)\n    a, b = b, a+b"
    },
    {
        "instruction": "Create a Python script that takes in two lists as inputs and generates a list containing all possible pairings between elements from both lists.",
        "input": "Input 1: [1, 2, 3]\nInput 2: ['a', 'b', 'c']",
        "output": "list1 = [1,2,3]\nlist2 = ['a', 'b', 'c']\n\npairs = []\n\nfor x in list1:\n    for y in list2:\n        pairs.append((x,y))\n\nprint(pairs) // Output: [(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), (2, 'b'), (2, 'c'), (3, 'a'), (3, 'b'), (3, 'c')]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that takes in two lists as inputs and generates a list containing all possible pairings between elements from both lists.\n\n### Input:\nInput 1: [1, 2, 3]\nInput 2: ['a', 'b', 'c']\n\n### Output:\nlist1 = [1,2,3]\nlist2 = ['a', 'b', 'c']\n\npairs = []\n\nfor x in list1:\n    for y in list2:\n        pairs.append((x,y))\n\nprint(pairs) // Output: [(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), (2, 'b'), (2, 'c'), (3, 'a'), (3, 'b'), (3, 'c')]"
    },
    {
        "instruction": "Create a Python program that takes a message as input and encrypts it using the Caesar cipher.",
        "input": "\"Hello World!\"",
        "output": "def caesar_encrypt(plain_text, shift):\n    encrypted_text = \"\"\n    \n    for c in plain_text:\n        c_ascii = ord(c)+shift \n        encrypted_text += chr(c_ascii)\n        \n    return encrypted_text\n\nplain_text = \"Hello World!\"\nshift = 5\nencrypted_text = caesar_encrypt(plain_text, shift)\nprint(\"encrypted_text =\", encrypted_text)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a message as input and encrypts it using the Caesar cipher.\n\n### Input:\n\"Hello World!\"\n\n### Output:\ndef caesar_encrypt(plain_text, shift):\n    encrypted_text = \"\"\n    \n    for c in plain_text:\n        c_ascii = ord(c)+shift \n        encrypted_text += chr(c_ascii)\n        \n    return encrypted_text\n\nplain_text = \"Hello World!\"\nshift = 5\nencrypted_text = caesar_encrypt(plain_text, shift)\nprint(\"encrypted_text =\", encrypted_text)"
    },
    {
        "instruction": "Generate a Python script to create a list of numbers in the range 0-n (inclusive) and print it.",
        "input": "n = 10",
        "output": "n = 10\n\nlist_numbers = []\nfor i in range(0,n+1):\n    list_numbers.append(i)\n\nprint(list_numbers)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to create a list of numbers in the range 0-n (inclusive) and print it.\n\n### Input:\nn = 10\n\n### Output:\nn = 10\n\nlist_numbers = []\nfor i in range(0,n+1):\n    list_numbers.append(i)\n\nprint(list_numbers)"
    },
    {
        "instruction": "Construct a Python for loop to find the largest number in a list of given numbers.",
        "input": "[3, 6, 8, 11, 12]",
        "output": "largest = 0\nlist = [3, 6, 8, 11, 12]\n\nfor i in list:\n  if i > largest:\n    largest = i\n\nprint(largest)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python for loop to find the largest number in a list of given numbers.\n\n### Input:\n[3, 6, 8, 11, 12]\n\n### Output:\nlargest = 0\nlist = [3, 6, 8, 11, 12]\n\nfor i in list:\n  if i > largest:\n    largest = i\n\nprint(largest)"
    },
    {
        "instruction": "Create a python script that prints out a list of names in alphabetical order.",
        "input": "Robert, Asher, Aster, Athena",
        "output": "list_of_names= [\"Asher\", \"Aster\", \"Athena\", \"Robert\"]\nlist_of_names.sort()\n\nprint(list_of_names)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script that prints out a list of names in alphabetical order.\n\n### Input:\nRobert, Asher, Aster, Athena\n\n### Output:\nlist_of_names= [\"Asher\", \"Aster\", \"Athena\", \"Robert\"]\nlist_of_names.sort()\n\nprint(list_of_names)"
    },
    {
        "instruction": "Write a python program that displays all prime numbers up to 100",
        "input": "",
        "output": "# Print all prime numbers up to 100\n\nfor num in range(2,101):  \n   if all(num%i!=0 for i in range(2,num)):\n      print(num)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that displays all prime numbers up to 100\n\n### Input:\n\n\n### Output:\n# Print all prime numbers up to 100\n\nfor num in range(2,101):  \n   if all(num%i!=0 for i in range(2,num)):\n      print(num)"
    },
    {
        "instruction": "Write a Python script to find the total time an animation takes to play in an HTML page.",
        "input": "<div class='anim-container'>\n  <div class='anim-one'>\n    <div class=\"sprite1\" data-duration-seconds=\"2.2\"></div>\n    <div class=\"sprite2\" data-duration-seconds=\"1.2\"></div>\n  </div>\n  <div class=\"anim-two\">\n    <div class=\"sprite3\" data-duration-seconds=\"5.5\"></div>\n  </div>\n</div>",
        "output": "\"\"\"\nFind the total time an animation takes to play in an HTML page\n\"\"\"\n\nimport re\n\ndef get_total_animation_time(html):\n   # extract the values from the HTML\n   durations = re.findall('data-duration-seconds=\"(.*?)\"', html)\n   # convert them to floats\n   durations = [float(x) for x in durations]\n   # sum them\n   total = sum(durations)\n   return total\n   \nif __name__ == '__main__':\n    html = '''\n    <div class='anim-container'>\n      <div class='anim-one'>\n        <div class=\"sprite1\" data-duration-seconds=\"2.2\"></div>\n        <div class=\"sprite2\" data-duration-seconds=\"1.2\"></div>\n      </div>\n      <div class=\"anim-two\">\n        <div class=\"sprite3\" data-duration-seconds=\"5.5\"></div>\n      </div>\n    </div>\n    '''\n    print(get_total_animation_time(html))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to find the total time an animation takes to play in an HTML page.\n\n### Input:\n<div class='anim-container'>\n  <div class='anim-one'>\n    <div class=\"sprite1\" data-duration-seconds=\"2.2\"></div>\n    <div class=\"sprite2\" data-duration-seconds=\"1.2\"></div>\n  </div>\n  <div class=\"anim-two\">\n    <div class=\"sprite3\" data-duration-seconds=\"5.5\"></div>\n  </div>\n</div>\n\n### Output:\n\"\"\"\nFind the total time an animation takes to play in an HTML page\n\"\"\"\n\nimport re\n\ndef get_total_animation_time(html):\n   # extract the values from the HTML\n   durations = re.findall('data-duration-seconds=\"(.*?)\"', html)\n   # convert them to floats\n   durations = [float(x) for x in durations]\n   # sum them\n   total = sum(durations)\n   return total\n   \nif __name__ == '__main__':\n    html = '''\n    <div class='anim-container'>\n      <div class='anim-one'>\n        <div class=\"sprite1\" data-duration-seconds=\"2.2\"></div>\n        <div class=\"sprite2\" data-duration-seconds=\"1.2\"></div>\n      </div>\n      <div class=\"anim-two\">\n        <div class=\"sprite3\" data-duration-seconds=\"5.5\"></div>\n      </div>\n    </div>\n    '''\n    print(get_total_animation_time(html))"
    },
    {
        "instruction": "Create a Python program to normalize a given data set.",
        "input": "[2, 6, 25, -25, 9]",
        "output": "def normalize(nums):\n    min_Num = min(nums)\n    max_num = max(nums)\n    \n    for i in range(len(nums)):\n        nums[i] = (nums[i] - min_Num)/ (max_num - min_Num)\n    \n    return nums",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to normalize a given data set.\n\n### Input:\n[2, 6, 25, -25, 9]\n\n### Output:\ndef normalize(nums):\n    min_Num = min(nums)\n    max_num = max(nums)\n    \n    for i in range(len(nums)):\n        nums[i] = (nums[i] - min_Num)/ (max_num - min_Num)\n    \n    return nums"
    },
    {
        "instruction": "Implement a search algorithm to quickly identify a specific character in a given string using Python.",
        "input": "string = \"helloworld\"\ncharacter = \"o\"",
        "output": "def search(s, ch):\n    for i, c in enumerate(s):\n        if c == ch:\n            return i\n    return -1\n\nstring = \"helloworld\"\ncharacter = \"o\"\n\nindex = search(string, character)\nif index == -1:\n    print(\"Character not found\")\nelse:\n    print(\"Index of the character is\", index)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a search algorithm to quickly identify a specific character in a given string using Python.\n\n### Input:\nstring = \"helloworld\"\ncharacter = \"o\"\n\n### Output:\ndef search(s, ch):\n    for i, c in enumerate(s):\n        if c == ch:\n            return i\n    return -1\n\nstring = \"helloworld\"\ncharacter = \"o\"\n\nindex = search(string, character)\nif index == -1:\n    print(\"Character not found\")\nelse:\n    print(\"Index of the character is\", index)"
    },
    {
        "instruction": "Generate a random number between 1 and 10 in Python.",
        "input": "",
        "output": "import random\n\nrandomNumber = random.randint(1, 10)\nprint(randomNumber)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random number between 1 and 10 in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\nrandomNumber = random.randint(1, 10)\nprint(randomNumber)"
    },
    {
        "instruction": "Implement a program in Python to generate a multiplication table for the given integer.",
        "input": "",
        "output": "def multiplication_table(n): \n  \n    for i in range(1, 11): \n        print(\"{0:>2} X {1:2} = {2:2}\".format(n, i, n*i)) \n  \nmultiplication_table(6)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a program in Python to generate a multiplication table for the given integer.\n\n### Input:\n\n\n### Output:\ndef multiplication_table(n): \n  \n    for i in range(1, 11): \n        print(\"{0:>2} X {1:2} = {2:2}\".format(n, i, n*i)) \n  \nmultiplication_table(6)"
    },
    {
        "instruction": "Write a Python program to check whether two given strings are anagram strings.",
        "input": "str1 = 'anagram', str2='gramana'",
        "output": "def is_anagram(str1, str2):\n    # first check that the strings are of equal length\n    if len(str1) == len(str2):\n         # convert strings to lists and sort lists\n        str1_list = list(str1)\n        str1_list.sort()\n        str2_list = list(str2)\n        str2_list.sort()\n        # check if sorted lists are equal\n        if str1_list == str2_list:\n            return True \n    # if they were not equal, return false \n    return False\n\nstr1 = 'anagram'\nstr2 = 'gramana'\nprint(is_anagram(str1,str2))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to check whether two given strings are anagram strings.\n\n### Input:\nstr1 = 'anagram', str2='gramana'\n\n### Output:\ndef is_anagram(str1, str2):\n    # first check that the strings are of equal length\n    if len(str1) == len(str2):\n         # convert strings to lists and sort lists\n        str1_list = list(str1)\n        str1_list.sort()\n        str2_list = list(str2)\n        str2_list.sort()\n        # check if sorted lists are equal\n        if str1_list == str2_list:\n            return True \n    # if they were not equal, return false \n    return False\n\nstr1 = 'anagram'\nstr2 = 'gramana'\nprint(is_anagram(str1,str2))"
    },
    {
        "instruction": "Create a function in Python to optimize a cost function using gradient descent.",
        "input": "A cost function of the form f(x) = x^2 + 10.",
        "output": "def optimize(x, alpha):\n grad = 2 * x\n x = x - alpha * grad\n return x\n\nfor i in range(1000):\n x = optimize(x, 0.1) \n\nprint(x) # Output: 0.0",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to optimize a cost function using gradient descent.\n\n### Input:\nA cost function of the form f(x) = x^2 + 10.\n\n### Output:\ndef optimize(x, alpha):\n grad = 2 * x\n x = x - alpha * grad\n return x\n\nfor i in range(1000):\n x = optimize(x, 0.1) \n\nprint(x) # Output: 0.0"
    },
    {
        "instruction": "Create a machine learning classifier in Python for sentiment analysis of inappriopriate online comments",
        "input": "",
        "output": "import numpy as np \nimport pandas as pd \nfrom sklearn.feature_extraction.text import CountVectorizer \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB \n  \n# Load the data \ndf = pd.read_csv('path/to/data')\n  \n# Create the Training and Test sets \nX_train, X_test, y_train, y_test = train_test_split(df['text'], df['label'], random_state=0) \n  \n# Vectorise the data \nvect = CountVectorizer().fit(X_train) \nX_train_vectorised = vect.transform(X_train) \n  \n# Fit the model \nmodel = MultinomialNB(alpha=1).fit(X_train_vectorised, y_train) \n  \n# Make predictions \npredictions = model.predict(vect.transform(X_test))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning classifier in Python for sentiment analysis of inappriopriate online comments\n\n### Input:\n\n\n### Output:\nimport numpy as np \nimport pandas as pd \nfrom sklearn.feature_extraction.text import CountVectorizer \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB \n  \n# Load the data \ndf = pd.read_csv('path/to/data')\n  \n# Create the Training and Test sets \nX_train, X_test, y_train, y_test = train_test_split(df['text'], df['label'], random_state=0) \n  \n# Vectorise the data \nvect = CountVectorizer().fit(X_train) \nX_train_vectorised = vect.transform(X_train) \n  \n# Fit the model \nmodel = MultinomialNB(alpha=1).fit(X_train_vectorised, y_train) \n  \n# Make predictions \npredictions = model.predict(vect.transform(X_test))"
    },
    {
        "instruction": "Generate a Python function to print all the even numbers from 0 to a given number.",
        "input": "10",
        "output": "def print_even_numbers(n):\n    for i in range(0, n+1):\n        if i % 2 == 0:\n            print(i)\n\nprint_even_numbers(10)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to print all the even numbers from 0 to a given number.\n\n### Input:\n10\n\n### Output:\ndef print_even_numbers(n):\n    for i in range(0, n+1):\n        if i % 2 == 0:\n            print(i)\n\nprint_even_numbers(10)"
    },
    {
        "instruction": "Create a Natural Language Processing pipeline for sentiment analysis in Python using NLTK and Scikit-Learn.",
        "input": "Not applicable",
        "output": "import nltk\nimport pandas as pd\nimport sklearn\n\n# Tokenize the text\nfrom nltk.tokenize import word_tokenize\n\n# Remove Stopwords\nfrom nltk.corpus import stopwords\n\n# Text Normalization\nfrom nltk.stem.porter import PorterStemmer\n\n# Create a dataframe\ndf = pd.read_csv('data.csv')\n\n# Text Preprocessing\nstop_words = list(set(stopwords.words('english')))\nporter = PorterStemmer()\n\n# Create a list to store the preprocessed text\nprocessed_words = []\n\n# Preprocess the text in the dataframe\nfor i in range(0, len(df)):\n words = word_tokenize(df['text'][i])\n words = [w for w in words if not w in stop_words]\n words = [porter.stem(w) for w in words]\n processed_words.append(words)\n\n# Vectorization\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(max_features=2500)\nX = cv.fit_transform(df['text']).toarray()\n\n# Label Encoding\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ny = le.fit_transform(df['sentiment'])\n\n# Train the data\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)\n\n# Train the Naive Bayes model\nfrom sklearn.naive_bayes import MultinomialNB\nnb = MultinomialNB().fit(X_train, y_train)\n\n# Test the model and get the predictions\ny_pred = nb.predict(X_test)\n\n# Evaluate the model\nprint(\"Confusion Matrix: \\n\", confusion_matrix(y_pred, y_test))\nprint(\"Accuracy:\", accuracy_score(y_pred, y_test))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Natural Language Processing pipeline for sentiment analysis in Python using NLTK and Scikit-Learn.\n\n### Input:\nNot applicable\n\n### Output:\nimport nltk\nimport pandas as pd\nimport sklearn\n\n# Tokenize the text\nfrom nltk.tokenize import word_tokenize\n\n# Remove Stopwords\nfrom nltk.corpus import stopwords\n\n# Text Normalization\nfrom nltk.stem.porter import PorterStemmer\n\n# Create a dataframe\ndf = pd.read_csv('data.csv')\n\n# Text Preprocessing\nstop_words = list(set(stopwords.words('english')))\nporter = PorterStemmer()\n\n# Create a list to store the preprocessed text\nprocessed_words = []\n\n# Preprocess the text in the dataframe\nfor i in range(0, len(df)):\n words = word_tokenize(df['text'][i])\n words = [w for w in words if not w in stop_words]\n words = [porter.stem(w) for w in words]\n processed_words.append(words)\n\n# Vectorization\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(max_features=2500)\nX = cv.fit_transform(df['text']).toarray()\n\n# Label Encoding\nfrom sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ny = le.fit_transform(df['sentiment'])\n\n# Train the data\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)\n\n# Train the Naive Bayes model\nfrom sklearn.naive_bayes import MultinomialNB\nnb = MultinomialNB().fit(X_train, y_train)\n\n# Test the model and get the predictions\ny_pred = nb.predict(X_test)\n\n# Evaluate the model\nprint(\"Confusion Matrix: \\n\", confusion_matrix(y_pred, y_test))\nprint(\"Accuracy:\", accuracy_score(y_pred, y_test))"
    },
    {
        "instruction": "Create a Python script to extract the top 10 words from the text.",
        "input": "",
        "output": "import collections\n\ndef extract_top_words(file_name):\n    with open(file_name, 'r') as f:\n        data = f.read()\n        words = data.split()\n\n    counts = collections.Counter(words).most_common(10)\n    return counts\n\nfile_name = 'test.txt'\ntop_words = extract_top_words(file_name) \nprint(top_words)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to extract the top 10 words from the text.\n\n### Input:\n\n\n### Output:\nimport collections\n\ndef extract_top_words(file_name):\n    with open(file_name, 'r') as f:\n        data = f.read()\n        words = data.split()\n\n    counts = collections.Counter(words).most_common(10)\n    return counts\n\nfile_name = 'test.txt'\ntop_words = extract_top_words(file_name) \nprint(top_words)"
    },
    {
        "instruction": "Write an optimized Python code to search for an element in a list that contains 1 million elements.",
        "input": "A list of 1 million random elements.",
        "output": "def binary_search(list, x):\n    low = 0\n    high = len(list) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if list[mid] == x:\n            return mid\n        elif list[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n# Driver Code\nmy_list = [...] # Assume list contains 1 million random elements\nx = 3 # Element to be searched\nresult = binary_search(my_list, x)\n\nif result != -1:\n    print('Element is present at index', str(result))\nelse: \n    print('Element is not present in list')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an optimized Python code to search for an element in a list that contains 1 million elements.\n\n### Input:\nA list of 1 million random elements.\n\n### Output:\ndef binary_search(list, x):\n    low = 0\n    high = len(list) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if list[mid] == x:\n            return mid\n        elif list[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n\n# Driver Code\nmy_list = [...] # Assume list contains 1 million random elements\nx = 3 # Element to be searched\nresult = binary_search(my_list, x)\n\nif result != -1:\n    print('Element is present at index', str(result))\nelse: \n    print('Element is not present in list')"
    },
    {
        "instruction": "Write a script in Python using the Requests library to scrape all the websites from a list.",
        "input": "Site URLs = [\"http://www.example1.com\" , \"http://www.example2.com\"]",
        "output": "import requests\n\nsite_urls = [\"http://www.example1.com\" , \"http://www.example2.com\"]\n\nfor url in site_urls:\n response = requests.get(url)\n page_source = response.content\n print(page_source)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script in Python using the Requests library to scrape all the websites from a list.\n\n### Input:\nSite URLs = [\"http://www.example1.com\" , \"http://www.example2.com\"]\n\n### Output:\nimport requests\n\nsite_urls = [\"http://www.example1.com\" , \"http://www.example2.com\"]\n\nfor url in site_urls:\n response = requests.get(url)\n page_source = response.content\n print(page_source)"
    },
    {
        "instruction": "Design an algorithm in Python that takes an array of integers and prints the numbers between 1 and 100 that are not present in the array",
        "input": "",
        "output": "def missing_numbers(arr):\n    arr_set = set(arr)\n    for i in range(1, 101):\n        if i not in arr_set:\n            print(i)\n\nmissing_numbers([4,5,1,9, 8,5])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that takes an array of integers and prints the numbers between 1 and 100 that are not present in the array\n\n### Input:\n\n\n### Output:\ndef missing_numbers(arr):\n    arr_set = set(arr)\n    for i in range(1, 101):\n        if i not in arr_set:\n            print(i)\n\nmissing_numbers([4,5,1,9, 8,5])"
    },
    {
        "instruction": "Using regex, extend the following python code to remove whitespaces from a string.",
        "input": "def remove_spaces(user_string):\n    '''This function will remove all the spaces from a string'''",
        "output": "def remove_spaces(user_string):\n    '''This function will remove all the spaces from a string'''\n    user_string = re.sub(r'\\s','',user_string)\n    return user_string",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing regex, extend the following python code to remove whitespaces from a string.\n\n### Input:\ndef remove_spaces(user_string):\n    '''This function will remove all the spaces from a string'''\n\n### Output:\ndef remove_spaces(user_string):\n    '''This function will remove all the spaces from a string'''\n    user_string = re.sub(r'\\s','',user_string)\n    return user_string"
    },
    {
        "instruction": "Create a Python program that prints a welcome message to the user based on their input.",
        "input": "\"Welcome to my program!\"",
        "output": "name = input(\"Enter your name:\") \n \nprint(\"Welcome to my program \" + name + \"!\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that prints a welcome message to the user based on their input.\n\n### Input:\n\"Welcome to my program!\"\n\n### Output:\nname = input(\"Enter your name:\") \n \nprint(\"Welcome to my program \" + name + \"!\")"
    },
    {
        "instruction": "Generate a web scraper using a Python library.",
        "input": "",
        "output": "import requests\nimport bs4\n\ndef webscraper(url):\n    page = requests.get(url)\n    soup = bs4.BeautifulSoup(page.text, \"html.parser\")\n    return soup",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a web scraper using a Python library.\n\n### Input:\n\n\n### Output:\nimport requests\nimport bs4\n\ndef webscraper(url):\n    page = requests.get(url)\n    soup = bs4.BeautifulSoup(page.text, \"html.parser\")\n    return soup"
    },
    {
        "instruction": "Create a Python class for a given type of rational number, with methods for adding, subtracting, multiplying, and dividing rational numbers.",
        "input": "",
        "output": "\"\"\"\nClass for a given type of rational number, with methods for adding, subtracting, multiplying, and dividing rational numbers.\n\"\"\"\n\nclass Rational:\n    def __init__(self, numerator, denominator):\n        self.numerator = numerator\n        self.denominator = denominator\n\n    def __str__(self):\n        return f\"{self.numerator}/{self.denominator}\"\n\n    def add(self, other):\n        numerator = self.numerator * other.denominator + self.denominator * other.numerator\n        denominator = self.denominator * other.denominator\n        return Rational(numerator, denominator)\n    \n    def subtract(self, other):\n        numerator = self.numerator * other.denominator - self.denominator * other.numerator\n        denominator = self.denominator * other.denominator\n        return Rational(numerator, denominator)\n    \n    def multiply(self, other):\n        numerator = self.numerator * other.numerator\n        denominator = self.denominator * other.denominator\n        return Rational(numerator, denominator)\n    \n    def divide(self, other):\n        numerator = self.numerator * other.denominator\n        denominator = self.denominator * other.numerator\n        return Rational(numerator, denominator)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for a given type of rational number, with methods for adding, subtracting, multiplying, and dividing rational numbers.\n\n### Input:\n\n\n### Output:\n\"\"\"\nClass for a given type of rational number, with methods for adding, subtracting, multiplying, and dividing rational numbers.\n\"\"\"\n\nclass Rational:\n    def __init__(self, numerator, denominator):\n        self.numerator = numerator\n        self.denominator = denominator\n\n    def __str__(self):\n        return f\"{self.numerator}/{self.denominator}\"\n\n    def add(self, other):\n        numerator = self.numerator * other.denominator + self.denominator * other.numerator\n        denominator = self.denominator * other.denominator\n        return Rational(numerator, denominator)\n    \n    def subtract(self, other):\n        numerator = self.numerator * other.denominator - self.denominator * other.numerator\n        denominator = self.denominator * other.denominator\n        return Rational(numerator, denominator)\n    \n    def multiply(self, other):\n        numerator = self.numerator * other.numerator\n        denominator = self.denominator * other.denominator\n        return Rational(numerator, denominator)\n    \n    def divide(self, other):\n        numerator = self.numerator * other.denominator\n        denominator = self.denominator * other.numerator\n        return Rational(numerator, denominator)"
    },
    {
        "instruction": "Write an algorithm in Python that rearranges an array such that no entry is greater than the one that comes after it.",
        "input": "Array = [16, 41, 0, 7, 13, 24]",
        "output": "def arrange(arr): \n\n    #traverse the list \n    for i in range(len(arr)): \n          \n        # swapping \n        for j in range(i+1, len(arr)): \n              \n            # comparing the adjacent element \n            if arr[i] > arr[j]: \n                temp = arr[i] \n                arr[i] = arr[j] \n                arr[j] = temp \n                  \n    return arr \n\n# Driver Code \narr = [16, 41, 0, 7, 13, 24]  \narr = arrange(arr) \n\n# Printing the sorted array \nprint (\"The rearranged array is : \") \nfor i in range(len(arr)): \n    print (arr[i], end=\" \")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python that rearranges an array such that no entry is greater than the one that comes after it.\n\n### Input:\nArray = [16, 41, 0, 7, 13, 24]\n\n### Output:\ndef arrange(arr): \n\n    #traverse the list \n    for i in range(len(arr)): \n          \n        # swapping \n        for j in range(i+1, len(arr)): \n              \n            # comparing the adjacent element \n            if arr[i] > arr[j]: \n                temp = arr[i] \n                arr[i] = arr[j] \n                arr[j] = temp \n                  \n    return arr \n\n# Driver Code \narr = [16, 41, 0, 7, 13, 24]  \narr = arrange(arr) \n\n# Printing the sorted array \nprint (\"The rearranged array is : \") \nfor i in range(len(arr)): \n    print (arr[i], end=\" \")"
    },
    {
        "instruction": "Develop a python program for",
        "input": "Filter a given list of strings to only include strings that start with vowels.",
        "output": "def filter_vowel_strings(string_list):\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    filtered_list = []\n    for string in string_list:\n        if string.startswith(vowels):\n            filtered_list.append(string)\n    return filtered_list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python program for\n\n### Input:\nFilter a given list of strings to only include strings that start with vowels.\n\n### Output:\ndef filter_vowel_strings(string_list):\n    vowels = ('a', 'e', 'i', 'o', 'u')\n    filtered_list = []\n    for string in string_list:\n        if string.startswith(vowels):\n            filtered_list.append(string)\n    return filtered_list"
    },
    {
        "instruction": "The given code is a Python script that characterizes the Reactome pathways and their associated genes. To use this code, you need to have Python 3 installed on your system along with the required dependencies. Once you have the necessary setup, run the script by executing the main() function. The script will connect to a MySQL database and retrieve the Reactome pathways and their associated genes. It will then characterize the pathways based on the number of genes they have and group them accordingly. Finally, it will output the results to the console.",
        "input": "",
        "output": "#! /usr/bin/python3\n#\n# This source code is part of icgc, an ICGC processing pipeline.\n#\n# Icgc is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Icgc is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see<http://www.gnu.org/licenses/>.\n#\n# Contact: ivana.mihalek@gmail.com\n#\n\n# some pathways do not have the associated genes listed, probably by mistake\n# examples:\n# R-HSA-1483171       | Synthesis of BMP\n# R-HSA-2408499       | Formation of selenosugars for excretion\n\nfrom icgc_utils.common_queries import quotify\nfrom icgc_utils.reactome import *\nfrom config import Config\n############\ndef print_genes(cursor, gene_ids, depth):\n\tif len(gene_ids)<1:\n\t\tprint(\"\\t\"*depth, \"no genes listed\")\n\t\treturn\n\t#print(\"\\t\"*depth, \"print genes here\")\n\tgene_id_string = \",\".join([quotify(z) for z in gene_ids])\n\tqry = \"select ensembl_gene_id, approved_name from hgnc  where ensembl_gene_id in (%s)\" % gene_id_string\n\tgene_names = dict(hard_landing_search(cursor, qry))\n\tqry = \"select ensembl_gene_id, approved_symbol from hgnc  where ensembl_gene_id in (%s)\" % gene_id_string\n\tgene_symbols = dict(hard_landing_search(cursor, qry))\n\n\tfor gene in gene_ids:\n\t\tprint(\"\\t\"*depth, gene_symbols.get(gene,\"\"), gene_names.get(gene,\"\"))\n\treturn\n\n\n##############\ndef characterize_subtree(cursor, graph, pthwy_id, gene_groups, depth,  verbose=True):\n\t# this is the whole subtree\n\t# children = [node for node in nx.dfs_preorder_nodes(graph, pthwy_id)]\n\t# A successor of n is a node m such that there exists a directed edge from n to m.\n\tchildren = [node for node in graph.successors(pthwy_id)]\n\tif len(children)==0: return False\n\tnode_id_string = \",\".join([quotify(z) for z in children])\n\tqry_template = \"select * from reactome_pathways where reactome_pathway_id in (%s)\"\n\tchildren_names = hard_landing_search(cursor, qry_template % node_id_string)\n\tfor child_id, child_name in children_names:\n\t\t# number_of_genes = genes related to nodes without descendants\n\t\tgenes = genes_in_subgraph(cursor, graph, child_id)\n\t\tif verbose: print(\"\\t\"*depth, child_id, child_name, len(genes))\n\t\tif len(genes)<100:\n\t\t\tif verbose: print_genes(cursor, genes, depth+1)\n\t\t\tgene_groups[child_name] = genes\n\t\t\tcontinue\n\t\tif not characterize_subtree(cursor, graph, child_id, gene_groups, depth+1, verbose=verbose): # no further subdivisions\n\t\t\tif verbose: print_genes(cursor, genes, depth+1)\n\t\t\tgene_groups[child_name] = genes\n\t\t\tcontinue\n\treturn True\n\n#########################################\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\ndef hist_plot(gene_groups):\n\tdata = [len(gene_list) for gene_list in list(gene_groups.values())]\n\t# fixed bin size\n\tbins = np.arange(0, 505, 5) # fixed bin size\n\tplt.xlim(0,500)\n\tplt.hist(data, bins=bins, alpha=0.5)\n\t# plt.title('')\n\tplt.xlabel('number of genes in group (bin size = 5)')\n\tplt.ylabel('number of groups')\n\t#\n\tplt.show()\n\n####################################################\ndef main():\n\n\tverbose = False\n\n\tdb     = connect_to_mysql(Config.mysql_conf_file)\n\tcursor = db.cursor()\n\n\tswitch_to_db(cursor, 'icgc')\n\n\t# are there children with multiple parents? Yes. So I need some kind of\n\t# directed graph, rather tha a tree.\n\tqry = \"select child, count(distinct parent) as ct from reactome_hierarchy \"\n\tqry += \"group by child having ct>1\"\n\tret = search_db(cursor, qry)\n\tprint(\"number of children with multiple parents:\", len(ret))\n\n\t# feed the parent/child pairs as edges into graph\n\tgraph = build_reactome_graph(cursor, verbose=True)\n\t# candidate roots\n\tzero_in_degee_nodes = get_roots(graph)\n\n\tnode_id_string = \",\".join([quotify(z) for z in zero_in_degee_nodes])\n\tqry_template = \"select * from reactome_pathways where reactome_pathway_id in (%s)\"\n\troot_names  = hard_landing_search(cursor, qry_template% node_id_string)\n\tgene_groups = {}\n\tfor pthwy_id, name in root_names:\n\t\tif \"disease\" in name.lower(): continue\n\t\tif verbose: print(pthwy_id, name)\n\t\tcharacterize_subtree(cursor, graph, pthwy_id,  gene_groups,  1, verbose=verbose)\n\n\tprint(\"\\n===========================\")\n\tmax_group=0\n\tfor group, genes in gene_groups.items():\n\t\tgroupsize = len(genes)\n\t\tif max_group< groupsize: max_group=groupsize\n\t\tprint (group, len(genes))\n\tprint(\"\\n===========================\")\n\tprint(\"number of groups\", len(gene_groups))\n\tprint(\"largest group\", max_group)\n\tprint(\"\\n===========================\")\n\tfor pthwy_name, genes in gene_groups.items():\n\t\tif len(genes)<=150: continue\n\t\tprint(\"\\n\",pthwy_name, len(genes))\n\t\t#print_genes(cursor, genes, 1)\n\n\n\t#hist_plot(gene_groups)\n\tcursor.close()\n\tdb.close()\n\n\n#########################################\nif __name__ == '__main__':\n\tmain()\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThe given code is a Python script that characterizes the Reactome pathways and their associated genes. To use this code, you need to have Python 3 installed on your system along with the required dependencies. Once you have the necessary setup, run the script by executing the main() function. The script will connect to a MySQL database and retrieve the Reactome pathways and their associated genes. It will then characterize the pathways based on the number of genes they have and group them accordingly. Finally, it will output the results to the console.\n\n### Input:\n\n\n### Output:\n#! /usr/bin/python3\n#\n# This source code is part of icgc, an ICGC processing pipeline.\n#\n# Icgc is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Icgc is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see<http://www.gnu.org/licenses/>.\n#\n# Contact: ivana.mihalek@gmail.com\n#\n\n# some pathways do not have the associated genes listed, probably by mistake\n# examples:\n# R-HSA-1483171       | Synthesis of BMP\n# R-HSA-2408499       | Formation of selenosugars for excretion\n\nfrom icgc_utils.common_queries import quotify\nfrom icgc_utils.reactome import *\nfrom config import Config\n############\ndef print_genes(cursor, gene_ids, depth):\n\tif len(gene_ids)<1:\n\t\tprint(\"\\t\"*depth, \"no genes listed\")\n\t\treturn\n\t#print(\"\\t\"*depth, \"print genes here\")\n\tgene_id_string = \",\".join([quotify(z) for z in gene_ids])\n\tqry = \"select ensembl_gene_id, approved_name from hgnc  where ensembl_gene_id in (%s)\" % gene_id_string\n\tgene_names = dict(hard_landing_search(cursor, qry))\n\tqry = \"select ensembl_gene_id, approved_symbol from hgnc  where ensembl_gene_id in (%s)\" % gene_id_string\n\tgene_symbols = dict(hard_landing_search(cursor, qry))\n\n\tfor gene in gene_ids:\n\t\tprint(\"\\t\"*depth, gene_symbols.get(gene,\"\"), gene_names.get(gene,\"\"))\n\treturn\n\n\n##############\ndef characterize_subtree(cursor, graph, pthwy_id, gene_groups, depth,  verbose=True):\n\t# this is the whole subtree\n\t# children = [node for node in nx.dfs_preorder_nodes(graph, pthwy_id)]\n\t# A successor of n is a node m such that there exists a directed edge from n to m.\n\tchildren = [node for node in graph.successors(pthwy_id)]\n\tif len(children)==0: return False\n\tnode_id_string = \",\".join([quotify(z) for z in children])\n\tqry_template = \"select * from reactome_pathways where reactome_pathway_id in (%s)\"\n\tchildren_names = hard_landing_search(cursor, qry_template % node_id_string)\n\tfor child_id, child_name in children_names:\n\t\t# number_of_genes = genes related to nodes without descendants\n\t\tgenes = genes_in_subgraph(cursor, graph, child_id)\n\t\tif verbose: print(\"\\t\"*depth, child_id, child_name, len(genes))\n\t\tif len(genes)<100:\n\t\t\tif verbose: print_genes(cursor, genes, depth+1)\n\t\t\tgene_groups[child_name] = genes\n\t\t\tcontinue\n\t\tif not characterize_subtree(cursor, graph, child_id, gene_groups, depth+1, verbose=verbose): # no further subdivisions\n\t\t\tif verbose: print_genes(cursor, genes, depth+1)\n\t\t\tgene_groups[child_name] = genes\n\t\t\tcontinue\n\treturn True\n\n#########################################\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\ndef hist_plot(gene_groups):\n\tdata = [len(gene_list) for gene_list in list(gene_groups.values())]\n\t# fixed bin size\n\tbins = np.arange(0, 505, 5) # fixed bin size\n\tplt.xlim(0,500)\n\tplt.hist(data, bins=bins, alpha=0.5)\n\t# plt.title('')\n\tplt.xlabel('number of genes in group (bin size = 5)')\n\tplt.ylabel('number of groups')\n\t#\n\tplt.show()\n\n####################################################\ndef main():\n\n\tverbose = False\n\n\tdb     = connect_to_mysql(Config.mysql_conf_file)\n\tcursor = db.cursor()\n\n\tswitch_to_db(cursor, 'icgc')\n\n\t# are there children with multiple parents? Yes. So I need some kind of\n\t# directed graph, rather tha a tree.\n\tqry = \"select child, count(distinct parent) as ct from reactome_hierarchy \"\n\tqry += \"group by child having ct>1\"\n\tret = search_db(cursor, qry)\n\tprint(\"number of children with multiple parents:\", len(ret))\n\n\t# feed the parent/child pairs as edges into graph\n\tgraph = build_reactome_graph(cursor, verbose=True)\n\t# candidate roots\n\tzero_in_degee_nodes = get_roots(graph)\n\n\tnode_id_string = \",\".join([quotify(z) for z in zero_in_degee_nodes])\n\tqry_template = \"select * from reactome_pathways where reactome_pathway_id in (%s)\"\n\troot_names  = hard_landing_search(cursor, qry_template% node_id_string)\n\tgene_groups = {}\n\tfor pthwy_id, name in root_names:\n\t\tif \"disease\" in name.lower(): continue\n\t\tif verbose: print(pthwy_id, name)\n\t\tcharacterize_subtree(cursor, graph, pthwy_id,  gene_groups,  1, verbose=verbose)\n\n\tprint(\"\\n===========================\")\n\tmax_group=0\n\tfor group, genes in gene_groups.items():\n\t\tgroupsize = len(genes)\n\t\tif max_group< groupsize: max_group=groupsize\n\t\tprint (group, len(genes))\n\tprint(\"\\n===========================\")\n\tprint(\"number of groups\", len(gene_groups))\n\tprint(\"largest group\", max_group)\n\tprint(\"\\n===========================\")\n\tfor pthwy_name, genes in gene_groups.items():\n\t\tif len(genes)<=150: continue\n\t\tprint(\"\\n\",pthwy_name, len(genes))\n\t\t#print_genes(cursor, genes, 1)\n\n\n\t#hist_plot(gene_groups)\n\tcursor.close()\n\tdb.close()\n\n\n#########################################\nif __name__ == '__main__':\n\tmain()\n"
    },
    {
        "instruction": "Write a Python program to generate a random integer between 0 and 9.",
        "input": "",
        "output": "\"\"\"\nGenerate a random integer between 0 and 9\n\"\"\"\n\nimport random\n\ndef generate_random_integer():\n    # Generate a random number in the range [0, 9] \n    x = random.randint(0,9) \n    return x\n\nif __name__ == '__main__':\n    print(generate_random_integer())",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a random integer between 0 and 9.\n\n### Input:\n\n\n### Output:\n\"\"\"\nGenerate a random integer between 0 and 9\n\"\"\"\n\nimport random\n\ndef generate_random_integer():\n    # Generate a random number in the range [0, 9] \n    x = random.randint(0,9) \n    return x\n\nif __name__ == '__main__':\n    print(generate_random_integer())"
    },
    {
        "instruction": "Write a Python program to implement a Hangman game with a limited set of valid words.",
        "input": "Valid words: [\"apple\", \"banana\", \"orange\"]",
        "output": "valid_words = [\"apple\", \"banana\", \"orange\"]\n\nMAX_GUESSES = 6\n\nclass Hangman:\n    def __init__(self):\n        self.secret_word = self.get_random_word()\n        self.incorrect_guesses = 0\n        self.masked_word = ['_'] * len(self.secret_word)\n        self.guessed_letters = []\n    \n    def get_random_word(self):\n        return random.choice(valid_words)\n    \n    def guess_letter(self, letter):\n        self.guessed_letters.append(letter)\n        if letter in self.secret_word:\n            for i, letter in enumerate(self.secret_word):\n                if letter == self.guessed_letters[-1]:\n                    self.masked_word[i] = letter\n            return True\n        else:\n            self.incorrect_guesses += 1\n            return False\n            \n    def is_game_over(self):\n        return self.incorrect_guesses >= MAX_GUESSES or '_' not in self.masked_word",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to implement a Hangman game with a limited set of valid words.\n\n### Input:\nValid words: [\"apple\", \"banana\", \"orange\"]\n\n### Output:\nvalid_words = [\"apple\", \"banana\", \"orange\"]\n\nMAX_GUESSES = 6\n\nclass Hangman:\n    def __init__(self):\n        self.secret_word = self.get_random_word()\n        self.incorrect_guesses = 0\n        self.masked_word = ['_'] * len(self.secret_word)\n        self.guessed_letters = []\n    \n    def get_random_word(self):\n        return random.choice(valid_words)\n    \n    def guess_letter(self, letter):\n        self.guessed_letters.append(letter)\n        if letter in self.secret_word:\n            for i, letter in enumerate(self.secret_word):\n                if letter == self.guessed_letters[-1]:\n                    self.masked_word[i] = letter\n            return True\n        else:\n            self.incorrect_guesses += 1\n            return False\n            \n    def is_game_over(self):\n        return self.incorrect_guesses >= MAX_GUESSES or '_' not in self.masked_word"
    },
    {
        "instruction": "Create a Python program that takes a list of numbers as input and generates a histogram of the number of occurrences of each number.",
        "input": "[1,3,1,2,3,2,4,3,1,2]",
        "output": "# Import modules\nimport matplotlib.pyplot as plt\n\n# Get input data\ndata = [1,3,1,2,3,2,4,3,1,2]\n\n# Create a dictionary to count each number's occurrence\ncounts = {x: data.count(x) for x in data}\n\n# Set up the graph\nplt.xlabel('Number')\nplt.ylabel('Frequency')\n\n# Plot the histogram\nplt.bar(counts.keys(), counts.values())\nplt.show()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes a list of numbers as input and generates a histogram of the number of occurrences of each number.\n\n### Input:\n[1,3,1,2,3,2,4,3,1,2]\n\n### Output:\n# Import modules\nimport matplotlib.pyplot as plt\n\n# Get input data\ndata = [1,3,1,2,3,2,4,3,1,2]\n\n# Create a dictionary to count each number's occurrence\ncounts = {x: data.count(x) for x in data}\n\n# Set up the graph\nplt.xlabel('Number')\nplt.ylabel('Frequency')\n\n# Plot the histogram\nplt.bar(counts.keys(), counts.values())\nplt.show()"
    },
    {
        "instruction": "Create an AI agent in Python to play the game of Nim. The agent should learn the optimal strategy to win the game after playing multiple games.",
        "input": "Not applicable",
        "output": "import random\n\nclass NimAgent():\n    # This stores the history of moves \n    # each game.\n    game_history = []\n\n    def __init__(self):\n        self.move_choice = None\n        self.game_won = False\n\n    def reset(self):\n        self.move_choice = None\n        self.game_ won = False\n\n    def get_move(self, board):\n        # starting condition, no history recorded\n        if len(self.game_history) == 0:\n            return random.randint(1,3)\n\n        # check if the game has been won in the last move\n        if sum(board) == 0:\n            self.game_won = True\n            return -1\n\n        # analyze the game history   \n        # look for patterns\n        optimalMove = self.analyze_game_history()\n        return optimalMove\n    \n    def analyze_game_history(self): \n        #TODO: implement the analysis of game history \n        # to play the optimal move\n        pass\n\n    def update_move_history(self, board):\n        # Add the current game board state to the history\n        self.game_history.append(tuple(board))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI agent in Python to play the game of Nim. The agent should learn the optimal strategy to win the game after playing multiple games.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\nclass NimAgent():\n    # This stores the history of moves \n    # each game.\n    game_history = []\n\n    def __init__(self):\n        self.move_choice = None\n        self.game_won = False\n\n    def reset(self):\n        self.move_choice = None\n        self.game_ won = False\n\n    def get_move(self, board):\n        # starting condition, no history recorded\n        if len(self.game_history) == 0:\n            return random.randint(1,3)\n\n        # check if the game has been won in the last move\n        if sum(board) == 0:\n            self.game_won = True\n            return -1\n\n        # analyze the game history   \n        # look for patterns\n        optimalMove = self.analyze_game_history()\n        return optimalMove\n    \n    def analyze_game_history(self): \n        #TODO: implement the analysis of game history \n        # to play the optimal move\n        pass\n\n    def update_move_history(self, board):\n        # Add the current game board state to the history\n        self.game_history.append(tuple(board))"
    },
    {
        "instruction": "Write a Python program to parse incoming JSON data and store it in a database.",
        "input": "{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"job\": \"Software Engineer\"\n}",
        "output": "import json\nimport sqlite3\n\ndata = {'name': 'John', 'age': 30, 'job': 'Software Engineer'}\n\nwith sqlite3.connect(\"database.db\") as con:\n cur = con.cursor()\n cur.execute(\"CREATE TABLE IF NOT EXISTS people(name TEXT, age INTEGER, job TEXT)\")\n cur.execute(\"INSERT INTO people (name, age, job) VALUES (?, ?, ?)\", (data['name'], data['age'], data['job']))\n con.commit()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to parse incoming JSON data and store it in a database.\n\n### Input:\n{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"job\": \"Software Engineer\"\n}\n\n### Output:\nimport json\nimport sqlite3\n\ndata = {'name': 'John', 'age': 30, 'job': 'Software Engineer'}\n\nwith sqlite3.connect(\"database.db\") as con:\n cur = con.cursor()\n cur.execute(\"CREATE TABLE IF NOT EXISTS people(name TEXT, age INTEGER, job TEXT)\")\n cur.execute(\"INSERT INTO people (name, age, job) VALUES (?, ?, ?)\", (data['name'], data['age'], data['job']))\n con.commit()"
    },
    {
        "instruction": "Write a Python script to generate a dictionary that keeps count of how many times each word appears in a given sentence.",
        "input": "\"the quick brown fox jumps over the lazy dog\"",
        "output": "\"\"\"\nGenerate a dictionary that keeps count of how many times each word appears in a given sentence\n\nParameters:\nsentence (str): a sentence\n\nReturn:\ndict: a dictionary with word as key and count as value\n\"\"\"\n\ndef count_words(sentence):\n    word_count = {}\n    words = sentence.split()\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 1\n        else:\n            word_count[word] += 1\n    return word_count\n\nif __name__ == '__main__':\n    sentence = \"the quick brown fox jumps over the lazy dog\"\n    print(count_words(sentence))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to generate a dictionary that keeps count of how many times each word appears in a given sentence.\n\n### Input:\n\"the quick brown fox jumps over the lazy dog\"\n\n### Output:\n\"\"\"\nGenerate a dictionary that keeps count of how many times each word appears in a given sentence\n\nParameters:\nsentence (str): a sentence\n\nReturn:\ndict: a dictionary with word as key and count as value\n\"\"\"\n\ndef count_words(sentence):\n    word_count = {}\n    words = sentence.split()\n    for word in words:\n        if word not in word_count:\n            word_count[word] = 1\n        else:\n            word_count[word] += 1\n    return word_count\n\nif __name__ == '__main__':\n    sentence = \"the quick brown fox jumps over the lazy dog\"\n    print(count_words(sentence))"
    },
    {
        "instruction": "Develop a Python script to classify a given news article into one of four categories (Politics, Business, Entertainment, Sports).",
        "input": "Article: President Trump is expected to unveil a new immigration plan on Wednesday.",
        "output": "# Lib imports\nimport nltk\nfrom nltk.classify import NaiveBayesClassifier\n\n# Tokenize words\ndef tokenize_words(text):\n tokens = nltk.word_tokenize(text)\n return tokens\n\n# Convert the words into features\ndef convert_features(words):\n features = {}\n for word in words:\n features[word] = True\n return features\n\n# Prepare the training instances\ntraining_data = [\n ({\" President\": True, \" Trump\": True, \" immigration\": True}, \"Politics\"),\n ({\" Apple\": True, \" share\": True, \" market\": True}, \"Business\"),\n ({\" Singer\": True, \" concert\": True, \" stage\": True}, \"Entertainment\"),\n ({\" Player\": True, \" goal\": True, \" team\": True}, \"Sports\")\n]\n\n# Initialize a classification model\nmodel = NaiveBayesClassifier.train(training_data)\n\narticle = \"President Trump is expected to unveil a new immigration plan on Wednesday.\"\narticle_tokens = tokenize_words(article)\narticle_features = convert_features(article_tokens)\ncategory = model.classify(article_features)\n\nprint(\"The article is classified into the category: \", category) # The article is classified into the category: Politics",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to classify a given news article into one of four categories (Politics, Business, Entertainment, Sports).\n\n### Input:\nArticle: President Trump is expected to unveil a new immigration plan on Wednesday.\n\n### Output:\n# Lib imports\nimport nltk\nfrom nltk.classify import NaiveBayesClassifier\n\n# Tokenize words\ndef tokenize_words(text):\n tokens = nltk.word_tokenize(text)\n return tokens\n\n# Convert the words into features\ndef convert_features(words):\n features = {}\n for word in words:\n features[word] = True\n return features\n\n# Prepare the training instances\ntraining_data = [\n ({\" President\": True, \" Trump\": True, \" immigration\": True}, \"Politics\"),\n ({\" Apple\": True, \" share\": True, \" market\": True}, \"Business\"),\n ({\" Singer\": True, \" concert\": True, \" stage\": True}, \"Entertainment\"),\n ({\" Player\": True, \" goal\": True, \" team\": True}, \"Sports\")\n]\n\n# Initialize a classification model\nmodel = NaiveBayesClassifier.train(training_data)\n\narticle = \"President Trump is expected to unveil a new immigration plan on Wednesday.\"\narticle_tokens = tokenize_words(article)\narticle_features = convert_features(article_tokens)\ncategory = model.classify(article_features)\n\nprint(\"The article is classified into the category: \", category) # The article is classified into the category: Politics"
    },
    {
        "instruction": "Create a Python program to print out the numbers in reverse order from 100 to 1.",
        "input": "",
        "output": "for i in range (100,0,-1):\n    print(i)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to print out the numbers in reverse order from 100 to 1.\n\n### Input:\n\n\n### Output:\nfor i in range (100,0,-1):\n    print(i)"
    },
    {
        "instruction": "Implement a sorting algorithm in Python that sorts a given array of numbers in descending order.",
        "input": "[2, 5, 7, 3, 1, 8]",
        "output": "def sort_descending(list):\n    sorted_list = sorted(list, reverse=True)\n    return sorted_list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a sorting algorithm in Python that sorts a given array of numbers in descending order.\n\n### Input:\n[2, 5, 7, 3, 1, 8]\n\n### Output:\ndef sort_descending(list):\n    sorted_list = sorted(list, reverse=True)\n    return sorted_list"
    },
    {
        "instruction": "Convert the following array of Python objects into a JSON string.",
        "input": "[{'name': 'John', 'age': '22'}, {'name': 'Bob', 'age': '33'}]",
        "output": "import json\n\ndata = [{'name': 'John', 'age': '22'}, {'name': 'Bob', 'age': '33'}]\n\njson_str = json.dumps(data)\nprint(json_str)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following array of Python objects into a JSON string.\n\n### Input:\n[{'name': 'John', 'age': '22'}, {'name': 'Bob', 'age': '33'}]\n\n### Output:\nimport json\n\ndata = [{'name': 'John', 'age': '22'}, {'name': 'Bob', 'age': '33'}]\n\njson_str = json.dumps(data)\nprint(json_str)"
    },
    {
        "instruction": "Generate a unique identifier in Python",
        "input": "Not applicable",
        "output": "import uuid\n\ndef generateUniqueId():\n return str(uuid.uuid4())\n\nuniqueId = generateUniqueId()\nprint(uniqueId)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a unique identifier in Python\n\n### Input:\nNot applicable\n\n### Output:\nimport uuid\n\ndef generateUniqueId():\n return str(uuid.uuid4())\n\nuniqueId = generateUniqueId()\nprint(uniqueId)"
    },
    {
        "instruction": "Write Python code to read input from the user and output a greeting in the form of 'Hello <Name>!'",
        "input": "",
        "output": "name = input('What is your name? ')\nprint(f'Hello {name}!')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to read input from the user and output a greeting in the form of 'Hello <Name>!'\n\n### Input:\n\n\n### Output:\nname = input('What is your name? ')\nprint(f'Hello {name}!')"
    },
    {
        "instruction": "Find the minimum of two numbers using Python.",
        "input": "5, 3",
        "output": "def find_min(a, b):\n    return min(a, b)\n\nresult = find_min(5, 3)\nprint(result) # 3",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the minimum of two numbers using Python.\n\n### Input:\n5, 3\n\n### Output:\ndef find_min(a, b):\n    return min(a, b)\n\nresult = find_min(5, 3)\nprint(result) # 3"
    },
    {
        "instruction": "Write a Python program to simulate a coin flip. The program should randomly pick between heads or tails and output the result.",
        "input": "Not applicable",
        "output": "import random\n\ndef coin_flip():\n  # Get a random number between 0 and 1\n  coin = random.randint(0, 1)\n\n  # if the number is 0, outcome is heads\n  if coin == 0:\n    return \"Heads\"\n\n  # if the number is 1, outcome is tails\n  else:\n    return \"Tails\"\n\nprint(coin_flip())",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to simulate a coin flip. The program should randomly pick between heads or tails and output the result.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\ndef coin_flip():\n  # Get a random number between 0 and 1\n  coin = random.randint(0, 1)\n\n  # if the number is 0, outcome is heads\n  if coin == 0:\n    return \"Heads\"\n\n  # if the number is 1, outcome is tails\n  else:\n    return \"Tails\"\n\nprint(coin_flip())"
    },
    {
        "instruction": "Write a Python program to generate a random password string containing letters and digits.",
        "input": "",
        "output": "import random\nimport string \n\ndef generate_password(length): \n    password_characters = string.ascii_letters + string.digits\n    return ''.join(random.choice(password_characters) for i in range(length))\n\npassword = generate_password(8)\nprint(\"Password is:\", password)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a random password string containing letters and digits.\n\n### Input:\n\n\n### Output:\nimport random\nimport string \n\ndef generate_password(length): \n    password_characters = string.ascii_letters + string.digits\n    return ''.join(random.choice(password_characters) for i in range(length))\n\npassword = generate_password(8)\nprint(\"Password is:\", password)"
    },
    {
        "instruction": "Create a Python program for analyzing Twitter data. The program should accept a password (or token) as input and should display the Tweet count and detailed sentiment analysis of each tweet.",
        "input": "Not applicable",
        "output": "import tweepy\nfrom textblob import TextBlob\n\nCONSUMER_KEY = ''\nCONSUMER_SECRET = ''\nACCESS_TOKEN = ''\nACCESS_SECRET = ''\n\nauth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\nauth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)\n\napi = tweepy.API(auth)\n\ntweet_count = 10\nsearch_query = '#python'\n\ntweets = tweepy.Cursor(api.search, q=search_query, lang=\"en\").items(tweet_count)\n\ntweet_polarities = []\n\nfor tweet in tweets:\n    analysis = TextBlob(tweet.text)\n    tweet_polarities.append(analysis.sentiment.polarity)\n\nprint('Tweet count:', tweet_count)\nprint('Detailed sentiment analysis:', tweet_polarities)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for analyzing Twitter data. The program should accept a password (or token) as input and should display the Tweet count and detailed sentiment analysis of each tweet.\n\n### Input:\nNot applicable\n\n### Output:\nimport tweepy\nfrom textblob import TextBlob\n\nCONSUMER_KEY = ''\nCONSUMER_SECRET = ''\nACCESS_TOKEN = ''\nACCESS_SECRET = ''\n\nauth = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)\nauth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)\n\napi = tweepy.API(auth)\n\ntweet_count = 10\nsearch_query = '#python'\n\ntweets = tweepy.Cursor(api.search, q=search_query, lang=\"en\").items(tweet_count)\n\ntweet_polarities = []\n\nfor tweet in tweets:\n    analysis = TextBlob(tweet.text)\n    tweet_polarities.append(analysis.sentiment.polarity)\n\nprint('Tweet count:', tweet_count)\nprint('Detailed sentiment analysis:', tweet_polarities)"
    },
    {
        "instruction": "Declare a Python class that demonstrates inheritance.",
        "input": "",
        "output": "class ParentClass:\n    def __init__(self):\n        self.message = 'Hello, Parent'\n\nclass ChildClass(ParentClass):\n    def __init__(self):\n        ParentClass.__init__(self)\n        self.message = 'Hello, Child'\n\nobj = ChildClass()\nprint(obj.message) //Prints 'Hello, Child'",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDeclare a Python class that demonstrates inheritance.\n\n### Input:\n\n\n### Output:\nclass ParentClass:\n    def __init__(self):\n        self.message = 'Hello, Parent'\n\nclass ChildClass(ParentClass):\n    def __init__(self):\n        ParentClass.__init__(self)\n        self.message = 'Hello, Child'\n\nobj = ChildClass()\nprint(obj.message) //Prints 'Hello, Child'"
    },
    {
        "instruction": "Create a Python script to partition a list into sub-lists of equal size.",
        "input": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        "output": "def partition(lst, n):\n return [lst[i:i+n] for i in range(0, len(lst), n)]\n \nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\npartitions = partition(list, 3)\n \nfor p in partitions:\n print(p)\n\n# Output\n# [1, 2, 3]\n# [4, 5, 6]\n# [7, 8, 9]\n# [10]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to partition a list into sub-lists of equal size.\n\n### Input:\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n### Output:\ndef partition(lst, n):\n return [lst[i:i+n] for i in range(0, len(lst), n)]\n \nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\npartitions = partition(list, 3)\n \nfor p in partitions:\n print(p)\n\n# Output\n# [1, 2, 3]\n# [4, 5, 6]\n# [7, 8, 9]\n# [10]"
    },
    {
        "instruction": "Design a Python program to return the largest and smallest elements from a given list.",
        "input": "[7, 9, 5, 4, 8, 1]",
        "output": "def largest_smallest(array):\n    smallest = array[0]\n    largest = array[0]\n\n    for element in array:\n        if element > largest:\n            largest = element\n        elif element < smallest: \n            smallest = element\n\n    return (smallest, largest)\n\nlargest_smallest([7, 9, 5, 4, 8, 1]) => (1, 9)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to return the largest and smallest elements from a given list.\n\n### Input:\n[7, 9, 5, 4, 8, 1]\n\n### Output:\ndef largest_smallest(array):\n    smallest = array[0]\n    largest = array[0]\n\n    for element in array:\n        if element > largest:\n            largest = element\n        elif element < smallest: \n            smallest = element\n\n    return (smallest, largest)\n\nlargest_smallest([7, 9, 5, 4, 8, 1]) => (1, 9)"
    },
    {
        "instruction": "Create a function in Java that encodes a string using base64.",
        "input": "Python",
        "output": "import java.util.Base64;\n\npublic String encode(String message) {\n byte[] messageBytes = message.getBytes();\n String encodedMessage = Base64.getEncoder().encodeToString(messageBytes);\n return encodedMessage;\n}\n\nString message = \"Python\";\nString encodedMessage  = encode(message);\nSystem.out.println(encodedMessage); // Output: UHl0aG9u",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Java that encodes a string using base64.\n\n### Input:\nPython\n\n### Output:\nimport java.util.Base64;\n\npublic String encode(String message) {\n byte[] messageBytes = message.getBytes();\n String encodedMessage = Base64.getEncoder().encodeToString(messageBytes);\n return encodedMessage;\n}\n\nString message = \"Python\";\nString encodedMessage  = encode(message);\nSystem.out.println(encodedMessage); // Output: UHl0aG9u"
    },
    {
        "instruction": "Create an algorithm in Python for the classification of numbers into even or odd.",
        "input": "3",
        "output": "def classifyNumber(num): \n    if num % 2 == 0: \n        return \"even\"\n    else: \n        return \"odd\" \n  \nprint(classifyNumber(3))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python for the classification of numbers into even or odd.\n\n### Input:\n3\n\n### Output:\ndef classifyNumber(num): \n    if num % 2 == 0: \n        return \"even\"\n    else: \n        return \"odd\" \n  \nprint(classifyNumber(3))"
    },
    {
        "instruction": "Create a program in Python to calculate the factorial of any given non-negative number n.",
        "input": "",
        "output": "def factorial(n):\n  factorial = 1\n  while n > 0:\n    factorial *= n\n    n -= 1\n  return factorial",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to calculate the factorial of any given non-negative number n.\n\n### Input:\n\n\n### Output:\ndef factorial(n):\n  factorial = 1\n  while n > 0:\n    factorial *= n\n    n -= 1\n  return factorial"
    },
    {
        "instruction": "Convert the following linear programming problem into a standard form and write a Python program to solve it. \n\nMaximize: 2x + 3y\n\nSubject to the constraints:\n\nx + 2y \u2264 10\n3x - y \u2265 6",
        "input": "Not Applicable",
        "output": "import numpy as np\nfrom scipy.optimize import linprog\n\n# Transform the problem to standard form\nc = np.array([2, 3])\nA_ub = np.array([[1,2],[-3,1]])\nb_ub = np.array([10, -6])\n\n# Solve the problem\nres = linprog(-c, A_ub, b_ub)\n\n# Print the solution\nprint(res)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following linear programming problem into a standard form and write a Python program to solve it. \n\nMaximize: 2x + 3y\n\nSubject to the constraints:\n\nx + 2y \u2264 10\n3x - y \u2265 6\n\n### Input:\nNot Applicable\n\n### Output:\nimport numpy as np\nfrom scipy.optimize import linprog\n\n# Transform the problem to standard form\nc = np.array([2, 3])\nA_ub = np.array([[1,2],[-3,1]])\nb_ub = np.array([10, -6])\n\n# Solve the problem\nres = linprog(-c, A_ub, b_ub)\n\n# Print the solution\nprint(res)"
    },
    {
        "instruction": "Generate a Dockerfile for the following server configuration.",
        "input": "Python 3.8.5\nMySQL 5.7\nNginx 1.18.0",
        "output": "FROM python:3.8.5-slim\n\nRUN apt-get update\nRUN apt-get install -y mysql-server-5.7 nginx\n\nRUN service mysql start && \\\n\tmysql -e \"CREATE DATABASE new_database;\"\n\t\nEXPOSE 80\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Dockerfile for the following server configuration.\n\n### Input:\nPython 3.8.5\nMySQL 5.7\nNginx 1.18.0\n\n### Output:\nFROM python:3.8.5-slim\n\nRUN apt-get update\nRUN apt-get install -y mysql-server-5.7 nginx\n\nRUN service mysql start && \\\n\tmysql -e \"CREATE DATABASE new_database;\"\n\t\nEXPOSE 80\n\nCMD [\"nginx\", \"-g\", \"daemon off;\"]"
    },
    {
        "instruction": "Fix the errors in this piece of Python code to make this correctly output \"1 2 3 4 5\".",
        "input": "the_list = [1,2,3,4,5]\n\nfor i in range (len(the_list); i++)\n    print(the_list[i])",
        "output": "the_list = [1,2,3,4,5]\n\nfor i in range (len(the_list)):\n    print(the_list[i])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFix the errors in this piece of Python code to make this correctly output \"1 2 3 4 5\".\n\n### Input:\nthe_list = [1,2,3,4,5]\n\nfor i in range (len(the_list); i++)\n    print(the_list[i])\n\n### Output:\nthe_list = [1,2,3,4,5]\n\nfor i in range (len(the_list)):\n    print(the_list[i])"
    },
    {
        "instruction": "Write a Python script that can clean noisy text data, by removing special characters and translating text to lowercase.",
        "input": "Not applicable",
        "output": "import re\n\n# Read in the data\ntext = open('noisy.txt').read()\n\n# Clean the data by removing special characters and translating to lowercase\nclean_text = re.sub(r\"[^a-zA-Z0-9\\s]\", \"\", text).lower()\n\n# Print the cleaned text\nprint(clean_text)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that can clean noisy text data, by removing special characters and translating text to lowercase.\n\n### Input:\nNot applicable\n\n### Output:\nimport re\n\n# Read in the data\ntext = open('noisy.txt').read()\n\n# Clean the data by removing special characters and translating to lowercase\nclean_text = re.sub(r\"[^a-zA-Z0-9\\s]\", \"\", text).lower()\n\n# Print the cleaned text\nprint(clean_text)"
    },
    {
        "instruction": "Create a basic game in Python using Pygame.",
        "input": "Not applicable",
        "output": "import pygame\nimport time\n \n# defines the size of the window\nWINDOW_SIZE = (400, 400)\n \n# initializes pygame\npygame.init()\nscreen = pygame.display.set_mode(WINDOW_SIZE)\n \n# game parameters\ndone = False\nclock = pygame.time.Clock()\n\n# game loop\nwhile not done:\n # gets all events\n for event in pygame.event.get():\n  if event.type == pygame.QUIT:\n   done = True\n  \n  if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:\n   done = True \n\n # draw something\n pygame.draw.rect(screen, (255, 20, 147), pygame.Rect(30, 30, 60, 60))\n \n # updates the display\n pygame.display.flip()\n \n # delays the loop iteration\n time.sleep(1/30)\n \n# terminate pygame\npygame.quit()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a basic game in Python using Pygame.\n\n### Input:\nNot applicable\n\n### Output:\nimport pygame\nimport time\n \n# defines the size of the window\nWINDOW_SIZE = (400, 400)\n \n# initializes pygame\npygame.init()\nscreen = pygame.display.set_mode(WINDOW_SIZE)\n \n# game parameters\ndone = False\nclock = pygame.time.Clock()\n\n# game loop\nwhile not done:\n # gets all events\n for event in pygame.event.get():\n  if event.type == pygame.QUIT:\n   done = True\n  \n  if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE:\n   done = True \n\n # draw something\n pygame.draw.rect(screen, (255, 20, 147), pygame.Rect(30, 30, 60, 60))\n \n # updates the display\n pygame.display.flip()\n \n # delays the loop iteration\n time.sleep(1/30)\n \n# terminate pygame\npygame.quit()"
    },
    {
        "instruction": "This code fetches videos from a YouTube channel and merges them with an existing JSON file. To use this code, you need to provide an output file path, a YouTube API key, and optionally set flags for video visibility and updating. You can also specify which video attributes to update. Once you have provided the necessary arguments, the code will fetch videos from the specified channel, extract relevant data, and merge it with the existing JSON file. Finally, the updated JSON file will be saved to the specified output file path.",
        "input": "",
        "output": "#!/usr/bin/python\n\n#  Copyright \u00a9 2015-2019 Cask Data, Inc.\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n\nimport argparse\nimport os\nimport json\nfrom youtube import API\n\nMAX_RESULTS = 50\nCHANNEL_ID='UCfkRcekMTa5GA2DdNKba7Jg'\n\napi = None\n\ndef search_videos(page_token):\n  return api.get('search', part='id,snippet', channelId=CHANNEL_ID, maxResults=MAX_RESULTS, pageToken=page_token, type='video')\n\ndef video_preview(video):\n  preview_size = ['maxres', 'high', 'medium', 'standard', 'default']\n  thumbnails = video['snippet']['thumbnails']\n  preview = ''\n  for size in preview_size:\n    if size in thumbnails:\n      preview = thumbnails[size]['url']\n      break\n  return preview\n\ndef extract_video_data(video):\n  preview = ''\n  video_data = {}\n  video_data['videoId'] = video['id']['videoId']\n  video_data['title'] = video['snippet']['title']\n  video_data['description'] = video['snippet']['description']\n  video_data['preview'] = video_preview(video)\n  return video_data\n\ndef fetch_videos():\n  all_videos = []\n  total_items = MAX_RESULTS\n  page_token = ''\n  while page_token is not None:\n    response = search_videos(page_token)\n    if 'nextPageToken' in response:\n      all_videos = all_videos + list(map(extract_video_data, response['items']))\n      page_token = response['nextPageToken']\n    else:\n      page_token = None\n\n  return all_videos\n\ndef get_original_videos(path):\n  try:\n    with open(path) as video_file:\n      return json.load(video_file)\n  except:\n    print('File not found: %s. Will create new one.' % path)\n    return {\n      'videos': []\n    }\n\ndef merge_videos(original_videos, youtube_videos, visible, update, update_props):\n  props = update_props.split(',')\n  marked = []\n  for video in youtube_videos:\n    matched_video = next((v for v in original_videos['videos'] if v['videoId'] == video['videoId']), None)\n    if matched_video is None:\n      marked = [video['videoId']] + marked\n      video['visible'] = visible\n      original_videos['videos'] = [video] + original_videos['videos']\n      print('Added new video:\\n Link: https://www.youtube.com/watch?v=%s \\n Title: %s \\n' % (video['videoId'], video['title']) )\n    else:\n      marked = [video['videoId']] + marked\n      if update is not False:\n        for prop in props:\n          matched_video[prop] = video[prop]\n  original_videos['videos'] = list(filter(lambda v: v['videoId'] in marked, original_videos['videos']))\n  return original_videos\n\ndef save_videos(data, file_path):\n  with open(file_path, 'w') as outfile:\n    json.dump(data, outfile, indent=2)\n\ndef main():\n  parser = argparse.ArgumentParser()\n  parser.add_argument('-o', '--output', help='Absolute path to output file. Output file can exist.', required=True)\n  parser.add_argument('-k', '--api-key', help='Youtube API key.', required=True)\n  parser.add_argument('-v', '--visible', help='Append new videos as visible.', default=False)\n  parser.add_argument('-u', '--update', help='Update video in output file if it exists.', default=False)\n  parser.add_argument('--update-attributes', '--update-attributes', help='Comma separated list of attributes allowed to update. Works only when --update flag is true', default='description,title,preview')\n  args = parser.parse_args()\n\n  global api\n  api = API(api_key=args.api_key, client_secret='', client_id='')\n\n  original_videos = get_original_videos(args.output)\n  youtube_videos = fetch_videos()\n  merged_videos = merge_videos(original_videos, youtube_videos, args.visible, args.update, args.update_attributes)\n  save_videos(merged_videos, args.output)\n\nif __name__ == '__main__':\n  main()\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code fetches videos from a YouTube channel and merges them with an existing JSON file. To use this code, you need to provide an output file path, a YouTube API key, and optionally set flags for video visibility and updating. You can also specify which video attributes to update. Once you have provided the necessary arguments, the code will fetch videos from the specified channel, extract relevant data, and merge it with the existing JSON file. Finally, the updated JSON file will be saved to the specified output file path.\n\n### Input:\n\n\n### Output:\n#!/usr/bin/python\n\n#  Copyright \u00a9 2015-2019 Cask Data, Inc.\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n\nimport argparse\nimport os\nimport json\nfrom youtube import API\n\nMAX_RESULTS = 50\nCHANNEL_ID='UCfkRcekMTa5GA2DdNKba7Jg'\n\napi = None\n\ndef search_videos(page_token):\n  return api.get('search', part='id,snippet', channelId=CHANNEL_ID, maxResults=MAX_RESULTS, pageToken=page_token, type='video')\n\ndef video_preview(video):\n  preview_size = ['maxres', 'high', 'medium', 'standard', 'default']\n  thumbnails = video['snippet']['thumbnails']\n  preview = ''\n  for size in preview_size:\n    if size in thumbnails:\n      preview = thumbnails[size]['url']\n      break\n  return preview\n\ndef extract_video_data(video):\n  preview = ''\n  video_data = {}\n  video_data['videoId'] = video['id']['videoId']\n  video_data['title'] = video['snippet']['title']\n  video_data['description'] = video['snippet']['description']\n  video_data['preview'] = video_preview(video)\n  return video_data\n\ndef fetch_videos():\n  all_videos = []\n  total_items = MAX_RESULTS\n  page_token = ''\n  while page_token is not None:\n    response = search_videos(page_token)\n    if 'nextPageToken' in response:\n      all_videos = all_videos + list(map(extract_video_data, response['items']))\n      page_token = response['nextPageToken']\n    else:\n      page_token = None\n\n  return all_videos\n\ndef get_original_videos(path):\n  try:\n    with open(path) as video_file:\n      return json.load(video_file)\n  except:\n    print('File not found: %s. Will create new one.' % path)\n    return {\n      'videos': []\n    }\n\ndef merge_videos(original_videos, youtube_videos, visible, update, update_props):\n  props = update_props.split(',')\n  marked = []\n  for video in youtube_videos:\n    matched_video = next((v for v in original_videos['videos'] if v['videoId'] == video['videoId']), None)\n    if matched_video is None:\n      marked = [video['videoId']] + marked\n      video['visible'] = visible\n      original_videos['videos'] = [video] + original_videos['videos']\n      print('Added new video:\\n Link: https://www.youtube.com/watch?v=%s \\n Title: %s \\n' % (video['videoId'], video['title']) )\n    else:\n      marked = [video['videoId']] + marked\n      if update is not False:\n        for prop in props:\n          matched_video[prop] = video[prop]\n  original_videos['videos'] = list(filter(lambda v: v['videoId'] in marked, original_videos['videos']))\n  return original_videos\n\ndef save_videos(data, file_path):\n  with open(file_path, 'w') as outfile:\n    json.dump(data, outfile, indent=2)\n\ndef main():\n  parser = argparse.ArgumentParser()\n  parser.add_argument('-o', '--output', help='Absolute path to output file. Output file can exist.', required=True)\n  parser.add_argument('-k', '--api-key', help='Youtube API key.', required=True)\n  parser.add_argument('-v', '--visible', help='Append new videos as visible.', default=False)\n  parser.add_argument('-u', '--update', help='Update video in output file if it exists.', default=False)\n  parser.add_argument('--update-attributes', '--update-attributes', help='Comma separated list of attributes allowed to update. Works only when --update flag is true', default='description,title,preview')\n  args = parser.parse_args()\n\n  global api\n  api = API(api_key=args.api_key, client_secret='', client_id='')\n\n  original_videos = get_original_videos(args.output)\n  youtube_videos = fetch_videos()\n  merged_videos = merge_videos(original_videos, youtube_videos, args.visible, args.update, args.update_attributes)\n  save_videos(merged_videos, args.output)\n\nif __name__ == '__main__':\n  main()\n"
    },
    {
        "instruction": "Create a program in Python that takes a list as input and returns a new list with every element doubled.",
        "input": "[1, 2, 3, 4]",
        "output": "def double_list(numbers):\n    doubled_list = []\n    for num in numbers:\n        doubled_list.append(num*2)\n    return doubled_list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes a list as input and returns a new list with every element doubled.\n\n### Input:\n[1, 2, 3, 4]\n\n### Output:\ndef double_list(numbers):\n    doubled_list = []\n    for num in numbers:\n        doubled_list.append(num*2)\n    return doubled_list"
    },
    {
        "instruction": "Using TinyDB, create a Python program for storing and searching values in a database.",
        "input": "Not Applicable",
        "output": "from tinydb import TinyDB, Query\n\n# Initialize database\ndb = TinyDB('my_db.json')\n\n# Insert data\ndb.insert({'name': 'John', 'age': 30, 'city': 'New York'})\ndb.insert({'name': 'Adam', 'age': 25, 'city': 'London'})\n\n# Fetch data\nsearch_results = db.search(Query().name == 'John')\nprint(search_results)  # [{'name': 'John', 'age': 30, 'city': 'New York'}]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing TinyDB, create a Python program for storing and searching values in a database.\n\n### Input:\nNot Applicable\n\n### Output:\nfrom tinydb import TinyDB, Query\n\n# Initialize database\ndb = TinyDB('my_db.json')\n\n# Insert data\ndb.insert({'name': 'John', 'age': 30, 'city': 'New York'})\ndb.insert({'name': 'Adam', 'age': 25, 'city': 'London'})\n\n# Fetch data\nsearch_results = db.search(Query().name == 'John')\nprint(search_results)  # [{'name': 'John', 'age': 30, 'city': 'New York'}]"
    },
    {
        "instruction": "Implement a Python program to find the length of a given string.",
        "input": "string = \"Hello World\"",
        "output": "def stringLength(string):\n    return len(string)\n\nresult = stringLength(\"Hello World\")\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python program to find the length of a given string.\n\n### Input:\nstring = \"Hello World\"\n\n### Output:\ndef stringLength(string):\n    return len(string)\n\nresult = stringLength(\"Hello World\")\nprint(result)"
    },
    {
        "instruction": "Suppose a list contains two fields namely name and address. Build a quick-sort algorithm in Python to sort the data on the basis of the name field.",
        "input": "[\n     {\"name\": \"John\", \"address\": \"123 Main Street\"},\n     {\"name\": \"Adam\", \"address\": \"456 First Avenue\"},\n     {\"name\": \"Mike\", \"address\": \"789 Street Street\"}\n]",
        "output": "def swap(list, i, j):\n temp = list[i]\n list[i] = list[j]\n list[j] = temp\n\ndef quickSort(list, key):\n if len(list) <= 1:\n  return list\n\n pivot = len(list) // 2\n pivotVal = list[pivot][key]\n \n less = [x for x in list if x[key] < pivotVal]\n equal = [x for x in list if x[key] == pivotVal]\n more = [x for x in list if x[key] > pivotVal]\n \n return quickSort(less, key) + equal + quickSort(more, key)\n\nlist = [\n     {\"name\": \"John\", \"address\": \"123 Main Street\"},\n     {\"name\": \"Adam\", \"address\": \"456 First Avenue\"},\n     {\"name\": \"Mike\", \"address\": \"789 Street Street\"}\n]\nsortedList = quickSort(list, \"name\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuppose a list contains two fields namely name and address. Build a quick-sort algorithm in Python to sort the data on the basis of the name field.\n\n### Input:\n[\n     {\"name\": \"John\", \"address\": \"123 Main Street\"},\n     {\"name\": \"Adam\", \"address\": \"456 First Avenue\"},\n     {\"name\": \"Mike\", \"address\": \"789 Street Street\"}\n]\n\n### Output:\ndef swap(list, i, j):\n temp = list[i]\n list[i] = list[j]\n list[j] = temp\n\ndef quickSort(list, key):\n if len(list) <= 1:\n  return list\n\n pivot = len(list) // 2\n pivotVal = list[pivot][key]\n \n less = [x for x in list if x[key] < pivotVal]\n equal = [x for x in list if x[key] == pivotVal]\n more = [x for x in list if x[key] > pivotVal]\n \n return quickSort(less, key) + equal + quickSort(more, key)\n\nlist = [\n     {\"name\": \"John\", \"address\": \"123 Main Street\"},\n     {\"name\": \"Adam\", \"address\": \"456 First Avenue\"},\n     {\"name\": \"Mike\", \"address\": \"789 Street Street\"}\n]\nsortedList = quickSort(list, \"name\")"
    },
    {
        "instruction": "Generate a Python code to find all substrings in a given string.",
        "input": "",
        "output": "def find_all_substrings(string):\n    substrings = []\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            substrings.append(string[i:j])\n    return substrings",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code to find all substrings in a given string.\n\n### Input:\n\n\n### Output:\ndef find_all_substrings(string):\n    substrings = []\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            substrings.append(string[i:j])\n    return substrings"
    },
    {
        "instruction": "Write a Python program to generate a list of the first 10 Fibonacci numbers, starting from 0.",
        "input": "",
        "output": "def generate_fibonacci_list(n):\n    fibonacci = [0, 1]\n    for _ in range(2, n):\n        fibonacci.append(fibonacci[-2] + fibonacci[-1])\n    return fibonacci\n\nfibonacci_list = generate_fibonacci_list(10)\nprint(fibonacci_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a list of the first 10 Fibonacci numbers, starting from 0.\n\n### Input:\n\n\n### Output:\ndef generate_fibonacci_list(n):\n    fibonacci = [0, 1]\n    for _ in range(2, n):\n        fibonacci.append(fibonacci[-2] + fibonacci[-1])\n    return fibonacci\n\nfibonacci_list = generate_fibonacci_list(10)\nprint(fibonacci_list)"
    },
    {
        "instruction": "Create a program in Python to ask the user for a number and then generate a list of prime numbers up to that given number",
        "input": "",
        "output": "def find_prime_numbers(n):\n    # Ask the user for a number\n    user_input = int(input(\"Please enter a number: \"))\n    \n    primes = []\n    \n    for i in range(2, user_input + 1):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to ask the user for a number and then generate a list of prime numbers up to that given number\n\n### Input:\n\n\n### Output:\ndef find_prime_numbers(n):\n    # Ask the user for a number\n    user_input = int(input(\"Please enter a number: \"))\n    \n    primes = []\n    \n    for i in range(2, user_input + 1):\n        if is_prime(i):\n            primes.append(i)\n    \n    return primes\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
    },
    {
        "instruction": "Create a loop structure in python code to perform the following task",
        "input": "Calculate the total number of words in a given paragraph.",
        "output": "words = para.split(' ')\ntotal = 0\nfor word in words:\n    total += 1\nprint(total)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a loop structure in python code to perform the following task\n\n### Input:\nCalculate the total number of words in a given paragraph.\n\n### Output:\nwords = para.split(' ')\ntotal = 0\nfor word in words:\n    total += 1\nprint(total)"
    },
    {
        "instruction": "Write a Python script to calculate the average age of a group of people.",
        "input": "[{'name': 'John', 'age': 25}, {'name': 'Mia', 'age': 28}, {'name': 'Jack', 'age': 33}]",
        "output": "people = [\n    {'name': 'John', 'age': 25}, \n    {'name': 'Mia', 'age': 28}, \n    {'name': 'Jack', 'age': 33}\n]\n\ntotal_age = 0\n\nfor person in people:\n    total_age += person['age']\n\naverage_age = total_age / len(people)\n\nprint(\"Average age: {}\".format(average_age))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to calculate the average age of a group of people.\n\n### Input:\n[{'name': 'John', 'age': 25}, {'name': 'Mia', 'age': 28}, {'name': 'Jack', 'age': 33}]\n\n### Output:\npeople = [\n    {'name': 'John', 'age': 25}, \n    {'name': 'Mia', 'age': 28}, \n    {'name': 'Jack', 'age': 33}\n]\n\ntotal_age = 0\n\nfor person in people:\n    total_age += person['age']\n\naverage_age = total_age / len(people)\n\nprint(\"Average age: {}\".format(average_age))"
    },
    {
        "instruction": "Combine the given lists in Python and sort the result in ascending order.",
        "input": "list1 = [10, 20, 40, 60, 70, 80]\nlist2 = [5, 15, 25, 35, 45, 60]",
        "output": "# combine the two lists\ncombined_list = list1 + list2\n\n# sort the list in ascending order\ncombined_list.sort() \nprint(combined_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCombine the given lists in Python and sort the result in ascending order.\n\n### Input:\nlist1 = [10, 20, 40, 60, 70, 80]\nlist2 = [5, 15, 25, 35, 45, 60]\n\n### Output:\n# combine the two lists\ncombined_list = list1 + list2\n\n# sort the list in ascending order\ncombined_list.sort() \nprint(combined_list)"
    },
    {
        "instruction": "Design a Python function to sort a list of strings by their first character alphabetically.",
        "input": "[\"yesterday\", \"today\", \"tomorrow\"]",
        "output": "def sort_list_by_first_char(strings):\n    return sorted(strings, key=lambda s: s[0])\n\nstrings = [\"yesterday\", \"today\", \"tomorrow\"]\nprint(sort_list_by_first_char(strings))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python function to sort a list of strings by their first character alphabetically.\n\n### Input:\n[\"yesterday\", \"today\", \"tomorrow\"]\n\n### Output:\ndef sort_list_by_first_char(strings):\n    return sorted(strings, key=lambda s: s[0])\n\nstrings = [\"yesterday\", \"today\", \"tomorrow\"]\nprint(sort_list_by_first_char(strings))"
    },
    {
        "instruction": "Implement an algorithm in Python for estimating the distance between two points using the haversine formula.",
        "input": "Not applicable",
        "output": "import math\n\ndef haversine(point1, point2):\n # Calculate the latitude and longitude distances\n lat1, lon1 = point1\n lat2, lon2 = point2\n lat_dist = math.radians(lat2 - lat1)\n lon_dist = math.radians(lon2 - lon1)\n\n # Use the haversine formula\n a = math.sin(lat_dist / 2)**2 + math.cos(math.radians(lat1)) * \\\n     math.cos(math.radians(lat2)) * math.sin(lon_dist / 2)**2\n c = 2 * math.asin(math.sqrt(a))\n return 6371 * c",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm in Python for estimating the distance between two points using the haversine formula.\n\n### Input:\nNot applicable\n\n### Output:\nimport math\n\ndef haversine(point1, point2):\n # Calculate the latitude and longitude distances\n lat1, lon1 = point1\n lat2, lon2 = point2\n lat_dist = math.radians(lat2 - lat1)\n lon_dist = math.radians(lon2 - lon1)\n\n # Use the haversine formula\n a = math.sin(lat_dist / 2)**2 + math.cos(math.radians(lat1)) * \\\n     math.cos(math.radians(lat2)) * math.sin(lon_dist / 2)**2\n c = 2 * math.asin(math.sqrt(a))\n return 6371 * c"
    },
    {
        "instruction": "Edit the following Python code to add exception handling for user input.",
        "input": "name = input('What is your name? ')\nprint('Hello, ' + name)",
        "output": "try:\n  name = input('What is your name? ')\n  print('Hello, ' + name)\nexcept:\n  print('There was an error parsing your name.')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code to add exception handling for user input.\n\n### Input:\nname = input('What is your name? ')\nprint('Hello, ' + name)\n\n### Output:\ntry:\n  name = input('What is your name? ')\n  print('Hello, ' + name)\nexcept:\n  print('There was an error parsing your name.')"
    },
    {
        "instruction": "Create a python program to find the length of the longest common subsequence",
        "input": "x = 'abcde'\ny = 'acefgh'",
        "output": "def lcs(x,y): \n    m = len(x) \n    n = len(y) \t\n  \n    L = [[0]*(n+1) for i in range(m+1)] \n  \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif x[i-1] == y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    return L[m][n]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to find the length of the longest common subsequence\n\n### Input:\nx = 'abcde'\ny = 'acefgh'\n\n### Output:\ndef lcs(x,y): \n    m = len(x) \n    n = len(y) \t\n  \n    L = [[0]*(n+1) for i in range(m+1)] \n  \n    for i in range(m+1): \n        for j in range(n+1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif x[i-1] == y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    return L[m][n]"
    },
    {
        "instruction": "To install the OpenCensus Requests Integration package, run the following code in Python: \n\n```\nfrom setuptools import find_packages, setup\n\nfrom version import __version__\n\nsetup(\n    name='opencensus-ext-requests',\n    version=__version__,\n    author='OpenCensus Authors',\n    author_email='census-developers@googlegroups.com',\n    classifiers=[\n        'Intended Audience :: Developers',\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n    ],\n    description='OpenCensus Requests Integration',\n    include_package_data=True,\n    long_description=open('README.rst').read(),\n    install_requires=[\n        'opencensus >= 0.8.dev0, < 1.0.0',\n        'wrapt >= 1.0.0, < 2.0.0',\n    ],\n    extras_require={},\n    license='Apache-2.0',\n    packages=find_packages(exclude=('tests',)),\n    namespace_packages=[],\n    url='https://github.com/census-instrumentation/opencensus-python/tree/master/contrib/opencensus-ext-requests',\n    zip_safe=False,\n)\n```",
        "input": "",
        "output": "# Copyright 2019, OpenCensus Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom setuptools import find_packages, setup\n\nfrom version import __version__\n\nsetup(\n    name='opencensus-ext-requests',\n    version=__version__,  # noqa\n    author='OpenCensus Authors',\n    author_email='census-developers@googlegroups.com',\n    classifiers=[\n        'Intended Audience :: Developers',\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n    ],\n    description='OpenCensus Requests Integration',\n    include_package_data=True,\n    long_description=open('README.rst').read(),\n    install_requires=[\n        'opencensus >= 0.8.dev0, < 1.0.0',\n        'wrapt >= 1.0.0, < 2.0.0',\n    ],\n    extras_require={},\n    license='Apache-2.0',\n    packages=find_packages(exclude=('tests',)),\n    namespace_packages=[],\n    url='https://github.com/census-instrumentation/opencensus-python/tree/master/contrib/opencensus-ext-requests',  # noqa: E501\n    zip_safe=False,\n)\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTo install the OpenCensus Requests Integration package, run the following code in Python: \n\n```\nfrom setuptools import find_packages, setup\n\nfrom version import __version__\n\nsetup(\n    name='opencensus-ext-requests',\n    version=__version__,\n    author='OpenCensus Authors',\n    author_email='census-developers@googlegroups.com',\n    classifiers=[\n        'Intended Audience :: Developers',\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n    ],\n    description='OpenCensus Requests Integration',\n    include_package_data=True,\n    long_description=open('README.rst').read(),\n    install_requires=[\n        'opencensus >= 0.8.dev0, < 1.0.0',\n        'wrapt >= 1.0.0, < 2.0.0',\n    ],\n    extras_require={},\n    license='Apache-2.0',\n    packages=find_packages(exclude=('tests',)),\n    namespace_packages=[],\n    url='https://github.com/census-instrumentation/opencensus-python/tree/master/contrib/opencensus-ext-requests',\n    zip_safe=False,\n)\n```\n\n### Input:\n\n\n### Output:\n# Copyright 2019, OpenCensus Authors\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom setuptools import find_packages, setup\n\nfrom version import __version__\n\nsetup(\n    name='opencensus-ext-requests',\n    version=__version__,  # noqa\n    author='OpenCensus Authors',\n    author_email='census-developers@googlegroups.com',\n    classifiers=[\n        'Intended Audience :: Developers',\n        'Development Status :: 3 - Alpha',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: Apache Software License',\n        'Programming Language :: Python',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n        'Programming Language :: Python :: 3',\n        'Programming Language :: Python :: 3.4',\n        'Programming Language :: Python :: 3.5',\n        'Programming Language :: Python :: 3.6',\n        'Programming Language :: Python :: 3.7',\n    ],\n    description='OpenCensus Requests Integration',\n    include_package_data=True,\n    long_description=open('README.rst').read(),\n    install_requires=[\n        'opencensus >= 0.8.dev0, < 1.0.0',\n        'wrapt >= 1.0.0, < 2.0.0',\n    ],\n    extras_require={},\n    license='Apache-2.0',\n    packages=find_packages(exclude=('tests',)),\n    namespace_packages=[],\n    url='https://github.com/census-instrumentation/opencensus-python/tree/master/contrib/opencensus-ext-requests',  # noqa: E501\n    zip_safe=False,\n)\n"
    },
    {
        "instruction": "Generate python code to rotate an array to the left.",
        "input": "arr = [1, 2, 3, 4, 5]",
        "output": "def rotate_left(arr):\n    first_element = arr[0]\n    for i in range(len(arr) - 1):\n        arr[i] = arr[i + 1]\n    arr[len(arr) - 1] = first_element\n\nrotate_left(arr)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate python code to rotate an array to the left.\n\n### Input:\narr = [1, 2, 3, 4, 5]\n\n### Output:\ndef rotate_left(arr):\n    first_element = arr[0]\n    for i in range(len(arr) - 1):\n        arr[i] = arr[i + 1]\n    arr[len(arr) - 1] = first_element\n\nrotate_left(arr)"
    },
    {
        "instruction": "Create a code that can be run in both Python and Java to find the sum of all the elements in a given array.",
        "input": "[3, 4, 7, 2, 6]",
        "output": "def sumArray(arr):\n    sum = 0\n    for x in arr:\n        sum += x\n    return sum\n\npublic static int sumArray(int[] arr) {\n    int sum = 0;\n    for(int ele : arr) {\n        sum += ele;\n    }\n    return sum;\n}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code that can be run in both Python and Java to find the sum of all the elements in a given array.\n\n### Input:\n[3, 4, 7, 2, 6]\n\n### Output:\ndef sumArray(arr):\n    sum = 0\n    for x in arr:\n        sum += x\n    return sum\n\npublic static int sumArray(int[] arr) {\n    int sum = 0;\n    for(int ele : arr) {\n        sum += ele;\n    }\n    return sum;\n}"
    },
    {
        "instruction": "Generate Python code to remove all punctuation from the given string.",
        "input": "String: This, is a test-string.",
        "output": "import string\n\nstr = \"This, is a test-string.\"\nstr = str.translate(str.maketrans('', '', string.punctuation))\nprint(str)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate Python code to remove all punctuation from the given string.\n\n### Input:\nString: This, is a test-string.\n\n### Output:\nimport string\n\nstr = \"This, is a test-string.\"\nstr = str.translate(str.maketrans('', '', string.punctuation))\nprint(str)"
    },
    {
        "instruction": "Create a Python program to die arbitary shape black and white using matplotlib",
        "input": "Not applicable",
        "output": "import matplotlib.pyplot as plt\n\n# Generating random coordinates\nx = np.random.randint(0,100,100)\ny = np.random.randint(0,100,100)\n\n# Use the coordinates to plot a black and white shape\nplt.scatter(x, y, c='black')\nplt.fill_between(x, y, color='white')\nplt.show()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to die arbitary shape black and white using matplotlib\n\n### Input:\nNot applicable\n\n### Output:\nimport matplotlib.pyplot as plt\n\n# Generating random coordinates\nx = np.random.randint(0,100,100)\ny = np.random.randint(0,100,100)\n\n# Use the coordinates to plot a black and white shape\nplt.scatter(x, y, c='black')\nplt.fill_between(x, y, color='white')\nplt.show()"
    },
    {
        "instruction": "Develop a Python program to generate a set of random numbers from 1 to 100 with no duplicates.",
        "input": "",
        "output": "import random\n\ndef generate_random_numbers():\n    random_numbers = set()\n    while len(random_numbers) < 100: \n        random_numbers.add(random.randint(1, 100)) \n\n    return random_numbers",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to generate a set of random numbers from 1 to 100 with no duplicates.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_random_numbers():\n    random_numbers = set()\n    while len(random_numbers) < 100: \n        random_numbers.add(random.randint(1, 100)) \n\n    return random_numbers"
    },
    {
        "instruction": "Edit an existing Python script so that it prints the sum of two numbers, instead of only the first number.",
        "input": "a = 4\nb = 8\nprint(a)",
        "output": "a = 4\nb = 8\nprint(a + b)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit an existing Python script so that it prints the sum of two numbers, instead of only the first number.\n\n### Input:\na = 4\nb = 8\nprint(a)\n\n### Output:\na = 4\nb = 8\nprint(a + b)"
    },
    {
        "instruction": "Build a web application in python to display the current temperature in Fahrenheit.",
        "input": "",
        "output": "from flask import Flask, request \nfrom requests import get \n\napp = Flask(__name__) \n\n@app.route('/', methods=['GET']) \ndef home():\n    api_key = # API key for open weather API\n    url = f'http://api.openweathermap.org/data/2.5/weather?q=current&units=imperial&APPID={api_key}'\n    output = request.get(url).json()\n    temp = output['main']['temp']\n    return f\"The current temperature in Fahrenheit is {temp} F\"\nif __name__ == '__main__': \n    app.run(debug=True, host='0.0.0.0', port=8989)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a web application in python to display the current temperature in Fahrenheit.\n\n### Input:\n\n\n### Output:\nfrom flask import Flask, request \nfrom requests import get \n\napp = Flask(__name__) \n\n@app.route('/', methods=['GET']) \ndef home():\n    api_key = # API key for open weather API\n    url = f'http://api.openweathermap.org/data/2.5/weather?q=current&units=imperial&APPID={api_key}'\n    output = request.get(url).json()\n    temp = output['main']['temp']\n    return f\"The current temperature in Fahrenheit is {temp} F\"\nif __name__ == '__main__': \n    app.run(debug=True, host='0.0.0.0', port=8989)"
    },
    {
        "instruction": "Write a python function to parse a url and extract its params into a dictionary.",
        "input": "",
        "output": "def parse_url(url): \n    res = dict()\n    elems = url.split(\"?\")[1].split(\"&\")\n    for elem in elems: \n        k, v = elem.split(\"=\")\n        res[k] = v\n    return res",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python function to parse a url and extract its params into a dictionary.\n\n### Input:\n\n\n### Output:\ndef parse_url(url): \n    res = dict()\n    elems = url.split(\"?\")[1].split(\"&\")\n    for elem in elems: \n        k, v = elem.split(\"=\")\n        res[k] = v\n    return res"
    },
    {
        "instruction": "Write a Python program to print all combinations of three numbers from the given list.",
        "input": "num_list = [1, 2, 3, 4]",
        "output": "import itertools \n  \n# initializing list \nnum_list = [1, 2, 3, 4] \n  \n# printing all possible combinations \nresult = itertools.combinations(num_list, 3) \n  \n# printing the result \nprint(\"All possible combinations are : \") \nfor item in result: \n    print(item)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print all combinations of three numbers from the given list.\n\n### Input:\nnum_list = [1, 2, 3, 4]\n\n### Output:\nimport itertools \n  \n# initializing list \nnum_list = [1, 2, 3, 4] \n  \n# printing all possible combinations \nresult = itertools.combinations(num_list, 3) \n  \n# printing the result \nprint(\"All possible combinations are : \") \nfor item in result: \n    print(item)"
    },
    {
        "instruction": "Create a Python function that takes in one integer argument and returns an integer with the absolute value.",
        "input": "number = -3",
        "output": "def getAbsoluteValue(number):\n    if (number < 0):\n        return number * -1\n    else:\n        return number\n\nprint(getAbsoluteValue(-3)) # Outputs 3",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes in one integer argument and returns an integer with the absolute value.\n\n### Input:\nnumber = -3\n\n### Output:\ndef getAbsoluteValue(number):\n    if (number < 0):\n        return number * -1\n    else:\n        return number\n\nprint(getAbsoluteValue(-3)) # Outputs 3"
    },
    {
        "instruction": "Write a python program that takes a list of numbers and prints out only the even numbers",
        "input": "[2, 4, 7, 14, 21]",
        "output": "for num in [2, 4, 7, 14, 21]: \n    if num % 2 == 0: \n        print(num, end = \" \")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that takes a list of numbers and prints out only the even numbers\n\n### Input:\n[2, 4, 7, 14, 21]\n\n### Output:\nfor num in [2, 4, 7, 14, 21]: \n    if num % 2 == 0: \n        print(num, end = \" \")"
    },
    {
        "instruction": "Write a Python function to create a sequence of numbers until the number 8",
        "input": "",
        "output": "def create_sequence():\n    i = 0\n    while i < 8:\n        yield i\n        i += 1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to create a sequence of numbers until the number 8\n\n### Input:\n\n\n### Output:\ndef create_sequence():\n    i = 0\n    while i < 8:\n        yield i\n        i += 1"
    },
    {
        "instruction": "Create a Python class to represent a person and its details.",
        "input": "",
        "output": "class Person:\n def __init__(self, name, age):\n  self.name = name\n  self.age = age\n\ndef describe_person(self): \n print(f\"Name: {self.name}, Age: {self.age}\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to represent a person and its details.\n\n### Input:\n\n\n### Output:\nclass Person:\n def __init__(self, name, age):\n  self.name = name\n  self.age = age\n\ndef describe_person(self): \n print(f\"Name: {self.name}, Age: {self.age}\")"
    },
    {
        "instruction": "Update the code snippet below so it works with Python 3.",
        "input": "def message():\n print \"Hello World!\"",
        "output": "def message():\n print(\"Hello World!\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUpdate the code snippet below so it works with Python 3.\n\n### Input:\ndef message():\n print \"Hello World!\"\n\n### Output:\ndef message():\n print(\"Hello World!\")"
    },
    {
        "instruction": "Create regular expression in Python to check for a valid hex color.",
        "input": "",
        "output": "import re\n\nHEX_COLOR_REGEX = re.compile(r'^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate regular expression in Python to check for a valid hex color.\n\n### Input:\n\n\n### Output:\nimport re\n\nHEX_COLOR_REGEX = re.compile(r'^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$')"
    },
    {
        "instruction": "Develop a command line interface using Python for the user to interact with a given database.",
        "input": "",
        "output": "import sqlite3\n\ndef get_connection():\n    # connects to a database given the database name\n    conn = sqlite3.connect(\"my_database.db\")\n    return conn\n\ndef run_command():\n    # takes a command from the user and runs it in the SQL database\n    query = input(\"Enter your command: \")\n    conn = get_connection()\n    c = conn.cursor()\n    c.execute(query)\n    results = c.fetchall()\n    conn.close()\n    return results\n\nif __name__ == '__main__':\n    results = run_command()\n    print(results)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a command line interface using Python for the user to interact with a given database.\n\n### Input:\n\n\n### Output:\nimport sqlite3\n\ndef get_connection():\n    # connects to a database given the database name\n    conn = sqlite3.connect(\"my_database.db\")\n    return conn\n\ndef run_command():\n    # takes a command from the user and runs it in the SQL database\n    query = input(\"Enter your command: \")\n    conn = get_connection()\n    c = conn.cursor()\n    c.execute(query)\n    results = c.fetchall()\n    conn.close()\n    return results\n\nif __name__ == '__main__':\n    results = run_command()\n    print(results)"
    },
    {
        "instruction": "Create a Python class for a TV Show with attributes for title, season number, episode number, and rating.",
        "input": "Not applicable",
        "output": "class TVShow:\n  def __init__ (self, title, season_number, episode_number, rating):\n    self.title = title\n    self.season_number = season_number\n    self.episode_number = episode_number\n    self.rating = rating\n    \n  def get_title(self):\n    return self.title\n  \n  def get_season_number(self):\n    return self.season_number\n  \n  def get_episode_number(self):\n    return self.episode_number\n  \n  def get_rating(self):\n    return self.rating",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for a TV Show with attributes for title, season number, episode number, and rating.\n\n### Input:\nNot applicable\n\n### Output:\nclass TVShow:\n  def __init__ (self, title, season_number, episode_number, rating):\n    self.title = title\n    self.season_number = season_number\n    self.episode_number = episode_number\n    self.rating = rating\n    \n  def get_title(self):\n    return self.title\n  \n  def get_season_number(self):\n    return self.season_number\n  \n  def get_episode_number(self):\n    return self.episode_number\n  \n  def get_rating(self):\n    return self.rating"
    },
    {
        "instruction": "Write an algorithm to find the intersection of two sorted arrays in Python.",
        "input": "a = [1, 5, 8, 9, 10], b = [2, 3, 5, 8, 9, 10]",
        "output": "def intersection(a, b): \nintersection_list = []\nfor item1 in a:\n    if item1 in b:\n        intersection_list.append(item1)\nreturn intersection_list\n\na = [1, 5, 8, 9, 10], b = [2, 3, 5, 8, 9, 10]\nprint(intersection(a,b))\n# Output: [5, 8, 9, 10]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to find the intersection of two sorted arrays in Python.\n\n### Input:\na = [1, 5, 8, 9, 10], b = [2, 3, 5, 8, 9, 10]\n\n### Output:\ndef intersection(a, b): \nintersection_list = []\nfor item1 in a:\n    if item1 in b:\n        intersection_list.append(item1)\nreturn intersection_list\n\na = [1, 5, 8, 9, 10], b = [2, 3, 5, 8, 9, 10]\nprint(intersection(a,b))\n# Output: [5, 8, 9, 10]"
    },
    {
        "instruction": "Compose a Python program for finding the maximum number from a given list of numbers.",
        "input": "list = [10, 11, 25, 80, 50]",
        "output": "def max_number(list):\n    max_num = 0\n    for i in list:\n        if i > max_num:\n            max_num = i\n    return max_num\n\nmax_num = max_number(list)\nprint(\"The maximum number is:\", max_num)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python program for finding the maximum number from a given list of numbers.\n\n### Input:\nlist = [10, 11, 25, 80, 50]\n\n### Output:\ndef max_number(list):\n    max_num = 0\n    for i in list:\n        if i > max_num:\n            max_num = i\n    return max_num\n\nmax_num = max_number(list)\nprint(\"The maximum number is:\", max_num)"
    },
    {
        "instruction": "Design a working Python-based chatbot.",
        "input": "Chatbot topic- Football",
        "output": "# import libraries \nimport random\nimport json \n\n# get user input \ndef get_input():\n    message = input('USER: ')\n    return message\n\n# respond to user \ndef respond(message):\n    if message in greetings:\n        return random.choice(greetings)\n    elif message in football:\n        return random.choice(football_responses)\n    else:\n        return random.choice(default_response)\n\n# define greetings \ngreetings = ['hello', 'hi', 'hey']\n\n# define football related terms \nfootball = ['football', 'messi', 'ronaldo', 'manchester united', 'chelsea']\n\n# define football responses \nfootball_responses = [\n    'Did you hear about the latest match?',\n    'Which player do you think is the best?',\n    'What team do you support?'\n]\n\n# define default responses \ndefault_response = [\n    'I am sorry, I do not understand what you said.',\n    'Can you please elaborate?',\n    'What do you mean?'\n]\n\n# start the chat \nwhile True:\n    message = get_input()\n    response = respond(message)\n    print('BOT:', response)\n    if message == 'quit':\n        break",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a working Python-based chatbot.\n\n### Input:\nChatbot topic- Football\n\n### Output:\n# import libraries \nimport random\nimport json \n\n# get user input \ndef get_input():\n    message = input('USER: ')\n    return message\n\n# respond to user \ndef respond(message):\n    if message in greetings:\n        return random.choice(greetings)\n    elif message in football:\n        return random.choice(football_responses)\n    else:\n        return random.choice(default_response)\n\n# define greetings \ngreetings = ['hello', 'hi', 'hey']\n\n# define football related terms \nfootball = ['football', 'messi', 'ronaldo', 'manchester united', 'chelsea']\n\n# define football responses \nfootball_responses = [\n    'Did you hear about the latest match?',\n    'Which player do you think is the best?',\n    'What team do you support?'\n]\n\n# define default responses \ndefault_response = [\n    'I am sorry, I do not understand what you said.',\n    'Can you please elaborate?',\n    'What do you mean?'\n]\n\n# start the chat \nwhile True:\n    message = get_input()\n    response = respond(message)\n    print('BOT:', response)\n    if message == 'quit':\n        break"
    },
    {
        "instruction": "Write a Python function to calculate the harmonic mean of two numbers.",
        "input": "7, 9",
        "output": "def harmonic_mean(x, y):\n    return 2.0 * (x * y) / (x + y)\n\nharmonic_mean_value = harmonic_mean(7, 9)\n\nprint(harmonic_mean_value)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to calculate the harmonic mean of two numbers.\n\n### Input:\n7, 9\n\n### Output:\ndef harmonic_mean(x, y):\n    return 2.0 * (x * y) / (x + y)\n\nharmonic_mean_value = harmonic_mean(7, 9)\n\nprint(harmonic_mean_value)"
    },
    {
        "instruction": "Generate an AI model for spam classification in Python.",
        "input": "",
        "output": "import numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import classification_report\n\n# Read the data \ndata = pd.read_csv('spam.csv')\n\n# Extract the features \nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(data['Message'].values).toarray()\n\n# Extract labels\ny = data['Label'].values\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=42)\n\n# Train a SVM classifier model\nsvc_model = SVC(kernel='linear')\nsvc_model.fit(X_train, y_train)\n\n# Evaluate the model performance \ny_pred = svc_model.predict(X_test)\nprint(classification_report(y_test, y_pred))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an AI model for spam classification in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import classification_report\n\n# Read the data \ndata = pd.read_csv('spam.csv')\n\n# Extract the features \nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(data['Message'].values).toarray()\n\n# Extract labels\ny = data['Label'].values\n\n# Split the data into training and test sets\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=42)\n\n# Train a SVM classifier model\nsvc_model = SVC(kernel='linear')\nsvc_model.fit(X_train, y_train)\n\n# Evaluate the model performance \ny_pred = svc_model.predict(X_test)\nprint(classification_report(y_test, y_pred))"
    },
    {
        "instruction": "Write a Python program to take in a string and reverse the given string using a while loop.",
        "input": "",
        "output": "def reverse_string(str):\n    str_rev = ''\n    i = len(str) - 1\n\n    while i >= 0:\n        str_rev += str[i]\n        i -= 1\n\n    return str_rev",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to take in a string and reverse the given string using a while loop.\n\n### Input:\n\n\n### Output:\ndef reverse_string(str):\n    str_rev = ''\n    i = len(str) - 1\n\n    while i >= 0:\n        str_rev += str[i]\n        i -= 1\n\n    return str_rev"
    },
    {
        "instruction": "Design a Python program to count the number of hops that a knight can make from a given square on a chessboard in a single move.",
        "input": "42 (For the chessboard position E3)",
        "output": "def count_knight_moves(position):\n    x = int(position / 10)\n    y = position % 10\n    count = 0 \n    \n    # Possible moves the knight can make \n    xmove = [-2, -2, -1, -1,  1, 1,  2, 2] \n    ymove = [-1,  1, -2,  2, -2, 2, -1, 1] \n      \n    # Check if knight is on the boundary \n    if x <= 0 or y <= 0 or x > 8 or y > 8:\n        return 0 \n      \n    for k in range(len(xmove)):\n        if (x + xmove[k] <= 8) and (y + ymove[k] <= 8): \n            count += 1\n             \n    return count \n\nposition = 42\nmoves = count_knight_moves(position)\nprint(\"The knight can make %d moves from E3\" %moves)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to count the number of hops that a knight can make from a given square on a chessboard in a single move.\n\n### Input:\n42 (For the chessboard position E3)\n\n### Output:\ndef count_knight_moves(position):\n    x = int(position / 10)\n    y = position % 10\n    count = 0 \n    \n    # Possible moves the knight can make \n    xmove = [-2, -2, -1, -1,  1, 1,  2, 2] \n    ymove = [-1,  1, -2,  2, -2, 2, -1, 1] \n      \n    # Check if knight is on the boundary \n    if x <= 0 or y <= 0 or x > 8 or y > 8:\n        return 0 \n      \n    for k in range(len(xmove)):\n        if (x + xmove[k] <= 8) and (y + ymove[k] <= 8): \n            count += 1\n             \n    return count \n\nposition = 42\nmoves = count_knight_moves(position)\nprint(\"The knight can make %d moves from E3\" %moves)"
    },
    {
        "instruction": "Write a Python program that parses and prints the value of the \"name\" field in a json string.",
        "input": "json_string = '{\"name\":\"John\", \"age\":20, \"city\":\"San Fransisco\"}'",
        "output": "import json\n\ndata = json.loads(json_string)\n\nprint(data['name'])\n\n# Output: John",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that parses and prints the value of the \"name\" field in a json string.\n\n### Input:\njson_string = '{\"name\":\"John\", \"age\":20, \"city\":\"San Fransisco\"}'\n\n### Output:\nimport json\n\ndata = json.loads(json_string)\n\nprint(data['name'])\n\n# Output: John"
    },
    {
        "instruction": "Design a Python script that can download all new articles from a specified online news source.",
        "input": "The URL of the online news source is: www.example.com/news.",
        "output": "import requests\nimport bs4\n\ndef download_news(url):\n    r = requests.get(url)\n    soup = bs4.BeautifulSoup(r.content, 'lxml')\n    links = [link.get('href') for link in soup.find_all('a')]\n    \n    for link in links:\n        r = requests.get(link)\n        download_name = link.split('/')[-1]\n        with open(download_name, 'w') as f:\n            f.write(r.text)\n            print(\"Downloaded article:\", download_name)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script that can download all new articles from a specified online news source.\n\n### Input:\nThe URL of the online news source is: www.example.com/news.\n\n### Output:\nimport requests\nimport bs4\n\ndef download_news(url):\n    r = requests.get(url)\n    soup = bs4.BeautifulSoup(r.content, 'lxml')\n    links = [link.get('href') for link in soup.find_all('a')]\n    \n    for link in links:\n        r = requests.get(link)\n        download_name = link.split('/')[-1]\n        with open(download_name, 'w') as f:\n            f.write(r.text)\n            print(\"Downloaded article:\", download_name)"
    },
    {
        "instruction": "Write a piece of python code to multipy each element in a list by 10.",
        "input": "[1,2,3,4]",
        "output": "lst=[1,2,3,4]\nfor i in range(len(lst)):\n    lst[i] = lst[i]*10\nprint(lst)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a piece of python code to multipy each element in a list by 10.\n\n### Input:\n[1,2,3,4]\n\n### Output:\nlst=[1,2,3,4]\nfor i in range(len(lst)):\n    lst[i] = lst[i]*10\nprint(lst)"
    },
    {
        "instruction": "Transform a Gradient Descent algorithm in Python to work with First Order Updates instead.",
        "input": "def gradient_descent(x, y, iters=1000, lr=0.01):\n    m = b = 0\n    n = len(x)\n\n    for i in range(iters):\n        y_pred = m * x + b\n        dm = -(2/n) * sum([x[i] * (y[i] - y_pred[i]) for i in range(n)])\n        db = -(2/n) * sum([y[i] - y_pred[i] for i in range(n)])\n        m -= lr * dm\n        b -= lr * db",
        "output": "def gradient_descent(x, y, iters=1000, lr=0.01):\n    m = b = 0\n    n = len(x)\n\n    # First-order Update\n    m_update = 0\n    b_update = 0\n\n    for i in range(iters):\n        y_pred = m * x + b\n\n        # Gradient\n        dm = -(2/n) * sum([x[i] * (y[i] - y_pred[i]) for i in range(n)])\n        db = -(2/n) * sum([y[i] - y_pred[i] for i in range(n)])\n\n        # Updates\n        m_update -= lr * dm\n        b_update -= lr * db\n\n        # Update the parameters\n        m += m_update\n        b += b_update",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTransform a Gradient Descent algorithm in Python to work with First Order Updates instead.\n\n### Input:\ndef gradient_descent(x, y, iters=1000, lr=0.01):\n    m = b = 0\n    n = len(x)\n\n    for i in range(iters):\n        y_pred = m * x + b\n        dm = -(2/n) * sum([x[i] * (y[i] - y_pred[i]) for i in range(n)])\n        db = -(2/n) * sum([y[i] - y_pred[i] for i in range(n)])\n        m -= lr * dm\n        b -= lr * db\n\n### Output:\ndef gradient_descent(x, y, iters=1000, lr=0.01):\n    m = b = 0\n    n = len(x)\n\n    # First-order Update\n    m_update = 0\n    b_update = 0\n\n    for i in range(iters):\n        y_pred = m * x + b\n\n        # Gradient\n        dm = -(2/n) * sum([x[i] * (y[i] - y_pred[i]) for i in range(n)])\n        db = -(2/n) * sum([y[i] - y_pred[i] for i in range(n)])\n\n        # Updates\n        m_update -= lr * dm\n        b_update -= lr * db\n\n        # Update the parameters\n        m += m_update\n        b += b_update"
    },
    {
        "instruction": "Design a function in Python to calculate the average of given numbers.",
        "input": "",
        "output": "def calculate_average(numbers):\n    total = 0\n    for number in numbers:\n        total = total + number\n    return total / len(numbers)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to calculate the average of given numbers.\n\n### Input:\n\n\n### Output:\ndef calculate_average(numbers):\n    total = 0\n    for number in numbers:\n        total = total + number\n    return total / len(numbers)"
    },
    {
        "instruction": "Generate an optimized version of the following Python program.",
        "input": "def calculate_sum(a,b):\n    result = 0\n    for x in range(a, b+1):\n        result += x\n    return result\n\nsum = calculate_sum(1, 10)\nprint(sum)",
        "output": "def calculate_sum(a,b):\n    return (b*(b+1))//2 - ((a-1)*a)//2\n\nsum = calculate_sum(1, 10)\nprint(sum)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an optimized version of the following Python program.\n\n### Input:\ndef calculate_sum(a,b):\n    result = 0\n    for x in range(a, b+1):\n        result += x\n    return result\n\nsum = calculate_sum(1, 10)\nprint(sum)\n\n### Output:\ndef calculate_sum(a,b):\n    return (b*(b+1))//2 - ((a-1)*a)//2\n\nsum = calculate_sum(1, 10)\nprint(sum)"
    },
    {
        "instruction": "Create a Python Flask application that displays a list of movies from an API. The application should make a request to a movie database API such as The Movie Database and display the list of movies in a table.",
        "input": "Not applicable",
        "output": "from flask import Flask, render_template\nimport requests\n\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n response = requests.get('https://api.themoviedb.org/3/movie/popular?api_key=YOUR_API_KEY')\n movies = response.json()\n return render_template('index.html', movies=movies)\n\nif __name__ == '__main__':\n app.run(debug=True)\n\n# index.html\n<table>\n <thead>\n <th>Name</th>\n <th>Poster</th>\n </thead>\n <tbody>\n {% for movie in movies['results'] %}\n <tr>\n <td>{{ movie['title'] }}</td>\n <td><img src=\"{{ movie['poster_path'] }}\" width=\"200\" /></td>\n </tr>\n {% endfor %}\n </tbody>\n</table>",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python Flask application that displays a list of movies from an API. The application should make a request to a movie database API such as The Movie Database and display the list of movies in a table.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, render_template\nimport requests\n\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n response = requests.get('https://api.themoviedb.org/3/movie/popular?api_key=YOUR_API_KEY')\n movies = response.json()\n return render_template('index.html', movies=movies)\n\nif __name__ == '__main__':\n app.run(debug=True)\n\n# index.html\n<table>\n <thead>\n <th>Name</th>\n <th>Poster</th>\n </thead>\n <tbody>\n {% for movie in movies['results'] %}\n <tr>\n <td>{{ movie['title'] }}</td>\n <td><img src=\"{{ movie['poster_path'] }}\" width=\"200\" /></td>\n </tr>\n {% endfor %}\n </tbody>\n</table>"
    },
    {
        "instruction": "Create a Python machine learning model that predicts whether a customer is likely to buy a product based on the customer's past buying history.",
        "input": "sample_data = [\n {\"customer_id\": 1, \"purchase_history\": [1, 0, 0, 0, 1]},\n {\"customer_id\": 2, \"purchase_history\": [0, 1, 0, 0, 0]},\n {\"customer_id\": 3, \"purchase_history\": [0, 0, 1, 0, 1]}\n]",
        "output": "import pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Load the data\ndf = pd.DataFrame(sample_data)\n\n# Define the features and target\nX = df.purchase_history\ny = df.customer_id\n\n# Create the model\nmodel = RandomForestClassifier()\n\n# Fit the model\nmodel.fit(X, y)\n\n# Use the model to predict whether a customer is likely to buy a product\npredictions = model.predict([[1, 0, 0, 0, 1], [0, 1, 0, 0, 0], [0, 0, 1, 0, 1]])\nprint(predictions) # [1, 2, 3]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python machine learning model that predicts whether a customer is likely to buy a product based on the customer's past buying history.\n\n### Input:\nsample_data = [\n {\"customer_id\": 1, \"purchase_history\": [1, 0, 0, 0, 1]},\n {\"customer_id\": 2, \"purchase_history\": [0, 1, 0, 0, 0]},\n {\"customer_id\": 3, \"purchase_history\": [0, 0, 1, 0, 1]}\n]\n\n### Output:\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Load the data\ndf = pd.DataFrame(sample_data)\n\n# Define the features and target\nX = df.purchase_history\ny = df.customer_id\n\n# Create the model\nmodel = RandomForestClassifier()\n\n# Fit the model\nmodel.fit(X, y)\n\n# Use the model to predict whether a customer is likely to buy a product\npredictions = model.predict([[1, 0, 0, 0, 1], [0, 1, 0, 0, 0], [0, 0, 1, 0, 1]])\nprint(predictions) # [1, 2, 3]"
    },
    {
        "instruction": "Create a program in Python that implements bubble sort.",
        "input": "",
        "output": "def bubble_sort(nums):\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that implements bubble sort.\n\n### Input:\n\n\n### Output:\ndef bubble_sort(nums):\n    for i in range(len(nums)-1):\n        for j in range(len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums"
    },
    {
        "instruction": "Optimize a Python program to calculate factorials.",
        "input": "factorial(5)",
        "output": "def factorial(n):\n  if n <= 1:\n    return 1\n  else:\n    return n * factorial(n-1)\n\nprint(factorial(5)) # 120",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a Python program to calculate factorials.\n\n### Input:\nfactorial(5)\n\n### Output:\ndef factorial(n):\n  if n <= 1:\n    return 1\n  else:\n    return n * factorial(n-1)\n\nprint(factorial(5)) # 120"
    },
    {
        "instruction": "Write a python program to calculate the sum of series 1 + 1/3 + 1/5 + ....",
        "input": "",
        "output": "\"\"\"\nCalculate the sum of series 1 + 1/3 + 1/5 + ...\n\"\"\"\n\ndef sum_series(n):\n    result = 0 \n    for i in range(1, n+1):\n        result += (1 / (2 * i - 1))\n    return result\n \nif __name__ == '__main__':\n    n = 5\n    print(sum_series(n))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to calculate the sum of series 1 + 1/3 + 1/5 + ....\n\n### Input:\n\n\n### Output:\n\"\"\"\nCalculate the sum of series 1 + 1/3 + 1/5 + ...\n\"\"\"\n\ndef sum_series(n):\n    result = 0 \n    for i in range(1, n+1):\n        result += (1 / (2 * i - 1))\n    return result\n \nif __name__ == '__main__':\n    n = 5\n    print(sum_series(n))"
    },
    {
        "instruction": "Modify the provided python code to find the length of a given list.",
        "input": "my_list = [1, 2, 3, 4, 5]",
        "output": "my_list = [1, 2, 3, 4, 5]\n\n# Function to find the length of a given list\ndef find_length(my_list):\n  # Variable to store the length of the list\n  length = 0\n  \n  # Loop through the list and increment length by 1 for every element in the list\n  for element in my_list:\n    length += 1\n  \n  # return the length of the list\n  return length\n\n# Call the function \nprint(\"Length of the list is:\", find_length(my_list)) # 5",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the provided python code to find the length of a given list.\n\n### Input:\nmy_list = [1, 2, 3, 4, 5]\n\n### Output:\nmy_list = [1, 2, 3, 4, 5]\n\n# Function to find the length of a given list\ndef find_length(my_list):\n  # Variable to store the length of the list\n  length = 0\n  \n  # Loop through the list and increment length by 1 for every element in the list\n  for element in my_list:\n    length += 1\n  \n  # return the length of the list\n  return length\n\n# Call the function \nprint(\"Length of the list is:\", find_length(my_list)) # 5"
    },
    {
        "instruction": "Develop a Python script to convert Numbers to binary",
        "input": "Number = 7",
        "output": "def toBinary(num):\n    if num > 1:\n        toBinary(num // 2)\n    print(num % 2, end = '')\n\ntoBinary(7)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script to convert Numbers to binary\n\n### Input:\nNumber = 7\n\n### Output:\ndef toBinary(num):\n    if num > 1:\n        toBinary(num // 2)\n    print(num % 2, end = '')\n\ntoBinary(7)"
    },
    {
        "instruction": "Implement an algorithm in Python that takes an array of numbers and returns the maximum value in the array.",
        "input": "[2, 5, 8, 10, 4]",
        "output": "def find_max(arr):\n    max_val = arr[0]\n    \n    for num in arr:\n        if num > max_val:\n            max_val = num\n    return max_val\n\nresult = find_max([2, 5, 8, 10, 4])\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm in Python that takes an array of numbers and returns the maximum value in the array.\n\n### Input:\n[2, 5, 8, 10, 4]\n\n### Output:\ndef find_max(arr):\n    max_val = arr[0]\n    \n    for num in arr:\n        if num > max_val:\n            max_val = num\n    return max_val\n\nresult = find_max([2, 5, 8, 10, 4])\nprint(result)"
    },
    {
        "instruction": "Generate an algorithm in Python that calculates the sum of all even numbers between 1 and a given upper limit.",
        "input": "100",
        "output": "def sum_of_even_numbers(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n \n    return sum",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an algorithm in Python that calculates the sum of all even numbers between 1 and a given upper limit.\n\n### Input:\n100\n\n### Output:\ndef sum_of_even_numbers(n):\n    sum = 0\n    for i in range(2, n+1, 2):\n        sum += i\n \n    return sum"
    },
    {
        "instruction": "Create a Python dictionary with keys based on the given list of data and assign a default value to them.",
        "input": "[1,2,3]",
        "output": "dictionary = {1: 'default', 2: 'default', 3: 'default'}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python dictionary with keys based on the given list of data and assign a default value to them.\n\n### Input:\n[1,2,3]\n\n### Output:\ndictionary = {1: 'default', 2: 'default', 3: 'default'}"
    },
    {
        "instruction": "Design an algorithm in Python to count all unique elements in a list.",
        "input": "[1, 1, 2, 3, 3, 4, 5, 6]",
        "output": "def count_unique(lst):\n    unique_count = 0\n    seen = set()\n    for element in lst:\n        if element not in seen:\n            unique_count += 1\n            seen.add(element)\n    return unique_count",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to count all unique elements in a list.\n\n### Input:\n[1, 1, 2, 3, 3, 4, 5, 6]\n\n### Output:\ndef count_unique(lst):\n    unique_count = 0\n    seen = set()\n    for element in lst:\n        if element not in seen:\n            unique_count += 1\n            seen.add(element)\n    return unique_count"
    },
    {
        "instruction": "Design a python program to sort a list of tuples according to their 2nd item.",
        "input": "",
        "output": "# Input list\nlist_of_tuples = [('Alice', 20), ('Bob', 30), ('Andrew', 20), ('Catherine', 40)]\n\n# Sort the list by second item\nsorted_list = sorted(list_of_tuples, key=lambda x: x[1])\n\n# Print the result\nprint(sorted_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program to sort a list of tuples according to their 2nd item.\n\n### Input:\n\n\n### Output:\n# Input list\nlist_of_tuples = [('Alice', 20), ('Bob', 30), ('Andrew', 20), ('Catherine', 40)]\n\n# Sort the list by second item\nsorted_list = sorted(list_of_tuples, key=lambda x: x[1])\n\n# Print the result\nprint(sorted_list)"
    },
    {
        "instruction": "Write a script in Python to retrieve data from a web API.",
        "input": "The web API is available at http://api.example.com/v1/zipcodes and requires the parameter `zipcode` to execute.",
        "output": "import requests\n\nzipcode = '12345'\nurl = 'http://api.example.com/v1/zipcodes'\n\nparams = {'zipcode': zipcode}\nresponse = requests.get(url, params=params)\n\nif response.status_code == 200:\n data = response.json()\n print(data)\nelse:\n print('Error: ', response.status_code)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script in Python to retrieve data from a web API.\n\n### Input:\nThe web API is available at http://api.example.com/v1/zipcodes and requires the parameter `zipcode` to execute.\n\n### Output:\nimport requests\n\nzipcode = '12345'\nurl = 'http://api.example.com/v1/zipcodes'\n\nparams = {'zipcode': zipcode}\nresponse = requests.get(url, params=params)\n\nif response.status_code == 200:\n data = response.json()\n print(data)\nelse:\n print('Error: ', response.status_code)"
    },
    {
        "instruction": "Construct a while loop that executes 20 times in Python.",
        "input": "",
        "output": "i = 0\n\nwhile i < 20:\n    # do something useful\n    i += 1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a while loop that executes 20 times in Python.\n\n### Input:\n\n\n### Output:\ni = 0\n\nwhile i < 20:\n    # do something useful\n    i += 1"
    },
    {
        "instruction": "Create a Python script that allows renaming of archive files based on the names of directories within the archive. The script should import the necessary modules from gi.repository, functools, os, os.path, urllib, and urlparse. It should define two tuples for ZIP and RAR MIME types. It should define two functions for getting the file path and proposed new file path for an archive if it's renamed. It should define two LRU cache functions for getting the list of directories inside a ZIP and RAR archive. It should define a class for a wrapped Gtk Message Dialog and another class for creating a submenu to rename archives after the name of a directory within the archive. The script should handle the case where there are no directory names found in the archive and should return a Nautilus.MenuItem object.",
        "input": "",
        "output": "from gi.repository import Nautilus, GObject, Gtk\n\nimport functools\nimport os\nimport os.path\nimport urllib\nimport urlparse\nimport zipfile\ntry:\n    import rarfile\nexcept ImportError:\n    rarfile = None\n\n\nif rarfile:\n    # The default separator is '\\\\', which is different from what zipfile uses\n    rarfile.PATH_SEP = '/'\n\n\n# I put these in a tuple so that they don't accidentally get mutated.\nZIP_MIME_TYPES = tuple(['application/zip',\n                       'application/x-zip',\n                       'application/zip-compressed'])\nRAR_MIME_TYPES = tuple(['application/rar',\n                        'application/x-rar',\n                        'application/x-rar-compressed'])\n\n\ndef get_file_path(file_info):\n    \"\"\"Returns the simple file path from a Nautilus.FileInfo.\n\n    Gets the \"/path/to/file\" part from \"file:///path/to/file\".\n\n    Args:\n        file_info: a Nautilus.FileInfo instance\n\n    Returns:\n        A string representing a Unix path\n    \"\"\"\n    uri = file_info.get_uri()\n    return urllib.unquote(urlparse.urlparse(uri).path)\n\n\ndef get_new_file_path(archive_path, directory_name):\n    \"\"\"Gets the proposed new path for an archive if it's renamed\n\n    Creates the full path of an archive if it is renamed after a directory.\n    It keeps the path of directories leading up to the base name, as well as\n    the file extension.\n\n    Calling this function with \"/path/to/file.zip\" and \"dir-name\" would return:\n    \"/path/to/dir-name.zip\".\n\n    Args:\n        archive_path: A string representing the full path of the archive\n        directory_name: String value of the directory we want to rename this\n            archive after.\n\n    Returns:\n        A string of the proposed file path after the archive has been renamed\n        after the given directory name.\n    \"\"\"\n    if '.' in archive_path:\n        extension = archive_path.rsplit('.', 1)[1]\n        base_name = directory_name + '.' + extension\n    else:\n        base_name = directory_name\n    return os.path.join(os.path.dirname(archive_path), base_name)\n\n\ndef lru_cache(size):\n    \"\"\"Simple LRU cache\"\"\"\n    def outer(f):\n        prev_inputs = list()\n        prev_outputs = dict()\n\n        @functools.wraps(f)\n        def wrapper(function_input):\n            if function_input in prev_inputs:\n                return prev_outputs[function_input]\n\n            function_output = f(function_input)\n\n            if len(prev_inputs) >= size:\n                dead_path = prev_inputs[0]\n                del prev_inputs[0]\n                del prev_outputs[dead_path]\n\n            prev_inputs.append(function_input)\n            prev_outputs[function_input] = function_output\n            return function_output\n        return wrapper\n    return outer\n\n\n@lru_cache(32)\ndef get_zip_directory_names(filename):\n    \"\"\"Gets the list of directories inside a ZIP archive\n\n    Reads the directory names inside of a ZIP archive, and returns a list of\n    each directory name (without its parent directories).\n\n    Args:\n        filename: A string that can be a relative filename or file path (it\n            doesn't matter as long as this script can read it) of a ZIP file\n\n    Returns:\n        A list of directory name strings.\n    \"\"\"\n    names = list()\n    try:\n        with zipfile.ZipFile(filename, 'r') as zip_file:\n            names = [fname for fname in zip_file.namelist()\n                     if fname.endswith('/')]\n    except zipfile.BadZipfile as e:\n        print(e)\n    directory_names = [os.path.basename(dir_name[:-1]) for dir_name in names]\n    return directory_names\n\n\n@lru_cache(32)\ndef get_rar_directory_names(filename):\n    \"\"\"Gets the list of directories inside a RAR archive\n\n    Reads the directory names inside of a RAR archive, and returns a list of\n    each directory name (without its parent directories).\n\n    Args:\n        filename: A string that can be a relative filename or file path (it\n            doesn't matter as long as this script can read it) of a ZIP file\n\n    Returns:\n        A list of directory name strings.\n    \"\"\"\n    names = list()\n    try:\n        with rarfile.RarFile(filename, 'r') as rar_file:\n            names = [info.filename for info in rar_file.infolist() if info.isdir()]\n    except rarfile.Error as e:\n        print(e)\n    directory_names = [os.path.basename(dir_name) for dir_name in names]\n    return directory_names\n\n\nclass RenameDialog(GObject.GObject):\n    \"\"\"Wrapped Gtk Message Dialog class\"\"\"\n    def __init__(self, window, original_name, new_name):\n        self.dialog = Gtk.MessageDialog(window, 0, Gtk.MessageType.QUESTION,\n                                        Gtk.ButtonsType.YES_NO,\n                                        \"Rename Archive?\")\n        self.dialog.format_secondary_text(\n            \"Do you want to rename\\n\\\"{0}\\\" to\\n\\\"{1}\\\"\".format(\n                original_name, new_name))\n\n    def run(self):\n        self.response = self.dialog.run()\n\n    def destroy(self):\n        self.dialog.destroy()\n\n\nclass RenameArchiveProvider(GObject.GObject, Nautilus.MenuProvider):\n    \"\"\"Creates a submenu to rename archives after the name of a directory\n    within the archive.\n    \"\"\"\n    def __init__(self):\n        self.supported_mime_types = list(ZIP_MIME_TYPES)\n        if rarfile:\n            self.supported_mime_types += list(RAR_MIME_TYPES)\n\n    def rename_directory_menuitem_cb(self, menu, cb_parameters):\n        \"\"\"Callback for when the user clicks on a directory name\n        to rename an archive after.\n\n        This displays a dialog that the user responds to with a Yes or No.\n        If the user clicks Yes, then this attempts to rename the file.\n\n        Args:\n            menu: the Nautilus.Menu that was the source of the click\n            cb_parameters: a tuple of type (Nautilus.FileInfo,\n                                            Gtk.Window,\n                                            string)\n        Returns:\n            Nothing.\n\n        \"\"\"\n        file_info, window, directory_name = cb_parameters\n        if file_info.is_gone() or not file_info.can_write():\n            return\n        old_path = get_file_path(file_info)\n        old_name = os.path.basename(old_path)\n        new_path = get_new_file_path(old_path, directory_name)\n        new_name = os.path.basename(new_path)\n\n        dialog = RenameDialog(window, old_name, new_name)\n        dialog.run()\n        dialog.destroy()\n\n        if dialog.response == Gtk.ResponseType.YES:\n            try:\n                os.rename(old_path, new_path)\n            except os.OSError as e:\n                print(e)\n\n    def get_file_items(self, window, files):\n        if len(files) != 1:\n            return\n\n        selected_file = files[0]\n\n        if selected_file.get_uri_scheme() != 'file':\n            # Not sure which URIs zipfile supports reading from\n            return\n\n        mime_type = selected_file.get_mime_type()\n\n        if mime_type in self.supported_mime_types:\n            top_menuitem = Nautilus.MenuItem(\n                name='RenameArchiveProvider::Rename Archive',\n                label='Rename Archive',\n                tip='Rename archive based on its directory names',\n                icon='')\n\n            names_menu = Nautilus.Menu()\n            top_menuitem.set_submenu(names_menu)\n\n            # create the submenu items\n            file_path = get_file_path(selected_file)\n            if mime_type in ZIP_MIME_TYPES:\n                directory_names = get_zip_directory_names(file_path)\n            elif mime_type in RAR_MIME_TYPES:\n                directory_names = get_rar_directory_names(file_path)\n            else:\n                directory_names = None\n\n            if not directory_names:\n                no_directories_menuitem = Nautilus.MenuItem(\n                    name='RenameArchiveProvider::No Directories',\n                    label='No directory names found',\n                    tip='',\n                    icon='')\n                names_menu.append_item(no_directories_menuitem)\n            else:\n                for directory_name in directory_names:\n                    name = 'RenameArchiveProvider::Directory::' + \\\n                        directory_name\n                    label = 'Rename to \"' + \\\n                        directory_name.replace('_', '__') + '\"'\n                    # we have to perform the underscore replacement in the label to get it to show up\n\n                    dir_menuitem = Nautilus.MenuItem(\n                        name=name,\n                        label=label,\n                        tip=label,\n                        icon='')\n                    dir_menuitem.connect(\n                        'activate', self.rename_directory_menuitem_cb,\n                        (selected_file, window, directory_name))\n                    names_menu.append_item(dir_menuitem)\n\n            return [top_menuitem]\n        else:\n            return\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that allows renaming of archive files based on the names of directories within the archive. The script should import the necessary modules from gi.repository, functools, os, os.path, urllib, and urlparse. It should define two tuples for ZIP and RAR MIME types. It should define two functions for getting the file path and proposed new file path for an archive if it's renamed. It should define two LRU cache functions for getting the list of directories inside a ZIP and RAR archive. It should define a class for a wrapped Gtk Message Dialog and another class for creating a submenu to rename archives after the name of a directory within the archive. The script should handle the case where there are no directory names found in the archive and should return a Nautilus.MenuItem object.\n\n### Input:\n\n\n### Output:\nfrom gi.repository import Nautilus, GObject, Gtk\n\nimport functools\nimport os\nimport os.path\nimport urllib\nimport urlparse\nimport zipfile\ntry:\n    import rarfile\nexcept ImportError:\n    rarfile = None\n\n\nif rarfile:\n    # The default separator is '\\\\', which is different from what zipfile uses\n    rarfile.PATH_SEP = '/'\n\n\n# I put these in a tuple so that they don't accidentally get mutated.\nZIP_MIME_TYPES = tuple(['application/zip',\n                       'application/x-zip',\n                       'application/zip-compressed'])\nRAR_MIME_TYPES = tuple(['application/rar',\n                        'application/x-rar',\n                        'application/x-rar-compressed'])\n\n\ndef get_file_path(file_info):\n    \"\"\"Returns the simple file path from a Nautilus.FileInfo.\n\n    Gets the \"/path/to/file\" part from \"file:///path/to/file\".\n\n    Args:\n        file_info: a Nautilus.FileInfo instance\n\n    Returns:\n        A string representing a Unix path\n    \"\"\"\n    uri = file_info.get_uri()\n    return urllib.unquote(urlparse.urlparse(uri).path)\n\n\ndef get_new_file_path(archive_path, directory_name):\n    \"\"\"Gets the proposed new path for an archive if it's renamed\n\n    Creates the full path of an archive if it is renamed after a directory.\n    It keeps the path of directories leading up to the base name, as well as\n    the file extension.\n\n    Calling this function with \"/path/to/file.zip\" and \"dir-name\" would return:\n    \"/path/to/dir-name.zip\".\n\n    Args:\n        archive_path: A string representing the full path of the archive\n        directory_name: String value of the directory we want to rename this\n            archive after.\n\n    Returns:\n        A string of the proposed file path after the archive has been renamed\n        after the given directory name.\n    \"\"\"\n    if '.' in archive_path:\n        extension = archive_path.rsplit('.', 1)[1]\n        base_name = directory_name + '.' + extension\n    else:\n        base_name = directory_name\n    return os.path.join(os.path.dirname(archive_path), base_name)\n\n\ndef lru_cache(size):\n    \"\"\"Simple LRU cache\"\"\"\n    def outer(f):\n        prev_inputs = list()\n        prev_outputs = dict()\n\n        @functools.wraps(f)\n        def wrapper(function_input):\n            if function_input in prev_inputs:\n                return prev_outputs[function_input]\n\n            function_output = f(function_input)\n\n            if len(prev_inputs) >= size:\n                dead_path = prev_inputs[0]\n                del prev_inputs[0]\n                del prev_outputs[dead_path]\n\n            prev_inputs.append(function_input)\n            prev_outputs[function_input] = function_output\n            return function_output\n        return wrapper\n    return outer\n\n\n@lru_cache(32)\ndef get_zip_directory_names(filename):\n    \"\"\"Gets the list of directories inside a ZIP archive\n\n    Reads the directory names inside of a ZIP archive, and returns a list of\n    each directory name (without its parent directories).\n\n    Args:\n        filename: A string that can be a relative filename or file path (it\n            doesn't matter as long as this script can read it) of a ZIP file\n\n    Returns:\n        A list of directory name strings.\n    \"\"\"\n    names = list()\n    try:\n        with zipfile.ZipFile(filename, 'r') as zip_file:\n            names = [fname for fname in zip_file.namelist()\n                     if fname.endswith('/')]\n    except zipfile.BadZipfile as e:\n        print(e)\n    directory_names = [os.path.basename(dir_name[:-1]) for dir_name in names]\n    return directory_names\n\n\n@lru_cache(32)\ndef get_rar_directory_names(filename):\n    \"\"\"Gets the list of directories inside a RAR archive\n\n    Reads the directory names inside of a RAR archive, and returns a list of\n    each directory name (without its parent directories).\n\n    Args:\n        filename: A string that can be a relative filename or file path (it\n            doesn't matter as long as this script can read it) of a ZIP file\n\n    Returns:\n        A list of directory name strings.\n    \"\"\"\n    names = list()\n    try:\n        with rarfile.RarFile(filename, 'r') as rar_file:\n            names = [info.filename for info in rar_file.infolist() if info.isdir()]\n    except rarfile.Error as e:\n        print(e)\n    directory_names = [os.path.basename(dir_name) for dir_name in names]\n    return directory_names\n\n\nclass RenameDialog(GObject.GObject):\n    \"\"\"Wrapped Gtk Message Dialog class\"\"\"\n    def __init__(self, window, original_name, new_name):\n        self.dialog = Gtk.MessageDialog(window, 0, Gtk.MessageType.QUESTION,\n                                        Gtk.ButtonsType.YES_NO,\n                                        \"Rename Archive?\")\n        self.dialog.format_secondary_text(\n            \"Do you want to rename\\n\\\"{0}\\\" to\\n\\\"{1}\\\"\".format(\n                original_name, new_name))\n\n    def run(self):\n        self.response = self.dialog.run()\n\n    def destroy(self):\n        self.dialog.destroy()\n\n\nclass RenameArchiveProvider(GObject.GObject, Nautilus.MenuProvider):\n    \"\"\"Creates a submenu to rename archives after the name of a directory\n    within the archive.\n    \"\"\"\n    def __init__(self):\n        self.supported_mime_types = list(ZIP_MIME_TYPES)\n        if rarfile:\n            self.supported_mime_types += list(RAR_MIME_TYPES)\n\n    def rename_directory_menuitem_cb(self, menu, cb_parameters):\n        \"\"\"Callback for when the user clicks on a directory name\n        to rename an archive after.\n\n        This displays a dialog that the user responds to with a Yes or No.\n        If the user clicks Yes, then this attempts to rename the file.\n\n        Args:\n            menu: the Nautilus.Menu that was the source of the click\n            cb_parameters: a tuple of type (Nautilus.FileInfo,\n                                            Gtk.Window,\n                                            string)\n        Returns:\n            Nothing.\n\n        \"\"\"\n        file_info, window, directory_name = cb_parameters\n        if file_info.is_gone() or not file_info.can_write():\n            return\n        old_path = get_file_path(file_info)\n        old_name = os.path.basename(old_path)\n        new_path = get_new_file_path(old_path, directory_name)\n        new_name = os.path.basename(new_path)\n\n        dialog = RenameDialog(window, old_name, new_name)\n        dialog.run()\n        dialog.destroy()\n\n        if dialog.response == Gtk.ResponseType.YES:\n            try:\n                os.rename(old_path, new_path)\n            except os.OSError as e:\n                print(e)\n\n    def get_file_items(self, window, files):\n        if len(files) != 1:\n            return\n\n        selected_file = files[0]\n\n        if selected_file.get_uri_scheme() != 'file':\n            # Not sure which URIs zipfile supports reading from\n            return\n\n        mime_type = selected_file.get_mime_type()\n\n        if mime_type in self.supported_mime_types:\n            top_menuitem = Nautilus.MenuItem(\n                name='RenameArchiveProvider::Rename Archive',\n                label='Rename Archive',\n                tip='Rename archive based on its directory names',\n                icon='')\n\n            names_menu = Nautilus.Menu()\n            top_menuitem.set_submenu(names_menu)\n\n            # create the submenu items\n            file_path = get_file_path(selected_file)\n            if mime_type in ZIP_MIME_TYPES:\n                directory_names = get_zip_directory_names(file_path)\n            elif mime_type in RAR_MIME_TYPES:\n                directory_names = get_rar_directory_names(file_path)\n            else:\n                directory_names = None\n\n            if not directory_names:\n                no_directories_menuitem = Nautilus.MenuItem(\n                    name='RenameArchiveProvider::No Directories',\n                    label='No directory names found',\n                    tip='',\n                    icon='')\n                names_menu.append_item(no_directories_menuitem)\n            else:\n                for directory_name in directory_names:\n                    name = 'RenameArchiveProvider::Directory::' + \\\n                        directory_name\n                    label = 'Rename to \"' + \\\n                        directory_name.replace('_', '__') + '\"'\n                    # we have to perform the underscore replacement in the label to get it to show up\n\n                    dir_menuitem = Nautilus.MenuItem(\n                        name=name,\n                        label=label,\n                        tip=label,\n                        icon='')\n                    dir_menuitem.connect(\n                        'activate', self.rename_directory_menuitem_cb,\n                        (selected_file, window, directory_name))\n                    names_menu.append_item(dir_menuitem)\n\n            return [top_menuitem]\n        else:\n            return\n"
    },
    {
        "instruction": "Translate the given program from Python to C.",
        "input": "def calculate_area(r):\n    pi = 3.14\n    area = pi * r * r\n    return area",
        "output": "#include<stdio.h>\n#define PI 3.14\n\nfloat calculate_area(float r)\n{\n    float area = PI * r * r;\n    return area;\n}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTranslate the given program from Python to C.\n\n### Input:\ndef calculate_area(r):\n    pi = 3.14\n    area = pi * r * r\n    return area\n\n### Output:\n#include<stdio.h>\n#define PI 3.14\n\nfloat calculate_area(float r)\n{\n    float area = PI * r * r;\n    return area;\n}"
    },
    {
        "instruction": "Write a Python program to print all unique values in a dictionary.",
        "input": "sample_dict = {'key1': 1, 'key2': 2, 'key3': 3, 'key4': 1}",
        "output": "def printUniqueValues(dictionary):\n    unique_values = set()\n\n    for key in dictionary:\n        if dictionary[key] not in unique_values:\n            unique_values.add(dictionary[key])\n\n    print(unique_values)\n\nprintUniqueValues(sample_dict)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print all unique values in a dictionary.\n\n### Input:\nsample_dict = {'key1': 1, 'key2': 2, 'key3': 3, 'key4': 1}\n\n### Output:\ndef printUniqueValues(dictionary):\n    unique_values = set()\n\n    for key in dictionary:\n        if dictionary[key] not in unique_values:\n            unique_values.add(dictionary[key])\n\n    print(unique_values)\n\nprintUniqueValues(sample_dict)"
    },
    {
        "instruction": "Create a web scraping script in Python that collects the top 10 news headlines from BBC.",
        "input": "Not applicable",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\n# make request to the web page\nr = requests.get(\"https://www.bbc.com/news\")\n# parse the html content\nsoup = BeautifulSoup(r.content, \"html.parser\")\n# find all the headlines\nheadlines = soup.find_all(\"h3\", class_=\"gs-c-promo-heading__title\")\n\n# print the top 10 headlines\nprint(\"Top 10 headlines from BBC:\")\nfor i in range(10):\n    headline = headlines[i].get_text().strip()\n    print(str(i + 1)+\". \"+ headline)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraping script in Python that collects the top 10 news headlines from BBC.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# make request to the web page\nr = requests.get(\"https://www.bbc.com/news\")\n# parse the html content\nsoup = BeautifulSoup(r.content, \"html.parser\")\n# find all the headlines\nheadlines = soup.find_all(\"h3\", class_=\"gs-c-promo-heading__title\")\n\n# print the top 10 headlines\nprint(\"Top 10 headlines from BBC:\")\nfor i in range(10):\n    headline = headlines[i].get_text().strip()\n    print(str(i + 1)+\". \"+ headline)"
    },
    {
        "instruction": "Write a Python function to check for a prime number.",
        "input": "",
        "output": "def is_prime(num):\n    if num > 1: \n        for i in range(2,num):\n            if (num % i) == 0: \n                return False\n        return True \n    else: \n        return False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to check for a prime number.\n\n### Input:\n\n\n### Output:\ndef is_prime(num):\n    if num > 1: \n        for i in range(2,num):\n            if (num % i) == 0: \n                return False\n        return True \n    else: \n        return False"
    },
    {
        "instruction": "Write a web scraper in Python that extracts the price of Apple's iPhone from an e-commerce website.",
        "input": "Link to an e-commerce website that sells Apple's iPhone:  \nhttps://store.apple.com/us/buy-iphone/iphone-11",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\nlink = 'https://store.apple.com/us/buy-iphone/iphone-11'\n\npage = requests.get(link)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\nprice = soup.find('span', id='pricing-product-price-value').text\nprint(price)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a web scraper in Python that extracts the price of Apple's iPhone from an e-commerce website.\n\n### Input:\nLink to an e-commerce website that sells Apple's iPhone:  \nhttps://store.apple.com/us/buy-iphone/iphone-11\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nlink = 'https://store.apple.com/us/buy-iphone/iphone-11'\n\npage = requests.get(link)\nsoup = BeautifulSoup(page.content, 'html.parser')\n\nprice = soup.find('span', id='pricing-product-price-value').text\nprint(price)"
    },
    {
        "instruction": "Develop a Python program to convert a list into a dictionary.",
        "input": "List of colors: [\"red\", \"green\", \"blue\"],",
        "output": "colors = [\"red\", \"green\", \"blue\"]\n\ncolor_dictionary = {i : colors[i] for i in range(len(colors))} \n\nprint(color_dictionary)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to convert a list into a dictionary.\n\n### Input:\nList of colors: [\"red\", \"green\", \"blue\"],\n\n### Output:\ncolors = [\"red\", \"green\", \"blue\"]\n\ncolor_dictionary = {i : colors[i] for i in range(len(colors))} \n\nprint(color_dictionary)"
    },
    {
        "instruction": "Write a Python 3 code snippet to check for the presence of a specific value in a dictionary.",
        "input": "",
        "output": "def is_value_in_dict(key, my_dict):\n  return key in my_dict",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python 3 code snippet to check for the presence of a specific value in a dictionary.\n\n### Input:\n\n\n### Output:\ndef is_value_in_dict(key, my_dict):\n  return key in my_dict"
    },
    {
        "instruction": "Write a code in Python to print out all prime numbers from 0 to 100.",
        "input": "",
        "output": "for num in range(2,101):\n   for i in range(2,num):\n       if (num % i ) == 0:\n           break\n   else:\n       print(num, end = ' ')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python to print out all prime numbers from 0 to 100.\n\n### Input:\n\n\n### Output:\nfor num in range(2,101):\n   for i in range(2,num):\n       if (num % i ) == 0:\n           break\n   else:\n       print(num, end = ' ')"
    },
    {
        "instruction": "Set up Django settings for the FileManagerHTML project. This includes setting the debug mode to True, configuring the database, specifying allowed hosts, setting the time zone and language code, configuring media and static file settings, and installing necessary apps.",
        "input": "",
        "output": "# Django settings for FileManagerHTML project.\n\nDEBUG = True\nTEMPLATE_DEBUG = DEBUG\n\nADMINS = (\n    # ('Your Name', 'your_email@example.com'),\n)\n\nMANAGERS = ADMINS\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.\n        'NAME': 'fileManagerDB',                      # Or path to database file if using sqlite3.\n        # The following settings are not used with sqlite3:\n        'USER': '',\n        'PASSWORD': '',\n        'HOST': '',                      # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.\n        'PORT': '',                      # Set to empty string for default.\n    }\n}\n\n# Hosts/domain names that are valid for this site; required if DEBUG is False\n# See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts\nALLOWED_HOSTS = []\n\n# Local time zone for this installation. Choices can be found here:\n# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n# although not all choices may be available on all operating systems.\n# In a Windows environment this must be set to your system time zone.\nTIME_ZONE = 'Europe/Paris'\n\n# Language code for this installation. All choices can be found here:\n# http://www.i18nguy.com/unicode/language-identifiers.html\nLANGUAGE_CODE = 'en-EN'\n\nSITE_ID = 1\n\n# If you set this to False, Django will make some optimizations so as not\n# to load the internationalization machinery.\nUSE_I18N = True\n\n# If you set this to False, Django will not format dates, numbers and\n# calendars according to the current locale.\nUSE_L10N = True\n\n# If you set this to False, Django will not use timezone-aware datetimes.\nUSE_TZ = True\n\n# Absolute filesystem path to the directory that will hold user-uploaded files.\nMEDIA_ROOT = '/home/brice/Programmation/Django-FileManager/media'\n\n# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n# trailing slash.\n# Examples: \"http://example.com/media/\", \"http://media.example.com/\"\nMEDIA_URL = 'media/'\n\n# Absolute path to the directory static files should be collected to.\n# Don't put anything in this directory yourself; store your static files\n# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.\n# Example: \"/var/www/example.com/static/\"\nSTATIC_ROOT = ''\n\n# URL prefix for static files.\n# Example: \"http://example.com/static/\", \"http://static.example.com/\"\nSTATIC_URL = '/static/'\n\n# Additional locations of static files\nSTATICFILES_DIRS = (\n    # Put strings here, like \"/home/html/static\" or \"C:/www/django/static\".\n    # Always use forward slashes, even on Windows.\n    # Don't forget to use absolute paths, not relative paths.\n)\n\n# List of finder classes that know how to find static files in\n# various locations.\nSTATICFILES_FINDERS = (\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n#    'django.contrib.staticfiles.finders.DefaultStorageFinder',\n)\n\n# Make this unique, and don't share it with anybody.\nSECRET_KEY = '(!f!+ygp*i+75v9nvqxrgnk@tt36t+v3%ppdlshos95ct4z74f'\n\n# List of callables that know how to import templates from various sources.\nTEMPLATE_LOADERS = (\n    'django.template.loaders.filesystem.Loader',\n    'django.template.loaders.app_directories.Loader',\n#     'django.template.loaders.eggs.Loader',\n)\n\nMIDDLEWARE_CLASSES = (\n    'django.middleware.common.CommonMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    # Uncomment the next line for simple clickjacking protection:\n    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',\n)\n\nROOT_URLCONF = 'FileManager.urls'\n\n# Python dotted path to the WSGI application used by Django's runserver.\nWSGI_APPLICATION = 'FileManager.wsgi.application'\n\nTEMPLATE_DIRS = (\n    # Put strings here, like \"/home/html/django_templates\" or \"C:/www/django/templates\".\n    # Always use forward slashes, even on Windows.\n    # Don't forget to use absolute paths, not relative paths.\n)\n\nINSTALLED_APPS = (\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.sites',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'manager',\n    # Uncomment the next line to enable the admin:\n    'django.contrib.admin',\n    # Uncomment the next line to enable admin documentation:\n    # 'django.contrib.admindocs',\n)\n\nSESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'\n\n# A sample logging configuration. The only tangible logging\n# performed by this configuration is to send an email to\n# the site admins on every HTTP 500 error when DEBUG=False.\n# See http://docs.djangoproject.com/en/dev/topics/logging for\n# more details on how to customize your logging configuration.\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'filters': {\n        'require_debug_false': {\n            '()': 'django.utils.log.RequireDebugFalse'\n        }\n    },\n    'handlers': {\n        'mail_admins': {\n            'level': 'ERROR',\n            'filters': ['require_debug_false'],\n            'class': 'django.utils.log.AdminEmailHandler'\n        }\n    },\n    'loggers': {\n        'django.request': {\n            'handlers': ['mail_admins'],\n            'level': 'ERROR',\n            'propagate': True,\n        },\n    }\n}\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSet up Django settings for the FileManagerHTML project. This includes setting the debug mode to True, configuring the database, specifying allowed hosts, setting the time zone and language code, configuring media and static file settings, and installing necessary apps.\n\n### Input:\n\n\n### Output:\n# Django settings for FileManagerHTML project.\n\nDEBUG = True\nTEMPLATE_DEBUG = DEBUG\n\nADMINS = (\n    # ('Your Name', 'your_email@example.com'),\n)\n\nMANAGERS = ADMINS\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.\n        'NAME': 'fileManagerDB',                      # Or path to database file if using sqlite3.\n        # The following settings are not used with sqlite3:\n        'USER': '',\n        'PASSWORD': '',\n        'HOST': '',                      # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.\n        'PORT': '',                      # Set to empty string for default.\n    }\n}\n\n# Hosts/domain names that are valid for this site; required if DEBUG is False\n# See https://docs.djangoproject.com/en/1.5/ref/settings/#allowed-hosts\nALLOWED_HOSTS = []\n\n# Local time zone for this installation. Choices can be found here:\n# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n# although not all choices may be available on all operating systems.\n# In a Windows environment this must be set to your system time zone.\nTIME_ZONE = 'Europe/Paris'\n\n# Language code for this installation. All choices can be found here:\n# http://www.i18nguy.com/unicode/language-identifiers.html\nLANGUAGE_CODE = 'en-EN'\n\nSITE_ID = 1\n\n# If you set this to False, Django will make some optimizations so as not\n# to load the internationalization machinery.\nUSE_I18N = True\n\n# If you set this to False, Django will not format dates, numbers and\n# calendars according to the current locale.\nUSE_L10N = True\n\n# If you set this to False, Django will not use timezone-aware datetimes.\nUSE_TZ = True\n\n# Absolute filesystem path to the directory that will hold user-uploaded files.\nMEDIA_ROOT = '/home/brice/Programmation/Django-FileManager/media'\n\n# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n# trailing slash.\n# Examples: \"http://example.com/media/\", \"http://media.example.com/\"\nMEDIA_URL = 'media/'\n\n# Absolute path to the directory static files should be collected to.\n# Don't put anything in this directory yourself; store your static files\n# in apps' \"static/\" subdirectories and in STATICFILES_DIRS.\n# Example: \"/var/www/example.com/static/\"\nSTATIC_ROOT = ''\n\n# URL prefix for static files.\n# Example: \"http://example.com/static/\", \"http://static.example.com/\"\nSTATIC_URL = '/static/'\n\n# Additional locations of static files\nSTATICFILES_DIRS = (\n    # Put strings here, like \"/home/html/static\" or \"C:/www/django/static\".\n    # Always use forward slashes, even on Windows.\n    # Don't forget to use absolute paths, not relative paths.\n)\n\n# List of finder classes that know how to find static files in\n# various locations.\nSTATICFILES_FINDERS = (\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n#    'django.contrib.staticfiles.finders.DefaultStorageFinder',\n)\n\n# Make this unique, and don't share it with anybody.\nSECRET_KEY = '(!f!+ygp*i+75v9nvqxrgnk@tt36t+v3%ppdlshos95ct4z74f'\n\n# List of callables that know how to import templates from various sources.\nTEMPLATE_LOADERS = (\n    'django.template.loaders.filesystem.Loader',\n    'django.template.loaders.app_directories.Loader',\n#     'django.template.loaders.eggs.Loader',\n)\n\nMIDDLEWARE_CLASSES = (\n    'django.middleware.common.CommonMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    # Uncomment the next line for simple clickjacking protection:\n    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',\n)\n\nROOT_URLCONF = 'FileManager.urls'\n\n# Python dotted path to the WSGI application used by Django's runserver.\nWSGI_APPLICATION = 'FileManager.wsgi.application'\n\nTEMPLATE_DIRS = (\n    # Put strings here, like \"/home/html/django_templates\" or \"C:/www/django/templates\".\n    # Always use forward slashes, even on Windows.\n    # Don't forget to use absolute paths, not relative paths.\n)\n\nINSTALLED_APPS = (\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.sites',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'manager',\n    # Uncomment the next line to enable the admin:\n    'django.contrib.admin',\n    # Uncomment the next line to enable admin documentation:\n    # 'django.contrib.admindocs',\n)\n\nSESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'\n\n# A sample logging configuration. The only tangible logging\n# performed by this configuration is to send an email to\n# the site admins on every HTTP 500 error when DEBUG=False.\n# See http://docs.djangoproject.com/en/dev/topics/logging for\n# more details on how to customize your logging configuration.\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'filters': {\n        'require_debug_false': {\n            '()': 'django.utils.log.RequireDebugFalse'\n        }\n    },\n    'handlers': {\n        'mail_admins': {\n            'level': 'ERROR',\n            'filters': ['require_debug_false'],\n            'class': 'django.utils.log.AdminEmailHandler'\n        }\n    },\n    'loggers': {\n        'django.request': {\n            'handlers': ['mail_admins'],\n            'level': 'ERROR',\n            'propagate': True,\n        },\n    }\n}\n"
    },
    {
        "instruction": "Write a Python function that takes in a list of words and returns a dictionary where the keys are the words and the values are the number of times each word appears in the list.",
        "input": "words = [\"Apple\", \"Banana\", \"Apple\", \"Mango\", \"Banana\"]",
        "output": "def count_words(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\n\nwords = [\"Apple\", \"Banana\", \"Apple\", \"Mango\", \"Banana\"]\nword_count = count_words(words)\nprint(word_count)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes in a list of words and returns a dictionary where the keys are the words and the values are the number of times each word appears in the list.\n\n### Input:\nwords = [\"Apple\", \"Banana\", \"Apple\", \"Mango\", \"Banana\"]\n\n### Output:\ndef count_words(words):\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count\n\nwords = [\"Apple\", \"Banana\", \"Apple\", \"Mango\", \"Banana\"]\nword_count = count_words(words)\nprint(word_count)"
    },
    {
        "instruction": "Create a webserver in Python that can take HTTP requests and return a response.",
        "input": "",
        "output": "from http.server import HTTPServer, BaseHTTPRequestHandler\n\nclass SimpleHTTPRequestHandler(BaseHTTPRequestHandler):\n\n    def do_GET(self):\n        self.send_response(200)\n        self.end_headers()\n        self.wfile.write(b'Hello, world!')\n\nhttpd = HTTPServer(('localhost', 8000), SimpleHTTPRequestHandler)\nhttpd.serve_forever()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a webserver in Python that can take HTTP requests and return a response.\n\n### Input:\n\n\n### Output:\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\n\nclass SimpleHTTPRequestHandler(BaseHTTPRequestHandler):\n\n    def do_GET(self):\n        self.send_response(200)\n        self.end_headers()\n        self.wfile.write(b'Hello, world!')\n\nhttpd = HTTPServer(('localhost', 8000), SimpleHTTPRequestHandler)\nhttpd.serve_forever()"
    },
    {
        "instruction": "Create a Python code to expand a given integer range.",
        "input": "3-11",
        "output": "def expand_range(value):\n  return [x for x in range(int(value[0]), int(value[2]) + 1)]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code to expand a given integer range.\n\n### Input:\n3-11\n\n### Output:\ndef expand_range(value):\n  return [x for x in range(int(value[0]), int(value[2]) + 1)]"
    },
    {
        "instruction": "Write a python program to solve a given 0-1 knapsack problem.",
        "input": "",
        "output": "def knapsack(capacity, values, weights): \n    n = len(values) \n  \n    # Initialize the two dimensional dp table with 0s \n    dp = [[0 for x in range(capacity + 1)] for x in range(n + 1)] \n  \n    # Compute the values of the dp table \n    for i in range(n + 1): \n        for w in range(capacity + 1): \n            if i == 0 or w == 0: \n                dp[i][w] = 0\n            elif weights[i - 1] <= w: \n                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]) \n            else: \n                dp[i][w] = dp[i - 1][w] \n  \n    # Get the optimal value from the last cell \n    return dp[n][capacity]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to solve a given 0-1 knapsack problem.\n\n### Input:\n\n\n### Output:\ndef knapsack(capacity, values, weights): \n    n = len(values) \n  \n    # Initialize the two dimensional dp table with 0s \n    dp = [[0 for x in range(capacity + 1)] for x in range(n + 1)] \n  \n    # Compute the values of the dp table \n    for i in range(n + 1): \n        for w in range(capacity + 1): \n            if i == 0 or w == 0: \n                dp[i][w] = 0\n            elif weights[i - 1] <= w: \n                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]) \n            else: \n                dp[i][w] = dp[i - 1][w] \n  \n    # Get the optimal value from the last cell \n    return dp[n][capacity]"
    },
    {
        "instruction": "Design an algorithm in Python for displaying the reverse of a string input.",
        "input": "Input String: \"Hello World!\"",
        "output": "# Create a function \ndef reverse_string(str): \n    # Create an empty string  \n    rev_str = \"\" \n\n    # Iterate over the string in reverse \n    for i in str: \n        rev_str = i + rev_str\n    \n    # Return the reversed string \n    return rev_str\n\n# Driver Code\nstr = \"Hello World!\"\nprint(\"The reversed string is:\", reverse_string(str))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python for displaying the reverse of a string input.\n\n### Input:\nInput String: \"Hello World!\"\n\n### Output:\n# Create a function \ndef reverse_string(str): \n    # Create an empty string  \n    rev_str = \"\" \n\n    # Iterate over the string in reverse \n    for i in str: \n        rev_str = i + rev_str\n    \n    # Return the reversed string \n    return rev_str\n\n# Driver Code\nstr = \"Hello World!\"\nprint(\"The reversed string is:\", reverse_string(str))"
    },
    {
        "instruction": "Write a Python program to format a specified string to limit the number of characters to 6.",
        "input": "",
        "output": "def limit_chars(s):\n    return s[:6]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to format a specified string to limit the number of characters to 6.\n\n### Input:\n\n\n### Output:\ndef limit_chars(s):\n    return s[:6]"
    },
    {
        "instruction": "Write a Python script that mines Wikipedia for the top 10 most frequently used words and prints them to the console.",
        "input": "Wikipedia page for \"Artificial Intelligence\"",
        "output": "import re\nimport urllib.request\n\n# open the wiki page\nrequest = urllib.request.urlopen('https://en.wikipedia.org/wiki/Artificial_intelligence')\ncontent = request.read().decode('utf-8')\n\n# find all words using regex\nwords = re.findall(r'\\b\\w+\\b', content)\n\n# get word count\nword_count = {}\nfor word in words:\n\tif word in word_count:\n\t\tword_count[word] += 1\n\telse:\n\t\tword_count[word] = 1\n\n# sort words by frequency\nsorted_words = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n\n#print top 10 words\nfor word, count in sorted_words[:10]:\n\tprint(word, count)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that mines Wikipedia for the top 10 most frequently used words and prints them to the console.\n\n### Input:\nWikipedia page for \"Artificial Intelligence\"\n\n### Output:\nimport re\nimport urllib.request\n\n# open the wiki page\nrequest = urllib.request.urlopen('https://en.wikipedia.org/wiki/Artificial_intelligence')\ncontent = request.read().decode('utf-8')\n\n# find all words using regex\nwords = re.findall(r'\\b\\w+\\b', content)\n\n# get word count\nword_count = {}\nfor word in words:\n\tif word in word_count:\n\t\tword_count[word] += 1\n\telse:\n\t\tword_count[word] = 1\n\n# sort words by frequency\nsorted_words = sorted(word_count.items(), key=lambda x: x[1], reverse=True)\n\n#print top 10 words\nfor word, count in sorted_words[:10]:\n\tprint(word, count)"
    },
    {
        "instruction": "Generate a Python program to round a floating point number to a certain number of decimal places.",
        "input": "2.71828, 3",
        "output": "def round_float(num, decimal_ places):\n    '''\n    Function to round a floating point number to a certain number of decimal places\n    '''\n    return round(num, decimal_places)\n\nresult = round_float(2.71828, 3)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to round a floating point number to a certain number of decimal places.\n\n### Input:\n2.71828, 3\n\n### Output:\ndef round_float(num, decimal_ places):\n    '''\n    Function to round a floating point number to a certain number of decimal places\n    '''\n    return round(num, decimal_places)\n\nresult = round_float(2.71828, 3)\nprint(result)"
    },
    {
        "instruction": "Build an AI assistant in Python for playing the game \"Tic-Tac-Toe\".",
        "input": "",
        "output": "# Define the board size \nBOARD_SIZE = 3 \n\n# Define the player moves \nPLAYER_X = 'X' \nPLAYER_O = 'O'\n\n# Define the empty cell \nEMPTY = ' '\n\n# Create a list to represent the board \nboard = [] \nfor i in range(BOARD_SIZE): \n    row = [EMPTY] * BOARD_SIZE \n    board.append(row)\n\n# Function to check the game status \ndef check_game_status(): \n    # Check if the player has won \n    if check_win(PLAYER_X): \n        return \"X won!\" \n    elif check_win(PLAYER_O): \n        return \"O won!\" \n    # Check if the game is a draw \n    elif check_draw(): \n        return \"Draw!\"\n    # If the game is not over yet \n    else:\n        return \"Game in progress...\"\n\n# Function to check the winning condition \ndef check_win(player): \n    # Check if the player has won in a row \n    for row in board: \n        if row.count(player) == BOARD_SIZE: \n            return True\n    # Check if the player has won in a column \n    for col in range(BOARD_SIZE): \n        if board[0][col] == board[1][col] == board[2][col] == player: \n            return True \n    # Check if the player has won in a diagonal \n    if board[0][0] == board[1][1] == board[2][2] == player: \n        return True \n    if board[0][2] == board[1][1] == board[2][0] == player: \n        return True\n    # Return false if the player did not win \n    return False \n\n# Function to check if the game is a draw \ndef check_draw(): \n    for row in board: \n        for cell in row: \n            if cell == EMPTY: \n                return False \n    return True",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild an AI assistant in Python for playing the game \"Tic-Tac-Toe\".\n\n### Input:\n\n\n### Output:\n# Define the board size \nBOARD_SIZE = 3 \n\n# Define the player moves \nPLAYER_X = 'X' \nPLAYER_O = 'O'\n\n# Define the empty cell \nEMPTY = ' '\n\n# Create a list to represent the board \nboard = [] \nfor i in range(BOARD_SIZE): \n    row = [EMPTY] * BOARD_SIZE \n    board.append(row)\n\n# Function to check the game status \ndef check_game_status(): \n    # Check if the player has won \n    if check_win(PLAYER_X): \n        return \"X won!\" \n    elif check_win(PLAYER_O): \n        return \"O won!\" \n    # Check if the game is a draw \n    elif check_draw(): \n        return \"Draw!\"\n    # If the game is not over yet \n    else:\n        return \"Game in progress...\"\n\n# Function to check the winning condition \ndef check_win(player): \n    # Check if the player has won in a row \n    for row in board: \n        if row.count(player) == BOARD_SIZE: \n            return True\n    # Check if the player has won in a column \n    for col in range(BOARD_SIZE): \n        if board[0][col] == board[1][col] == board[2][col] == player: \n            return True \n    # Check if the player has won in a diagonal \n    if board[0][0] == board[1][1] == board[2][2] == player: \n        return True \n    if board[0][2] == board[1][1] == board[2][0] == player: \n        return True\n    # Return false if the player did not win \n    return False \n\n# Function to check if the game is a draw \ndef check_draw(): \n    for row in board: \n        for cell in row: \n            if cell == EMPTY: \n                return False \n    return True"
    },
    {
        "instruction": "Develop a Python script that takes two parameters and prints the greatest out of them.",
        "input": "",
        "output": "def find_greatest(param1, param2):\n  if param1 > param2:\n      greater = param1\n  else:\n      greater = param2\n  return greater",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python script that takes two parameters and prints the greatest out of them.\n\n### Input:\n\n\n### Output:\ndef find_greatest(param1, param2):\n  if param1 > param2:\n      greater = param1\n  else:\n      greater = param2\n  return greater"
    },
    {
        "instruction": "Create a program in Python to generate and print all possible permutations of a given set of characters.",
        "input": "[A, B, C]",
        "output": "import itertools\n \ndef permutations(characters):\n permut = itertools.permutations(characters)\n\n for p in list(permut): \n print(\"\".join(p))\n\n# Usage\ncharacters = ['A', 'B', 'C']\npermutations(characters)\n\n# Output\nABC\nACB\nBAC\nBCA\nCAB\nCBA",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to generate and print all possible permutations of a given set of characters.\n\n### Input:\n[A, B, C]\n\n### Output:\nimport itertools\n \ndef permutations(characters):\n permut = itertools.permutations(characters)\n\n for p in list(permut): \n print(\"\".join(p))\n\n# Usage\ncharacters = ['A', 'B', 'C']\npermutations(characters)\n\n# Output\nABC\nACB\nBAC\nBCA\nCAB\nCBA"
    },
    {
        "instruction": "Design a python program to parse a CSV and detect the presence of duplicates",
        "input": "No Input",
        "output": "def find_duplicates(csv_file):\n    \"\"\"\n    A function to detect duplicates in a CSV.\n\n    Args:\n        csv_file (str): The path of the CSV file to be processed.\n\n    Returns: \n        Set of duplicates found.\n    \"\"\" \n    duplicates = set()    \n    \n    # Open and read the CSV file\n    with open(csv_file,'r') as csvfile:\n        lines = csv.reader(csvfile)\n        # Read data into a list of lists       \n        data_list = list(lines)\n        # Store the no. of columns in csv \n        col = len(data_list[0]) \n  \n    for i in range(len(data_list)-1): \n        for j in range(i + 1, len(data_list)): \n            count = 0\n            for k in range(col): \n                if data_list[i][k] != data_list[j][k]: \n                    break\n                count += 1\n  \n            # If each value of the row is same, add to duplicates list\n            if count == col: \n                duplicates.add(tuple(data_list[i]))\n  \n    return duplicates",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program to parse a CSV and detect the presence of duplicates\n\n### Input:\nNo Input\n\n### Output:\ndef find_duplicates(csv_file):\n    \"\"\"\n    A function to detect duplicates in a CSV.\n\n    Args:\n        csv_file (str): The path of the CSV file to be processed.\n\n    Returns: \n        Set of duplicates found.\n    \"\"\" \n    duplicates = set()    \n    \n    # Open and read the CSV file\n    with open(csv_file,'r') as csvfile:\n        lines = csv.reader(csvfile)\n        # Read data into a list of lists       \n        data_list = list(lines)\n        # Store the no. of columns in csv \n        col = len(data_list[0]) \n  \n    for i in range(len(data_list)-1): \n        for j in range(i + 1, len(data_list)): \n            count = 0\n            for k in range(col): \n                if data_list[i][k] != data_list[j][k]: \n                    break\n                count += 1\n  \n            # If each value of the row is same, add to duplicates list\n            if count == col: \n                duplicates.add(tuple(data_list[i]))\n  \n    return duplicates"
    },
    {
        "instruction": "Create a machine learning model in Python that classifies the sentiment in a given sentence.",
        "input": "",
        "output": "# Import the libraries\nimport pandas as pd\nimport numpy as np\nfrom nltk.tokenize import word_tokenize \nfrom nltk.corpus import stopwords \nimport re\nfrom sklearn.naive_bayes import MultinomialNB \nfrom sklearn.feature_extraction.text import CountVectorizer \n\n# Read data\ndata = pd.read_csv(\"data.csv\")\n\n# Preprocessing\nstop_words = set(stopwords.words('english'))\ndata['review'] = data['review'].apply(lambda x: x.lower())\ndata['review'] = data['review'].apply(lambda x: re.sub(r'[^\\w\\s]','',x))\ndata['review'] = data['review'].apply(lambda x: ' '.join([word for word in x.split() if word not in stop_words]))\n\n# Vectorizing\nvectorizer = CountVectorizer(max_features=2000)\nX = vectorizer.fit_transform(data.review).toarray()\ny = data.label\n\n# Training\nclassifier = MultinomialNB()\nclassifier.fit(X, y)\n\n# Testing\ndef sentiment_classifier(sentence):\n  sentence = sentence.lower()\n  sentence = re.sub(r'[^\\w\\s]','',sentence)\n  sentence = [word for word in sentence.split() if word not in stop_words]\n  sentence = ' '.join(sentence)\n\n  data = vectorizer.transform([sentence]).toarray()\n  result = classifier.predict(data)[0]\n  \n  if result == 1:\n    print('positive')\n  else:\n    print('negative')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model in Python that classifies the sentiment in a given sentence.\n\n### Input:\n\n\n### Output:\n# Import the libraries\nimport pandas as pd\nimport numpy as np\nfrom nltk.tokenize import word_tokenize \nfrom nltk.corpus import stopwords \nimport re\nfrom sklearn.naive_bayes import MultinomialNB \nfrom sklearn.feature_extraction.text import CountVectorizer \n\n# Read data\ndata = pd.read_csv(\"data.csv\")\n\n# Preprocessing\nstop_words = set(stopwords.words('english'))\ndata['review'] = data['review'].apply(lambda x: x.lower())\ndata['review'] = data['review'].apply(lambda x: re.sub(r'[^\\w\\s]','',x))\ndata['review'] = data['review'].apply(lambda x: ' '.join([word for word in x.split() if word not in stop_words]))\n\n# Vectorizing\nvectorizer = CountVectorizer(max_features=2000)\nX = vectorizer.fit_transform(data.review).toarray()\ny = data.label\n\n# Training\nclassifier = MultinomialNB()\nclassifier.fit(X, y)\n\n# Testing\ndef sentiment_classifier(sentence):\n  sentence = sentence.lower()\n  sentence = re.sub(r'[^\\w\\s]','',sentence)\n  sentence = [word for word in sentence.split() if word not in stop_words]\n  sentence = ' '.join(sentence)\n\n  data = vectorizer.transform([sentence]).toarray()\n  result = classifier.predict(data)[0]\n  \n  if result == 1:\n    print('positive')\n  else:\n    print('negative')"
    },
    {
        "instruction": "Design a function in Python to search for a given number in a list.",
        "input": "List: [1, 2, 3, 4, 5]\nNumber: 4",
        "output": "def search_list(lst, num):\n    for i in range(len(lst)):\n        if lst[i] == num:\n            return i\n    return -1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to search for a given number in a list.\n\n### Input:\nList: [1, 2, 3, 4, 5]\nNumber: 4\n\n### Output:\ndef search_list(lst, num):\n    for i in range(len(lst)):\n        if lst[i] == num:\n            return i\n    return -1"
    },
    {
        "instruction": "Design a Python script to compute the sum of prime numbers below 1000",
        "input": "",
        "output": "def is_prime(num): \n    if num == 1: \n        return False\n    elif num == 2: \n        return True\n    else: \n        for n in range(2, num): \n            if (num % n == 0): \n                return False\n        return True\n\nsum = 0\nfor num in range(2, 1000):\n    if is_prime(num): \n        sum += num \n\nprint(\"Sum of prime numbers below 1000:\", sum)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script to compute the sum of prime numbers below 1000\n\n### Input:\n\n\n### Output:\ndef is_prime(num): \n    if num == 1: \n        return False\n    elif num == 2: \n        return True\n    else: \n        for n in range(2, num): \n            if (num % n == 0): \n                return False\n        return True\n\nsum = 0\nfor num in range(2, 1000):\n    if is_prime(num): \n        sum += num \n\nprint(\"Sum of prime numbers below 1000:\", sum)"
    },
    {
        "instruction": "What code is necessary to randomly shuffle a list in Python?",
        "input": "",
        "output": "import random\n\ndef shuffle(list):\n    random.shuffle(list)\n    return list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWhat code is necessary to randomly shuffle a list in Python?\n\n### Input:\n\n\n### Output:\nimport random\n\ndef shuffle(list):\n    random.shuffle(list)\n    return list"
    },
    {
        "instruction": "Generate a Python program to print a square matrix of size n containing the numbers from 11 to n*n.",
        "input": "3",
        "output": "n = 3\n\noutput_matrix = [[0 for x in range(n)] for y in range(n)] \n  \nnum = 1\n  \nfor i in range (0, n):    \n for j in range(0, n):     \n output_matrix[i][j] = num    \n num = num + 1    \n  \nfor i in range(0, n):\n for j in range(0, n):\n print(output_matrix[i][j], end = \" \")\n print(\"\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to print a square matrix of size n containing the numbers from 11 to n*n.\n\n### Input:\n3\n\n### Output:\nn = 3\n\noutput_matrix = [[0 for x in range(n)] for y in range(n)] \n  \nnum = 1\n  \nfor i in range (0, n):    \n for j in range(0, n):     \n output_matrix[i][j] = num    \n num = num + 1    \n  \nfor i in range(0, n):\n for j in range(0, n):\n print(output_matrix[i][j], end = \" \")\n print(\"\")"
    },
    {
        "instruction": "Write a Python function to calculate the cosine similarity between two vectors.",
        "input": "vector1 = [1,2,3]\nvector2 = [2,4,6]",
        "output": "def cosine_similarity(vector1, vector2):\n '''\n Calculate the cosine similarity between two vectors\n Inputs:\n vector1 - list of numbers\n vector2 - list of numbers\n Output:\n cosine_similarity - float value\n '''\nimport math \n\n#Error handling\nif len(vector1) != len(vector2):\n return \"Error: vector lengths must be equal\"\n\n#Calculate dot product \ndot_product = 0\nfor i in range(len(vector1)):\n dot_product += vector1[i] * vector2[i]\n\n#Calculate vector magnitude and lengths\nmagnitude1 = 0\nmagnitude2 = 0\nfor i in range(len(vector1)):\n magnitude1 += vector1[i]**2\n magnitude2 += vector2[i]**2\n magnitude1 = math.sqrt(magnitude1)\n magnitude2 = math.sqrt(magnitude2)\n\n#Calculate and return cosine similarity\ncosine_similarity = dot_product / (magnitude1 * magnitude2)\nreturn cosine_similarity",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to calculate the cosine similarity between two vectors.\n\n### Input:\nvector1 = [1,2,3]\nvector2 = [2,4,6]\n\n### Output:\ndef cosine_similarity(vector1, vector2):\n '''\n Calculate the cosine similarity between two vectors\n Inputs:\n vector1 - list of numbers\n vector2 - list of numbers\n Output:\n cosine_similarity - float value\n '''\nimport math \n\n#Error handling\nif len(vector1) != len(vector2):\n return \"Error: vector lengths must be equal\"\n\n#Calculate dot product \ndot_product = 0\nfor i in range(len(vector1)):\n dot_product += vector1[i] * vector2[i]\n\n#Calculate vector magnitude and lengths\nmagnitude1 = 0\nmagnitude2 = 0\nfor i in range(len(vector1)):\n magnitude1 += vector1[i]**2\n magnitude2 += vector2[i]**2\n magnitude1 = math.sqrt(magnitude1)\n magnitude2 = math.sqrt(magnitude2)\n\n#Calculate and return cosine similarity\ncosine_similarity = dot_product / (magnitude1 * magnitude2)\nreturn cosine_similarity"
    },
    {
        "instruction": "Rewrite the code snippet to Python 3.",
        "input": "def my_list(list):\n  new_list = []\n  for item in list:\n    new_list.append(item * 2)\n  return new_list",
        "output": "def my_list(list):\n  new_list = []\n  for item in list:\n    new_list.append(item * 2)\n  return new_list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the code snippet to Python 3.\n\n### Input:\ndef my_list(list):\n  new_list = []\n  for item in list:\n    new_list.append(item * 2)\n  return new_list\n\n### Output:\ndef my_list(list):\n  new_list = []\n  for item in list:\n    new_list.append(item * 2)\n  return new_list"
    },
    {
        "instruction": "This code is a mini key/password manager written in Python using the AES encryption algorithm. To use it, create an instance of the KeyBox class with a file path to store the keys. You can then list, search, add, view, modify, or delete keys. To import keys from a text file, use the \"import\" sub-command followed by the file path. To export keys to a file, use the \"export\" sub-command followed by an optional file path. To reset the master password, use the \"reset\" sub-command.",
        "input": "",
        "output": "#!/usr/bin/env python\n\n\"\"\"A mini key/password manager written in python using the AES encryption algorithm.\"\"\"\n\nimport os\nimport sys\nimport time\nimport os.path\nimport random\nimport sqlite3\nimport hashlib\nimport getpass\nimport argparse\n\nimport Crypto.Cipher.AES\n\n\nclass KeyBox(object):\n    TABLE_NAME = \"keybox\"\n    MASTER_KEY_TITLE = \"<MASTER>\"\n\n    def __init__(self, a_file):\n        # the AES key of the master password, to encrypt key content\n        self.aes_key = None\n\n        self.conn = sqlite3.connect(a_file)\n        # Use 8-bit string instead of unicode string, in order to read/write\n        # international characters like Chinese\n        self.conn.text_factory = str\n        # The following line would use unicode string\n        # self.conn.text_factory = lambda x: unicode(x, 'utf-8', 'ignore')\n        self.cursor = self.conn.cursor()\n        self.cursor.execute('CREATE TABLE IF NOT EXISTS %s (title TEXT PRIMARY KEY, time LONG, content BLOB)' %\n                            KeyBox.TABLE_NAME)\n        self.conn.commit()\n\n    def list(self):\n        title_time_list = []\n        self.cursor.execute('SELECT title,time FROM %s ORDER BY time DESC' % KeyBox.TABLE_NAME)\n        for row in self.cursor:\n            if row[0] != KeyBox.MASTER_KEY_TITLE:\n                title_time_list.append((row[0], row[1]))\n        return title_time_list\n\n    def search(self, keywords):\n        keywords_lower = {keyword.lower() for keyword in keywords}\n        matching_title_time_list = []\n        for title, mod_time in self.list():\n            title_lower = title.lower()\n            match = True\n            for keyword in keywords_lower:\n                if title_lower.find(keyword) == -1:\n                    match = False\n                    break\n            if match:\n                matching_title_time_list.append((title, mod_time))\n        return matching_title_time_list\n\n    def exists(self, title):\n        self.cursor.execute(\"SELECT time FROM %s WHERE title=?\" % KeyBox.TABLE_NAME, (title,))\n        return self.cursor.fetchone() is not None\n\n    def init_master_password(self, table=TABLE_NAME):\n        password = input_password(\"Create a new master password: \")\n        if password == input_password(\"Confirm the master password: \"):\n            self.aes_key = hashlib.sha256(password).digest()\n            # the hash of the AES key, stored in db for master password verification\n            key_hash = hashlib.sha256(self.aes_key).hexdigest()\n            self.cursor.execute(\"INSERT OR REPLACE INTO %s VALUES (?,?,?)\" % table,\n                                (KeyBox.MASTER_KEY_TITLE, time.time(), key_hash))\n            self.conn.commit()\n        else:\n            exit_with_error(\"Error: password not match, please retry\")\n\n    def verify_master_password(self):\n        # get the stored key hash\n        self.cursor.execute(\"SELECT content FROM %s WHERE title=?\"\n                            % KeyBox.TABLE_NAME, (KeyBox.MASTER_KEY_TITLE,))\n        stored_key_hash = self.cursor.fetchone()[0]\n        # input master password\n        password = input_password(\"Master password: \")\n        self.aes_key = hashlib.sha256(password).digest()\n        # compare key hash\n        if hashlib.sha256(self.aes_key).hexdigest() != stored_key_hash:\n            exit_with_error(\"Error: incorrect master password, please retry\")\n\n    def view(self, title):\n        self.cursor.execute(\"SELECT time, content FROM %s WHERE title=?\"\n                            % KeyBox.TABLE_NAME, (title,))\n        mod_time, encrypted = self.cursor.fetchone()\n        return mod_time, decrypt(encrypted, self.aes_key)\n\n    def set(self, title, plain, mod_time=time.time(), table=TABLE_NAME):\n        # for better print effect\n        if plain[-1] != \"\\n\": plain += \"\\n\"\n        encrypted = encrypt(plain, self.aes_key)\n        self.cursor.execute(\"INSERT OR REPLACE INTO %s VALUES (?,?,?)\" % table,\n                            (title, mod_time, sqlite3.Binary(encrypted)))\n        self.conn.commit()\n\n    def delete(self, title):\n        mod_time, plain = self.view(title)\n        self.cursor.execute(\"DELETE FROM %s WHERE title=?\" % KeyBox.TABLE_NAME, (title,))\n        self.conn.commit()\n        return mod_time, plain\n\n    def reset(self):\n        tmp_table = \"_tmp_\"\n        self.cursor.execute('DROP TABLE IF EXISTS %s' % tmp_table)\n        self.cursor.execute('CREATE TABLE %s (title TEXT PRIMARY KEY, time LONG, content BLOB)' % tmp_table)\n        keys = []\n        for title, mod_time in self.list():\n            content = self.view(title)\n            keys.append((title, mod_time, content))\n        self.init_master_password(table=tmp_table)\n        for title, mod_time, content in keys:\n            self.set(title, content, mod_time=mod_time, table=tmp_table)\n        self.cursor.execute(\"DROP TABLE %s\" % KeyBox.TABLE_NAME)\n        self.cursor.execute(\"ALTER TABLE %s RENAME TO %s\" % (tmp_table, KeyBox.TABLE_NAME))\n        self.conn.commit()\n\n\ndef input_content(title):\n    sys.stdout.write(\"Input content of '%s', enter an empty line to finish:\\n\" % title)\n    lines = []\n    while True:\n        line = raw_input()\n        if line:\n            lines.append(line)\n        else:\n            break\n    return '\\n'.join(lines)\n\n\ndef input_password(text):\n    password = getpass.getpass(text)\n    if password == \"\":\n        exit_with_error(\"Error: password not given\")\n    return password\n\n\ndef encrypt(plain, aes_key):\n    iv = ''.join(chr(random.randint(0, 0xFF)) for _ in range(Crypto.Cipher.AES.block_size))\n    cipher = Crypto.Cipher.AES.AESCipher(aes_key, Crypto.Cipher.AES.MODE_CFB, iv)\n    return iv + cipher.encrypt(plain)\n\n\ndef decrypt(encrypted, aes_key):\n    iv = encrypted[0:Crypto.Cipher.AES.block_size]\n    cipher = Crypto.Cipher.AES.AESCipher(aes_key, Crypto.Cipher.AES.MODE_CFB, iv)\n    return cipher.decrypt(encrypted[Crypto.Cipher.AES.block_size:])\n\n\ndef read_keys(a_file):\n    \"\"\"\n    Supported text file format is as follows:\n\n    KEY: key title1\n    MOD: 1540820240.0\n    key content line 11\n    key content line 12\n    ...\n\n    KEY: key title2\n    key content line 21\n    key content line 22\n    ...\n\n    \"\"\"\n    keys = []\n    with open(a_file, 'r') as fd:\n        title = ''\n        mod_time = -1\n        content_lines = []\n        for line in fd:\n            line = line.strip()\n            if line.startswith(\"KEY: \"):  # title line\n                if title != '' and content_lines != []:\n                    # remove the empty lines at the end\n                    while len(content_lines) > 0 and content_lines[-1] == \"\\n\":\n                        content_lines = content_lines[:-1]\n                    # add to keys for return\n                    if mod_time < 0: mod_time = time.time()\n                    keys.append((title, mod_time, '\\n'.join([aLine for aLine in content_lines])))\n                # set next key title, and clear content\n                title = line[5:]\n                content_lines = []\n            elif line.startswith(\"MOD: \"):\n                mod_time = float(line[5:])\n            elif title != \"\":\n                content_lines.append(line)\n            else:\n                sys.stderr.write(\"Warn: line '%s' ignored: title missing\\n\" % line)\n    # process the last key\n    if title != '' and content_lines != []:\n        # remove the empty lines at the end\n        while len(content_lines) > 0 and content_lines[-1] == \"\\n\":\n            content_lines = content_lines[:-1]\n        # add to keys for return\n        if mod_time < 0: mod_time = time.time()\n        keys.append((title, mod_time, '\\n'.join([aLine for aLine in content_lines])))\n\n    return keys\n\n\ndef exit_with_error(err_msg, err_code=-1):\n    sys.stderr.write(err_msg + \"\\n\")\n    sys.exit(err_code)\n\n\ndef get_default_db_file():\n    keybox_file = \"%s/.keybox\" % os.environ['HOME']\n    if not os.path.exists(keybox_file):\n        return \"%s/%s.keybox\" % (os.environ['HOME'], os.environ['USER'])\n\n    with open(keybox_file, 'r') as fd:\n        for line in fd:\n            return line\n\n\ndef set_default_db_file(a_file):\n    keybox_file = \"%s/.keybox\" % os.environ['HOME']\n    with open(keybox_file, 'w') as fd:\n        fd.write(os.path.abspath(a_file))\n\n\ndef main():\n    # parse command line arguments\n    parser = argparse.ArgumentParser(add_help=False)\n    parser.add_argument('-d', '--database',\n                        help=('the sqlite database file to store keys. ' +\n                              'Default: the previously used database file (see its location in %s/.keybox), ' +\n                              'or %s/%s.keybox') % (os.environ[\"HOME\"], os.environ[\"HOME\"], os.environ['USER']))\n    subparsers = parser.add_subparsers(title=\"sub_commands\", dest=\"action\",\n                                       metavar='help|list|view|add|mod|del|import|export|reset')\n    subparsers.add_parser(\"help\", help=\"show this help message and exit\")\n\n    subparsers.add_parser(\"list\", help=\"list all key titles (this is default)\")\n\n    sub_parser = subparsers.add_parser(\"add\", help=\"add a new key title and content\")\n    sub_parser.add_argument(\"title\", help=\"a key title\")\n\n    sub_parser = subparsers.add_parser(\"view\", help=\"view the content for the key title matching the given keywords\")\n    sub_parser.add_argument(\"keyword\", nargs=\"+\", help=\"a keyword\")\n    sub_parser = subparsers.add_parser(\"mod\", help=\"modify the content for the key title matching the given keywords\")\n    sub_parser.add_argument(\"keyword\", nargs=\"+\", help=\"a keyword\")\n    sub_parser = subparsers.add_parser(\"del\",\n                                       help=\"delete an existing key title matching the given keywords and the key \" +\n                                            \"content\")\n    sub_parser.add_argument(\"keyword\", nargs=\"+\", help=\"a keyword\")\n\n    sub_parser = subparsers.add_parser(\"import\", help=\"import all key titles and contents from a text file\")\n    sub_parser.add_argument(\"file\", help=\"a text file containing key titles and contents to import\")\n    sub_parser = subparsers.add_parser(\"export\", help=\"export all key titles and contents to stdout or a file\")\n    sub_parser.add_argument(\"file\", nargs='?', help=\"a text file to export the key titles and contents\")\n\n    subparsers.add_parser(\"reset\", help=\"reset the master password\")\n\n    # 'list' if no sub-command is given\n    if len(sys.argv) == 1:\n        sys.argv.append('list')\n\n    args = parser.parse_args()\n\n    if args.action == 'help':\n        parser.print_help()\n        sys.exit(0)\n\n    if args.database is None:\n        args.database = get_default_db_file()  # type: str\n    else:\n        set_default_db_file(args.database)\n    keybox = KeyBox(args.database)\n    if args.action == 'list':\n        title_time_array = keybox.list()\n        if len(title_time_array) == 0:\n            sys.stdout.write(\"No item found\\n\")\n        else:\n            for title, mod_time in title_time_array:\n                print time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(mod_time)) + \" - \" + title\n        sys.exit(0)\n\n    # check errors before init or verify master password\n    if args.action == 'add':\n        if keybox.exists(args.title):\n            exit_with_error(\"Error: '%s' exists, try to view it or add with another title\" % args.title)\n    if args.action in ['view', 'mod', 'del']:\n        matches = keybox.search(args.keyword)\n        if len(matches) == 0:\n            exit_with_error(\n                \"Error: no title matching the given keywords, try to list all titles or change to another title\")\n        else:\n            sys.stdout.write(\"Found the following titles:\\n\")\n            for index, (title, mod_time) in enumerate(matches):\n                mod_str = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(mod_time))\n                print \"[%d] %s - %s\" % (index, mod_str, title)\n\n            index = 0\n            if len(matches) > 1:\n                index = -1\n                while index < 0 or index >= len(matches):\n                    index = raw_input(\"Select: [0] \").strip()\n                    if len(index) == 0:\n                        index = 0\n                        break\n                    else:\n                        try:\n                            index = int(index)\n                        except ValueError:\n                            pass\n\n            args.title = matches[index][0]\n\n    elif args.action == \"import\":\n        if not os.path.exists(args.file):\n            exit_with_error(\"Error: file '%s' not found.\" % args.file)\n    elif args.action == \"export\":\n        fd = sys.stdout\n        if args.file is not None:\n            if os.path.exists(args.file):\n                exit_with_error(\"Error: file exists, please choose a different file to export\")\n            else:\n                fd = open(args.file, 'w')\n    elif args.action == \"reset\":\n        if not keybox.exists(KeyBox.MASTER_KEY_TITLE):\n            exit_with_error(\"Error: master password is not set yet\")\n\n    if not keybox.exists(KeyBox.MASTER_KEY_TITLE):\n        keybox.init_master_password()\n    else:\n        keybox.verify_master_password()\n\n    if args.action == 'add':\n        plain = input_content(args.title)\n        keybox.set(args.title, plain)\n    elif args.action == \"view\":\n        mod_time, plain = keybox.view(args.title)\n        mod_str = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(mod_time))\n        sys.stdout.write(\"---\\nKEY: %s\\nMOD: %s\\n%s---\\n\" % (args.title, mod_str, plain))\n    elif args.action == \"mod\":\n        sys.stdout.write(\"---\\n%s---\\n\" % keybox.view(args.title)[1])\n        plain = input_content(args.title)\n        keybox.set(args.title, plain)\n    elif args.action == \"del\":\n        mod_time, plain = keybox.view(args.title)\n        mod_str = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(mod_time))\n        sys.stdout.write(\"---\\nKEY: %s:\\nMOD: %s\\n%s---\\n\" % (args.title, mod_str, plain))\n        confirm = raw_input(\"Confirm to delete key '%s' [yes/no]? \" % args.title)\n        while confirm not in ['yes', 'no']:\n            confirm = raw_input(\"Confirm to delete key '%s' [yes/no]? \" % args.title)\n        if confirm == 'yes':\n            keybox.delete(args.title)\n            sys.stdout.write(\"Deleted.\\n\")\n    elif args.action == \"import\":\n        for title, mod_time, content in read_keys(args.file):\n            if keybox.exists(title):\n                sys.stdout.write(\"skipped %s: exists in database\\n\" % title)\n            else:\n                keybox.set(title, content, mod_time=mod_time)\n                sys.stdout.write(\"imported %s\\n\" % title)\n    elif args.action == \"export\":\n        if fd == sys.stdout: fd.write(\"---\\n\")\n        for title, mod_time in keybox.list():\n            fd.write(\"KEY: %s\\n\" % title)\n            fd.write(\"MOD: %s\\n\" % mod_time)\n            fd.write(\"%s\" % keybox.view(title)[1])\n            if fd == sys.stdout:\n                fd.write(\"---\\n\")\n            else:\n                fd.write(\"\\n\")\n        if fd != sys.stdout:\n            sys.stdout.write(\"Exported to file %s\\n\" % args.file)\n    elif args.action == \"reset\":\n        keybox.reset()\n\n\nif __name__ == '__main__':\n    try:\n        main()\n    except KeyboardInterrupt:\n        sys.stdout.write(\"\\nUser aborted.\\n\")\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a mini key/password manager written in Python using the AES encryption algorithm. To use it, create an instance of the KeyBox class with a file path to store the keys. You can then list, search, add, view, modify, or delete keys. To import keys from a text file, use the \"import\" sub-command followed by the file path. To export keys to a file, use the \"export\" sub-command followed by an optional file path. To reset the master password, use the \"reset\" sub-command.\n\n### Input:\n\n\n### Output:\n#!/usr/bin/env python\n\n\"\"\"A mini key/password manager written in python using the AES encryption algorithm.\"\"\"\n\nimport os\nimport sys\nimport time\nimport os.path\nimport random\nimport sqlite3\nimport hashlib\nimport getpass\nimport argparse\n\nimport Crypto.Cipher.AES\n\n\nclass KeyBox(object):\n    TABLE_NAME = \"keybox\"\n    MASTER_KEY_TITLE = \"<MASTER>\"\n\n    def __init__(self, a_file):\n        # the AES key of the master password, to encrypt key content\n        self.aes_key = None\n\n        self.conn = sqlite3.connect(a_file)\n        # Use 8-bit string instead of unicode string, in order to read/write\n        # international characters like Chinese\n        self.conn.text_factory = str\n        # The following line would use unicode string\n        # self.conn.text_factory = lambda x: unicode(x, 'utf-8', 'ignore')\n        self.cursor = self.conn.cursor()\n        self.cursor.execute('CREATE TABLE IF NOT EXISTS %s (title TEXT PRIMARY KEY, time LONG, content BLOB)' %\n                            KeyBox.TABLE_NAME)\n        self.conn.commit()\n\n    def list(self):\n        title_time_list = []\n        self.cursor.execute('SELECT title,time FROM %s ORDER BY time DESC' % KeyBox.TABLE_NAME)\n        for row in self.cursor:\n            if row[0] != KeyBox.MASTER_KEY_TITLE:\n                title_time_list.append((row[0], row[1]))\n        return title_time_list\n\n    def search(self, keywords):\n        keywords_lower = {keyword.lower() for keyword in keywords}\n        matching_title_time_list = []\n        for title, mod_time in self.list():\n            title_lower = title.lower()\n            match = True\n            for keyword in keywords_lower:\n                if title_lower.find(keyword) == -1:\n                    match = False\n                    break\n            if match:\n                matching_title_time_list.append((title, mod_time))\n        return matching_title_time_list\n\n    def exists(self, title):\n        self.cursor.execute(\"SELECT time FROM %s WHERE title=?\" % KeyBox.TABLE_NAME, (title,))\n        return self.cursor.fetchone() is not None\n\n    def init_master_password(self, table=TABLE_NAME):\n        password = input_password(\"Create a new master password: \")\n        if password == input_password(\"Confirm the master password: \"):\n            self.aes_key = hashlib.sha256(password).digest()\n            # the hash of the AES key, stored in db for master password verification\n            key_hash = hashlib.sha256(self.aes_key).hexdigest()\n            self.cursor.execute(\"INSERT OR REPLACE INTO %s VALUES (?,?,?)\" % table,\n                                (KeyBox.MASTER_KEY_TITLE, time.time(), key_hash))\n            self.conn.commit()\n        else:\n            exit_with_error(\"Error: password not match, please retry\")\n\n    def verify_master_password(self):\n        # get the stored key hash\n        self.cursor.execute(\"SELECT content FROM %s WHERE title=?\"\n                            % KeyBox.TABLE_NAME, (KeyBox.MASTER_KEY_TITLE,))\n        stored_key_hash = self.cursor.fetchone()[0]\n        # input master password\n        password = input_password(\"Master password: \")\n        self.aes_key = hashlib.sha256(password).digest()\n        # compare key hash\n        if hashlib.sha256(self.aes_key).hexdigest() != stored_key_hash:\n            exit_with_error(\"Error: incorrect master password, please retry\")\n\n    def view(self, title):\n        self.cursor.execute(\"SELECT time, content FROM %s WHERE title=?\"\n                            % KeyBox.TABLE_NAME, (title,))\n        mod_time, encrypted = self.cursor.fetchone()\n        return mod_time, decrypt(encrypted, self.aes_key)\n\n    def set(self, title, plain, mod_time=time.time(), table=TABLE_NAME):\n        # for better print effect\n        if plain[-1] != \"\\n\": plain += \"\\n\"\n        encrypted = encrypt(plain, self.aes_key)\n        self.cursor.execute(\"INSERT OR REPLACE INTO %s VALUES (?,?,?)\" % table,\n                            (title, mod_time, sqlite3.Binary(encrypted)))\n        self.conn.commit()\n\n    def delete(self, title):\n        mod_time, plain = self.view(title)\n        self.cursor.execute(\"DELETE FROM %s WHERE title=?\" % KeyBox.TABLE_NAME, (title,))\n        self.conn.commit()\n        return mod_time, plain\n\n    def reset(self):\n        tmp_table = \"_tmp_\"\n        self.cursor.execute('DROP TABLE IF EXISTS %s' % tmp_table)\n        self.cursor.execute('CREATE TABLE %s (title TEXT PRIMARY KEY, time LONG, content BLOB)' % tmp_table)\n        keys = []\n        for title, mod_time in self.list():\n            content = self.view(title)\n            keys.append((title, mod_time, content))\n        self.init_master_password(table=tmp_table)\n        for title, mod_time, content in keys:\n            self.set(title, content, mod_time=mod_time, table=tmp_table)\n        self.cursor.execute(\"DROP TABLE %s\" % KeyBox.TABLE_NAME)\n        self.cursor.execute(\"ALTER TABLE %s RENAME TO %s\" % (tmp_table, KeyBox.TABLE_NAME))\n        self.conn.commit()\n\n\ndef input_content(title):\n    sys.stdout.write(\"Input content of '%s', enter an empty line to finish:\\n\" % title)\n    lines = []\n    while True:\n        line = raw_input()\n        if line:\n            lines.append(line)\n        else:\n            break\n    return '\\n'.join(lines)\n\n\ndef input_password(text):\n    password = getpass.getpass(text)\n    if password == \"\":\n        exit_with_error(\"Error: password not given\")\n    return password\n\n\ndef encrypt(plain, aes_key):\n    iv = ''.join(chr(random.randint(0, 0xFF)) for _ in range(Crypto.Cipher.AES.block_size))\n    cipher = Crypto.Cipher.AES.AESCipher(aes_key, Crypto.Cipher.AES.MODE_CFB, iv)\n    return iv + cipher.encrypt(plain)\n\n\ndef decrypt(encrypted, aes_key):\n    iv = encrypted[0:Crypto.Cipher.AES.block_size]\n    cipher = Crypto.Cipher.AES.AESCipher(aes_key, Crypto.Cipher.AES.MODE_CFB, iv)\n    return cipher.decrypt(encrypted[Crypto.Cipher.AES.block_size:])\n\n\ndef read_keys(a_file):\n    \"\"\"\n    Supported text file format is as follows:\n\n    KEY: key title1\n    MOD: 1540820240.0\n    key content line 11\n    key content line 12\n    ...\n\n    KEY: key title2\n    key content line 21\n    key content line 22\n    ...\n\n    \"\"\"\n    keys = []\n    with open(a_file, 'r') as fd:\n        title = ''\n        mod_time = -1\n        content_lines = []\n        for line in fd:\n            line = line.strip()\n            if line.startswith(\"KEY: \"):  # title line\n                if title != '' and content_lines != []:\n                    # remove the empty lines at the end\n                    while len(content_lines) > 0 and content_lines[-1] == \"\\n\":\n                        content_lines = content_lines[:-1]\n                    # add to keys for return\n                    if mod_time < 0: mod_time = time.time()\n                    keys.append((title, mod_time, '\\n'.join([aLine for aLine in content_lines])))\n                # set next key title, and clear content\n                title = line[5:]\n                content_lines = []\n            elif line.startswith(\"MOD: \"):\n                mod_time = float(line[5:])\n            elif title != \"\":\n                content_lines.append(line)\n            else:\n                sys.stderr.write(\"Warn: line '%s' ignored: title missing\\n\" % line)\n    # process the last key\n    if title != '' and content_lines != []:\n        # remove the empty lines at the end\n        while len(content_lines) > 0 and content_lines[-1] == \"\\n\":\n            content_lines = content_lines[:-1]\n        # add to keys for return\n        if mod_time < 0: mod_time = time.time()\n        keys.append((title, mod_time, '\\n'.join([aLine for aLine in content_lines])))\n\n    return keys\n\n\ndef exit_with_error(err_msg, err_code=-1):\n    sys.stderr.write(err_msg + \"\\n\")\n    sys.exit(err_code)\n\n\ndef get_default_db_file():\n    keybox_file = \"%s/.keybox\" % os.environ['HOME']\n    if not os.path.exists(keybox_file):\n        return \"%s/%s.keybox\" % (os.environ['HOME'], os.environ['USER'])\n\n    with open(keybox_file, 'r') as fd:\n        for line in fd:\n            return line\n\n\ndef set_default_db_file(a_file):\n    keybox_file = \"%s/.keybox\" % os.environ['HOME']\n    with open(keybox_file, 'w') as fd:\n        fd.write(os.path.abspath(a_file))\n\n\ndef main():\n    # parse command line arguments\n    parser = argparse.ArgumentParser(add_help=False)\n    parser.add_argument('-d', '--database',\n                        help=('the sqlite database file to store keys. ' +\n                              'Default: the previously used database file (see its location in %s/.keybox), ' +\n                              'or %s/%s.keybox') % (os.environ[\"HOME\"], os.environ[\"HOME\"], os.environ['USER']))\n    subparsers = parser.add_subparsers(title=\"sub_commands\", dest=\"action\",\n                                       metavar='help|list|view|add|mod|del|import|export|reset')\n    subparsers.add_parser(\"help\", help=\"show this help message and exit\")\n\n    subparsers.add_parser(\"list\", help=\"list all key titles (this is default)\")\n\n    sub_parser = subparsers.add_parser(\"add\", help=\"add a new key title and content\")\n    sub_parser.add_argument(\"title\", help=\"a key title\")\n\n    sub_parser = subparsers.add_parser(\"view\", help=\"view the content for the key title matching the given keywords\")\n    sub_parser.add_argument(\"keyword\", nargs=\"+\", help=\"a keyword\")\n    sub_parser = subparsers.add_parser(\"mod\", help=\"modify the content for the key title matching the given keywords\")\n    sub_parser.add_argument(\"keyword\", nargs=\"+\", help=\"a keyword\")\n    sub_parser = subparsers.add_parser(\"del\",\n                                       help=\"delete an existing key title matching the given keywords and the key \" +\n                                            \"content\")\n    sub_parser.add_argument(\"keyword\", nargs=\"+\", help=\"a keyword\")\n\n    sub_parser = subparsers.add_parser(\"import\", help=\"import all key titles and contents from a text file\")\n    sub_parser.add_argument(\"file\", help=\"a text file containing key titles and contents to import\")\n    sub_parser = subparsers.add_parser(\"export\", help=\"export all key titles and contents to stdout or a file\")\n    sub_parser.add_argument(\"file\", nargs='?', help=\"a text file to export the key titles and contents\")\n\n    subparsers.add_parser(\"reset\", help=\"reset the master password\")\n\n    # 'list' if no sub-command is given\n    if len(sys.argv) == 1:\n        sys.argv.append('list')\n\n    args = parser.parse_args()\n\n    if args.action == 'help':\n        parser.print_help()\n        sys.exit(0)\n\n    if args.database is None:\n        args.database = get_default_db_file()  # type: str\n    else:\n        set_default_db_file(args.database)\n    keybox = KeyBox(args.database)\n    if args.action == 'list':\n        title_time_array = keybox.list()\n        if len(title_time_array) == 0:\n            sys.stdout.write(\"No item found\\n\")\n        else:\n            for title, mod_time in title_time_array:\n                print time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(mod_time)) + \" - \" + title\n        sys.exit(0)\n\n    # check errors before init or verify master password\n    if args.action == 'add':\n        if keybox.exists(args.title):\n            exit_with_error(\"Error: '%s' exists, try to view it or add with another title\" % args.title)\n    if args.action in ['view', 'mod', 'del']:\n        matches = keybox.search(args.keyword)\n        if len(matches) == 0:\n            exit_with_error(\n                \"Error: no title matching the given keywords, try to list all titles or change to another title\")\n        else:\n            sys.stdout.write(\"Found the following titles:\\n\")\n            for index, (title, mod_time) in enumerate(matches):\n                mod_str = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(mod_time))\n                print \"[%d] %s - %s\" % (index, mod_str, title)\n\n            index = 0\n            if len(matches) > 1:\n                index = -1\n                while index < 0 or index >= len(matches):\n                    index = raw_input(\"Select: [0] \").strip()\n                    if len(index) == 0:\n                        index = 0\n                        break\n                    else:\n                        try:\n                            index = int(index)\n                        except ValueError:\n                            pass\n\n            args.title = matches[index][0]\n\n    elif args.action == \"import\":\n        if not os.path.exists(args.file):\n            exit_with_error(\"Error: file '%s' not found.\" % args.file)\n    elif args.action == \"export\":\n        fd = sys.stdout\n        if args.file is not None:\n            if os.path.exists(args.file):\n                exit_with_error(\"Error: file exists, please choose a different file to export\")\n            else:\n                fd = open(args.file, 'w')\n    elif args.action == \"reset\":\n        if not keybox.exists(KeyBox.MASTER_KEY_TITLE):\n            exit_with_error(\"Error: master password is not set yet\")\n\n    if not keybox.exists(KeyBox.MASTER_KEY_TITLE):\n        keybox.init_master_password()\n    else:\n        keybox.verify_master_password()\n\n    if args.action == 'add':\n        plain = input_content(args.title)\n        keybox.set(args.title, plain)\n    elif args.action == \"view\":\n        mod_time, plain = keybox.view(args.title)\n        mod_str = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(mod_time))\n        sys.stdout.write(\"---\\nKEY: %s\\nMOD: %s\\n%s---\\n\" % (args.title, mod_str, plain))\n    elif args.action == \"mod\":\n        sys.stdout.write(\"---\\n%s---\\n\" % keybox.view(args.title)[1])\n        plain = input_content(args.title)\n        keybox.set(args.title, plain)\n    elif args.action == \"del\":\n        mod_time, plain = keybox.view(args.title)\n        mod_str = time.strftime(\"%Y-%m-%d %H:%M:%S\", time.localtime(mod_time))\n        sys.stdout.write(\"---\\nKEY: %s:\\nMOD: %s\\n%s---\\n\" % (args.title, mod_str, plain))\n        confirm = raw_input(\"Confirm to delete key '%s' [yes/no]? \" % args.title)\n        while confirm not in ['yes', 'no']:\n            confirm = raw_input(\"Confirm to delete key '%s' [yes/no]? \" % args.title)\n        if confirm == 'yes':\n            keybox.delete(args.title)\n            sys.stdout.write(\"Deleted.\\n\")\n    elif args.action == \"import\":\n        for title, mod_time, content in read_keys(args.file):\n            if keybox.exists(title):\n                sys.stdout.write(\"skipped %s: exists in database\\n\" % title)\n            else:\n                keybox.set(title, content, mod_time=mod_time)\n                sys.stdout.write(\"imported %s\\n\" % title)\n    elif args.action == \"export\":\n        if fd == sys.stdout: fd.write(\"---\\n\")\n        for title, mod_time in keybox.list():\n            fd.write(\"KEY: %s\\n\" % title)\n            fd.write(\"MOD: %s\\n\" % mod_time)\n            fd.write(\"%s\" % keybox.view(title)[1])\n            if fd == sys.stdout:\n                fd.write(\"---\\n\")\n            else:\n                fd.write(\"\\n\")\n        if fd != sys.stdout:\n            sys.stdout.write(\"Exported to file %s\\n\" % args.file)\n    elif args.action == \"reset\":\n        keybox.reset()\n\n\nif __name__ == '__main__':\n    try:\n        main()\n    except KeyboardInterrupt:\n        sys.stdout.write(\"\\nUser aborted.\\n\")\n"
    },
    {
        "instruction": "Create a python program to generate a random number from 0 to 100.",
        "input": "",
        "output": "import random\n\nrandom_num = random.randint(0,100)\nprint(random_num)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to generate a random number from 0 to 100.\n\n### Input:\n\n\n### Output:\nimport random\n\nrandom_num = random.randint(0,100)\nprint(random_num)"
    },
    {
        "instruction": "Write a Python program to validate a user-provided email address.",
        "input": "email_address = \"john@example.com\"",
        "output": "import re\n\ndef is_valid_email(email_address):\n  # check if the address follows the format\n  regex = '^[\\w]+[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n  if re.search(regex, email_address):\n    # the address is valid\n    return True\n  else:\n    # the address is invalid\n    return False\n\nemail_address = \"john@example.com\"\n\nif is_valid_email(email_address):\n  print(\"The email address is valid\")\nelse:\n  print(\"The email address is invalid\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to validate a user-provided email address.\n\n### Input:\nemail_address = \"john@example.com\"\n\n### Output:\nimport re\n\ndef is_valid_email(email_address):\n  # check if the address follows the format\n  regex = '^[\\w]+[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n  if re.search(regex, email_address):\n    # the address is valid\n    return True\n  else:\n    # the address is invalid\n    return False\n\nemail_address = \"john@example.com\"\n\nif is_valid_email(email_address):\n  print(\"The email address is valid\")\nelse:\n  print(\"The email address is invalid\")"
    },
    {
        "instruction": "Write a Python program to delete duplicate elements from a list.",
        "input": "[2, 3, 4, 5, 4, 6, 7, 5, 8]",
        "output": "def removeDuplicates(inputList):\n      tempList = [] \n      for elem in inputList: \n          if elem not in tempList: \n              tempList.append(elem)\n      return tempList\n    \noutputList = removeDuplicates([2, 3, 4, 5, 4, 6, 7, 5, 8]) \nprint(outputList)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to delete duplicate elements from a list.\n\n### Input:\n[2, 3, 4, 5, 4, 6, 7, 5, 8]\n\n### Output:\ndef removeDuplicates(inputList):\n      tempList = [] \n      for elem in inputList: \n          if elem not in tempList: \n              tempList.append(elem)\n      return tempList\n    \noutputList = removeDuplicates([2, 3, 4, 5, 4, 6, 7, 5, 8]) \nprint(outputList)"
    },
    {
        "instruction": "Write an algorithm in Python to solve the given binary search problem",
        "input": "Find the element x in a sorted array arr.",
        "output": "def binarySearch(arr, x): \n  \n    l = 0\n    h = len(arr) - 1\n  \n    while l <= h: \n  \n        mid = int(l + (h - l)/2) \n  \n        # Check if x is present at mid \n        if arr[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        elif arr[mid] < x: \n            l = mid + 1\n  \n        # If x is smaller, ignore right half \n        else: \n            h = mid - 1\n      \n    # If we reach here, then the element \n    # was not present \n    return -1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to solve the given binary search problem\n\n### Input:\nFind the element x in a sorted array arr.\n\n### Output:\ndef binarySearch(arr, x): \n  \n    l = 0\n    h = len(arr) - 1\n  \n    while l <= h: \n  \n        mid = int(l + (h - l)/2) \n  \n        # Check if x is present at mid \n        if arr[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        elif arr[mid] < x: \n            l = mid + 1\n  \n        # If x is smaller, ignore right half \n        else: \n            h = mid - 1\n      \n    # If we reach here, then the element \n    # was not present \n    return -1"
    },
    {
        "instruction": "Generate a text-based adventure game in Python with 3 levels and 3 items.",
        "input": "Not applicable",
        "output": "## Text Adventure Game in Python\n\nimport random\n\n# Define the levels \nlevel_1 = {\n  'description': 'You find yourself in a dark, mysterious forest.',\n  'items': ['torch', 'rope', 'map'],\n  'level_up': level_2\n  }\nlevel_2 = {\n  'description': 'You have entered a castle with a large, spooky looking door.',\n  'items': ['key', 'axe', 'hat'],\n  'level_up': level_3\n  }\nlevel_3 = {\n  'description': 'You have reached the end and there is a giant dragon in front of you.',\n  'items': ['sword', 'shield', 'potion'],\n  'win': True \n  }\n\n# Generate a random item from each level \ndef gen_items():\n  level_1_item = random.choice(level_1['items'])\n  level_2_item = random.choice(level_2['items'])\n  level_3_item = random.choice(level_3['items'])\n\n# Print the item descriptions \ndef print_items():\n  print('You find a {} in the first level.'.format(level_1_item))\n  print('You find a {} in the second level.'.format(level_2_item))\n  print('You find a {} in the third level.'.format(level_3_item))\n  \n# print the initial level description \nprint(level_1['description'])\n# Generate the items\ngen_items()\n# Print the items \nprint_items()\n\n# Start the game loop \nwhile True:\n  # Ask the player for input \n  action = input('''\n  What would you like to do? \n  1. Go to the next level \n  2. Check your items \n  ''')\n  \n  if action == '1':\n    # Move to the next level \n    if level_1['level_up'] is not None:\n      level_1 = level_1['level_up']\n      print(level_1['description'])\n      gen_items()\n    else:\n      print('You have reached the end')\n      break \n    \n  elif action == '2':\n    # Print the items \n    print_items()\n    \n  else:\n    print('Please choose a valid action')\n\nprint('Game over!')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a text-based adventure game in Python with 3 levels and 3 items.\n\n### Input:\nNot applicable\n\n### Output:\n## Text Adventure Game in Python\n\nimport random\n\n# Define the levels \nlevel_1 = {\n  'description': 'You find yourself in a dark, mysterious forest.',\n  'items': ['torch', 'rope', 'map'],\n  'level_up': level_2\n  }\nlevel_2 = {\n  'description': 'You have entered a castle with a large, spooky looking door.',\n  'items': ['key', 'axe', 'hat'],\n  'level_up': level_3\n  }\nlevel_3 = {\n  'description': 'You have reached the end and there is a giant dragon in front of you.',\n  'items': ['sword', 'shield', 'potion'],\n  'win': True \n  }\n\n# Generate a random item from each level \ndef gen_items():\n  level_1_item = random.choice(level_1['items'])\n  level_2_item = random.choice(level_2['items'])\n  level_3_item = random.choice(level_3['items'])\n\n# Print the item descriptions \ndef print_items():\n  print('You find a {} in the first level.'.format(level_1_item))\n  print('You find a {} in the second level.'.format(level_2_item))\n  print('You find a {} in the third level.'.format(level_3_item))\n  \n# print the initial level description \nprint(level_1['description'])\n# Generate the items\ngen_items()\n# Print the items \nprint_items()\n\n# Start the game loop \nwhile True:\n  # Ask the player for input \n  action = input('''\n  What would you like to do? \n  1. Go to the next level \n  2. Check your items \n  ''')\n  \n  if action == '1':\n    # Move to the next level \n    if level_1['level_up'] is not None:\n      level_1 = level_1['level_up']\n      print(level_1['description'])\n      gen_items()\n    else:\n      print('You have reached the end')\n      break \n    \n  elif action == '2':\n    # Print the items \n    print_items()\n    \n  else:\n    print('Please choose a valid action')\n\nprint('Game over!')"
    },
    {
        "instruction": "Create a function in Python to sum up all odd digits in a given number.",
        "input": "2243",
        "output": "def sum_odd_digits(num):\n    sum = 0\n    for x in str(num):\n        if int(x) % 2 != 0:\n            sum += int(x)\n \n    return sum\n\nprint(sum_odd_digits(2243))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to sum up all odd digits in a given number.\n\n### Input:\n2243\n\n### Output:\ndef sum_odd_digits(num):\n    sum = 0\n    for x in str(num):\n        if int(x) % 2 != 0:\n            sum += int(x)\n \n    return sum\n\nprint(sum_odd_digits(2243))"
    },
    {
        "instruction": "Implement a web scraper in Python to capture some information from a web page. The data to be scraped should be 3000 words from the website https://www.example.com.",
        "input": "Not applicable",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/'\n\nr = requests.get(url)\nhtml_content = r.text\nsoup = BeautifulSoup(html_content, 'lxml')\ndata = soup.find_all('div', limit=3000)\n\nwords = []\nfor div in data:\n words.append(div.text)\n\nprint(words)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a web scraper in Python to capture some information from a web page. The data to be scraped should be 3000 words from the website https://www.example.com.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = 'https://www.example.com/'\n\nr = requests.get(url)\nhtml_content = r.text\nsoup = BeautifulSoup(html_content, 'lxml')\ndata = soup.find_all('div', limit=3000)\n\nwords = []\nfor div in data:\n words.append(div.text)\n\nprint(words)"
    },
    {
        "instruction": "Write a Python program to sort the characters in a given string in reverse alphabetical order.",
        "input": "Hello",
        "output": "def sortReverseString(string):\n char_list = list(string)\n char_list.sort(reverse=True)\n return ''.join(char_list)\n\n# Usage:\nstring = \"Hello\"\nsortedString = sortReverseString(string)\nprint(sortedString) # Output: olleH",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort the characters in a given string in reverse alphabetical order.\n\n### Input:\nHello\n\n### Output:\ndef sortReverseString(string):\n char_list = list(string)\n char_list.sort(reverse=True)\n return ''.join(char_list)\n\n# Usage:\nstring = \"Hello\"\nsortedString = sortReverseString(string)\nprint(sortedString) # Output: olleH"
    },
    {
        "instruction": "Create a python program to combine two lists into a dictionary",
        "input": "The two lists are [key1, key2, key3] and [value1, value2, value3]",
        "output": "def combine_lists_to_dict(keys, values):\n    my_dict = dict(zip(keys, values))\n    return my_dict",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to combine two lists into a dictionary\n\n### Input:\nThe two lists are [key1, key2, key3] and [value1, value2, value3]\n\n### Output:\ndef combine_lists_to_dict(keys, values):\n    my_dict = dict(zip(keys, values))\n    return my_dict"
    },
    {
        "instruction": "Create a Python flask application for a basic web service. The application should have routes for creating a new user, login a user, and retieving user information.",
        "input": "Not applicable",
        "output": "from flask import Flask, request\nimport sqlite3\n\napp = Flask(__name__)\n\n@app.route('/create-user', methods=['POST'])\ndef create_user():\n    # parse the request data\n    data = request.get_json()\n    username = data['username']\n    password = data['password']\n\n    # store the user in the database\n    conn = sqlite3.connect('users.db')\n    c = conn.cursor()\n\n    c.execute(\"INSERT INTO users (username, password) VALUES (?, ?)\", (username, password))\n    conn.commit()\n    conn.close()\n\n    return \"User created\", 200\n\n@app.route('/login', methods=['POST'])\ndef login():\n    # parse the request data\n    data = request.get_json()\n    username = data['username']\n    password = data['password']\n\n    # retrieve the stored user information\n    conn = sqlite3.connect('users.db')\n    c = conn.cursor()\n\n    c.execute(\"SELECT * FROM users WHERE username = ? and password = ?\", (username, password))\n    user = c.fetchone()\n    conn.close()\n\n    if user is not None:\n        return \"Logged in\", 200\n    else:\n        return \"Invalid username or password\", 401\n\n@app.route('/user', methods=['GET'])\ndef get_user():\n    # parse the request data\n    username = request.args.get('username')\n\n    # retrieve the stored user information\n    conn = sqlite3.connect('users.db')\n    c = conn.cursor()\n\n    c.execute(\"SELECT * FROM users WHERE username = ?\", (username,));\n    user = c.fetchone()\n    conn.close()\n\n    if user is not None:\n        return user\n    else:\n        return \"User not found\", 404\n\nif __name__ == '__main__':\n app.run(debug=True)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python flask application for a basic web service. The application should have routes for creating a new user, login a user, and retieving user information.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, request\nimport sqlite3\n\napp = Flask(__name__)\n\n@app.route('/create-user', methods=['POST'])\ndef create_user():\n    # parse the request data\n    data = request.get_json()\n    username = data['username']\n    password = data['password']\n\n    # store the user in the database\n    conn = sqlite3.connect('users.db')\n    c = conn.cursor()\n\n    c.execute(\"INSERT INTO users (username, password) VALUES (?, ?)\", (username, password))\n    conn.commit()\n    conn.close()\n\n    return \"User created\", 200\n\n@app.route('/login', methods=['POST'])\ndef login():\n    # parse the request data\n    data = request.get_json()\n    username = data['username']\n    password = data['password']\n\n    # retrieve the stored user information\n    conn = sqlite3.connect('users.db')\n    c = conn.cursor()\n\n    c.execute(\"SELECT * FROM users WHERE username = ? and password = ?\", (username, password))\n    user = c.fetchone()\n    conn.close()\n\n    if user is not None:\n        return \"Logged in\", 200\n    else:\n        return \"Invalid username or password\", 401\n\n@app.route('/user', methods=['GET'])\ndef get_user():\n    # parse the request data\n    username = request.args.get('username')\n\n    # retrieve the stored user information\n    conn = sqlite3.connect('users.db')\n    c = conn.cursor()\n\n    c.execute(\"SELECT * FROM users WHERE username = ?\", (username,));\n    user = c.fetchone()\n    conn.close()\n\n    if user is not None:\n        return user\n    else:\n        return \"User not found\", 404\n\nif __name__ == '__main__':\n app.run(debug=True)"
    },
    {
        "instruction": "Design a function in Python that takes a list of integers and returns a list of the sum of the two largest integers.",
        "input": "[10, 5, 15, 20, 7]",
        "output": "def get_largest_sum(nums):\n  nums.sort()\n  return nums[-1] + nums[-2]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python that takes a list of integers and returns a list of the sum of the two largest integers.\n\n### Input:\n[10, 5, 15, 20, 7]\n\n### Output:\ndef get_largest_sum(nums):\n  nums.sort()\n  return nums[-1] + nums[-2]"
    },
    {
        "instruction": "Construct a Python program to classify a set of emails as spam/ham.",
        "input": "",
        "output": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\ndata = pd.read_csv('emails.csv')\n\ndata['label'] = data['label'].map({'ham': 0, 'spam': 1})\n\nX_train, X_test, y_train, y_test = train_test_split(data['email'],\n                                                    data['label'],\n                                                    test_size = 0.33,\n                                                    random_state = 42)\n\ncount_vector = CountVectorizer()\n\ntraining_data = count_vector.fit_transform(X_train.values)\ntesting_data = count_vector.transform(X_test.values)\n\nnaive_bayes = MultinomialNB()\nnaive_bayes.fit(training_data, y_train)\n\npredictions = naive_bayes.predict(testing_data)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to classify a set of emails as spam/ham.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n\ndata = pd.read_csv('emails.csv')\n\ndata['label'] = data['label'].map({'ham': 0, 'spam': 1})\n\nX_train, X_test, y_train, y_test = train_test_split(data['email'],\n                                                    data['label'],\n                                                    test_size = 0.33,\n                                                    random_state = 42)\n\ncount_vector = CountVectorizer()\n\ntraining_data = count_vector.fit_transform(X_train.values)\ntesting_data = count_vector.transform(X_test.values)\n\nnaive_bayes = MultinomialNB()\nnaive_bayes.fit(training_data, y_train)\n\npredictions = naive_bayes.predict(testing_data)"
    },
    {
        "instruction": "Create an optimization algorithm in Python for finding the maximum value of a function.",
        "input": "",
        "output": "# This function contains our objective function: \n# the function that we are trying to maximize \ndef objective_fn(x):  \n    return x[0] * x[3] * (x[0] + x[1] + x[2]) + x[2] \n  \n# This function contains our constraints \ndef constraint_fn(x): \n    return x[0] * x[1] * x[2] * x[3] - 25  \n  \n# The constraint should be greater than or equal to 0\ncons = ({'type': 'ineq', 'fun': constraint_fn})\n\n# Bounds for x \nb = (1, 5) \nbnds = (b, b, b, b) \n\n# Initializing starting point of the solution  \nx0 = [1, 5, 5, 1]  \n  \n# maximum value at 5,4,4,2 is 5*4*4*2 = 80 \n\n# Calling scipy optimize minimize \n# to find the maximum value of \n# our objective_fn \nresult = opt.minimize(objective_fn, x0, method='SLSQP', bounds=bnds, constraints=cons)  \n  \n# Printing optimized value \nprint(result.x)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an optimization algorithm in Python for finding the maximum value of a function.\n\n### Input:\n\n\n### Output:\n# This function contains our objective function: \n# the function that we are trying to maximize \ndef objective_fn(x):  \n    return x[0] * x[3] * (x[0] + x[1] + x[2]) + x[2] \n  \n# This function contains our constraints \ndef constraint_fn(x): \n    return x[0] * x[1] * x[2] * x[3] - 25  \n  \n# The constraint should be greater than or equal to 0\ncons = ({'type': 'ineq', 'fun': constraint_fn})\n\n# Bounds for x \nb = (1, 5) \nbnds = (b, b, b, b) \n\n# Initializing starting point of the solution  \nx0 = [1, 5, 5, 1]  \n  \n# maximum value at 5,4,4,2 is 5*4*4*2 = 80 \n\n# Calling scipy optimize minimize \n# to find the maximum value of \n# our objective_fn \nresult = opt.minimize(objective_fn, x0, method='SLSQP', bounds=bnds, constraints=cons)  \n  \n# Printing optimized value \nprint(result.x)"
    },
    {
        "instruction": "Create a class in Python called Employee that includes the following attributes.",
        "input": "",
        "output": "class Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n\n    def get_info(self):\n        return 'Employee({}, {}, {})'.format(self.name, self.age, self.salary)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python called Employee that includes the following attributes.\n\n### Input:\n\n\n### Output:\nclass Employee:\n    def __init__(self, name, age, salary):\n        self.name = name\n        self.age = age\n        self.salary = salary\n\n    def get_info(self):\n        return 'Employee({}, {}, {})'.format(self.name, self.age, self.salary)"
    },
    {
        "instruction": "Create a web scraper with Python BeautifulSoup library for gathering data from a website.",
        "input": "Not applicable",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\npage = requests.get('http://example.com')\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ndata = []\n\nfor item in soup.find_all('div', class_='item'):\n title = item.find('h3').get_text()\n description = item.find('p').get_text()\n \n data.append({\n 'title': title,\n 'description': description\n })\n \nprint(data)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper with Python BeautifulSoup library for gathering data from a website.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\npage = requests.get('http://example.com')\nsoup = BeautifulSoup(page.content, 'html.parser')\n\ndata = []\n\nfor item in soup.find_all('div', class_='item'):\n title = item.find('h3').get_text()\n description = item.find('p').get_text()\n \n data.append({\n 'title': title,\n 'description': description\n })\n \nprint(data)"
    },
    {
        "instruction": "Write a C++ function that takes two strings as parameters and returns the length of the longest common subsequence between them.",
        "input": "string1 = \"python\"\nstring2 = \"honor\"",
        "output": "#include <iostream>\n#include <algorithm>\n\nint longestCommonSubsequence(std::string s1, std::string s2)\n{\nint s1len = s1.length(); \nint s2len = s2.length(); \n  \nint LCS[s1len+1][s2len+1]; \n  \nfor (int i = 0; i <= s1len; i++) \n{ \n    for (int j = 0; j <= s2len; j++) \n    { \n    if (i == 0 || j == 0) \n        LCS[i][j] = 0; \n  \n    else if (s1[i - 1] == s2[j - 1]) \n        LCS[i][j] = LCS[i - 1][j - 1] + 1; \n  \n    else\n        LCS[i][j] = std::max(LCS[i - 1][j], LCS[i][j - 1]); \n    } \n} \n  \n  \n// returns length of the longest common subsequence \nreturn LCS[s1len][s2len]; \n} \n\nint main() \n{ \n   std::string str1 = \"python\"; \n   std::string str2 = \"honor\"; \n  \n   std::cout << longestCommonSubsequence(str1, str2); \n   return 0; \n} \n\n// Output: 3",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a C++ function that takes two strings as parameters and returns the length of the longest common subsequence between them.\n\n### Input:\nstring1 = \"python\"\nstring2 = \"honor\"\n\n### Output:\n#include <iostream>\n#include <algorithm>\n\nint longestCommonSubsequence(std::string s1, std::string s2)\n{\nint s1len = s1.length(); \nint s2len = s2.length(); \n  \nint LCS[s1len+1][s2len+1]; \n  \nfor (int i = 0; i <= s1len; i++) \n{ \n    for (int j = 0; j <= s2len; j++) \n    { \n    if (i == 0 || j == 0) \n        LCS[i][j] = 0; \n  \n    else if (s1[i - 1] == s2[j - 1]) \n        LCS[i][j] = LCS[i - 1][j - 1] + 1; \n  \n    else\n        LCS[i][j] = std::max(LCS[i - 1][j], LCS[i][j - 1]); \n    } \n} \n  \n  \n// returns length of the longest common subsequence \nreturn LCS[s1len][s2len]; \n} \n\nint main() \n{ \n   std::string str1 = \"python\"; \n   std::string str2 = \"honor\"; \n  \n   std::cout << longestCommonSubsequence(str1, str2); \n   return 0; \n} \n\n// Output: 3"
    },
    {
        "instruction": "Design a python program to implement the selection sort algorithm.",
        "input": "",
        "output": "\"\"\"\nDesign a python program to implement the selection sort algorithm\n\"\"\"\n\ndef selection_sort(array):\n    for i in range(len(array)-1):\n        min_idx = i\n        for j in range(i+1, len(array)):\n            if array[min_idx] > array[j]:\n                min_idx = j\n        # swap elements\n        array[i], array[min_idx] = array[min_idx], array[i]\n    return array\n\nif __name__ == '__main__':\n    arr = [10, 4, 6, 7, 2, 1]\n    sorted_arr = selection_sort(arr)\n    print(sorted_arr)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a python program to implement the selection sort algorithm.\n\n### Input:\n\n\n### Output:\n\"\"\"\nDesign a python program to implement the selection sort algorithm\n\"\"\"\n\ndef selection_sort(array):\n    for i in range(len(array)-1):\n        min_idx = i\n        for j in range(i+1, len(array)):\n            if array[min_idx] > array[j]:\n                min_idx = j\n        # swap elements\n        array[i], array[min_idx] = array[min_idx], array[i]\n    return array\n\nif __name__ == '__main__':\n    arr = [10, 4, 6, 7, 2, 1]\n    sorted_arr = selection_sort(arr)\n    print(sorted_arr)"
    },
    {
        "instruction": "Create an AI-friendly program in Python to remove duplicates from a list of numbers.",
        "input": "list1 = [1, 2, 3, 2, 4, 5, 1];",
        "output": "def remove_duplicates(list1): \n    new_list = [] \n    for num in list1: \n        if num not in new_list: \n            new_list.append(num) \n    return new_list \n\nremove_duplicates(list1)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an AI-friendly program in Python to remove duplicates from a list of numbers.\n\n### Input:\nlist1 = [1, 2, 3, 2, 4, 5, 1];\n\n### Output:\ndef remove_duplicates(list1): \n    new_list = [] \n    for num in list1: \n        if num not in new_list: \n            new_list.append(num) \n    return new_list \n\nremove_duplicates(list1)"
    },
    {
        "instruction": "Write a python program that can parse a JSON string",
        "input": "",
        "output": "import json\n \ndef parseJSONString(string): \n    return json.loads(string)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that can parse a JSON string\n\n### Input:\n\n\n### Output:\nimport json\n \ndef parseJSONString(string): \n    return json.loads(string)"
    },
    {
        "instruction": "Create a python code to format a given string as an email",
        "input": "\"John Doe jdoe@example.com\"",
        "output": "\"\"\"\nThis code formats a given string to an email address\n\"\"\"\n\ndef format_string(s):\n    s = s.split(\" \")\n    name = s[0] + \" \" + s[1]\n    email = s[2]\n    return name + \" <\" + email + \">\"\n\nif __name__ == '__main__':\n    string = \"John Doe jdoe@example.com\"\n    print(format_string(string))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python code to format a given string as an email\n\n### Input:\n\"John Doe jdoe@example.com\"\n\n### Output:\n\"\"\"\nThis code formats a given string to an email address\n\"\"\"\n\ndef format_string(s):\n    s = s.split(\" \")\n    name = s[0] + \" \" + s[1]\n    email = s[2]\n    return name + \" <\" + email + \">\"\n\nif __name__ == '__main__':\n    string = \"John Doe jdoe@example.com\"\n    print(format_string(string))"
    },
    {
        "instruction": "Design a web scraper using Python\u2019s BeautifulSoup library. This web scraper should extract the title, content and author of posts from a specified article page in ```https://example.com```.",
        "input": "Not applicable",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\n# make request to get response\nresponse = requests.get('https://example.com/article-page')\n\n# parse text from response\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# extract the title\ntitle = soup.find('h1').text\n\n# extract the content\ncontent = soup.find('p').text\n\n# extract author\nauthor = soup.find('span', class_=\"author-name\").text\n\nprint(title)\nprint(content)\nprint(author)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a web scraper using Python\u2019s BeautifulSoup library. This web scraper should extract the title, content and author of posts from a specified article page in ```https://example.com```.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# make request to get response\nresponse = requests.get('https://example.com/article-page')\n\n# parse text from response\nsoup = BeautifulSoup(response.text, 'html.parser')\n\n# extract the title\ntitle = soup.find('h1').text\n\n# extract the content\ncontent = soup.find('p').text\n\n# extract author\nauthor = soup.find('span', class_=\"author-name\").text\n\nprint(title)\nprint(content)\nprint(author)"
    },
    {
        "instruction": "This code is a basic demo of using odometry data to move a robot along a square trajectory. To run the code, you need to have ROS installed on your system. Once you have ROS installed, you can run the code by executing the nav_square.py file. The robot will move along a square trajectory with a distance of 3.0 meters and an angle of 90 degrees. The linear speed is set to 0.1 meters per second and the angular speed is set to 0.6 radians per second. The robot will stop when it reaches the end of the trajectory.",
        "input": "",
        "output": "#!/usr/bin/env python\n\n\"\"\" nav_square.py - Version 1.1 2013-12-20\n\n    A basic demo of the using odometry data to move the robot\n    along a square trajectory.\n\n    Created for the Pi Robot Project: http://www.pirobot.org\n    Copyright (c) 2012 Patrick Goebel.  All rights reserved.\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.5\n    \n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details at:\n    \n    http://www.gnu.org/licenses/gpl.html\n      \n\"\"\"\n\nimport rospy\nfrom geometry_msgs.msg import Twist, Point, Quaternion\nimport tf\nfrom frobo_nav.transform_utils import quat_to_angle, normalize_angle\nfrom math import degrees, radians, copysign, sqrt, pow, pi\n\nclass NavSquare():\n    def __init__(self):\n        # Give the node a name\n        rospy.init_node('nav_square', anonymous=False)\n        \n        # Set rospy to execute a shutdown function when terminating the script\n        rospy.on_shutdown(self.shutdown)\n\n        # How fast will we check the odometry values?\n        rate = 20\n        \n        # Set the equivalent ROS rate variable\n        r = rospy.Rate(rate)\n        \n        # Set the parameters for the target square\n        goal_distance = rospy.get_param(\"~goal_distance\", 3.0)      # meters\n        goal_angle = rospy.get_param(\"~goal_angle\", radians(90))    # degrees converted to radians\n        linear_speed = rospy.get_param(\"~linear_speed\", 0.1)        # meters per second\n        angular_speed = rospy.get_param(\"~angular_speed\", 0.6)      # radians per second\n        angular_tolerance = rospy.get_param(\"~angular_tolerance\", radians(0)) # degrees to radians\n        \n        # Publisher to control the robot's speed\n        self.cmd_vel = rospy.Publisher('/cmd_vel', Twist)\n         \n        # The base frame is base_footprint for the TurtleBot but base_link for Pi Robot\n        self.base_frame = rospy.get_param('~base_frame', '/base_link')\n\n        # The odom frame is usually just /odom\n        self.odom_frame = rospy.get_param('~odom_frame', '/odom')\n\n        # Initialize the tf listener\n        self.tf_listener = tf.TransformListener()\n        \n        # Give tf some time to fill its buffer\n        rospy.sleep(2)\n        \n        # Set the odom frame\n        self.odom_frame = '/odom'\n        \n        # Find out if the robot uses /base_link or /base_footprint\n        try:\n            self.tf_listener.waitForTransform(self.odom_frame, '/base_footprint', rospy.Time(), rospy.Duration(1.0))\n            self.base_frame = '/base_footprint'\n        except (tf.Exception, tf.ConnectivityException, tf.LookupException):\n            try:\n                self.tf_listener.waitForTransform(self.odom_frame, '/base_link', rospy.Time(), rospy.Duration(1.0))\n                self.base_frame = '/base_link'\n            except (tf.Exception, tf.ConnectivityException, tf.LookupException):\n                rospy.loginfo(\"Cannot find transform between /odom and /base_link or /base_footprint\")\n                rospy.signal_shutdown(\"tf Exception\")  \n                \n        # Initialize the position variable as a Point type\n        position = Point()\n\n        # Initialize the movement command\n        move_cmd = Twist()\n            \n        # Set the movement command to forward motion\n        move_cmd.linear.x = linear_speed\n            \n        # Get the starting position values     \n        (position, rotation) = self.get_odom()\n        initPosition = position\n\trospy.loginfo(\"Initial position at \" + str(position) + \" and rotation \" + str(degrees(rotation)) + \" degrees\")\n                        \n        x_start = position.x\n        y_start = position.y\n            \n        # Keep track of the distance traveled\n        distance = 0\n            \n        # Enter the loop to move along a side\n        while distance < goal_distance and not rospy.is_shutdown():\n            # Publish the Twist message and sleep 1 cycle         \n            self.cmd_vel.publish(move_cmd)\n               \n            r.sleep()\n        \n            # Get the current position\n            (position, rotation) = self.get_odom()\n                \n            # Compute the Euclidean distance from the start\n            distance = sqrt(pow((position.x - x_start), 2) + \n                            pow((position.y - y_start), 2))\n                \n        # Stop the robot when we are done\n        self.cmd_vel.publish(Twist())\n\n        #print result\n        (position, rotation) = self.get_odom()\n\trospy.loginfo(\"Final position at \" + str(position) + \" and rotation \" + str(degrees(rotation)) + \" degrees\")\n        rospy.loginfo(\"Difference (position.x - initPosition.x) \" + str(position.x - initPosition.x) + \"m\")\n        \n    def get_odom(self):\n        # Get the current transform between the odom and base frames\n        try:\n            (trans, rot)  = self.tf_listener.lookupTransform(self.odom_frame, self.base_frame, rospy.Time(0))\n        except (tf.Exception, tf.ConnectivityException, tf.LookupException):\n            rospy.loginfo(\"TF Exception\")\n            return\n\n        return (Point(*trans), quat_to_angle(Quaternion(*rot)))\n            \n    def shutdown(self):\n        # Always stop the robot when shutting down the node\n        rospy.loginfo(\"Stopping the robot...\")\n        self.cmd_vel.publish(Twist())\n        rospy.sleep(1)\n\nif __name__ == '__main__':\n    try:\n        NavSquare()\n    except rospy.ROSInterruptException:\n        rospy.loginfo(\"Navigation terminated.\")\n\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a basic demo of using odometry data to move a robot along a square trajectory. To run the code, you need to have ROS installed on your system. Once you have ROS installed, you can run the code by executing the nav_square.py file. The robot will move along a square trajectory with a distance of 3.0 meters and an angle of 90 degrees. The linear speed is set to 0.1 meters per second and the angular speed is set to 0.6 radians per second. The robot will stop when it reaches the end of the trajectory.\n\n### Input:\n\n\n### Output:\n#!/usr/bin/env python\n\n\"\"\" nav_square.py - Version 1.1 2013-12-20\n\n    A basic demo of the using odometry data to move the robot\n    along a square trajectory.\n\n    Created for the Pi Robot Project: http://www.pirobot.org\n    Copyright (c) 2012 Patrick Goebel.  All rights reserved.\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.5\n    \n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details at:\n    \n    http://www.gnu.org/licenses/gpl.html\n      \n\"\"\"\n\nimport rospy\nfrom geometry_msgs.msg import Twist, Point, Quaternion\nimport tf\nfrom frobo_nav.transform_utils import quat_to_angle, normalize_angle\nfrom math import degrees, radians, copysign, sqrt, pow, pi\n\nclass NavSquare():\n    def __init__(self):\n        # Give the node a name\n        rospy.init_node('nav_square', anonymous=False)\n        \n        # Set rospy to execute a shutdown function when terminating the script\n        rospy.on_shutdown(self.shutdown)\n\n        # How fast will we check the odometry values?\n        rate = 20\n        \n        # Set the equivalent ROS rate variable\n        r = rospy.Rate(rate)\n        \n        # Set the parameters for the target square\n        goal_distance = rospy.get_param(\"~goal_distance\", 3.0)      # meters\n        goal_angle = rospy.get_param(\"~goal_angle\", radians(90))    # degrees converted to radians\n        linear_speed = rospy.get_param(\"~linear_speed\", 0.1)        # meters per second\n        angular_speed = rospy.get_param(\"~angular_speed\", 0.6)      # radians per second\n        angular_tolerance = rospy.get_param(\"~angular_tolerance\", radians(0)) # degrees to radians\n        \n        # Publisher to control the robot's speed\n        self.cmd_vel = rospy.Publisher('/cmd_vel', Twist)\n         \n        # The base frame is base_footprint for the TurtleBot but base_link for Pi Robot\n        self.base_frame = rospy.get_param('~base_frame', '/base_link')\n\n        # The odom frame is usually just /odom\n        self.odom_frame = rospy.get_param('~odom_frame', '/odom')\n\n        # Initialize the tf listener\n        self.tf_listener = tf.TransformListener()\n        \n        # Give tf some time to fill its buffer\n        rospy.sleep(2)\n        \n        # Set the odom frame\n        self.odom_frame = '/odom'\n        \n        # Find out if the robot uses /base_link or /base_footprint\n        try:\n            self.tf_listener.waitForTransform(self.odom_frame, '/base_footprint', rospy.Time(), rospy.Duration(1.0))\n            self.base_frame = '/base_footprint'\n        except (tf.Exception, tf.ConnectivityException, tf.LookupException):\n            try:\n                self.tf_listener.waitForTransform(self.odom_frame, '/base_link', rospy.Time(), rospy.Duration(1.0))\n                self.base_frame = '/base_link'\n            except (tf.Exception, tf.ConnectivityException, tf.LookupException):\n                rospy.loginfo(\"Cannot find transform between /odom and /base_link or /base_footprint\")\n                rospy.signal_shutdown(\"tf Exception\")  \n                \n        # Initialize the position variable as a Point type\n        position = Point()\n\n        # Initialize the movement command\n        move_cmd = Twist()\n            \n        # Set the movement command to forward motion\n        move_cmd.linear.x = linear_speed\n            \n        # Get the starting position values     \n        (position, rotation) = self.get_odom()\n        initPosition = position\n\trospy.loginfo(\"Initial position at \" + str(position) + \" and rotation \" + str(degrees(rotation)) + \" degrees\")\n                        \n        x_start = position.x\n        y_start = position.y\n            \n        # Keep track of the distance traveled\n        distance = 0\n            \n        # Enter the loop to move along a side\n        while distance < goal_distance and not rospy.is_shutdown():\n            # Publish the Twist message and sleep 1 cycle         \n            self.cmd_vel.publish(move_cmd)\n               \n            r.sleep()\n        \n            # Get the current position\n            (position, rotation) = self.get_odom()\n                \n            # Compute the Euclidean distance from the start\n            distance = sqrt(pow((position.x - x_start), 2) + \n                            pow((position.y - y_start), 2))\n                \n        # Stop the robot when we are done\n        self.cmd_vel.publish(Twist())\n\n        #print result\n        (position, rotation) = self.get_odom()\n\trospy.loginfo(\"Final position at \" + str(position) + \" and rotation \" + str(degrees(rotation)) + \" degrees\")\n        rospy.loginfo(\"Difference (position.x - initPosition.x) \" + str(position.x - initPosition.x) + \"m\")\n        \n    def get_odom(self):\n        # Get the current transform between the odom and base frames\n        try:\n            (trans, rot)  = self.tf_listener.lookupTransform(self.odom_frame, self.base_frame, rospy.Time(0))\n        except (tf.Exception, tf.ConnectivityException, tf.LookupException):\n            rospy.loginfo(\"TF Exception\")\n            return\n\n        return (Point(*trans), quat_to_angle(Quaternion(*rot)))\n            \n    def shutdown(self):\n        # Always stop the robot when shutting down the node\n        rospy.loginfo(\"Stopping the robot...\")\n        self.cmd_vel.publish(Twist())\n        rospy.sleep(1)\n\nif __name__ == '__main__':\n    try:\n        NavSquare()\n    except rospy.ROSInterruptException:\n        rospy.loginfo(\"Navigation terminated.\")\n\n"
    },
    {
        "instruction": "Create a Python program to convert a given sentence into pig latin.",
        "input": "",
        "output": "def convert_to_pig_latin(sentence):\n words = sentence.split()\n pig_latin_words = []\n for word in words:\n Pig_latin = word[1:] + word[0] + 'ay'\n pig_latin_words.append(pig_Latin)\n pig_latin_sentence = ' '.join(pig_latin_words)\n return pig_latin_sentence",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to convert a given sentence into pig latin.\n\n### Input:\n\n\n### Output:\ndef convert_to_pig_latin(sentence):\n words = sentence.split()\n pig_latin_words = []\n for word in words:\n Pig_latin = word[1:] + word[0] + 'ay'\n pig_latin_words.append(pig_Latin)\n pig_latin_sentence = ' '.join(pig_latin_words)\n return pig_latin_sentence"
    },
    {
        "instruction": "Given a Python list, create a new list of all items in the first list that are not in the second list.",
        "input": "first_list = [1, 2, 3, 4, 5]\nsecond_list = [3, 4]",
        "output": "first_list = [1, 2, 3, 4, 5]\nsecond_list = [3, 4]\n\nnew_list = []\n\nfor item in first_list:\n    if item not in second_list:\n        new_list.append(item)\n        \nprint(new_list) # [1, 2, 5]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a Python list, create a new list of all items in the first list that are not in the second list.\n\n### Input:\nfirst_list = [1, 2, 3, 4, 5]\nsecond_list = [3, 4]\n\n### Output:\nfirst_list = [1, 2, 3, 4, 5]\nsecond_list = [3, 4]\n\nnew_list = []\n\nfor item in first_list:\n    if item not in second_list:\n        new_list.append(item)\n        \nprint(new_list) # [1, 2, 5]"
    },
    {
        "instruction": "Generate a program in Python that will check if a given number is a palindrome.",
        "input": "123321",
        "output": "def is_palindrome(n):\n n = str(n)\n \n return n == n[::-1]\n \nnum = 123321\nif is_palindrome(num):\n print(f\"{num} is a palindrome\")\nelse:\n print(f\"{num} is not a palindrome\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python that will check if a given number is a palindrome.\n\n### Input:\n123321\n\n### Output:\ndef is_palindrome(n):\n n = str(n)\n \n return n == n[::-1]\n \nnum = 123321\nif is_palindrome(num):\n print(f\"{num} is a palindrome\")\nelse:\n print(f\"{num} is not a palindrome\")"
    },
    {
        "instruction": "Write a Python program that searches for a substring in a given string.",
        "input": "",
        "output": "def search_substring(string, substring):\n  if substring in string:\n    return \"Substring found!\"\n  else:\n    return \"Substring not found.\"",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that searches for a substring in a given string.\n\n### Input:\n\n\n### Output:\ndef search_substring(string, substring):\n  if substring in string:\n    return \"Substring found!\"\n  else:\n    return \"Substring not found.\""
    },
    {
        "instruction": "Create a program in Python to check for palindrome numbers.",
        "input": "121",
        "output": "def palindrome(num):\n    num = str(num)\n    if num == num[::-1]:\n        print(num + \" is a palindrome number\")\n    else: \n        print(num + \" is not a palindrome number\")\n\npalindrome(121)\n// Output: 121 is a palindrome number",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to check for palindrome numbers.\n\n### Input:\n121\n\n### Output:\ndef palindrome(num):\n    num = str(num)\n    if num == num[::-1]:\n        print(num + \" is a palindrome number\")\n    else: \n        print(num + \" is not a palindrome number\")\n\npalindrome(121)\n// Output: 121 is a palindrome number"
    },
    {
        "instruction": "Write a Python program to intersect two given arrays without using any in-built functions.",
        "input": "a = [1, 7, 11, 58, 80]\nb = [11, 13, 7, 32, 80]",
        "output": "def intersect(a, b):\n  intersection = [] \n  for i in a:\n    for j in b:\n      if i == j and i not in intersection:\n        intersection.append(i)\n  return intersection\n\nprint(intersect([1, 7, 11, 58, 80], [11, 13, 7, 32, 80]))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to intersect two given arrays without using any in-built functions.\n\n### Input:\na = [1, 7, 11, 58, 80]\nb = [11, 13, 7, 32, 80]\n\n### Output:\ndef intersect(a, b):\n  intersection = [] \n  for i in a:\n    for j in b:\n      if i == j and i not in intersection:\n        intersection.append(i)\n  return intersection\n\nprint(intersect([1, 7, 11, 58, 80], [11, 13, 7, 32, 80]))"
    },
    {
        "instruction": "Write a Python program that will create a histogram of a given set of data.",
        "input": "[0, 4, 5, 10, 11, 15]",
        "output": "import matplotlib.pyplot as plt \n\n# Data to plot\ndata = [0, 4, 5, 10, 11, 15]\n\n# Create a histogram \nplt.hist(data, bins = [0,5,10,15,20])\n\n# Label the x and y axis \nplt.xlabel(\"Value\") \nplt.ylabel(\"Number of Occurrences\") \n\n# Show the plot \nplt.show()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that will create a histogram of a given set of data.\n\n### Input:\n[0, 4, 5, 10, 11, 15]\n\n### Output:\nimport matplotlib.pyplot as plt \n\n# Data to plot\ndata = [0, 4, 5, 10, 11, 15]\n\n# Create a histogram \nplt.hist(data, bins = [0,5,10,15,20])\n\n# Label the x and y axis \nplt.xlabel(\"Value\") \nplt.ylabel(\"Number of Occurrences\") \n\n# Show the plot \nplt.show()"
    },
    {
        "instruction": "Write a Python program to modify a given string by filling blank spaces with periods.",
        "input": "",
        "output": "def fill_blanks(string): \n    return string.replace(\" \", \".\") \n  \n# Driver code \nstring = \"Python Programming\"\nprint(fill_blanks(string))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to modify a given string by filling blank spaces with periods.\n\n### Input:\n\n\n### Output:\ndef fill_blanks(string): \n    return string.replace(\" \", \".\") \n  \n# Driver code \nstring = \"Python Programming\"\nprint(fill_blanks(string))"
    },
    {
        "instruction": "Generate an optimized version of a given Python script that reduces its runtime.",
        "input": "A sample Python script - \ndef sort(data):\n    n = len(data)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if data[i] > data[j]:\n                t = data[i]\n                data[i] = data[j]\n                data[j] = t",
        "output": "def sort(data):\n    n = len(data)\n    for i in range(n - 1):\n        min_index = i\n        for j in range(i + 1, n):\n            if data[min_index] > data[j]:\n                min_index = j\n        data[i], data[min_index] = data[min_index], data[i]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an optimized version of a given Python script that reduces its runtime.\n\n### Input:\nA sample Python script - \ndef sort(data):\n    n = len(data)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if data[i] > data[j]:\n                t = data[i]\n                data[i] = data[j]\n                data[j] = t\n\n### Output:\ndef sort(data):\n    n = len(data)\n    for i in range(n - 1):\n        min_index = i\n        for j in range(i + 1, n):\n            if data[min_index] > data[j]:\n                min_index = j\n        data[i], data[min_index] = data[min_index], data[i]"
    },
    {
        "instruction": "Write a Python program to simulate a dice roll and print the result.",
        "input": "",
        "output": "import random\n\ndef roll_dice():\n    dice_roll = random.randint(1, 6)\n    print(\"You rolled a\", dice_roll)\n\nroll_dice()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to simulate a dice roll and print the result.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef roll_dice():\n    dice_roll = random.randint(1, 6)\n    print(\"You rolled a\", dice_roll)\n\nroll_dice()"
    },
    {
        "instruction": "Write a Python program to concatenate all the elements in a given list of strings.",
        "input": "list_of_strings = [\"a\", \"b\", \"c\", \"d\", \"e\"]",
        "output": "def concatenate_strings(list_of_strings):\n    result = \"\"\n    for string in list_of_strings:\n        result += string\n    return result",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to concatenate all the elements in a given list of strings.\n\n### Input:\nlist_of_strings = [\"a\", \"b\", \"c\", \"d\", \"e\"]\n\n### Output:\ndef concatenate_strings(list_of_strings):\n    result = \"\"\n    for string in list_of_strings:\n        result += string\n    return result"
    },
    {
        "instruction": "Divide two numbers without using the divide operator in Python.",
        "input": "9 / 3",
        "output": "def divide_without_operator(a, b):\n    return a // b + (a % b != 0)\n\nprint(divide_without_operator(9, 3))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDivide two numbers without using the divide operator in Python.\n\n### Input:\n9 / 3\n\n### Output:\ndef divide_without_operator(a, b):\n    return a // b + (a % b != 0)\n\nprint(divide_without_operator(9, 3))"
    },
    {
        "instruction": "Design a Python web application with a backend using Flask. This application should contain routes for displaying a list of products and a route for adding a new product.",
        "input": "Not applicable",
        "output": "from flask import Flask, render_template, request\n\n#Initialize the app\napp = Flask(__name__)\n\n# Create a list of products\nproducts = [\n {'name': 'Apple', 'price': 3.99},\n {'name': 'Banana', 'price': 2.99},\n {'name': 'Kiwi', 'price': 4.99}\n]\n\n# Route for displaying the list of products\n@app.route('/')\ndef home():\n return render_template('index.html', products=products)\n\n# Route for adding a new product\n@app.route('/add_product', methods = ['POST'])\ndef add_product():\n new_product = { 'name': request.form['name'], 'price': request.form['price'] }\n products.append(new_product)\n return render_template('index.html', products=products)\n\n# Run the app\nif __name__ == '__main__':\n app.run(debug=True)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python web application with a backend using Flask. This application should contain routes for displaying a list of products and a route for adding a new product.\n\n### Input:\nNot applicable\n\n### Output:\nfrom flask import Flask, render_template, request\n\n#Initialize the app\napp = Flask(__name__)\n\n# Create a list of products\nproducts = [\n {'name': 'Apple', 'price': 3.99},\n {'name': 'Banana', 'price': 2.99},\n {'name': 'Kiwi', 'price': 4.99}\n]\n\n# Route for displaying the list of products\n@app.route('/')\ndef home():\n return render_template('index.html', products=products)\n\n# Route for adding a new product\n@app.route('/add_product', methods = ['POST'])\ndef add_product():\n new_product = { 'name': request.form['name'], 'price': request.form['price'] }\n products.append(new_product)\n return render_template('index.html', products=products)\n\n# Run the app\nif __name__ == '__main__':\n app.run(debug=True)"
    },
    {
        "instruction": "Create a Python function for predicting the label for a given set of features.",
        "input": "[10, 20, 30]",
        "output": "def predict_label(features):\n    # write your code here\n    label = None\n    \n    if features[0] > 10 and features[1] > 20:\n        label = \"A\"\n    elif features[0] > 10 and features[1] < 20:\n        label = \"B\"\n    else:\n        label = \"C\"\n        \n    return label\n\nfeatures = [10, 20, 30]\nlabel = predict_label(features)\nprint(label)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function for predicting the label for a given set of features.\n\n### Input:\n[10, 20, 30]\n\n### Output:\ndef predict_label(features):\n    # write your code here\n    label = None\n    \n    if features[0] > 10 and features[1] > 20:\n        label = \"A\"\n    elif features[0] > 10 and features[1] < 20:\n        label = \"B\"\n    else:\n        label = \"C\"\n        \n    return label\n\nfeatures = [10, 20, 30]\nlabel = predict_label(features)\nprint(label)"
    },
    {
        "instruction": "Develop a Python function to calculate the mean of a list of numbers.",
        "input": "[1, 5, 8, 9]",
        "output": "def mean(lst):\n    total = 0\n    for n in lst:\n        total += n\n    return total / len(lst)\n\nresult = mean([1, 5, 8, 9])\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function to calculate the mean of a list of numbers.\n\n### Input:\n[1, 5, 8, 9]\n\n### Output:\ndef mean(lst):\n    total = 0\n    for n in lst:\n        total += n\n    return total / len(lst)\n\nresult = mean([1, 5, 8, 9])\nprint(result)"
    },
    {
        "instruction": "Construct a python program to create a dictionary encryption for a user-inputted string and display the encrypted text",
        "input": "",
        "output": "def encrypt_string(string):\n    letters = {}\n    for i in range(len(string)):\n        letters[string[i]] = i\n    encrypted_text = \"\"\n    for char in string:\n        encrypted_text += str(letters[char])\n    return encrypted_text",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a python program to create a dictionary encryption for a user-inputted string and display the encrypted text\n\n### Input:\n\n\n### Output:\ndef encrypt_string(string):\n    letters = {}\n    for i in range(len(string)):\n        letters[string[i]] = i\n    encrypted_text = \"\"\n    for char in string:\n        encrypted_text += str(letters[char])\n    return encrypted_text"
    },
    {
        "instruction": "Create a Python program to calculate the body mass index (BMI) for a person given their weight and height in kilograms and centimeters.",
        "input": "Weight: 50 kilograms \nHeight: 170 centimeters",
        "output": "def calculate_bmi(weight, height):\n    bmi = weight / ((height/100) ** 2)\n    if bmi < 18.5:\n        return bmi, \"Underweight\"\n    elif 18.5 <= bmi < 25:\n        return bmi, \"Normal weight\"\n    elif 25 <= bmi < 30:\n        return bmi, \"Overweight\"\n    else:\n        return bmi, \"Obese\"\n\nweight = 50\nheight = 170\n\nbmi, status = calculate_bmi(weight, height)\n\nprint(\"Your BMI is {:.1f}. You are {}.\".format(bmi, status))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the body mass index (BMI) for a person given their weight and height in kilograms and centimeters.\n\n### Input:\nWeight: 50 kilograms \nHeight: 170 centimeters\n\n### Output:\ndef calculate_bmi(weight, height):\n    bmi = weight / ((height/100) ** 2)\n    if bmi < 18.5:\n        return bmi, \"Underweight\"\n    elif 18.5 <= bmi < 25:\n        return bmi, \"Normal weight\"\n    elif 25 <= bmi < 30:\n        return bmi, \"Overweight\"\n    else:\n        return bmi, \"Obese\"\n\nweight = 50\nheight = 170\n\nbmi, status = calculate_bmi(weight, height)\n\nprint(\"Your BMI is {:.1f}. You are {}.\".format(bmi, status))"
    },
    {
        "instruction": "Create a Python dictionary that can store the results of a multiplication table. The dictionary should contain the following keys where each key is a number from 1 to 10:",
        "input": "Not applicable",
        "output": "multiplication_table = {\n 1: { 1 : 1, 2 : 2, 3 : 3, 4 : 4, 5 : 5, 6 : 6, 7 : 7, 8 : 8, 9 : 9, 10 : 10 },\n 2: { 1 : 2, 2 : 4, 3 : 6, 4 : 8, 10 : 20 },\n 3: { 1 : 3, 2 : 6, 3 : 9, 4 : 12, 5 : 15, 6 : 18, 7 : 21, 8 : 24, 9 : 27, 10 : 30 },\n 4: { 1 : 4, 2 : 8, 3 : 12, 4 : 16, 5 : 20, 6 : 24, 7 : 28, 8 : 32, 9 : 36, 10 : 40 },\n 5: { 1 : 5, 2 : 10, 3 : 15, 4 : 20, 5 : 25, 6 : 30, 7 : 35, 8 : 40, 9 : 45, 10 : 50 },\n 6: { 1 : 6, 2 : 12, 3 : 18, 4 : 24, 5 : 30, 6 : 36, 7 : 42, 8 : 48, 9 : 54, 10 : 60 },\n 7: { 1 : 7, 2 : 14, 3 : 21, 4 : 28, 5 : 35, 6 : 42, 7 : 49, 8 : 56, 9 : 63, 10 : 70 },\n 8: { 1 : 8, 2 : 16, 3 : 24, 4 : 32, 5 : 40, 6 : 48, 7 : 56, 8 : 64, 9 : 72, 10 : 80 },\n 9: { 1 : 9, 2 : 18, 3 : 27, 4 : 36, 5 : 45, 6 : 54, 7 : 63, 8 : 72, 9 : 81, 10 : 90 },\n 10: { 1 : 10, 2 : 20, 3 : 30, 4 : 40, 5 : 50, 6 : 60, 7 : 70, 8 : 80, 9 : 90, 10: 100 }\n}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python dictionary that can store the results of a multiplication table. The dictionary should contain the following keys where each key is a number from 1 to 10:\n\n### Input:\nNot applicable\n\n### Output:\nmultiplication_table = {\n 1: { 1 : 1, 2 : 2, 3 : 3, 4 : 4, 5 : 5, 6 : 6, 7 : 7, 8 : 8, 9 : 9, 10 : 10 },\n 2: { 1 : 2, 2 : 4, 3 : 6, 4 : 8, 10 : 20 },\n 3: { 1 : 3, 2 : 6, 3 : 9, 4 : 12, 5 : 15, 6 : 18, 7 : 21, 8 : 24, 9 : 27, 10 : 30 },\n 4: { 1 : 4, 2 : 8, 3 : 12, 4 : 16, 5 : 20, 6 : 24, 7 : 28, 8 : 32, 9 : 36, 10 : 40 },\n 5: { 1 : 5, 2 : 10, 3 : 15, 4 : 20, 5 : 25, 6 : 30, 7 : 35, 8 : 40, 9 : 45, 10 : 50 },\n 6: { 1 : 6, 2 : 12, 3 : 18, 4 : 24, 5 : 30, 6 : 36, 7 : 42, 8 : 48, 9 : 54, 10 : 60 },\n 7: { 1 : 7, 2 : 14, 3 : 21, 4 : 28, 5 : 35, 6 : 42, 7 : 49, 8 : 56, 9 : 63, 10 : 70 },\n 8: { 1 : 8, 2 : 16, 3 : 24, 4 : 32, 5 : 40, 6 : 48, 7 : 56, 8 : 64, 9 : 72, 10 : 80 },\n 9: { 1 : 9, 2 : 18, 3 : 27, 4 : 36, 5 : 45, 6 : 54, 7 : 63, 8 : 72, 9 : 81, 10 : 90 },\n 10: { 1 : 10, 2 : 20, 3 : 30, 4 : 40, 5 : 50, 6 : 60, 7 : 70, 8 : 80, 9 : 90, 10: 100 }\n}"
    },
    {
        "instruction": "Using Twitter API, create a Python program that searches a given hashtag and prints out the top 10 results with their tweet content.",
        "input": "Hashtag: \"#jokeoftheday\"",
        "output": "import tweepy\nfrom tweepy import OAuthHandler\nimport json\n\n# Authorization Tokens\nconsumer_key = 'XXXXX'\nconsumer_secret = 'XXXXX'\naccess_token = 'XXXXX'\naccess_secret = 'XXXXX'\n\n# Creating the authentication object\nauth = OAuthHandler(consumer_key, consumer_secret)\n\n# Setting your access token and secret\nauth.set_access_token(access_token, access_secret)\n\n# Creating the API object while passing in auth information\napi = tweepy.API(auth) \n\n# Searching for the given keyword\nresult = api.search(q='#jokeoftheday',count=10)\n\n# Printing the output\nfor tweet in result:\n data = json.dumps(tweet._json, indent=2)\n print(data)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Twitter API, create a Python program that searches a given hashtag and prints out the top 10 results with their tweet content.\n\n### Input:\nHashtag: \"#jokeoftheday\"\n\n### Output:\nimport tweepy\nfrom tweepy import OAuthHandler\nimport json\n\n# Authorization Tokens\nconsumer_key = 'XXXXX'\nconsumer_secret = 'XXXXX'\naccess_token = 'XXXXX'\naccess_secret = 'XXXXX'\n\n# Creating the authentication object\nauth = OAuthHandler(consumer_key, consumer_secret)\n\n# Setting your access token and secret\nauth.set_access_token(access_token, access_secret)\n\n# Creating the API object while passing in auth information\napi = tweepy.API(auth) \n\n# Searching for the given keyword\nresult = api.search(q='#jokeoftheday',count=10)\n\n# Printing the output\nfor tweet in result:\n data = json.dumps(tweet._json, indent=2)\n print(data)"
    },
    {
        "instruction": "Develop a function in python to find the index of an element in a list.",
        "input": "a = [2, 3, 4, 5, 2]\nx = 2",
        "output": "def find_index(a, x):\n    indices = []\n    if x not in a:\n        return -1\n    else:\n        for i in range(len(a)):\n            if a[i] == x:\n                indices.append(i)\n    return indices\n\nindices = find_index(a, x)\nprint(\"The index of element 2 in the list is\", indices)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in python to find the index of an element in a list.\n\n### Input:\na = [2, 3, 4, 5, 2]\nx = 2\n\n### Output:\ndef find_index(a, x):\n    indices = []\n    if x not in a:\n        return -1\n    else:\n        for i in range(len(a)):\n            if a[i] == x:\n                indices.append(i)\n    return indices\n\nindices = find_index(a, x)\nprint(\"The index of element 2 in the list is\", indices)"
    },
    {
        "instruction": "Write a Python program to print the elements in a set without duplicates.",
        "input": "",
        "output": "def print_set(s):\n    result = []\n    for x in s:\n        if x not in result:\n            result.append(x)\n    print(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print the elements in a set without duplicates.\n\n### Input:\n\n\n### Output:\ndef print_set(s):\n    result = []\n    for x in s:\n        if x not in result:\n            result.append(x)\n    print(result)"
    },
    {
        "instruction": "Generate a valid python program to classify the given data into two categories.",
        "input": "A list of grocery items and their prices",
        "output": "def classify(items):\n    cheap_items = []\n    expensive_items = []\n\n    for item in items:\n       if item[1] < 5:\n            cheap_items.append(item)\n       else:\n            expensive_items.append(item)\n\n    return (cheap_items, expensive_items)\n\nitems = [('fruit', 2.5), ('beer', 10), ('shampoo', 3), ('chocolate', 6)]\ncheap, expensive = classify(items)\nprint(cheap)\nprint(expensive)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a valid python program to classify the given data into two categories.\n\n### Input:\nA list of grocery items and their prices\n\n### Output:\ndef classify(items):\n    cheap_items = []\n    expensive_items = []\n\n    for item in items:\n       if item[1] < 5:\n            cheap_items.append(item)\n       else:\n            expensive_items.append(item)\n\n    return (cheap_items, expensive_items)\n\nitems = [('fruit', 2.5), ('beer', 10), ('shampoo', 3), ('chocolate', 6)]\ncheap, expensive = classify(items)\nprint(cheap)\nprint(expensive)"
    },
    {
        "instruction": "Compose a Python function that sorts a list using insertion sort.",
        "input": "[4, 1, 3, 6, 2, 5]",
        "output": "def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        current_value = arr[i]\n        j = i - 1\n        while j >= 0 and arr[j] > current_value:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = current_value\n    return arr\n\narr = [4, 1, 3, 6, 2, 5]\nprint(insertion_sort(arr))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a Python function that sorts a list using insertion sort.\n\n### Input:\n[4, 1, 3, 6, 2, 5]\n\n### Output:\ndef insertion_sort(arr):\n    for i in range(1, len(arr)):\n        current_value = arr[i]\n        j = i - 1\n        while j >= 0 and arr[j] > current_value:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = current_value\n    return arr\n\narr = [4, 1, 3, 6, 2, 5]\nprint(insertion_sort(arr))"
    },
    {
        "instruction": "Create a Python program that reads in two strings and outputs the longest common substring.",
        "input": "str1 = \"GeeksforGeeks\"\nstr2 = \"Practice\"",
        "output": "def longest_common_substring(str1, str2):\n    if len(str1) == 0 or len(str2) == 0:\n        return \"\"\n    matrix = [[0 for _ in range(0, len(str2)+1)] for _ in range(0, len(str1)+1)]\n    longest_string = \"\"\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                matrix[i][j] = matrix[i-1][j-1] + 1\n                if matrix[i][j] > len(longest_string):\n                    longest_string = str1[i-1 - matrix[i][j]+1 : i]\n            else:\n                matrix[i][j] = 0\n    return longest_string",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that reads in two strings and outputs the longest common substring.\n\n### Input:\nstr1 = \"GeeksforGeeks\"\nstr2 = \"Practice\"\n\n### Output:\ndef longest_common_substring(str1, str2):\n    if len(str1) == 0 or len(str2) == 0:\n        return \"\"\n    matrix = [[0 for _ in range(0, len(str2)+1)] for _ in range(0, len(str1)+1)]\n    longest_string = \"\"\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                matrix[i][j] = matrix[i-1][j-1] + 1\n                if matrix[i][j] > len(longest_string):\n                    longest_string = str1[i-1 - matrix[i][j]+1 : i]\n            else:\n                matrix[i][j] = 0\n    return longest_string"
    },
    {
        "instruction": "Write a python program to submit the following operation",
        "input": "Calculate the maximum sum of a contiguous subarray in the given array.",
        "output": "def max_contiguous_sum(arr):\n    max_sum = 0\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to submit the following operation\n\n### Input:\nCalculate the maximum sum of a contiguous subarray in the given array.\n\n### Output:\ndef max_contiguous_sum(arr):\n    max_sum = 0\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum"
    },
    {
        "instruction": "Create a Python script to generate a given number of random numbers within a particular range",
        "input": "A range of 0 to 100 and 5 numbers",
        "output": "# Import library\nimport random\n\n# Generate random numbers\nrandom_nums = []\n\nfor i in range(5):\n    random_nums.append(random.randint(0,100))\n\n# Print random numbers\nprint(random_nums)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to generate a given number of random numbers within a particular range\n\n### Input:\nA range of 0 to 100 and 5 numbers\n\n### Output:\n# Import library\nimport random\n\n# Generate random numbers\nrandom_nums = []\n\nfor i in range(5):\n    random_nums.append(random.randint(0,100))\n\n# Print random numbers\nprint(random_nums)"
    },
    {
        "instruction": "Create a Python program that checks if two numbers are equal or not.",
        "input": "",
        "output": "def is_equal(num1, num2):\n return num1 == num2",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that checks if two numbers are equal or not.\n\n### Input:\n\n\n### Output:\ndef is_equal(num1, num2):\n return num1 == num2"
    },
    {
        "instruction": "Write a Python program to determine the sum of even elements in a given array.",
        "input": "[1, 2, 3, 4, 5, 6]",
        "output": "def sum_even_elems(arr):\n    sum_of_even = 0\n    for elem in arr:\n        if elem % 2 == 0:\n            sum_of_even += elem\n    return sum_of_even\n\narr = [1,2,3,4,5,6]\nprint(sum_even_elems(arr))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to determine the sum of even elements in a given array.\n\n### Input:\n[1, 2, 3, 4, 5, 6]\n\n### Output:\ndef sum_even_elems(arr):\n    sum_of_even = 0\n    for elem in arr:\n        if elem % 2 == 0:\n            sum_of_even += elem\n    return sum_of_even\n\narr = [1,2,3,4,5,6]\nprint(sum_even_elems(arr))"
    },
    {
        "instruction": "Explain how to perform a k-means clustering algorithm in Python.",
        "input": "",
        "output": "K-means clustering is an unsupervised machine learning algorithm for clustering data points into distinct groups. The goal is to partition the given data points into k distinct clusters. To perform k-means clustering in Python, you need to import the KMeans class from the scikit-learn library and initialize it with the number of clusters (k) you want to generate. Then, you need to fit the data points to the model and predict their labels. Finally, you can use the labels to group the data points into their respective clusters.",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain how to perform a k-means clustering algorithm in Python.\n\n### Input:\n\n\n### Output:\nK-means clustering is an unsupervised machine learning algorithm for clustering data points into distinct groups. The goal is to partition the given data points into k distinct clusters. To perform k-means clustering in Python, you need to import the KMeans class from the scikit-learn library and initialize it with the number of clusters (k) you want to generate. Then, you need to fit the data points to the model and predict their labels. Finally, you can use the labels to group the data points into their respective clusters."
    },
    {
        "instruction": "Create a Python program to sum all the numbers below 1000 which are divisible by 2, 3 or 5.",
        "input": "",
        "output": "sum_of_docs = 0\nfor i in range(1000):\n     if i % 2 == 0 or i % 3 == 0 or i % 5 == 0:\n          sum_of_docs += i\n \nprint(sum_of_docs)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to sum all the numbers below 1000 which are divisible by 2, 3 or 5.\n\n### Input:\n\n\n### Output:\nsum_of_docs = 0\nfor i in range(1000):\n     if i % 2 == 0 or i % 3 == 0 or i % 5 == 0:\n          sum_of_docs += i\n \nprint(sum_of_docs)"
    },
    {
        "instruction": "Write a Python program to calculate the sum of two numbers and return a boolean value indicating if the sum is a multiple of 5 or not.",
        "input": "Number1: 10\nNumber2: 9",
        "output": "def isMultipleOf5(num1, num2):\n # Calculate the sum\n sum = num1 + num2\n \n # Check if the sum is divisible by 5\n if sum % 5 == 0:\n return True\n else:\n return False\n\n# Take user input\nnum1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\n\n# Execute the function\nresult = isMultipleOf5(num1, num2)\n\n# Print the result\nprint(\"The sum is a multiple of 5:\", result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the sum of two numbers and return a boolean value indicating if the sum is a multiple of 5 or not.\n\n### Input:\nNumber1: 10\nNumber2: 9\n\n### Output:\ndef isMultipleOf5(num1, num2):\n # Calculate the sum\n sum = num1 + num2\n \n # Check if the sum is divisible by 5\n if sum % 5 == 0:\n return True\n else:\n return False\n\n# Take user input\nnum1 = int(input(\"Enter the first number: \"))\nnum2 = int(input(\"Enter the second number: \"))\n\n# Execute the function\nresult = isMultipleOf5(num1, num2)\n\n# Print the result\nprint(\"The sum is a multiple of 5:\", result)"
    },
    {
        "instruction": "Write a Python program to read in three numbers and find the smallest of the three.",
        "input": "3, 6, 8",
        "output": "a = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\nc = int(input(\"Enter third number: \"))\n\nminimum = min(a, b, c)\n\nprint(\"The smallest of the three numbers is\", minimum)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to read in three numbers and find the smallest of the three.\n\n### Input:\n3, 6, 8\n\n### Output:\na = int(input(\"Enter first number: \"))\nb = int(input(\"Enter second number: \"))\nc = int(input(\"Enter third number: \"))\n\nminimum = min(a, b, c)\n\nprint(\"The smallest of the three numbers is\", minimum)"
    },
    {
        "instruction": "Optimize the following code for finding the prime numbers up to a given number in Python.",
        "input": "import math\n\ndef find_primes(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                is_prime = False\n        if is_prime:\n            primes.append(i)\n    return primes",
        "output": "import math\n\ndef find_primes(n):\n  primes = [i for i in range(2, n) if all(i % j for j in range(2, int(math.sqrt(i))+1))]\n  return primes",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize the following code for finding the prime numbers up to a given number in Python.\n\n### Input:\nimport math\n\ndef find_primes(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(math.sqrt(i))+1):\n            if i % j == 0:\n                is_prime = False\n        if is_prime:\n            primes.append(i)\n    return primes\n\n### Output:\nimport math\n\ndef find_primes(n):\n  primes = [i for i in range(2, n) if all(i % j for j in range(2, int(math.sqrt(i))+1))]\n  return primes"
    },
    {
        "instruction": "Generate a python function to convert numbers to English words.",
        "input": "The function should take a number in the range of 0 to 999.",
        "output": "def number_to_words(number):\n    if number == 0:\n        return \"Zero\"\n \n    # Variables to keep track of output\n    output = \"\"\n    \n    # Placeholders for each of the three digits\n    ones_place = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    tens_place = [\"\", \"\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n    hundred_placements = [\"\", \"One Hundred\", \"Two Hundred\", \"Three Hundred\", \"Four Hundred\", \"Five Hundred\", \"Six Hundred\", \"Seven Hundred\", \"Eight Hundred\", \"Nine Hundred\"]\n    \n    # Hundreds place\n    if number % 100 == 0 and number > 100:\n        output = output + (hundred_placements[int(number/100)])\n        number = number % 100\n    else:\n        output = output + (hundred_placements[int(number/100)]) + \" \"\n        number = number % 100\n    \n    # Tens place    \n    if number >= 20: \n        output = output + (tens_place[int(number/10)]) + \" \"\n        number = number % 10\n    else:\n        output = output + (ones_place[number])\n        number = 0\n \n    # Adding the last number\n    if number > 0:\n        output = output + (ones_place[int(number/1)])\n \n    # Returns output\n    return output",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python function to convert numbers to English words.\n\n### Input:\nThe function should take a number in the range of 0 to 999.\n\n### Output:\ndef number_to_words(number):\n    if number == 0:\n        return \"Zero\"\n \n    # Variables to keep track of output\n    output = \"\"\n    \n    # Placeholders for each of the three digits\n    ones_place = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    tens_place = [\"\", \"\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n    hundred_placements = [\"\", \"One Hundred\", \"Two Hundred\", \"Three Hundred\", \"Four Hundred\", \"Five Hundred\", \"Six Hundred\", \"Seven Hundred\", \"Eight Hundred\", \"Nine Hundred\"]\n    \n    # Hundreds place\n    if number % 100 == 0 and number > 100:\n        output = output + (hundred_placements[int(number/100)])\n        number = number % 100\n    else:\n        output = output + (hundred_placements[int(number/100)]) + \" \"\n        number = number % 100\n    \n    # Tens place    \n    if number >= 20: \n        output = output + (tens_place[int(number/10)]) + \" \"\n        number = number % 10\n    else:\n        output = output + (ones_place[number])\n        number = 0\n \n    # Adding the last number\n    if number > 0:\n        output = output + (ones_place[int(number/1)])\n \n    # Returns output\n    return output"
    },
    {
        "instruction": "Create a Python program to remove duplicates from an unsorted array.",
        "input": "[1, 1, 2, 2, 3, 4, 5, 5, 6]",
        "output": "original_list = [1, 1, 2, 2, 3, 4, 5, 5, 6]\n\ndef remove_duplicates(lst):\n    new_list = []\n    for item in lst:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list\n\nprint(remove_duplicates(original_list))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to remove duplicates from an unsorted array.\n\n### Input:\n[1, 1, 2, 2, 3, 4, 5, 5, 6]\n\n### Output:\noriginal_list = [1, 1, 2, 2, 3, 4, 5, 5, 6]\n\ndef remove_duplicates(lst):\n    new_list = []\n    for item in lst:\n        if item not in new_list:\n            new_list.append(item)\n    return new_list\n\nprint(remove_duplicates(original_list))"
    },
    {
        "instruction": "Generate a Python code to search for an element in an array",
        "input": "[2, 3, 4, 5, 7, 8, 9], N = 7",
        "output": "def linear_search(arr, N):\n  for i in range(len(arr)):\n    if arr[i] == N:\n      return i+1\n  return -1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python code to search for an element in an array\n\n### Input:\n[2, 3, 4, 5, 7, 8, 9], N = 7\n\n### Output:\ndef linear_search(arr, N):\n  for i in range(len(arr)):\n    if arr[i] == N:\n      return i+1\n  return -1"
    },
    {
        "instruction": "Write a Python script to change all letter cases in a given string.",
        "input": "This Is A Test String",
        "output": "def change_case(txt):\n    result = \"\"\n    for ch in txt:\n        if ch.isupper():\n            result += ch.lower()\n        elif ch.islower():\n            result += ch.upper()\n    return result\n\ntxt = \"This Is A Test String\"\nresult = change_case(txt)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to change all letter cases in a given string.\n\n### Input:\nThis Is A Test String\n\n### Output:\ndef change_case(txt):\n    result = \"\"\n    for ch in txt:\n        if ch.isupper():\n            result += ch.lower()\n        elif ch.islower():\n            result += ch.upper()\n    return result\n\ntxt = \"This Is A Test String\"\nresult = change_case(txt)\nprint(result)"
    },
    {
        "instruction": "Generate a Python function to get the prime factors of a number",
        "input": "",
        "output": "def prime_factors(n):\n    prime_factors = []\n    while n % 2 == 0: \n        prime_factors.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        while n % i == 0: \n            prime_factors.append(int(i))\n            n = n / i\n    if n > 2: \n        prime_factors.append(int(n))\n    return prime_factors",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to get the prime factors of a number\n\n### Input:\n\n\n### Output:\ndef prime_factors(n):\n    prime_factors = []\n    while n % 2 == 0: \n        prime_factors.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2): \n        while n % i == 0: \n            prime_factors.append(int(i))\n            n = n / i\n    if n > 2: \n        prime_factors.append(int(n))\n    return prime_factors"
    },
    {
        "instruction": "Create a list in Python that contains all integers between 0 and 100 that are multiples of 3.",
        "input": "",
        "output": "multiples_of_3 = [num for num in range(0, 101) if num % 3 == 0]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a list in Python that contains all integers between 0 and 100 that are multiples of 3.\n\n### Input:\n\n\n### Output:\nmultiples_of_3 = [num for num in range(0, 101) if num % 3 == 0]"
    },
    {
        "instruction": "Using the provided dataset, create a Python program that returns the total number of people in a given age range.",
        "input": "ageGroup1 = [10, 20, 15, 25] \nageGroup2 = [30, 35, 39, 43]",
        "output": "def count_people_in_age_range(ageGroup1, ageGroup2):\n total = 0\n for age in ageGroup1 + ageGroup2:\n  if age >= 10 and age <= 20:\n   total += 1\n return total",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the provided dataset, create a Python program that returns the total number of people in a given age range.\n\n### Input:\nageGroup1 = [10, 20, 15, 25] \nageGroup2 = [30, 35, 39, 43]\n\n### Output:\ndef count_people_in_age_range(ageGroup1, ageGroup2):\n total = 0\n for age in ageGroup1 + ageGroup2:\n  if age >= 10 and age <= 20:\n   total += 1\n return total"
    },
    {
        "instruction": "Write a function in Python to swap two variables.",
        "input": "",
        "output": "def swap(a, b):\n    # Store a in temp\n    temp = a\n\n    # Copy b to a\n    a = b\n\n    # Copy temp to b\n    b = temp",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to swap two variables.\n\n### Input:\n\n\n### Output:\ndef swap(a, b):\n    # Store a in temp\n    temp = a\n\n    # Copy b to a\n    a = b\n\n    # Copy temp to b\n    b = temp"
    },
    {
        "instruction": "Create a python program to detect the languages of the given text",
        "input": "A text sample such as \"Hello, my name is John Smith\"",
        "output": "def detect_language(txt):\n    '''This function will detect the language of the given text.'''\n    import langdetect\n    lang = langdetect.detect(txt)\n    return lang\n\nif __name__ == \"__main__\":\n    txt = \"Hello, my name is John Smith\"\n    print(detect_language(txt))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to detect the languages of the given text\n\n### Input:\nA text sample such as \"Hello, my name is John Smith\"\n\n### Output:\ndef detect_language(txt):\n    '''This function will detect the language of the given text.'''\n    import langdetect\n    lang = langdetect.detect(txt)\n    return lang\n\nif __name__ == \"__main__\":\n    txt = \"Hello, my name is John Smith\"\n    print(detect_language(txt))"
    },
    {
        "instruction": "Implement a function in Python that takes two arguments: a list and a string. The function should return the indices where the string appears in the list.",
        "input": "list = ['apple', 'banana', 'pear', 'banana']\nstring = 'banana'",
        "output": "def find_indices(list, string):\n    indices = []\n    for i,item in enumerate(list):\n        if item == string:\n            indices.append(i)\n\n    return indices",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python that takes two arguments: a list and a string. The function should return the indices where the string appears in the list.\n\n### Input:\nlist = ['apple', 'banana', 'pear', 'banana']\nstring = 'banana'\n\n### Output:\ndef find_indices(list, string):\n    indices = []\n    for i,item in enumerate(list):\n        if item == string:\n            indices.append(i)\n\n    return indices"
    },
    {
        "instruction": "Create a Python script to transform given numbers into a digital clock format.",
        "input": "Not applicable",
        "output": "# A Program to convert given number to digital clock format\ndef num2clock(n):\n  hour = int (n / 3600)\n  minute = int ((n % 3600) / 60)\n  second = int ((n % 3600) % 60)\n  return str(hour).zfill(2) + ':' + str(minute).zfill(2) + ':' + str(second).zfill(2) \n\n# Main\nn = int(input((\"Enter a number: \")))\nprint(num2clock(n))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to transform given numbers into a digital clock format.\n\n### Input:\nNot applicable\n\n### Output:\n# A Program to convert given number to digital clock format\ndef num2clock(n):\n  hour = int (n / 3600)\n  minute = int ((n % 3600) / 60)\n  second = int ((n % 3600) % 60)\n  return str(hour).zfill(2) + ':' + str(minute).zfill(2) + ':' + str(second).zfill(2) \n\n# Main\nn = int(input((\"Enter a number: \")))\nprint(num2clock(n))"
    },
    {
        "instruction": "Design a Python program that can be used to retrieve data from a database.",
        "input": "",
        "output": "import sqlite3\n\ndb = sqlite3.connect('database.db')\ncursor = db.cursor()\n\nsql = 'SELECT * FROM table'\n\ncursor.execute(sql)\nresult = cursor.fetchall()\n\nfor row in result:\n    print(row)\n\ndb.close()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program that can be used to retrieve data from a database.\n\n### Input:\n\n\n### Output:\nimport sqlite3\n\ndb = sqlite3.connect('database.db')\ncursor = db.cursor()\n\nsql = 'SELECT * FROM table'\n\ncursor.execute(sql)\nresult = cursor.fetchall()\n\nfor row in result:\n    print(row)\n\ndb.close()"
    },
    {
        "instruction": "Develop a classifier using Logistic Regression in Python.",
        "input": "",
        "output": "import numpy as np\nfrom sklearn.linear_model import LogisticRegression\n# Build Logistic Regression model \nmodel = LogisticRegression() \nmodel.fit(X_train, y_train)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a classifier using Logistic Regression in Python.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nfrom sklearn.linear_model import LogisticRegression\n# Build Logistic Regression model \nmodel = LogisticRegression() \nmodel.fit(X_train, y_train)"
    },
    {
        "instruction": "Generate and return a 4-dimensional array containing random numbers from 0 to 1 in Python.",
        "input": "Not applicable",
        "output": "import numpy as np\n\ndef random_array():\n return np.random.random((4, 4, 4, 4))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate and return a 4-dimensional array containing random numbers from 0 to 1 in Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\n\ndef random_array():\n return np.random.random((4, 4, 4, 4))"
    },
    {
        "instruction": "Design an algorithm in Python to detect fraud transactions in a dataset",
        "input": "",
        "output": "import numpy as np\n \ndef detect_fraud(data):\n anomalies = []\n mean = np.mean(data, axis=0)\n std = np.std(data, axis=0)\n \n for record in data:\n diff = np.abs(record - mean)\n is_anomaly = np.any(diff > 3 * std)\n if is_anomaly:\n anomalies.append(record)\n \n return anomalies",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to detect fraud transactions in a dataset\n\n### Input:\n\n\n### Output:\nimport numpy as np\n \ndef detect_fraud(data):\n anomalies = []\n mean = np.mean(data, axis=0)\n std = np.std(data, axis=0)\n \n for record in data:\n diff = np.abs(record - mean)\n is_anomaly = np.any(diff > 3 * std)\n if is_anomaly:\n anomalies.append(record)\n \n return anomalies"
    },
    {
        "instruction": "Create a Python script to randomly generate a character from a given list of characters.",
        "input": "['A', 'B', 'C', 'D']",
        "output": "import random\n\nchar_list = ['A', 'B', 'C', 'D']\nrandom_char = random.choice(char_list)\nprint(random_char)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to randomly generate a character from a given list of characters.\n\n### Input:\n['A', 'B', 'C', 'D']\n\n### Output:\nimport random\n\nchar_list = ['A', 'B', 'C', 'D']\nrandom_char = random.choice(char_list)\nprint(random_char)"
    },
    {
        "instruction": "Create a Python program for finding a given pattern in a given text.",
        "input": "Text = \"This is a sample text.\"\nPattern = \"is\"",
        "output": "def findPattern(text, pattern):\n    i=0\n    count=0\n    while i < len(text):\n        j = 0\n        if text[i] == pattern[j]:\n            k = i\n            while j < len(pattern) and k < len(text) and  text[k] == pattern[j]:\n                j+=1\n                k+=1\n            if j == len(pattern):\n                count+=1\n            i+=1\n        else:\n            i+=1\n    return count",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program for finding a given pattern in a given text.\n\n### Input:\nText = \"This is a sample text.\"\nPattern = \"is\"\n\n### Output:\ndef findPattern(text, pattern):\n    i=0\n    count=0\n    while i < len(text):\n        j = 0\n        if text[i] == pattern[j]:\n            k = i\n            while j < len(pattern) and k < len(text) and  text[k] == pattern[j]:\n                j+=1\n                k+=1\n            if j == len(pattern):\n                count+=1\n            i+=1\n        else:\n            i+=1\n    return count"
    },
    {
        "instruction": "Create a python script to concatenate two lists.",
        "input": "list_1 = [1, 2, 3]\nlist_2 = [4, 5, 6]",
        "output": "def concat_lists(list_1, list_2):\n    return list_1 + list_2\n\nlist_1 = [1, 2, 3]\nlist_2 = [4, 5, 6]\n\nconcatenated_list = concat_lists(list_1, list_2)\nprint(concatenated_list) # [1, 2, 3, 4, 5, 6]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to concatenate two lists.\n\n### Input:\nlist_1 = [1, 2, 3]\nlist_2 = [4, 5, 6]\n\n### Output:\ndef concat_lists(list_1, list_2):\n    return list_1 + list_2\n\nlist_1 = [1, 2, 3]\nlist_2 = [4, 5, 6]\n\nconcatenated_list = concat_lists(list_1, list_2)\nprint(concatenated_list) # [1, 2, 3, 4, 5, 6]"
    },
    {
        "instruction": "In Python, build a program that can take a sentence as an input and output its translation in Pig Latin.",
        "input": "",
        "output": "def translate_pig_latin(sentence):\n    vowels = \"aeiou\"\n    words = sentence.split()\n    new_words = []\n    for word in words:\n        if word[0] in vowels:\n            word += \"way\"\n            new_words.append(word)\n        else:\n            i = 0\n            for letter in word:\n                if letter in vowels:\n                    break\n                i += 1\n            new_words.append(word[i:]+ word[:i] + \"ay\")\n    return \" \".join(new_words)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, build a program that can take a sentence as an input and output its translation in Pig Latin.\n\n### Input:\n\n\n### Output:\ndef translate_pig_latin(sentence):\n    vowels = \"aeiou\"\n    words = sentence.split()\n    new_words = []\n    for word in words:\n        if word[0] in vowels:\n            word += \"way\"\n            new_words.append(word)\n        else:\n            i = 0\n            for letter in word:\n                if letter in vowels:\n                    break\n                i += 1\n            new_words.append(word[i:]+ word[:i] + \"ay\")\n    return \" \".join(new_words)"
    },
    {
        "instruction": "Write a Python program to identify which elements in a list are unique",
        "input": "",
        "output": "def find_unique_elements(lst):\n    unique_list = []\n    for item in lst:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to identify which elements in a list are unique\n\n### Input:\n\n\n### Output:\ndef find_unique_elements(lst):\n    unique_list = []\n    for item in lst:\n        if item not in unique_list:\n            unique_list.append(item)\n    return unique_list"
    },
    {
        "instruction": "Implement a function in Python to reverse a given list of numbers.",
        "input": "List: [1, 2, 4, 7, 9]",
        "output": "def reverseList(list):\n    start = 0\n    end = len(list) - 1\n  \n    while start < end:\n        list[start], list[end] = list[end], list[start]\n        start += 1\n        end -= 1\n  \n    return list\n\nlist = [1, 2, 4, 7, 9]\n\nreverseList(list)\n# Output: [9, 7, 4, 2, 1]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python to reverse a given list of numbers.\n\n### Input:\nList: [1, 2, 4, 7, 9]\n\n### Output:\ndef reverseList(list):\n    start = 0\n    end = len(list) - 1\n  \n    while start < end:\n        list[start], list[end] = list[end], list[start]\n        start += 1\n        end -= 1\n  \n    return list\n\nlist = [1, 2, 4, 7, 9]\n\nreverseList(list)\n# Output: [9, 7, 4, 2, 1]"
    },
    {
        "instruction": "Design a chatbot in Python to help a customer find the best product for them.",
        "input": "The customer requirement is for an energy efficient appliance.",
        "output": "products = [\n {'name': ' microwave', 'energy_efficiency': 'high'},\n {'name': 'air conditioner', 'energy_efficiency': 'medium'},\n {'name': 'refrigerator', 'energy_efficiency': 'high'},\n {'name': 'washing machine', 'energy_efficiency': 'low'},\n]\n\ndef find_product(customer_req):\n best_product = None\n best_efficiency = 0\n for product in products:\n  if product['energy_efficiency'] > best_efficiency and customer_req in product['name']:\n    best_product = product\n    best_efficiency = product['energy_efficiency']\n if best_product:\n    print('The best product for you is the ' + best_product['name'])\n else:\n    print('Sorry, we do not have any products matching your requirements.')\n\n#Chatbot \n\nprint('Hi, what are you looking for?')\ncustomer_req = input()\n\nfind_product(customer_req)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a chatbot in Python to help a customer find the best product for them.\n\n### Input:\nThe customer requirement is for an energy efficient appliance.\n\n### Output:\nproducts = [\n {'name': ' microwave', 'energy_efficiency': 'high'},\n {'name': 'air conditioner', 'energy_efficiency': 'medium'},\n {'name': 'refrigerator', 'energy_efficiency': 'high'},\n {'name': 'washing machine', 'energy_efficiency': 'low'},\n]\n\ndef find_product(customer_req):\n best_product = None\n best_efficiency = 0\n for product in products:\n  if product['energy_efficiency'] > best_efficiency and customer_req in product['name']:\n    best_product = product\n    best_efficiency = product['energy_efficiency']\n if best_product:\n    print('The best product for you is the ' + best_product['name'])\n else:\n    print('Sorry, we do not have any products matching your requirements.')\n\n#Chatbot \n\nprint('Hi, what are you looking for?')\ncustomer_req = input()\n\nfind_product(customer_req)"
    },
    {
        "instruction": "Write an open-ended Python program to create a text mining model.",
        "input": "",
        "output": "import nltk\nimport sklearn\n\n# load the data \ndata = list(nltk.corpus.gutenberg.sents('melville-moby_dick.txt'))\n\n# pre-process the data to remove stopwords, punctuation, numbers and special characters, and lowercase it\nprocessed_data = [nltk.word_tokenize(str(sentence)) for sentence in data] \nprocessed_data = [nltk.pos_tag(sentence) for sentence in processed_data]\n\n# create the features for the model \nfeaturesets = [(nltk.pos_tag(sentence), category) for sentence, category in processed_data]\n\n# split the data into training and testing sets\ntraining_set = featuresets[:int(len(featuresets)*0.8)]\ntesting_set = featuresets[int(len(featuresets)*0.8):]\n\n# create the text mining model using Naive Bayes \ntext_classifier = SklearnClassifier(naive_bayes.MultinomialNB())\n \n# Train the model \ntext_classifier.train(training_set)\n\n# Test the accuracy of the model \nprint('Text Mining Model Accuracy: ', nltk.classify.accuracy(text_classifier, testing_set))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an open-ended Python program to create a text mining model.\n\n### Input:\n\n\n### Output:\nimport nltk\nimport sklearn\n\n# load the data \ndata = list(nltk.corpus.gutenberg.sents('melville-moby_dick.txt'))\n\n# pre-process the data to remove stopwords, punctuation, numbers and special characters, and lowercase it\nprocessed_data = [nltk.word_tokenize(str(sentence)) for sentence in data] \nprocessed_data = [nltk.pos_tag(sentence) for sentence in processed_data]\n\n# create the features for the model \nfeaturesets = [(nltk.pos_tag(sentence), category) for sentence, category in processed_data]\n\n# split the data into training and testing sets\ntraining_set = featuresets[:int(len(featuresets)*0.8)]\ntesting_set = featuresets[int(len(featuresets)*0.8):]\n\n# create the text mining model using Naive Bayes \ntext_classifier = SklearnClassifier(naive_bayes.MultinomialNB())\n \n# Train the model \ntext_classifier.train(training_set)\n\n# Test the accuracy of the model \nprint('Text Mining Model Accuracy: ', nltk.classify.accuracy(text_classifier, testing_set))"
    },
    {
        "instruction": "Suppose an array of strings is given, write a Python program to check if two adjacent strings are anagrams of each other or not.",
        "input": "[\"listen\", \"silent\", \"stop\", \"pots\"]",
        "output": "def is_anagram(string1, string2):\n    string1 = string1.lower()\n    string2 = string2.lower()\n    return sorted(string1) == sorted(string2)\n\ndef check_anagrams(a): \n    # Initialize flag \n    is_anagrams = True\n  \n    # Check for all adjacent words \n    for i in range(len(a)-1): \n          \n        if not is_anagram(a[i], a[i+1]): \n            is_anagrams = False\n            break\n    return is_anagrams",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuppose an array of strings is given, write a Python program to check if two adjacent strings are anagrams of each other or not.\n\n### Input:\n[\"listen\", \"silent\", \"stop\", \"pots\"]\n\n### Output:\ndef is_anagram(string1, string2):\n    string1 = string1.lower()\n    string2 = string2.lower()\n    return sorted(string1) == sorted(string2)\n\ndef check_anagrams(a): \n    # Initialize flag \n    is_anagrams = True\n  \n    # Check for all adjacent words \n    for i in range(len(a)-1): \n          \n        if not is_anagram(a[i], a[i+1]): \n            is_anagrams = False\n            break\n    return is_anagrams"
    },
    {
        "instruction": "Convert the following code code from C# to Python",
        "input": "int age = 32;\nif (age > 18 && age < 65)\n  Console.WriteLine(\"You are an adult!\");",
        "output": "age = 32\nif age > 18 and age < 65:\n    print('You are an adult!')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following code code from C# to Python\n\n### Input:\nint age = 32;\nif (age > 18 && age < 65)\n  Console.WriteLine(\"You are an adult!\");\n\n### Output:\nage = 32\nif age > 18 and age < 65:\n    print('You are an adult!')"
    },
    {
        "instruction": "Optimize a python script which calculates the sum of all the numbers below 1000 that are divisible by 3 or 5.",
        "input": "# Python program to find sum of all \n# numbers divisible by 3 or 5\n\n# initialize sum\nsum = 0\n\n# find sum of all numbers\n# divisible by 3 or 5\n# below 1000\nfor i in range(1000):\n    if(i%3==0 or i%5==0):\n        sum = sum + i\n\n#print the sum\nprint \"Sum =\",sum",
        "output": "# optimized Python program to find sum \n# of all numbers divisible by 3 or 5\n\n# initialize sum\nsum = 0\n\n# find sum of all numbers\n# divisible by 3\nfor i in range(3, 1000, 3):\n    sum += i\n\n# find sum of all numbers\n# divisible by 5\nfor i in range(5, 1000, 5):\n    # check if it is divisible by both 3 and 5\n    if i % 3 != 0:\n        sum += i\n\n#print the sum\nprint(\"Sum =\",sum)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a python script which calculates the sum of all the numbers below 1000 that are divisible by 3 or 5.\n\n### Input:\n# Python program to find sum of all \n# numbers divisible by 3 or 5\n\n# initialize sum\nsum = 0\n\n# find sum of all numbers\n# divisible by 3 or 5\n# below 1000\nfor i in range(1000):\n    if(i%3==0 or i%5==0):\n        sum = sum + i\n\n#print the sum\nprint \"Sum =\",sum\n\n### Output:\n# optimized Python program to find sum \n# of all numbers divisible by 3 or 5\n\n# initialize sum\nsum = 0\n\n# find sum of all numbers\n# divisible by 3\nfor i in range(3, 1000, 3):\n    sum += i\n\n# find sum of all numbers\n# divisible by 5\nfor i in range(5, 1000, 5):\n    # check if it is divisible by both 3 and 5\n    if i % 3 != 0:\n        sum += i\n\n#print the sum\nprint(\"Sum =\",sum)"
    },
    {
        "instruction": "Generate a Python program to randomly generate a list of 5 numbers between 1 and 30.",
        "input": "Not applicable",
        "output": "import random\n\n# Function to generate a list of 5 random numbers between 1 and 30\ndef generateList():\n list = []\n \n for i in range(5):\n  # Generate a random number between 1 and 30\n  num = random.randint(1, 30)\n  \n  # Check if the number is already in the list\n  while num in list:\n   num = random.randint(1, 30)\n \n  # Add the number to the list\n  list.append(num)\n \n return list\n\n# Test it\nprint(generateList()) # Output: [18, 28, 15, 8, 11]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to randomly generate a list of 5 numbers between 1 and 30.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\n# Function to generate a list of 5 random numbers between 1 and 30\ndef generateList():\n list = []\n \n for i in range(5):\n  # Generate a random number between 1 and 30\n  num = random.randint(1, 30)\n  \n  # Check if the number is already in the list\n  while num in list:\n   num = random.randint(1, 30)\n \n  # Add the number to the list\n  list.append(num)\n \n return list\n\n# Test it\nprint(generateList()) # Output: [18, 28, 15, 8, 11]"
    },
    {
        "instruction": "Design a Python program to calculate the median of a list without modifying the original list.",
        "input": "[3, 4, 7, -2, 5, 8, 9]",
        "output": "def median(lst):\n    # copy the list to a new list so we don't modify the original list\n    lst_copy = lst[:]\n\n    # sort the list\n    lst_copy.sort()\n\n    # get the middle of the list\n    length = len(lst_copy)\n    mid = length // 2\n\n    # if the length is odd, then return the middle item\n    if length % 2 == 1:\n        return lst_copy[mid]\n\n    # if the length is even, then return the average of the two middle items\n    else:\n        return (lst_copy[mid-1] + lst_copy[mid]) / 2\n\nmedian = median([3, 4, 7, -2, 5, 8, 9])\nprint(median)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to calculate the median of a list without modifying the original list.\n\n### Input:\n[3, 4, 7, -2, 5, 8, 9]\n\n### Output:\ndef median(lst):\n    # copy the list to a new list so we don't modify the original list\n    lst_copy = lst[:]\n\n    # sort the list\n    lst_copy.sort()\n\n    # get the middle of the list\n    length = len(lst_copy)\n    mid = length // 2\n\n    # if the length is odd, then return the middle item\n    if length % 2 == 1:\n        return lst_copy[mid]\n\n    # if the length is even, then return the average of the two middle items\n    else:\n        return (lst_copy[mid-1] + lst_copy[mid]) / 2\n\nmedian = median([3, 4, 7, -2, 5, 8, 9])\nprint(median)"
    },
    {
        "instruction": "Create a Python script to predict stock values",
        "input": "",
        "output": "# Import necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\n# Read in the data \nstocks = pd.read_csv(\"stocks.csv\")\n\n# Feature Extraction \nX = stocks.iloc[:,0].values\nY = stocks.iloc[:,1].values\n\n# Feature Scaling \nX = np.reshape(X, (-1, 1))\nY = np.reshape(Y, (-1, 1))\n\n# Fit the regression model \nfrom sklearn.linear_model import LinearRegression\nregression = LinearRegression()\nregression.fit(X, Y)\n\n# Predict \ny_pred = regression.predict([[x]])\n\n# Visualization \nplt.scatter(X, Y, color=\"red\")\nplt.plot(X, regression.predict(X), color=\"blue\")\nplt.title(\"Stock Prediction (Linear Regression)\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"Stock Price\")\nplt.show()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to predict stock values\n\n### Input:\n\n\n### Output:\n# Import necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\n\n# Read in the data \nstocks = pd.read_csv(\"stocks.csv\")\n\n# Feature Extraction \nX = stocks.iloc[:,0].values\nY = stocks.iloc[:,1].values\n\n# Feature Scaling \nX = np.reshape(X, (-1, 1))\nY = np.reshape(Y, (-1, 1))\n\n# Fit the regression model \nfrom sklearn.linear_model import LinearRegression\nregression = LinearRegression()\nregression.fit(X, Y)\n\n# Predict \ny_pred = regression.predict([[x]])\n\n# Visualization \nplt.scatter(X, Y, color=\"red\")\nplt.plot(X, regression.predict(X), color=\"blue\")\nplt.title(\"Stock Prediction (Linear Regression)\")\nplt.xlabel(\"Days\")\nplt.ylabel(\"Stock Price\")\nplt.show()"
    },
    {
        "instruction": "Implement a given design pattern in Python.",
        "input": "",
        "output": "# factory pattern example \n  \nclass Shape:\n    sides = 0\n    \n    def type(self):\n        print(\"This is an abstract class\")\n\nclass Triangle(Shape):\n    sides = 3\n    def type(self):\n        print(\"This is a triangle\")\n\nclass Rectangle(Shape):\n    sides = 4\n    def type(self):\n        print(\"This is a rectangle\")\n\nclass Factory:\n    def get_obj(self, shape):\n        if shape == \"triangle\":\n            return Triangle()\n        if shape == \"rectangle\":\n            return Rectangle()\n  \nf = Factory()\n  \nshape1 = f.get_obj(\"triangle\")\nshape1.type() \n  \nshape2 = f.get_obj(\"rectangle\")\nshape2.type()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a given design pattern in Python.\n\n### Input:\n\n\n### Output:\n# factory pattern example \n  \nclass Shape:\n    sides = 0\n    \n    def type(self):\n        print(\"This is an abstract class\")\n\nclass Triangle(Shape):\n    sides = 3\n    def type(self):\n        print(\"This is a triangle\")\n\nclass Rectangle(Shape):\n    sides = 4\n    def type(self):\n        print(\"This is a rectangle\")\n\nclass Factory:\n    def get_obj(self, shape):\n        if shape == \"triangle\":\n            return Triangle()\n        if shape == \"rectangle\":\n            return Rectangle()\n  \nf = Factory()\n  \nshape1 = f.get_obj(\"triangle\")\nshape1.type() \n  \nshape2 = f.get_obj(\"rectangle\")\nshape2.type()"
    },
    {
        "instruction": "Build a basic web server using Python.",
        "input": "Not applicable",
        "output": "import http.server\nimport socketserver\n\nPORT = 8080\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(\"serving at port\", PORT)\n    httpd.serve_forever()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a basic web server using Python.\n\n### Input:\nNot applicable\n\n### Output:\nimport http.server\nimport socketserver\n\nPORT = 8080\n\nHandler = http.server.SimpleHTTPRequestHandler\n\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(\"serving at port\", PORT)\n    httpd.serve_forever()"
    },
    {
        "instruction": "This code defines a Python class for binding DNS policy labels to DNS policies. To use this code, import the necessary modules and create an instance of the dnspolicy_dnspolicylabel_binding class. Set the name and other properties of the DNS policy and use the get() method to retrieve the DNS policy label bindings. Use the count() method to count the number of DNS policy label bindings configured on the NetScaler. Use the count_filtered() method to count the number of filtered DNS policy label bindings.",
        "input": "",
        "output": "#\n# Copyright (c) 2008-2015 Citrix Systems, Inc.\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\")\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n#\n\nfrom nssrc.com.citrix.netscaler.nitro.resource.base.base_resource import base_resource\nfrom nssrc.com.citrix.netscaler.nitro.resource.base.base_resource import base_response\nfrom nssrc.com.citrix.netscaler.nitro.service.options import options\nfrom nssrc.com.citrix.netscaler.nitro.exception.nitro_exception import nitro_exception\n\nfrom nssrc.com.citrix.netscaler.nitro.util.nitro_util import nitro_util\n\nclass dnspolicy_dnspolicylabel_binding(base_resource) :\n\t\"\"\" Binding class showing the dnspolicylabel that can be bound to dnspolicy.\n\t\"\"\"\n\tdef __init__(self) :\n\t\tself._boundto = \"\"\n\t\tself._priority = 0\n\t\tself._activepolicy = 0\n\t\tself._gotopriorityexpression = \"\"\n\t\tself._labeltype = \"\"\n\t\tself._labelname = \"\"\n\t\tself._name = \"\"\n\t\tself.___count = 0\n\n\t@property\n\tdef boundto(self) :\n\t\t\"\"\"Location where policy is bound.\n\t\t\"\"\"\n\t\ttry :\n\t\t\treturn self._boundto\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@boundto.setter\n\tdef boundto(self, boundto) :\n\t\t\"\"\"Location where policy is bound.\n\t\t\"\"\"\n\t\ttry :\n\t\t\tself._boundto = boundto\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@property\n\tdef name(self) :\n\t\t\"\"\"Name of the DNS policy.\n\t\t\"\"\"\n\t\ttry :\n\t\t\treturn self._name\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@name.setter\n\tdef name(self, name) :\n\t\t\"\"\"Name of the DNS policy.\n\t\t\"\"\"\n\t\ttry :\n\t\t\tself._name = name\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@property\n\tdef priority(self) :\n\t\t\"\"\"Specifies the priority of the policy.\n\t\t\"\"\"\n\t\ttry :\n\t\t\treturn self._priority\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@property\n\tdef labelname(self) :\n\t\t\"\"\"Name of the label to invoke if the current policy rule evaluates to TRUE.\n\t\t\"\"\"\n\t\ttry :\n\t\t\treturn self._labelname\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@property\n\tdef gotopriorityexpression(self) :\n\t\t\"\"\"Expression specifying the priority of the next policy which will get evaluated if the current policy rule evaluates to TRUE.\n\t\t\"\"\"\n\t\ttry :\n\t\t\treturn self._gotopriorityexpression\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@property\n\tdef labeltype(self) :\n\t\t\"\"\"Type of policy label invocation.<br/>Possible values = reqvserver, resvserver, policylabel.\n\t\t\"\"\"\n\t\ttry :\n\t\t\treturn self._labeltype\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@property\n\tdef activepolicy(self) :\n\t\t\"\"\"Indicates whether policy is bound or not.\n\t\t\"\"\"\n\t\ttry :\n\t\t\treturn self._activepolicy\n\t\texcept Exception as e:\n\t\t\traise e\n\n\tdef _get_nitro_response(self, service, response) :\n\t\t\"\"\" converts nitro response into object and returns the object array in case of get request.\n\t\t\"\"\"\n\t\ttry :\n\t\t\tresult = service.payload_formatter.string_to_resource(dnspolicy_dnspolicylabel_binding_response, response, self.__class__.__name__)\n\t\t\tif(result.errorcode != 0) :\n\t\t\t\tif (result.errorcode == 444) :\n\t\t\t\t\tservice.clear_session(self)\n\t\t\t\tif result.severity :\n\t\t\t\t\tif (result.severity == \"ERROR\") :\n\t\t\t\t\t\traise nitro_exception(result.errorcode, str(result.message), str(result.severity))\n\t\t\t\telse :\n\t\t\t\t\traise nitro_exception(result.errorcode, str(result.message), str(result.severity))\n\t\t\treturn result.dnspolicy_dnspolicylabel_binding\n\t\texcept Exception as e :\n\t\t\traise e\n\n\tdef _get_object_name(self) :\n\t\t\"\"\" Returns the value of object identifier argument\n\t\t\"\"\"\n\t\ttry :\n\t\t\tif (self.name) :\n\t\t\t\treturn str(self.name)\n\t\t\treturn None\n\t\texcept Exception as e :\n\t\t\traise e\n\n\n\n\t@classmethod\n\tdef get(cls, service, name) :\n\t\t\"\"\" Use this API to fetch dnspolicy_dnspolicylabel_binding resources.\n\t\t\"\"\"\n\t\ttry :\n\t\t\tobj = dnspolicy_dnspolicylabel_binding()\n\t\t\tobj.name = name\n\t\t\tresponse = obj.get_resources(service)\n\t\t\treturn response\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@classmethod\n\tdef get_filtered(cls, service, name, filter_) :\n\t\t\"\"\" Use this API to fetch filtered set of dnspolicy_dnspolicylabel_binding resources.\n\t\tFilter string should be in JSON format.eg: \"port:80,servicetype:HTTP\".\n\t\t\"\"\"\n\t\ttry :\n\t\t\tobj = dnspolicy_dnspolicylabel_binding()\n\t\t\tobj.name = name\n\t\t\toption_ = options()\n\t\t\toption_.filter = filter_\n\t\t\tresponse = obj.getfiltered(service, option_)\n\t\t\treturn response\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@classmethod\n\tdef count(cls, service, name) :\n\t\t\"\"\" Use this API to count dnspolicy_dnspolicylabel_binding resources configued on NetScaler.\n\t\t\"\"\"\n\t\ttry :\n\t\t\tobj = dnspolicy_dnspolicylabel_binding()\n\t\t\tobj.name = name\n\t\t\toption_ = options()\n\t\t\toption_.count = True\n\t\t\tresponse = obj.get_resources(service, option_)\n\t\t\tif response :\n\t\t\t\treturn response[0].__dict__['___count']\n\t\t\treturn 0\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@classmethod\n\tdef count_filtered(cls, service, name, filter_) :\n\t\t\"\"\" Use this API to count the filtered set of dnspolicy_dnspolicylabel_binding resources.\n\t\tFilter string should be in JSON format.eg: \"port:80,servicetype:HTTP\".\n\t\t\"\"\"\n\t\ttry :\n\t\t\tobj = dnspolicy_dnspolicylabel_binding()\n\t\t\tobj.name = name\n\t\t\toption_ = options()\n\t\t\toption_.count = True\n\t\t\toption_.filter = filter_\n\t\t\tresponse = obj.getfiltered(service, option_)\n\t\t\tif response :\n\t\t\t\treturn response[0].__dict__['___count']\n\t\t\treturn 0\n\t\texcept Exception as e:\n\t\t\traise e\n\n\tclass Labeltype:\n\t\treqvserver = \"reqvserver\"\n\t\tresvserver = \"resvserver\"\n\t\tpolicylabel = \"policylabel\"\n\nclass dnspolicy_dnspolicylabel_binding_response(base_response) :\n\tdef __init__(self, length=1) :\n\t\tself.dnspolicy_dnspolicylabel_binding = []\n\t\tself.errorcode = 0\n\t\tself.message = \"\"\n\t\tself.severity = \"\"\n\t\tself.sessionid = \"\"\n\t\tself.dnspolicy_dnspolicylabel_binding = [dnspolicy_dnspolicylabel_binding() for _ in range(length)]\n\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code defines a Python class for binding DNS policy labels to DNS policies. To use this code, import the necessary modules and create an instance of the dnspolicy_dnspolicylabel_binding class. Set the name and other properties of the DNS policy and use the get() method to retrieve the DNS policy label bindings. Use the count() method to count the number of DNS policy label bindings configured on the NetScaler. Use the count_filtered() method to count the number of filtered DNS policy label bindings.\n\n### Input:\n\n\n### Output:\n#\n# Copyright (c) 2008-2015 Citrix Systems, Inc.\n#\n#   Licensed under the Apache License, Version 2.0 (the \"License\")\n#   you may not use this file except in compliance with the License.\n#   You may obtain a copy of the License at\n#\n#       http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#   distributed under the License is distributed on an \"AS IS\" BASIS,\n#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#   See the License for the specific language governing permissions and\n#   limitations under the License.\n#\n\nfrom nssrc.com.citrix.netscaler.nitro.resource.base.base_resource import base_resource\nfrom nssrc.com.citrix.netscaler.nitro.resource.base.base_resource import base_response\nfrom nssrc.com.citrix.netscaler.nitro.service.options import options\nfrom nssrc.com.citrix.netscaler.nitro.exception.nitro_exception import nitro_exception\n\nfrom nssrc.com.citrix.netscaler.nitro.util.nitro_util import nitro_util\n\nclass dnspolicy_dnspolicylabel_binding(base_resource) :\n\t\"\"\" Binding class showing the dnspolicylabel that can be bound to dnspolicy.\n\t\"\"\"\n\tdef __init__(self) :\n\t\tself._boundto = \"\"\n\t\tself._priority = 0\n\t\tself._activepolicy = 0\n\t\tself._gotopriorityexpression = \"\"\n\t\tself._labeltype = \"\"\n\t\tself._labelname = \"\"\n\t\tself._name = \"\"\n\t\tself.___count = 0\n\n\t@property\n\tdef boundto(self) :\n\t\t\"\"\"Location where policy is bound.\n\t\t\"\"\"\n\t\ttry :\n\t\t\treturn self._boundto\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@boundto.setter\n\tdef boundto(self, boundto) :\n\t\t\"\"\"Location where policy is bound.\n\t\t\"\"\"\n\t\ttry :\n\t\t\tself._boundto = boundto\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@property\n\tdef name(self) :\n\t\t\"\"\"Name of the DNS policy.\n\t\t\"\"\"\n\t\ttry :\n\t\t\treturn self._name\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@name.setter\n\tdef name(self, name) :\n\t\t\"\"\"Name of the DNS policy.\n\t\t\"\"\"\n\t\ttry :\n\t\t\tself._name = name\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@property\n\tdef priority(self) :\n\t\t\"\"\"Specifies the priority of the policy.\n\t\t\"\"\"\n\t\ttry :\n\t\t\treturn self._priority\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@property\n\tdef labelname(self) :\n\t\t\"\"\"Name of the label to invoke if the current policy rule evaluates to TRUE.\n\t\t\"\"\"\n\t\ttry :\n\t\t\treturn self._labelname\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@property\n\tdef gotopriorityexpression(self) :\n\t\t\"\"\"Expression specifying the priority of the next policy which will get evaluated if the current policy rule evaluates to TRUE.\n\t\t\"\"\"\n\t\ttry :\n\t\t\treturn self._gotopriorityexpression\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@property\n\tdef labeltype(self) :\n\t\t\"\"\"Type of policy label invocation.<br/>Possible values = reqvserver, resvserver, policylabel.\n\t\t\"\"\"\n\t\ttry :\n\t\t\treturn self._labeltype\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@property\n\tdef activepolicy(self) :\n\t\t\"\"\"Indicates whether policy is bound or not.\n\t\t\"\"\"\n\t\ttry :\n\t\t\treturn self._activepolicy\n\t\texcept Exception as e:\n\t\t\traise e\n\n\tdef _get_nitro_response(self, service, response) :\n\t\t\"\"\" converts nitro response into object and returns the object array in case of get request.\n\t\t\"\"\"\n\t\ttry :\n\t\t\tresult = service.payload_formatter.string_to_resource(dnspolicy_dnspolicylabel_binding_response, response, self.__class__.__name__)\n\t\t\tif(result.errorcode != 0) :\n\t\t\t\tif (result.errorcode == 444) :\n\t\t\t\t\tservice.clear_session(self)\n\t\t\t\tif result.severity :\n\t\t\t\t\tif (result.severity == \"ERROR\") :\n\t\t\t\t\t\traise nitro_exception(result.errorcode, str(result.message), str(result.severity))\n\t\t\t\telse :\n\t\t\t\t\traise nitro_exception(result.errorcode, str(result.message), str(result.severity))\n\t\t\treturn result.dnspolicy_dnspolicylabel_binding\n\t\texcept Exception as e :\n\t\t\traise e\n\n\tdef _get_object_name(self) :\n\t\t\"\"\" Returns the value of object identifier argument\n\t\t\"\"\"\n\t\ttry :\n\t\t\tif (self.name) :\n\t\t\t\treturn str(self.name)\n\t\t\treturn None\n\t\texcept Exception as e :\n\t\t\traise e\n\n\n\n\t@classmethod\n\tdef get(cls, service, name) :\n\t\t\"\"\" Use this API to fetch dnspolicy_dnspolicylabel_binding resources.\n\t\t\"\"\"\n\t\ttry :\n\t\t\tobj = dnspolicy_dnspolicylabel_binding()\n\t\t\tobj.name = name\n\t\t\tresponse = obj.get_resources(service)\n\t\t\treturn response\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@classmethod\n\tdef get_filtered(cls, service, name, filter_) :\n\t\t\"\"\" Use this API to fetch filtered set of dnspolicy_dnspolicylabel_binding resources.\n\t\tFilter string should be in JSON format.eg: \"port:80,servicetype:HTTP\".\n\t\t\"\"\"\n\t\ttry :\n\t\t\tobj = dnspolicy_dnspolicylabel_binding()\n\t\t\tobj.name = name\n\t\t\toption_ = options()\n\t\t\toption_.filter = filter_\n\t\t\tresponse = obj.getfiltered(service, option_)\n\t\t\treturn response\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@classmethod\n\tdef count(cls, service, name) :\n\t\t\"\"\" Use this API to count dnspolicy_dnspolicylabel_binding resources configued on NetScaler.\n\t\t\"\"\"\n\t\ttry :\n\t\t\tobj = dnspolicy_dnspolicylabel_binding()\n\t\t\tobj.name = name\n\t\t\toption_ = options()\n\t\t\toption_.count = True\n\t\t\tresponse = obj.get_resources(service, option_)\n\t\t\tif response :\n\t\t\t\treturn response[0].__dict__['___count']\n\t\t\treturn 0\n\t\texcept Exception as e:\n\t\t\traise e\n\n\t@classmethod\n\tdef count_filtered(cls, service, name, filter_) :\n\t\t\"\"\" Use this API to count the filtered set of dnspolicy_dnspolicylabel_binding resources.\n\t\tFilter string should be in JSON format.eg: \"port:80,servicetype:HTTP\".\n\t\t\"\"\"\n\t\ttry :\n\t\t\tobj = dnspolicy_dnspolicylabel_binding()\n\t\t\tobj.name = name\n\t\t\toption_ = options()\n\t\t\toption_.count = True\n\t\t\toption_.filter = filter_\n\t\t\tresponse = obj.getfiltered(service, option_)\n\t\t\tif response :\n\t\t\t\treturn response[0].__dict__['___count']\n\t\t\treturn 0\n\t\texcept Exception as e:\n\t\t\traise e\n\n\tclass Labeltype:\n\t\treqvserver = \"reqvserver\"\n\t\tresvserver = \"resvserver\"\n\t\tpolicylabel = \"policylabel\"\n\nclass dnspolicy_dnspolicylabel_binding_response(base_response) :\n\tdef __init__(self, length=1) :\n\t\tself.dnspolicy_dnspolicylabel_binding = []\n\t\tself.errorcode = 0\n\t\tself.message = \"\"\n\t\tself.severity = \"\"\n\t\tself.sessionid = \"\"\n\t\tself.dnspolicy_dnspolicylabel_binding = [dnspolicy_dnspolicylabel_binding() for _ in range(length)]\n\n"
    },
    {
        "instruction": "Create a Python web server that can serve a static web page.",
        "input": "",
        "output": "from http.server import HTTPServer\nfrom http.server import BaseHTTPRequestHandler\n\nclass MyHTTPRequestHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        # send response status code\n        self.send_response(200)\n\n        # send headers\n        self.send_header('Content-Type', 'text/html')\n        self.end_headers()\n\n        # write the content as response\n        self.wfile.write(b\"<html><body><h1>Hello World!!</h1></body></html>\")\n\n# configure server properties\nport = 8080\nserver_address = ('127.0.0.1', port)\n\n# instantiate server\nhttpd = HTTPServer(server_address, MyHTTPRequestHandler)\n\n# run server\nhttpd.serve_forever()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python web server that can serve a static web page.\n\n### Input:\n\n\n### Output:\nfrom http.server import HTTPServer\nfrom http.server import BaseHTTPRequestHandler\n\nclass MyHTTPRequestHandler(BaseHTTPRequestHandler):\n    def do_GET(self):\n        # send response status code\n        self.send_response(200)\n\n        # send headers\n        self.send_header('Content-Type', 'text/html')\n        self.end_headers()\n\n        # write the content as response\n        self.wfile.write(b\"<html><body><h1>Hello World!!</h1></body></html>\")\n\n# configure server properties\nport = 8080\nserver_address = ('127.0.0.1', port)\n\n# instantiate server\nhttpd = HTTPServer(server_address, MyHTTPRequestHandler)\n\n# run server\nhttpd.serve_forever()"
    },
    {
        "instruction": "Come up with a solution in Python to replace all the words in a sentence with the same character.",
        "input": "Sentence: \"I am bored\"\nCharacter: *",
        "output": "def replaceWordsWithCharacter(sentence, character):\n    sentenceList = sentence.split(' ')\n    newSentence = ''\n    \n    for word in sentenceList:\n        newSentence += character\n    \n    return newSentence\n\nsentence = \"I am bored\"\ncharacter = \"*\"\nprint(replaceWordsWithCharacter(sentence,character))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCome up with a solution in Python to replace all the words in a sentence with the same character.\n\n### Input:\nSentence: \"I am bored\"\nCharacter: *\n\n### Output:\ndef replaceWordsWithCharacter(sentence, character):\n    sentenceList = sentence.split(' ')\n    newSentence = ''\n    \n    for word in sentenceList:\n        newSentence += character\n    \n    return newSentence\n\nsentence = \"I am bored\"\ncharacter = \"*\"\nprint(replaceWordsWithCharacter(sentence,character))"
    },
    {
        "instruction": "Create a python class named \"Car\" with two fields \"make\" and \"model\".",
        "input": "",
        "output": "class Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python class named \"Car\" with two fields \"make\" and \"model\".\n\n### Input:\n\n\n### Output:\nclass Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model"
    },
    {
        "instruction": "Write a Python program that creates a new dictionary from two existing dictionaries.",
        "input": "dict1 = {'a':1, 'b':2, 'c':3} \ndict2 = {'d':4, 'e':5, 'f':6}",
        "output": "dict3 = {key:dict1[key] if key in dict1 else dict2[key] for key in (dict1.keys() | dict2.keys())}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that creates a new dictionary from two existing dictionaries.\n\n### Input:\ndict1 = {'a':1, 'b':2, 'c':3} \ndict2 = {'d':4, 'e':5, 'f':6}\n\n### Output:\ndict3 = {key:dict1[key] if key in dict1 else dict2[key] for key in (dict1.keys() | dict2.keys())}"
    },
    {
        "instruction": "Modify the following Python code to add a few lines of logic.",
        "input": "def calculate_discount(price, discount):\n    '''This function takes price and discount as input and returns the discounted price'''\n    return price * (1 - discount)",
        "output": "def calculate_discount(price, discount):\n    '''This function takes price and discount as input and returns the discounted price'''\n    discount = min(max(0, discount), 1)\n    return round(price * (1 - discount), 2)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following Python code to add a few lines of logic.\n\n### Input:\ndef calculate_discount(price, discount):\n    '''This function takes price and discount as input and returns the discounted price'''\n    return price * (1 - discount)\n\n### Output:\ndef calculate_discount(price, discount):\n    '''This function takes price and discount as input and returns the discounted price'''\n    discount = min(max(0, discount), 1)\n    return round(price * (1 - discount), 2)"
    },
    {
        "instruction": "Write a Python program to classify the given sentence as a positive or negative statement.",
        "input": "sentence='This is not a good idea'",
        "output": "def classify_sentence(sentence): \n    # Convert the sentence to lower case \n    sentence = sentence.lower() \n\n    # Remove punctuation \n    sentence = sentence.replace('.','') \n    sentence = sentence.replace(',','') \n    sentence = sentence.replace('?','') \n    sentence = sentence.replace('!','') \n\n    # Split the sentence into words \n    words = sentence.split(' ') \n\n    # Check if the sentence contains any negative words and set the label accordingly \n    label = 'positive'\n    for word in words:\n        if word in ['not', 'never', 'no']:\n            label = 'negative'\n            break\n\n    # Return the label\n    return label",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to classify the given sentence as a positive or negative statement.\n\n### Input:\nsentence='This is not a good idea'\n\n### Output:\ndef classify_sentence(sentence): \n    # Convert the sentence to lower case \n    sentence = sentence.lower() \n\n    # Remove punctuation \n    sentence = sentence.replace('.','') \n    sentence = sentence.replace(',','') \n    sentence = sentence.replace('?','') \n    sentence = sentence.replace('!','') \n\n    # Split the sentence into words \n    words = sentence.split(' ') \n\n    # Check if the sentence contains any negative words and set the label accordingly \n    label = 'positive'\n    for word in words:\n        if word in ['not', 'never', 'no']:\n            label = 'negative'\n            break\n\n    # Return the label\n    return label"
    },
    {
        "instruction": "Create a function in Python to create a wordcount of a given text.",
        "input": "\"The lines of text that you're about to write will be filled with wonder and excitement\"",
        "output": "def wordcount(text):\n    counts = dict()\n    words = text.split()\n\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n\n    return counts\n\nprint(wordcount(text))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to create a wordcount of a given text.\n\n### Input:\n\"The lines of text that you're about to write will be filled with wonder and excitement\"\n\n### Output:\ndef wordcount(text):\n    counts = dict()\n    words = text.split()\n\n    for word in words:\n        if word in counts:\n            counts[word] += 1\n        else:\n            counts[word] = 1\n\n    return counts\n\nprint(wordcount(text))"
    },
    {
        "instruction": "Create a python function that prints out the numbers from 1 to n",
        "input": "n = 5",
        "output": "def printNumbers(n): \n  for i in range(1,n+1): \n    print(i, end =\" \") \n\nprintNumbers(5)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python function that prints out the numbers from 1 to n\n\n### Input:\nn = 5\n\n### Output:\ndef printNumbers(n): \n  for i in range(1,n+1): \n    print(i, end =\" \") \n\nprintNumbers(5)"
    },
    {
        "instruction": "Generate a python code for an algorithmic solution for the following problem:",
        "input": "Given a list A and a number X, determine whether or not there exist two elements in A whose sum is exactly X.",
        "output": "def is_sum_possible(A, X): \n    n = len(A) \n    # create an empty hash set\n    s = set() \n  \n    for i in range(n): \n        temp = X - A[i]  \n        if temp >= 0 and temp in s: \n            return True \n        s.add(A[i])  \n  \n    return False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python code for an algorithmic solution for the following problem:\n\n### Input:\nGiven a list A and a number X, determine whether or not there exist two elements in A whose sum is exactly X.\n\n### Output:\ndef is_sum_possible(A, X): \n    n = len(A) \n    # create an empty hash set\n    s = set() \n  \n    for i in range(n): \n        temp = X - A[i]  \n        if temp >= 0 and temp in s: \n            return True \n        s.add(A[i])  \n  \n    return False"
    },
    {
        "instruction": "Create an object-oriented program in Python for a two-player Tic-Tac-Toe game.",
        "input": "",
        "output": "class TicTacToe:\n    # Initializing the tic tac toe board \n    def __init__(self):\n        # empty board\n        self.board = [' ' for x in range(9)]\n        self.player = 'X'\n    \n     # function to print the board state\n    def print_board(self):\n        row1 = \"| {} | {} | {} |\".format(self.board[0], self.board[1], self.board[2])\n        row2 = \"| {} | {} | {} |\".format(self.board[3], self.board[4], self.board[5])\n        row3 = \"| {} | {} | {} |\".format(self.board[6], self.board[7], self.board[8])\n        \n        print()\n        print(row1)\n        print(row2)\n        print(row3)\n        print()\n    \n    # function to check for a win\n    def is_win(self, player):\n        win_state = [\n            [self.board[0], self.board[1], self.board[2]],\n            [self.board[3], self.board[4], self.board[5]],\n            [self.board[6], self.board[7], self.board[8]],\n            [self.board[0], self.board[3], self.board[6]],\n            [self.board[1], self.board[4], self.board[7]],\n            [self.board[2], self.board[5], self.board[8]],\n            [self.board[0], self.board[4], self.board[8]],\n            [self.board[2], self.board[4], self.board[6]],\n        ]\n        \n        if [player, player, player] in win_state:\n            return True\n        else:\n            return False\n    \n     # function to check for a draw \n    def is_draw(self):\n        if ' ' not in self.board:\n            return True\n        else:\n            return False\n    \n    def play(self):\n        is_running = True\n        while is_running:\n            # print the board\n            self.print_board()\n            print(\"{}'s turn\".format(self.player))\n            \n            # Get player input\n            move = int(input(\"Enter position (1-9): \")) # indexing starts at 0\n            # if position is empty\n            if self.board[move-1] == ' ':\n                self.board[move-1] == self.player\n                # check for win\n                if self.is_win(self.player):\n                    self.print_board()\n                    print('{} has won!'.format(self.player))\n                    is_running = False\n                # check for a draw\n                elif self.is_draw():\n                    self.print_board()\n                    print('Draw! Game Over!')\n                    is_running = False\n                    \n                # switch player\n                if self.player == 'X':\n                    self.player = 'O'\n                else:\n                    self.player = 'X'\n            else:\n                print('This position is taken. Please try again...')\n            \n        restart = input('Would you like to play again (Y/N): ')\n        if restart == 'Y':\n            self.__init__()\n            self.play()\n        else:\n            is_running = False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an object-oriented program in Python for a two-player Tic-Tac-Toe game.\n\n### Input:\n\n\n### Output:\nclass TicTacToe:\n    # Initializing the tic tac toe board \n    def __init__(self):\n        # empty board\n        self.board = [' ' for x in range(9)]\n        self.player = 'X'\n    \n     # function to print the board state\n    def print_board(self):\n        row1 = \"| {} | {} | {} |\".format(self.board[0], self.board[1], self.board[2])\n        row2 = \"| {} | {} | {} |\".format(self.board[3], self.board[4], self.board[5])\n        row3 = \"| {} | {} | {} |\".format(self.board[6], self.board[7], self.board[8])\n        \n        print()\n        print(row1)\n        print(row2)\n        print(row3)\n        print()\n    \n    # function to check for a win\n    def is_win(self, player):\n        win_state = [\n            [self.board[0], self.board[1], self.board[2]],\n            [self.board[3], self.board[4], self.board[5]],\n            [self.board[6], self.board[7], self.board[8]],\n            [self.board[0], self.board[3], self.board[6]],\n            [self.board[1], self.board[4], self.board[7]],\n            [self.board[2], self.board[5], self.board[8]],\n            [self.board[0], self.board[4], self.board[8]],\n            [self.board[2], self.board[4], self.board[6]],\n        ]\n        \n        if [player, player, player] in win_state:\n            return True\n        else:\n            return False\n    \n     # function to check for a draw \n    def is_draw(self):\n        if ' ' not in self.board:\n            return True\n        else:\n            return False\n    \n    def play(self):\n        is_running = True\n        while is_running:\n            # print the board\n            self.print_board()\n            print(\"{}'s turn\".format(self.player))\n            \n            # Get player input\n            move = int(input(\"Enter position (1-9): \")) # indexing starts at 0\n            # if position is empty\n            if self.board[move-1] == ' ':\n                self.board[move-1] == self.player\n                # check for win\n                if self.is_win(self.player):\n                    self.print_board()\n                    print('{} has won!'.format(self.player))\n                    is_running = False\n                # check for a draw\n                elif self.is_draw():\n                    self.print_board()\n                    print('Draw! Game Over!')\n                    is_running = False\n                    \n                # switch player\n                if self.player == 'X':\n                    self.player = 'O'\n                else:\n                    self.player = 'X'\n            else:\n                print('This position is taken. Please try again...')\n            \n        restart = input('Would you like to play again (Y/N): ')\n        if restart == 'Y':\n            self.__init__()\n            self.play()\n        else:\n            is_running = False"
    },
    {
        "instruction": "Debug this Python code.",
        "input": "def calculate_sum(numbers):\n      sum = 0\n      for num in numbers\n         sum += num\n      return sum",
        "output": "def calculate_sum(numbers):\n      sum = 0\n      for num in numbers: # the colon is missing\n         sum += num\n      return sum",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDebug this Python code.\n\n### Input:\ndef calculate_sum(numbers):\n      sum = 0\n      for num in numbers\n         sum += num\n      return sum\n\n### Output:\ndef calculate_sum(numbers):\n      sum = 0\n      for num in numbers: # the colon is missing\n         sum += num\n      return sum"
    },
    {
        "instruction": "Create a Python program to detect if a 2-d array has an increasing line along a diagonal.",
        "input": "[[1, 2, 3], [4, 5, 6], [7, 8, 9]]",
        "output": "def increasing_diagonal(grid):\n # Get the number of rows and columns in the grid\n num_rows = len(grid)\n num_cols = len(grid[0])\n\n # Loop through the elements of the array\n for i in range(num_rows):\n  for j in range(num_cols):\n   # Check that the adjacent elements in the diagonal line\n   # are increasing\n   if i + 1 < num_rows and j + 1 < num_cols:\n    if grid[i][j] >= grid[i + 1][j + 1]:\n     return False\n \n return True\n \n# Test array\ngrid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n \n# Print solution\nprint(increasing_diagonal(grid))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to detect if a 2-d array has an increasing line along a diagonal.\n\n### Input:\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n### Output:\ndef increasing_diagonal(grid):\n # Get the number of rows and columns in the grid\n num_rows = len(grid)\n num_cols = len(grid[0])\n\n # Loop through the elements of the array\n for i in range(num_rows):\n  for j in range(num_cols):\n   # Check that the adjacent elements in the diagonal line\n   # are increasing\n   if i + 1 < num_rows and j + 1 < num_cols:\n    if grid[i][j] >= grid[i + 1][j + 1]:\n     return False\n \n return True\n \n# Test array\ngrid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n \n# Print solution\nprint(increasing_diagonal(grid))"
    },
    {
        "instruction": "Implement an algorithm in Python to produce all valid combinations of some given elements.",
        "input": "[a,b,c]",
        "output": "def combinations(input_list):\n    out_list = []\n    # get all the possible combination from the input\n    for i in range(1 << len(input_list)):\n        out_list.append([input_list[bit] for bit in range(len(input_list)) if is_bit_set(i, bit)])\n    return out_list\n\ndef is_bit_set(num, bit):\n    return num & (1 << bit) > 0",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm in Python to produce all valid combinations of some given elements.\n\n### Input:\n[a,b,c]\n\n### Output:\ndef combinations(input_list):\n    out_list = []\n    # get all the possible combination from the input\n    for i in range(1 << len(input_list)):\n        out_list.append([input_list[bit] for bit in range(len(input_list)) if is_bit_set(i, bit)])\n    return out_list\n\ndef is_bit_set(num, bit):\n    return num & (1 << bit) > 0"
    },
    {
        "instruction": "Create a Python function that determines whether a word is a palindrome.",
        "input": "",
        "output": "def is_palindrome(word):\n    reverse_word = word[::-1]\n    if word == reverse_word:\n        return True\n    else:\n        return False\n\nresult = is_palindrome(\"madam\")\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that determines whether a word is a palindrome.\n\n### Input:\n\n\n### Output:\ndef is_palindrome(word):\n    reverse_word = word[::-1]\n    if word == reverse_word:\n        return True\n    else:\n        return False\n\nresult = is_palindrome(\"madam\")\nprint(result)"
    },
    {
        "instruction": "Create a class in Python to simplify working with temperatures in different units.",
        "input": "",
        "output": "class Temperature:\n    def __init__(self, value, unit):\n        self.value = value\n        self.unit = unit\n\n\n    def convert_to_celsius(self):\n        if self.unit == 'C':\n            return self.value\n        elif self.unit == 'F':\n            return (self.value - 32) * 5/9\n        elif self.unit == 'K':\n            return self.value - 273.15\n        else:\n            return None",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to simplify working with temperatures in different units.\n\n### Input:\n\n\n### Output:\nclass Temperature:\n    def __init__(self, value, unit):\n        self.value = value\n        self.unit = unit\n\n\n    def convert_to_celsius(self):\n        if self.unit == 'C':\n            return self.value\n        elif self.unit == 'F':\n            return (self.value - 32) * 5/9\n        elif self.unit == 'K':\n            return self.value - 273.15\n        else:\n            return None"
    },
    {
        "instruction": "Write a Python code to sort a list of words alphabetically.",
        "input": "word_list = [\"hello\", \"computer\", \"science\", \"art\"]",
        "output": "word_list.sort()\nprint(word_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to sort a list of words alphabetically.\n\n### Input:\nword_list = [\"hello\", \"computer\", \"science\", \"art\"]\n\n### Output:\nword_list.sort()\nprint(word_list)"
    },
    {
        "instruction": "Develop a Python function that generates a script that can be used to create a bar chart.",
        "input": "Data: [[1,20], [2,30], [3,25], [4,10]]",
        "output": "import matplotlib.pyplot as plt\n\ndef create_bar_chart(data):\n  # Extract values from data\n  x_values = [d[0] for d in data]\n  y_values = [d[1] for d in data]\n  \n  # Create bar chart\n  plt.bar(x_values, y_values)\n  plt.xlabel('X Values')\n  plt.ylabel('Y Values')\n  plt.title('Bar Chart')\n  plt.show()\n\ndata = [[1,20], [2,30], [3,25], [4,10]]\ncreate_bar_chart(data)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function that generates a script that can be used to create a bar chart.\n\n### Input:\nData: [[1,20], [2,30], [3,25], [4,10]]\n\n### Output:\nimport matplotlib.pyplot as plt\n\ndef create_bar_chart(data):\n  # Extract values from data\n  x_values = [d[0] for d in data]\n  y_values = [d[1] for d in data]\n  \n  # Create bar chart\n  plt.bar(x_values, y_values)\n  plt.xlabel('X Values')\n  plt.ylabel('Y Values')\n  plt.title('Bar Chart')\n  plt.show()\n\ndata = [[1,20], [2,30], [3,25], [4,10]]\ncreate_bar_chart(data)"
    },
    {
        "instruction": "Create a Python program to sort a list of numbers by their absolute value (e.g. sort [2,-5, -1, 3] in ascending order).",
        "input": "[2,-5, -1, 3]",
        "output": "def abs_sort(arr):\n    return sorted(arr, key=abs)\n\nabs_sort([2,-5, -1, 3])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to sort a list of numbers by their absolute value (e.g. sort [2,-5, -1, 3] in ascending order).\n\n### Input:\n[2,-5, -1, 3]\n\n### Output:\ndef abs_sort(arr):\n    return sorted(arr, key=abs)\n\nabs_sort([2,-5, -1, 3])"
    },
    {
        "instruction": "Produce a linear regression model to predict the house prices.",
        "input": "dataset = [[1000, 200, 500], [1200, 250, 600], [1400, 300, 800]]",
        "output": "\"\"\"\nProduce a linear regression model to predict the house prices\n\nThe linear regression model will use the given dataset to predict the house prices.\n\nThe input to the model will be the three variables - size of the house, number of bedrooms and number of bathrooms. The output will be the predicted house prices.\n\nThe model will be implemented in Python using the Scikit-Learn library. It will also use Cross Validation to evaluate the model's performance.\n\"\"\"",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a linear regression model to predict the house prices.\n\n### Input:\ndataset = [[1000, 200, 500], [1200, 250, 600], [1400, 300, 800]]\n\n### Output:\n\"\"\"\nProduce a linear regression model to predict the house prices\n\nThe linear regression model will use the given dataset to predict the house prices.\n\nThe input to the model will be the three variables - size of the house, number of bedrooms and number of bathrooms. The output will be the predicted house prices.\n\nThe model will be implemented in Python using the Scikit-Learn library. It will also use Cross Validation to evaluate the model's performance.\n\"\"\""
    },
    {
        "instruction": "Generate a function in Python to clear the screen.",
        "input": "",
        "output": "import os\ndef clear_screen():\n    os.system(\"cls\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python to clear the screen.\n\n### Input:\n\n\n### Output:\nimport os\ndef clear_screen():\n    os.system(\"cls\")"
    },
    {
        "instruction": "Generate a function in Python that returns the index of the first occurrence of a given number in an array.",
        "input": "[1, 4, 6, 9], 5",
        "output": "def first_occurrence(arr, num):\n    '''Returns index of the first occurrence of num in an array.'''\n    for i in range(len(arr)):\n        if(arr[i] == num):\n            return i\n    return -1\n\narr = [1, 4, 6, 9]\nnum = 5\n\nfirst_occurrence(arr, num) # -1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python that returns the index of the first occurrence of a given number in an array.\n\n### Input:\n[1, 4, 6, 9], 5\n\n### Output:\ndef first_occurrence(arr, num):\n    '''Returns index of the first occurrence of num in an array.'''\n    for i in range(len(arr)):\n        if(arr[i] == num):\n            return i\n    return -1\n\narr = [1, 4, 6, 9]\nnum = 5\n\nfirst_occurrence(arr, num) # -1"
    },
    {
        "instruction": "Modify the provided Python program to print out the numbers from 1 to 10",
        "input": "for i in range(11):\n    print(i)",
        "output": "for i in range(1, 11):\n    print(i)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the provided Python program to print out the numbers from 1 to 10\n\n### Input:\nfor i in range(11):\n    print(i)\n\n### Output:\nfor i in range(1, 11):\n    print(i)"
    },
    {
        "instruction": "Create a Python script to generate an Excel spreadsheet with random numbers. This spreadsheet should have three columns of random numbers between 1-10, 11-20, and 21-30, respectively.",
        "input": "Not applicable",
        "output": "import random\nimport xlsxwriter\n\n# Create an new Excel file\nworkbook = xlsxwriter.Workbook('RandomNumbers.xlsx')\n\n# Set up worksheet\nworksheet = workbook.add_worksheet('Random Numbers')\n\n# Generate Random numbers\nfor row in range(1, 11):\n for col in range(1, 4):\n  num = random.randint(1, 30)\n  worksheet.write(row, col, num)\n\nworkbook.close()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to generate an Excel spreadsheet with random numbers. This spreadsheet should have three columns of random numbers between 1-10, 11-20, and 21-30, respectively.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\nimport xlsxwriter\n\n# Create an new Excel file\nworkbook = xlsxwriter.Workbook('RandomNumbers.xlsx')\n\n# Set up worksheet\nworksheet = workbook.add_worksheet('Random Numbers')\n\n# Generate Random numbers\nfor row in range(1, 11):\n for col in range(1, 4):\n  num = random.randint(1, 30)\n  worksheet.write(row, col, num)\n\nworkbook.close()"
    },
    {
        "instruction": "Implement a function for making web requests in Python.",
        "input": "",
        "output": "import requests\n\ndef make_web_request(url):\n    '''This function makes an HTTP request to the given URL and returns the response.'''\n    response = requests.get(url)\n    return response.text",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function for making web requests in Python.\n\n### Input:\n\n\n### Output:\nimport requests\n\ndef make_web_request(url):\n    '''This function makes an HTTP request to the given URL and returns the response.'''\n    response = requests.get(url)\n    return response.text"
    },
    {
        "instruction": "Write a Python program to create a list of odd numbers between x and y.",
        "input": "x = 3, y = 10",
        "output": "# Generate a list of odd numbers between x and y\ndef odd_numbers(x, y):\n  # Initialize an empty list \n  odd_list = [] \n  \n  # Loop through the range\n  for i in range(x, y): \n    # If the number is odd\n    if (i % 2 != 0): \n      odd_list.append(i)\n  \n  return odd_list \n  \nx = 3\ny = 10\n\n# Get the list of odd numbers\nodd_list = odd_numbers(x, y)\n\n# Print the list\nprint(odd_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a list of odd numbers between x and y.\n\n### Input:\nx = 3, y = 10\n\n### Output:\n# Generate a list of odd numbers between x and y\ndef odd_numbers(x, y):\n  # Initialize an empty list \n  odd_list = [] \n  \n  # Loop through the range\n  for i in range(x, y): \n    # If the number is odd\n    if (i % 2 != 0): \n      odd_list.append(i)\n  \n  return odd_list \n  \nx = 3\ny = 10\n\n# Get the list of odd numbers\nodd_list = odd_numbers(x, y)\n\n# Print the list\nprint(odd_list)"
    },
    {
        "instruction": "Given a JSON object containing a list of key/value pairs, write a Python function to sort the list by value.",
        "input": "{\n  \"a\": 23,\n  \"b\": 42,\n  \"c\": 16\n}",
        "output": "def sort_by_value(data):\n sorted_list = sorted(data.items(), key=lambda kv: kv[1])\n return sorted_list\n \nprint(sort_by_value({\"a\": 23, \"b\": 42, \"c\": 16}))\n# Output -> [('c', 16), ('a', 23), ('b', 42)]  # sorted by value",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a JSON object containing a list of key/value pairs, write a Python function to sort the list by value.\n\n### Input:\n{\n  \"a\": 23,\n  \"b\": 42,\n  \"c\": 16\n}\n\n### Output:\ndef sort_by_value(data):\n sorted_list = sorted(data.items(), key=lambda kv: kv[1])\n return sorted_list\n \nprint(sort_by_value({\"a\": 23, \"b\": 42, \"c\": 16}))\n# Output -> [('c', 16), ('a', 23), ('b', 42)]  # sorted by value"
    },
    {
        "instruction": "Create an object-oriented program in Python to calculate the total cost of an array of products. The program should include a Product class with fields for name, price, and quantity.",
        "input": "[\n  {name: \"Apple\", price: 1.99, quantity: 2},\n  {name: \"Banana\", price: 0.79, quantity: 5}\n]",
        "output": "class Product:\n def __init__(self, name, price, quantity):\n  self.name = name\n  self.price = price\n  self.quantity = quantity\n\n \ndef calculateTotalCost(products):\n totalCost = 0\n \n for product in products:\n  totalCost += product.price * product.quantity\n \n return totalCost\n \nproducts = [\n Product(\"Apple\", 1.99, 2),\n Product(\"Banana\", 0.79, 5)\n]\n \nprint(calculateTotalCost(products))\n# Output: 11.75",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an object-oriented program in Python to calculate the total cost of an array of products. The program should include a Product class with fields for name, price, and quantity.\n\n### Input:\n[\n  {name: \"Apple\", price: 1.99, quantity: 2},\n  {name: \"Banana\", price: 0.79, quantity: 5}\n]\n\n### Output:\nclass Product:\n def __init__(self, name, price, quantity):\n  self.name = name\n  self.price = price\n  self.quantity = quantity\n\n \ndef calculateTotalCost(products):\n totalCost = 0\n \n for product in products:\n  totalCost += product.price * product.quantity\n \n return totalCost\n \nproducts = [\n Product(\"Apple\", 1.99, 2),\n Product(\"Banana\", 0.79, 5)\n]\n \nprint(calculateTotalCost(products))\n# Output: 11.75"
    },
    {
        "instruction": "Design a machine learning algorithm in python that predicts the price of a product.",
        "input": "",
        "output": "import pandas as pd \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.metrics import mean_absolute_error \n\n# Read in data \ndata = pd.read_csv('data.csv') \n\n# Split data into dependent and independent variables \nX = data.iloc[:, :-1].values \ny = data.iloc[:, -1].values \n\n# Split data into training and testing datasets \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) \n\n# Train the model \nregressor = LinearRegression() \nregressor.fit(X_train, y_train) \n\n# Make predictions on the test data\ny_pred = regressor.predict(X_test) \n\n# Calculate the mean absolute error \nmae = mean_absolute_error(y_test, y_pred) \n\n# Print results \nprint('Mean absolute error: %.2f' % mae)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a machine learning algorithm in python that predicts the price of a product.\n\n### Input:\n\n\n### Output:\nimport pandas as pd \nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.metrics import mean_absolute_error \n\n# Read in data \ndata = pd.read_csv('data.csv') \n\n# Split data into dependent and independent variables \nX = data.iloc[:, :-1].values \ny = data.iloc[:, -1].values \n\n# Split data into training and testing datasets \nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0) \n\n# Train the model \nregressor = LinearRegression() \nregressor.fit(X_train, y_train) \n\n# Make predictions on the test data\ny_pred = regressor.predict(X_test) \n\n# Calculate the mean absolute error \nmae = mean_absolute_error(y_test, y_pred) \n\n# Print results \nprint('Mean absolute error: %.2f' % mae)"
    },
    {
        "instruction": "You need to read code and detect the language it is written in (for example, Python, JavaScript, etc).",
        "input": "",
        "output": "Python",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nYou need to read code and detect the language it is written in (for example, Python, JavaScript, etc).\n\n### Input:\n\n\n### Output:\nPython"
    },
    {
        "instruction": "Generate random numbers between 2 given numbers using the random module in Python.",
        "input": "",
        "output": "import random\n\ndef generate_random_numbers(start, end):\n    random_numbers = []\n    for i in range(start, end+1):\n        random_number = random.randint(start, end)\n        random_numbers.append(random_number)\n\n    return random_numbers",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate random numbers between 2 given numbers using the random module in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef generate_random_numbers(start, end):\n    random_numbers = []\n    for i in range(start, end+1):\n        random_number = random.randint(start, end)\n        random_numbers.append(random_number)\n\n    return random_numbers"
    },
    {
        "instruction": "Construct a Python program that will search for a given word in a web page and return the number of occurrences.",
        "input": "word=\"Python\"\nurl=\"www.example.com\"",
        "output": "import requests\n\nurl = \"www.example.com\"\nword = \"Python\"\n\nhtml_content = requests.get(url).text\n\nwords = html_content.split()\n\noccurrences = 0\n\nfor w in words:\n    if w == word:\n        occurrences += 1\n\nprint(\"Found %d occurrences of '%s'\" % (occurrences, word))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program that will search for a given word in a web page and return the number of occurrences.\n\n### Input:\nword=\"Python\"\nurl=\"www.example.com\"\n\n### Output:\nimport requests\n\nurl = \"www.example.com\"\nword = \"Python\"\n\nhtml_content = requests.get(url).text\n\nwords = html_content.split()\n\noccurrences = 0\n\nfor w in words:\n    if w == word:\n        occurrences += 1\n\nprint(\"Found %d occurrences of '%s'\" % (occurrences, word))"
    },
    {
        "instruction": "Create a program in Python to find the longest common sequence from two given strings.",
        "input": "string1 = \"ABCD\"\nstring2 = \"BCDE\"",
        "output": "def LongestCommonSequence(string1, string2):\n \n n = len(string1)\n m = len(string2)\n \n LCS = [[0 for x in range(m+1)] for y in range(n+1)]\n \n for i in range(n):\n for j in range(m):\n if (string1[i] == string2[j]):\n LCS[i][j] = LCS[i-1][j-1] + 1\n else:\n LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n \n#return the longest common sequence\n index = LCS[n][m]\n lcs = [\"\"] * (index+1)\n lcs[index] = \"\"\n i = n\n j = m\n while i > 0 and j > 0:\n if (string1[i-1] == string2[j-1]):\n lcs[index-1] = string1[i-1]\n i -= 1\n j -= 1\n index -= 1\n \n elif (LCS[i-1][j] > LCS[i][j-1]):\n i -= 1\n else:\n j -= 1\n \n return \"\".join(lcs)\n \n print(LongestCommonSequence(string1, string2))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to find the longest common sequence from two given strings.\n\n### Input:\nstring1 = \"ABCD\"\nstring2 = \"BCDE\"\n\n### Output:\ndef LongestCommonSequence(string1, string2):\n \n n = len(string1)\n m = len(string2)\n \n LCS = [[0 for x in range(m+1)] for y in range(n+1)]\n \n for i in range(n):\n for j in range(m):\n if (string1[i] == string2[j]):\n LCS[i][j] = LCS[i-1][j-1] + 1\n else:\n LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n \n#return the longest common sequence\n index = LCS[n][m]\n lcs = [\"\"] * (index+1)\n lcs[index] = \"\"\n i = n\n j = m\n while i > 0 and j > 0:\n if (string1[i-1] == string2[j-1]):\n lcs[index-1] = string1[i-1]\n i -= 1\n j -= 1\n index -= 1\n \n elif (LCS[i-1][j] > LCS[i][j-1]):\n i -= 1\n else:\n j -= 1\n \n return \"\".join(lcs)\n \n print(LongestCommonSequence(string1, string2))"
    },
    {
        "instruction": "Generate a Python program that takes a list of numbers and an integer threshold as inputs and returns the list elements that are greater than or equal to the threshold.",
        "input": "[2, 8, 10, 13, 15], 10",
        "output": "def filter_numbers(nums, threshold):\n return [num for num in nums if num >= threshold]\n \n numbers = [2, 8, 10, 13, 15]\n threshold = 10\n \n print(filter_numbers(numbers, threshold))\n# Output: [10, 13, 15]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that takes a list of numbers and an integer threshold as inputs and returns the list elements that are greater than or equal to the threshold.\n\n### Input:\n[2, 8, 10, 13, 15], 10\n\n### Output:\ndef filter_numbers(nums, threshold):\n return [num for num in nums if num >= threshold]\n \n numbers = [2, 8, 10, 13, 15]\n threshold = 10\n \n print(filter_numbers(numbers, threshold))\n# Output: [10, 13, 15]"
    },
    {
        "instruction": "Write a Python program to take a list of numbers and remove all duplicates.",
        "input": "[5,5,5,2,1,2,3,5]",
        "output": "OldList = [5,5,5,2,1,2,3,5]\nNewList = []\n\nfor Num in OldList:\n    if Num not in NewList:\n        NewList.append(Num)\n\nprint(NewList)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to take a list of numbers and remove all duplicates.\n\n### Input:\n[5,5,5,2,1,2,3,5]\n\n### Output:\nOldList = [5,5,5,2,1,2,3,5]\nNewList = []\n\nfor Num in OldList:\n    if Num not in NewList:\n        NewList.append(Num)\n\nprint(NewList)"
    },
    {
        "instruction": "Develop a Python function to calculate the amount of words in a short text.",
        "input": "",
        "output": "def calculate_words_in_text(text):\n    words = text.split(\" \")\n    return len(words)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function to calculate the amount of words in a short text.\n\n### Input:\n\n\n### Output:\ndef calculate_words_in_text(text):\n    words = text.split(\" \")\n    return len(words)"
    },
    {
        "instruction": "Create a Python script to parse a given HTML page and find the URLs linking to other pages.",
        "input": "",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://example.com/\"\n# fetch the content from url\npage = requests.get(url)\n# parse the fetched content\nsoup = BeautifulSoup(page.text, 'html.parser')\n# find all href values for a tags\nall_links = soup.find_all('a', href=True)\n# show the results\nfor link in all_links:\n    print(link['href'])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to parse a given HTML page and find the URLs linking to other pages.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://example.com/\"\n# fetch the content from url\npage = requests.get(url)\n# parse the fetched content\nsoup = BeautifulSoup(page.text, 'html.parser')\n# find all href values for a tags\nall_links = soup.find_all('a', href=True)\n# show the results\nfor link in all_links:\n    print(link['href'])"
    },
    {
        "instruction": "Generate a code for guessing a random number in Python.",
        "input": "",
        "output": "# This code uses the random module  \nimport random\n\n# Generate random number from 0 to 100\nrandomNumber = random.randint(0, 100)  \n\n# Ask user to guess the number\n# Keep guessing till user gets it right\nwhile True: \n    userNumber = int(input(\"Guess the number: \"))\n\n    if userNumber == randomNumber: \n        print(\"You guessed right!\") \n        break \n    elif userNumber > randomNumber:\n        print(\"Your guess is too high!\")\n    else:\n        print(\"Your guess is too low!\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code for guessing a random number in Python.\n\n### Input:\n\n\n### Output:\n# This code uses the random module  \nimport random\n\n# Generate random number from 0 to 100\nrandomNumber = random.randint(0, 100)  \n\n# Ask user to guess the number\n# Keep guessing till user gets it right\nwhile True: \n    userNumber = int(input(\"Guess the number: \"))\n\n    if userNumber == randomNumber: \n        print(\"You guessed right!\") \n        break \n    elif userNumber > randomNumber:\n        print(\"Your guess is too high!\")\n    else:\n        print(\"Your guess is too low!\")"
    },
    {
        "instruction": "Write a Python program to convert a dataframe into a tabular format.",
        "input": "",
        "output": "import pandas as pd\n\ndef dataframe_to_table(df):\n  tabular_df = df.pivot_table(index=df.index, columns=df.columns, values=df.values)\n  return tabular_df",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a dataframe into a tabular format.\n\n### Input:\n\n\n### Output:\nimport pandas as pd\n\ndef dataframe_to_table(df):\n  tabular_df = df.pivot_table(index=df.index, columns=df.columns, values=df.values)\n  return tabular_df"
    },
    {
        "instruction": "Code a function in Python to find the Fibonacci number at a given index.",
        "input": "index = 5",
        "output": "def fibonacci_at_index(index): \n    if index < 0: \n        return -1\n    if index == 0 or index == 1: \n        return index \n    return fibonacci_at_index(index - 1) + fibonacci_at_index(index - 2) \n\nprint(fibonacci_at_index(index)) # 5",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a function in Python to find the Fibonacci number at a given index.\n\n### Input:\nindex = 5\n\n### Output:\ndef fibonacci_at_index(index): \n    if index < 0: \n        return -1\n    if index == 0 or index == 1: \n        return index \n    return fibonacci_at_index(index - 1) + fibonacci_at_index(index - 2) \n\nprint(fibonacci_at_index(index)) # 5"
    },
    {
        "instruction": "Write a python program to print a frequency table of the data in a two-dimensional array",
        "input": "data = [[6, 2, 8], [9, 5, 6], [4, 5, 2]]",
        "output": "def print_freq_table(data):\n    row_count = len(data)\n    col_count = len(data[0]) \n    freq_table = [[0] * col_count for i in range(row_count)]\n\n    for i in range(row_count):\n        for j in range(col_count):\n            freq_table[i][j] = data[i][j] * 100 / sum([data[k][j] for k in range(row_count)]) \n\n    for i in range(row_count): \n        for j in range(col_count): \n            print('%d : %.2f' %(data[i][j], freq_table[i][j]))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to print a frequency table of the data in a two-dimensional array\n\n### Input:\ndata = [[6, 2, 8], [9, 5, 6], [4, 5, 2]]\n\n### Output:\ndef print_freq_table(data):\n    row_count = len(data)\n    col_count = len(data[0]) \n    freq_table = [[0] * col_count for i in range(row_count)]\n\n    for i in range(row_count):\n        for j in range(col_count):\n            freq_table[i][j] = data[i][j] * 100 / sum([data[k][j] for k in range(row_count)]) \n\n    for i in range(row_count): \n        for j in range(col_count): \n            print('%d : %.2f' %(data[i][j], freq_table[i][j]))"
    },
    {
        "instruction": "Write a Python code snippet to remove all occurrences of a character from a string.",
        "input": "",
        "output": "def remove_char(s, c):\n  return s.replace(c, '')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code snippet to remove all occurrences of a character from a string.\n\n### Input:\n\n\n### Output:\ndef remove_char(s, c):\n  return s.replace(c, '')"
    },
    {
        "instruction": "Generate a program in Python to implement quick sort on an array of integers.",
        "input": "[6, 9, 20, 1, 11, 46]",
        "output": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[0]\n        less_than_pivot = [x for x in arr[1:] if x <= pivot]\n        greater_than_pivot = [x for x in arr[1:] if x > pivot]\n\n        return quicksort(less_than_pivot) + [pivot] + quicksort(greater_than_pivot)\n \narr = [6, 9, 20, 1, 11, 46]\nprint (\"Quick Sort: \" + str(quicksort(arr)))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program in Python to implement quick sort on an array of integers.\n\n### Input:\n[6, 9, 20, 1, 11, 46]\n\n### Output:\ndef quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[0]\n        less_than_pivot = [x for x in arr[1:] if x <= pivot]\n        greater_than_pivot = [x for x in arr[1:] if x > pivot]\n\n        return quicksort(less_than_pivot) + [pivot] + quicksort(greater_than_pivot)\n \narr = [6, 9, 20, 1, 11, 46]\nprint (\"Quick Sort: \" + str(quicksort(arr)))"
    },
    {
        "instruction": "Develop a program for solving the traveling salesman problem in Python.",
        "input": "",
        "output": "import pulp\n\n#Create the \u2018prob\u2019 variable to contain the problem data\nprob = pulp.LpProblem('Travelling_Salesman_Problem', pulp.LpMinimize)\n\n#Create problem Variables\nroute = list(range(1,nodes+1))\n\n# Define Cost Matrix\nweights = [[0, 8, 2, 10], [8, 0, 4, 12], [2, 4, 0, 9], [10, 12, 9, 0]]\n\n# Create a list of tuples containing all the possible routes\nall_pairs = [(i,j) for i in route for j in route if i != j]\n \n# Create a list of tuples containing all the possible routes for two stops\nall_trips = [(i,j,k) for i in route for j in route for k in route if i!=j and j!=k and i != k]\n \n# Create a list of tuples containing all the possible routes for three stops\nall_trips = [(i,j,k,l) for i in route for j in route for k in route for l in route if i!=j and j!=k and k!=l and i != k and i != l and j != l]\n\n# Create a dictionary of all the routes and the associated cost\ncosts = dict(zip(all_trips, weights))\n\n# Create dictionary of refular pairs and the associated cost\npair_costs = dict(zip(all_pairs, weights))\n\n# Create a list of tuples containing all possible routes for the given number of stops\ntrip_vars = pulp.LpVariable.dicts('trip',all_trips, lowBound=0, upBound=1,cat=pulp.LpInteger)\n\n# Objective Function\nprob += pulp.lpSum([trip_vars[i] * costs[i]for i in all_trips]), \"Sum_of_Transporting_Costs\"\n\n# Constraints\n# Ensure that the total number of trips are healthy\nprob += pulp.lpSum([trip_vars[i] for i in all_trips]) == 1, \"Sum_of_Trips\"\n\n# Ensure that the total number of trips each city is healthy\nfor k in route:\n    prob += pulp.lpSum([trip_vars[i] for i in all_trips if k in i]) <= 1, \"Sum_of_Trips_out_of_City_%d\"%k\n\n#Ensure that each stop is usually used\nfor pairs in all_pairs:\n    prob += pulp.lpSum([trip_vars[i] for i in all_trips if pairs[0] in i and pairs[1] in i]) <= pair_costs[pairs], \"Sum_of_Trips_%s_%s\"%pairs\n\n# The problem is solved using PuLP's choice of Solver\nprob.solve()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program for solving the traveling salesman problem in Python.\n\n### Input:\n\n\n### Output:\nimport pulp\n\n#Create the \u2018prob\u2019 variable to contain the problem data\nprob = pulp.LpProblem('Travelling_Salesman_Problem', pulp.LpMinimize)\n\n#Create problem Variables\nroute = list(range(1,nodes+1))\n\n# Define Cost Matrix\nweights = [[0, 8, 2, 10], [8, 0, 4, 12], [2, 4, 0, 9], [10, 12, 9, 0]]\n\n# Create a list of tuples containing all the possible routes\nall_pairs = [(i,j) for i in route for j in route if i != j]\n \n# Create a list of tuples containing all the possible routes for two stops\nall_trips = [(i,j,k) for i in route for j in route for k in route if i!=j and j!=k and i != k]\n \n# Create a list of tuples containing all the possible routes for three stops\nall_trips = [(i,j,k,l) for i in route for j in route for k in route for l in route if i!=j and j!=k and k!=l and i != k and i != l and j != l]\n\n# Create a dictionary of all the routes and the associated cost\ncosts = dict(zip(all_trips, weights))\n\n# Create dictionary of refular pairs and the associated cost\npair_costs = dict(zip(all_pairs, weights))\n\n# Create a list of tuples containing all possible routes for the given number of stops\ntrip_vars = pulp.LpVariable.dicts('trip',all_trips, lowBound=0, upBound=1,cat=pulp.LpInteger)\n\n# Objective Function\nprob += pulp.lpSum([trip_vars[i] * costs[i]for i in all_trips]), \"Sum_of_Transporting_Costs\"\n\n# Constraints\n# Ensure that the total number of trips are healthy\nprob += pulp.lpSum([trip_vars[i] for i in all_trips]) == 1, \"Sum_of_Trips\"\n\n# Ensure that the total number of trips each city is healthy\nfor k in route:\n    prob += pulp.lpSum([trip_vars[i] for i in all_trips if k in i]) <= 1, \"Sum_of_Trips_out_of_City_%d\"%k\n\n#Ensure that each stop is usually used\nfor pairs in all_pairs:\n    prob += pulp.lpSum([trip_vars[i] for i in all_trips if pairs[0] in i and pairs[1] in i]) <= pair_costs[pairs], \"Sum_of_Trips_%s_%s\"%pairs\n\n# The problem is solved using PuLP's choice of Solver\nprob.solve()"
    },
    {
        "instruction": "Generate a Python program to calculate the total cost including taxes of an item purchased based on the given inputs.",
        "input": "price = 22\ntax_percentage = 5",
        "output": "price = 22\ntax_percentage = 5\n\ntotal_cost = price * (1 + tax_percentage/100)\nprint('The total cost is: ', total_cost)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to calculate the total cost including taxes of an item purchased based on the given inputs.\n\n### Input:\nprice = 22\ntax_percentage = 5\n\n### Output:\nprice = 22\ntax_percentage = 5\n\ntotal_cost = price * (1 + tax_percentage/100)\nprint('The total cost is: ', total_cost)"
    },
    {
        "instruction": "Write a classifier in Python to identify if a given text is spam.",
        "input": "Not applicable",
        "output": "import numpy as np\nimport pandas as pd\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\ndata = pd.read_csv('spam.csv', encoding = 'latin-1')\n\nX = data['source']\ny = data['target']\n\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(X)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)\n\nclassifier = MultinomialNB()\nclassifier.fit(X_train, y_train)\n\nprint('Train set accuracy:', classifier.score(X_train, y_train))\nprint('Test set accuracy:', classifier.score(X_test, y_test))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a classifier in Python to identify if a given text is spam.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\ndata = pd.read_csv('spam.csv', encoding = 'latin-1')\n\nX = data['source']\ny = data['target']\n\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(X)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)\n\nclassifier = MultinomialNB()\nclassifier.fit(X_train, y_train)\n\nprint('Train set accuracy:', classifier.score(X_train, y_train))\nprint('Test set accuracy:', classifier.score(X_test, y_test))"
    },
    {
        "instruction": "Design a Python program that inspects a directory and all its subdirectories and prints the filenames that match a given expression.",
        "input": "./sample_files (expression: \"*.py\")",
        "output": "import os\n \ndef search_files(directory, extension):\n    filenames = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if file.endswith(extension):\n                filenames.append(os.path.join(root, file))\n    return filenames\n \nfilenames = search_files('./sample_files', '*.py')\nfor filename in filenames:\n    print(filename)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program that inspects a directory and all its subdirectories and prints the filenames that match a given expression.\n\n### Input:\n./sample_files (expression: \"*.py\")\n\n### Output:\nimport os\n \ndef search_files(directory, extension):\n    filenames = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if file.endswith(extension):\n                filenames.append(os.path.join(root, file))\n    return filenames\n \nfilenames = search_files('./sample_files', '*.py')\nfor filename in filenames:\n    print(filename)"
    },
    {
        "instruction": "Write an app in any language that takes a list of numbers as input and returns the median of the list.",
        "input": "[1, 3, 5, 8, 12]",
        "output": "JavaScript:\n\nconst nums = [1, 3, 5, 8, 12];\n\nfunction median(nums) {\n nums.sort();\n let mid = Math.floor(nums.length / 2);\n let median = 0;\n if (nums.length % 2 === 0) {\n median = (nums[mid - 1] + nums[mid]) / 2;\n } else {\n median = nums[mid];\n }\n return median;\n}\n\nconsole.log(median(nums)) // 5\n\nPython:\n\nnums = [1, 3, 5, 8, 12]\n\ndef median(nums):\n nums.sort()\n mid = int(len(nums) / 2)\n if len(nums) % 2 == 0:\n median = (nums[mid - 1] + nums[mid]) / 2\n else: \n median = nums[mid]\n return median\n\nprint(median(nums)) # 5",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an app in any language that takes a list of numbers as input and returns the median of the list.\n\n### Input:\n[1, 3, 5, 8, 12]\n\n### Output:\nJavaScript:\n\nconst nums = [1, 3, 5, 8, 12];\n\nfunction median(nums) {\n nums.sort();\n let mid = Math.floor(nums.length / 2);\n let median = 0;\n if (nums.length % 2 === 0) {\n median = (nums[mid - 1] + nums[mid]) / 2;\n } else {\n median = nums[mid];\n }\n return median;\n}\n\nconsole.log(median(nums)) // 5\n\nPython:\n\nnums = [1, 3, 5, 8, 12]\n\ndef median(nums):\n nums.sort()\n mid = int(len(nums) / 2)\n if len(nums) % 2 == 0:\n median = (nums[mid - 1] + nums[mid]) / 2\n else: \n median = nums[mid]\n return median\n\nprint(median(nums)) # 5"
    },
    {
        "instruction": "Generate a Python program to extract the domain name from a given URL.",
        "input": "url = \"https://www.google.com\"",
        "output": "import re\n\ndef extract_domain_name(url):\n    pattern = r\"([a-z0-9][a-z0-9\\-]*?\\.(com|org|net|edu|co))(\\/|$)\"\n    result = re.search(pattern, url)\n    return result[1]\n\nprint(extract_domain_name(url))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to extract the domain name from a given URL.\n\n### Input:\nurl = \"https://www.google.com\"\n\n### Output:\nimport re\n\ndef extract_domain_name(url):\n    pattern = r\"([a-z0-9][a-z0-9\\-]*?\\.(com|org|net|edu|co))(\\/|$)\"\n    result = re.search(pattern, url)\n    return result[1]\n\nprint(extract_domain_name(url))"
    },
    {
        "instruction": "Design a function in Python that takes a string as an input and prints all of the permutations of the string.",
        "input": "string = \"ABC\"",
        "output": "def permutation(string): \n    if len(string) == 1: \n        return [string] \n  \n    perm_list = [] \n    for i in range(len(string)): \n        m = string[i] \n        rem_string = string[:i] + string[i+1:] \n        for perm in permutation(rem_string): \n            perm_list.append(m + perm) \n  \n    return perm_list \n  \nstring = \"ABC\"\npermutation_list = permutation(string) \n  \nprint(permutation_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python that takes a string as an input and prints all of the permutations of the string.\n\n### Input:\nstring = \"ABC\"\n\n### Output:\ndef permutation(string): \n    if len(string) == 1: \n        return [string] \n  \n    perm_list = [] \n    for i in range(len(string)): \n        m = string[i] \n        rem_string = string[:i] + string[i+1:] \n        for perm in permutation(rem_string): \n            perm_list.append(m + perm) \n  \n    return perm_list \n  \nstring = \"ABC\"\npermutation_list = permutation(string) \n  \nprint(permutation_list)"
    },
    {
        "instruction": "Develop a Python program to add two matrices of different sizes",
        "input": "matrix1 = [[1, 2],\n           [1, 2],\n           [2, 4]]\n\nmatrix2 = [[1, 3],\n           [2, 3]]",
        "output": "# define a function \ndef addMatrix(matrix1, matrix2): \n    # creating an empty matrix \n    result = [[0, 0], \n              [0, 0], \n              [0, 0]] \n  \n    # iterating rows \n    for i in range(len(matrix1)): \n          \n        # iterating columns \n        for j in range(len(matrix1[0])): \n            result[i][j] = matrix1[i][j] + matrix2[i][j] \n    return (result) \n   \n# given matrices   \nmatrix1 = [[1, 2], \n           [1, 2],\n           [2, 4]]\n  \nmatrix2 = [[1, 3], \n           [2, 3]]\n  \n# printing result \nprint(\"Writing a program to add two matrices of different sizes: \")\n \nprint(addMatrix(matrix1, matrix2))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to add two matrices of different sizes\n\n### Input:\nmatrix1 = [[1, 2],\n           [1, 2],\n           [2, 4]]\n\nmatrix2 = [[1, 3],\n           [2, 3]]\n\n### Output:\n# define a function \ndef addMatrix(matrix1, matrix2): \n    # creating an empty matrix \n    result = [[0, 0], \n              [0, 0], \n              [0, 0]] \n  \n    # iterating rows \n    for i in range(len(matrix1)): \n          \n        # iterating columns \n        for j in range(len(matrix1[0])): \n            result[i][j] = matrix1[i][j] + matrix2[i][j] \n    return (result) \n   \n# given matrices   \nmatrix1 = [[1, 2], \n           [1, 2],\n           [2, 4]]\n  \nmatrix2 = [[1, 3], \n           [2, 3]]\n  \n# printing result \nprint(\"Writing a program to add two matrices of different sizes: \")\n \nprint(addMatrix(matrix1, matrix2))"
    },
    {
        "instruction": "Develop a Python program to generate a random integer from a given range",
        "input": "",
        "output": "import random\n\ndef random_int(low, high):\n return random.randint(low, high)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to generate a random integer from a given range\n\n### Input:\n\n\n### Output:\nimport random\n\ndef random_int(low, high):\n return random.randint(low, high)"
    },
    {
        "instruction": "Create a Python program to evaluate the expression 3x^2 + 4x - 2.",
        "input": "x = 5",
        "output": "def evaluate_expression(x):\n    return 3*x**2 + 4*x - 2\n\nx = 5\nresult = evaluate_expression(x)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to evaluate the expression 3x^2 + 4x - 2.\n\n### Input:\nx = 5\n\n### Output:\ndef evaluate_expression(x):\n    return 3*x**2 + 4*x - 2\n\nx = 5\nresult = evaluate_expression(x)\nprint(result)"
    },
    {
        "instruction": "Generate a Python program that takes one string argument and prints it to the console.",
        "input": "",
        "output": "import sys\n\nif __name__ == \"__main__\":\n    arg = sys.argv[1]\n    print(arg)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program that takes one string argument and prints it to the console.\n\n### Input:\n\n\n### Output:\nimport sys\n\nif __name__ == \"__main__\":\n    arg = sys.argv[1]\n    print(arg)"
    },
    {
        "instruction": "Create a program in Python which takes the input of two sorted lists and returns a merged sorted list.",
        "input": "[2, 8, 10], [3, 5, 7]",
        "output": "# Merge two sorted lists\ndef merge_sorted_lists(lst1, lst2):\n    i,j = 0, 0\n    merged_list = []\n    \n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] < lst2[j]:\n            merged_list.append(lst1[i])\n            i += 1\n        else:\n            merged_list.append(lst2[j])\n            j += 1\n            \n    merged_list += lst1[i:]\n    merged_list += lst2[j:]\n    \n    return merged_list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python which takes the input of two sorted lists and returns a merged sorted list.\n\n### Input:\n[2, 8, 10], [3, 5, 7]\n\n### Output:\n# Merge two sorted lists\ndef merge_sorted_lists(lst1, lst2):\n    i,j = 0, 0\n    merged_list = []\n    \n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] < lst2[j]:\n            merged_list.append(lst1[i])\n            i += 1\n        else:\n            merged_list.append(lst2[j])\n            j += 1\n            \n    merged_list += lst1[i:]\n    merged_list += lst2[j:]\n    \n    return merged_list"
    },
    {
        "instruction": "Create an optimization function to maximize a given function over a range of values in Python. The range should be given by [-5, 5], and the function is sin(x)",
        "input": "[-5, 5]",
        "output": "import numpy as np\nfrom scipy import optimize\n\ndef optimization_function(x):\n return np.sin(x)\n\nres = optimize.minimize_scalar(optimization_function, bounds=[-5, 5])\n\nprint(res.x)\n# Result: -0.90898",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an optimization function to maximize a given function over a range of values in Python. The range should be given by [-5, 5], and the function is sin(x)\n\n### Input:\n[-5, 5]\n\n### Output:\nimport numpy as np\nfrom scipy import optimize\n\ndef optimization_function(x):\n return np.sin(x)\n\nres = optimize.minimize_scalar(optimization_function, bounds=[-5, 5])\n\nprint(res.x)\n# Result: -0.90898"
    },
    {
        "instruction": "Create a Python program to sort an array of strings alphabetically.",
        "input": "arr_of_strings = [\"cat\", \"elephant\", \"dog\", \"bird\"]",
        "output": "def alphabetical_sort(arr):\n arr.sort()\n return arr\n\narrOfStrings = [\"cat\", \"elephant\", \"dog\", \"bird\"]\nsorted_arr = alphabetical_sort(arrOfStrings)\nprint(sorted_arr)  # Output: [\"bird\", \"cat\", \"dog\", \"elephant\"]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to sort an array of strings alphabetically.\n\n### Input:\narr_of_strings = [\"cat\", \"elephant\", \"dog\", \"bird\"]\n\n### Output:\ndef alphabetical_sort(arr):\n arr.sort()\n return arr\n\narrOfStrings = [\"cat\", \"elephant\", \"dog\", \"bird\"]\nsorted_arr = alphabetical_sort(arrOfStrings)\nprint(sorted_arr)  # Output: [\"bird\", \"cat\", \"dog\", \"elephant\"]"
    },
    {
        "instruction": "Build a Python program to compute the sum of the two given integers.",
        "input": "a = 10\nb = 20",
        "output": "def add_two_ints(a, b):\n    return a + b",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python program to compute the sum of the two given integers.\n\n### Input:\na = 10\nb = 20\n\n### Output:\ndef add_two_ints(a, b):\n    return a + b"
    },
    {
        "instruction": "Construct a python program to check if two given strings are anagrams.",
        "input": "String1: army\nString2: mary",
        "output": "def isAnagram(str1, str2):  \n    n1 = len(str1)\n    n2 = len(str2) \n    if n1 != n2: \n        return False\n    str1 = ''.join(sorted(str1)) \n    str2 = ''.join(sorted(str2))  \n    for i in range(n1):  \n        if str1[i] != str2[i]:  \n            return False\n    return True",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a python program to check if two given strings are anagrams.\n\n### Input:\nString1: army\nString2: mary\n\n### Output:\ndef isAnagram(str1, str2):  \n    n1 = len(str1)\n    n2 = len(str2) \n    if n1 != n2: \n        return False\n    str1 = ''.join(sorted(str1)) \n    str2 = ''.join(sorted(str2))  \n    for i in range(n1):  \n        if str1[i] != str2[i]:  \n            return False\n    return True"
    },
    {
        "instruction": "Write a Python program that prints all the keys and their values in a given dictionary.",
        "input": "",
        "output": "def print_dict_items(dct):\n  for key, value in dct.items():\n    print(\"Key: {}, Value: {}\".format(key, value))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that prints all the keys and their values in a given dictionary.\n\n### Input:\n\n\n### Output:\ndef print_dict_items(dct):\n  for key, value in dct.items():\n    print(\"Key: {}, Value: {}\".format(key, value))"
    },
    {
        "instruction": "Rewrite a provided Python function to a more Pythonic version.",
        "input": "def add_numbers(x, y):\ntotal = 0\nfor i in range(x, y):\n total = total + i\nreturn total",
        "output": "def add_numbers(x, y):\n return sum(range(x, y))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite a provided Python function to a more Pythonic version.\n\n### Input:\ndef add_numbers(x, y):\ntotal = 0\nfor i in range(x, y):\n total = total + i\nreturn total\n\n### Output:\ndef add_numbers(x, y):\n return sum(range(x, y))"
    },
    {
        "instruction": "Build a Python function that takes in two integers and returns the greatest common divisor.",
        "input": "4 and 8",
        "output": "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nprint(gcd(4, 8)) # Output: 4",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python function that takes in two integers and returns the greatest common divisor.\n\n### Input:\n4 and 8\n\n### Output:\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\nprint(gcd(4, 8)) # Output: 4"
    },
    {
        "instruction": "Design a class in python to represent a bank account.",
        "input": "<no input>",
        "output": "class BankAccount:\n   def __init__(self, account_number, account_balance):\n        self.account_number = account_number\n        self.account_balance = account_balance\n\n    def deposit(self, deposit_amount):\n        self.account_balance += deposit_amount\n\n    def withdraw(self, withdraw_amount):\n        if self.account_balance - withdraw_amount >= 0:\n            self.account_balance -= withdraw_amount\n            return True\n        return False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in python to represent a bank account.\n\n### Input:\n<no input>\n\n### Output:\nclass BankAccount:\n   def __init__(self, account_number, account_balance):\n        self.account_number = account_number\n        self.account_balance = account_balance\n\n    def deposit(self, deposit_amount):\n        self.account_balance += deposit_amount\n\n    def withdraw(self, withdraw_amount):\n        if self.account_balance - withdraw_amount >= 0:\n            self.account_balance -= withdraw_amount\n            return True\n        return False"
    },
    {
        "instruction": "Write Python code to print the following at the end of the code.",
        "input": "* * * * *",
        "output": "for i in range(5):\n    for j in range(5):\n        print(\"*\", end=\" \")\n    print()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to print the following at the end of the code.\n\n### Input:\n* * * * *\n\n### Output:\nfor i in range(5):\n    for j in range(5):\n        print(\"*\", end=\" \")\n    print()"
    },
    {
        "instruction": "Write a Python program to implement an algorithm selection sort.",
        "input": "Not applicable",
        "output": "def selectionSort(array):\n    # loop over the array\n    for i in range(len(array)-1):\n        # find the minimum element\n        minimum = i\n        for j in range(i + 1, len(array)): \n            if array[minimum] > array[j]: \n                minimum = j          \n     \n        # Swap the found minimum element with \n        # the first element         \n        temp = array[i] \n        array[i] = array[minimum] \n        array[minimum] = temp \n\n# test array\narray = [4, 2, 3, 5, 1]\nselectionSort(array)\n# result\nprint(array)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to implement an algorithm selection sort.\n\n### Input:\nNot applicable\n\n### Output:\ndef selectionSort(array):\n    # loop over the array\n    for i in range(len(array)-1):\n        # find the minimum element\n        minimum = i\n        for j in range(i + 1, len(array)): \n            if array[minimum] > array[j]: \n                minimum = j          \n     \n        # Swap the found minimum element with \n        # the first element         \n        temp = array[i] \n        array[i] = array[minimum] \n        array[minimum] = temp \n\n# test array\narray = [4, 2, 3, 5, 1]\nselectionSort(array)\n# result\nprint(array)"
    },
    {
        "instruction": "Create a function in Python that takes in a string and returns the characters in reverse order.",
        "input": "Hello",
        "output": "def reverse_string(s): \n    return s[::-1]\n\nresult = reverse_string(\"Hello\") \nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes in a string and returns the characters in reverse order.\n\n### Input:\nHello\n\n### Output:\ndef reverse_string(s): \n    return s[::-1]\n\nresult = reverse_string(\"Hello\") \nprint(result)"
    },
    {
        "instruction": "Create a function to find the number of days between two dates in Python.",
        "input": "",
        "output": "import datetime\n\ndef days_between(start_date, end_date):\n    '''This function takes two date objects and returns the number of days between them.'''\n    return (end_date - start_date).days\n\nstart = datetime.date(2020, 1, 1) \nend = datetime.date(2020, 1, 5) \ndays = days_between(start, end)\nprint(days) # 4",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to find the number of days between two dates in Python.\n\n### Input:\n\n\n### Output:\nimport datetime\n\ndef days_between(start_date, end_date):\n    '''This function takes two date objects and returns the number of days between them.'''\n    return (end_date - start_date).days\n\nstart = datetime.date(2020, 1, 1) \nend = datetime.date(2020, 1, 5) \ndays = days_between(start, end)\nprint(days) # 4"
    },
    {
        "instruction": "Write a Python program to create a list with the square of all the numbers from 0 to 10.",
        "input": "Not applicable",
        "output": "# Create a list with the square of all the numbers from 0 to 10\n# Create an empty list\nsquares = []\n# Iterate over the range from 0 to 10\nfor i in range(11):\n # Append the square of the current number to the list\n squares.append(i ** 2)\n# Print the list\nprint(squares)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a list with the square of all the numbers from 0 to 10.\n\n### Input:\nNot applicable\n\n### Output:\n# Create a list with the square of all the numbers from 0 to 10\n# Create an empty list\nsquares = []\n# Iterate over the range from 0 to 10\nfor i in range(11):\n # Append the square of the current number to the list\n squares.append(i ** 2)\n# Print the list\nprint(squares)"
    },
    {
        "instruction": "Design a Python script to print the elements in a given BST in level order",
        "input": "Tree elements to print: 4, 2, 6, 1, 7",
        "output": "class Node: \n    def __init__(self, data): \n        self.data = data \n        self.left = None\n        self.right = None\n  \ndef LevelOrderTraversal(root): \n  \n    if root == None:\n        return\n  \n    queue = []\n    queue.append(root)   \n    while(len(queue) > 0): \n        print (queue[0].data)\n        node = queue.pop(0) \n  \n        if node.left is not None: \n            queue.append(node.left) \n  \n        if node.right is not None: \n            queue.append(node.right) \n            \nroot = Node(4) \nroot.left = Node(2) \nroot.right = Node(6) \nroot.left.left = Node(1)\nroot.left.right = Node(7)\n\nLevelOrderTraversal(root)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script to print the elements in a given BST in level order\n\n### Input:\nTree elements to print: 4, 2, 6, 1, 7\n\n### Output:\nclass Node: \n    def __init__(self, data): \n        self.data = data \n        self.left = None\n        self.right = None\n  \ndef LevelOrderTraversal(root): \n  \n    if root == None:\n        return\n  \n    queue = []\n    queue.append(root)   \n    while(len(queue) > 0): \n        print (queue[0].data)\n        node = queue.pop(0) \n  \n        if node.left is not None: \n            queue.append(node.left) \n  \n        if node.right is not None: \n            queue.append(node.right) \n            \nroot = Node(4) \nroot.left = Node(2) \nroot.right = Node(6) \nroot.left.left = Node(1)\nroot.left.right = Node(7)\n\nLevelOrderTraversal(root)"
    },
    {
        "instruction": "Design a Python class that displays a diamond shape when it is called.",
        "input": "",
        "output": "class DiamondShape:\n    def __init__(self, size):\n        self.size = size\n    \n    def show(self):\n        for i in range(1, self.size+1):\n            print(\" \" * (self.size - i) + \" *\" * (2*i - 1))\n        for i in range(self.size-1, 0, -1): \n            print(\" \" * (self.size - i) + \" *\" * (2*i - 1))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class that displays a diamond shape when it is called.\n\n### Input:\n\n\n### Output:\nclass DiamondShape:\n    def __init__(self, size):\n        self.size = size\n    \n    def show(self):\n        for i in range(1, self.size+1):\n            print(\" \" * (self.size - i) + \" *\" * (2*i - 1))\n        for i in range(self.size-1, 0, -1): \n            print(\" \" * (self.size - i) + \" *\" * (2*i - 1))"
    },
    {
        "instruction": "Design a multi-threaded program in Python to find the optimal solution for the travelling salesman problem.",
        "input": "",
        "output": "import threading\nimport itertools\n\n#create thread class\nclass TSPThread(threading.Thread):\n    def __init__(self, city_list):\n        threading.Thread.__init__(self)\n        self.city_list = city_list\n    \n    def run(self):\n        min_distance = float(\"Inf\")\n        min_permutation = None\n        for permutation in itertools.permutations(self.city_list):\n            distance = calculate_distance(permutation)\n            if distance < min_distance:\n                min_distance = distance\n                min_permutation = permutation\n        print(\"Optimal path:\", min_permutation)\n        print(\"Minimum distance\", min_distance)\n\n#function to calculate the distance between two cities\ndef calculate_distance(permutation):\n    distance = 0\n    for i in range(len(permutation)):\n        city_a = permutation[i]\n        city_b = permutation[(i+1)%len(permutation)]\n        distance += get_distance(city_a, city_b)\n    return distance\n\n#function to get the distance between two cities\ndef get_distance(city_a, city_b):\n    # here we must calculate the distance between two cities\n    pass\n\n#function to create and start threads\ndef start_threads(city_list):\n    thread_list = []\n    for i in range(len(city_list)):\n        thread_list.append(TSPThread(city_list[i:] + city_list[:i]))\n    for t in thread_list:\n        t.start()\n    for t in thread_list:\n        t.join()\n\n#function to read city list from file        \ndef read_city_list_from_file(file_name):\n    city_list = []\n    # here you read city list from file\n    return city_list\n\nif __name__ == \"__main__\":\n    city_list = read_city_list_from_file(\"input.txt\")\n    start_threads(city_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a multi-threaded program in Python to find the optimal solution for the travelling salesman problem.\n\n### Input:\n\n\n### Output:\nimport threading\nimport itertools\n\n#create thread class\nclass TSPThread(threading.Thread):\n    def __init__(self, city_list):\n        threading.Thread.__init__(self)\n        self.city_list = city_list\n    \n    def run(self):\n        min_distance = float(\"Inf\")\n        min_permutation = None\n        for permutation in itertools.permutations(self.city_list):\n            distance = calculate_distance(permutation)\n            if distance < min_distance:\n                min_distance = distance\n                min_permutation = permutation\n        print(\"Optimal path:\", min_permutation)\n        print(\"Minimum distance\", min_distance)\n\n#function to calculate the distance between two cities\ndef calculate_distance(permutation):\n    distance = 0\n    for i in range(len(permutation)):\n        city_a = permutation[i]\n        city_b = permutation[(i+1)%len(permutation)]\n        distance += get_distance(city_a, city_b)\n    return distance\n\n#function to get the distance between two cities\ndef get_distance(city_a, city_b):\n    # here we must calculate the distance between two cities\n    pass\n\n#function to create and start threads\ndef start_threads(city_list):\n    thread_list = []\n    for i in range(len(city_list)):\n        thread_list.append(TSPThread(city_list[i:] + city_list[:i]))\n    for t in thread_list:\n        t.start()\n    for t in thread_list:\n        t.join()\n\n#function to read city list from file        \ndef read_city_list_from_file(file_name):\n    city_list = []\n    # here you read city list from file\n    return city_list\n\nif __name__ == \"__main__\":\n    city_list = read_city_list_from_file(\"input.txt\")\n    start_threads(city_list)"
    },
    {
        "instruction": "Modify a Python function to safely divide a number by another number.",
        "input": "",
        "output": "def safe_divide(x, y):\n \u00a0  # Check for valid arguments\n \u00a0  if y == 0:\n \u00a0 \u00a0 \u00a0  raise ValueError('Cannot divide by zero')\n \u00a0  # Perform the division\n \u00a0  return x/y",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify a Python function to safely divide a number by another number.\n\n### Input:\n\n\n### Output:\ndef safe_divide(x, y):\n \u00a0  # Check for valid arguments\n \u00a0  if y == 0:\n \u00a0 \u00a0 \u00a0  raise ValueError('Cannot divide by zero')\n \u00a0  # Perform the division\n \u00a0  return x/y"
    },
    {
        "instruction": "Write a python code to create a histogram",
        "input": "Input is an array of integers",
        "output": "import matplotlib.pyplot as plt\n\ndef create_histogram(data):\n    plt.hist(data, bins=20)\n    plt.title('Histogram of Input Data')\n    plt.show()\n\n# Example data\ndata = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1]\n\ncreate_histogram(data)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to create a histogram\n\n### Input:\nInput is an array of integers\n\n### Output:\nimport matplotlib.pyplot as plt\n\ndef create_histogram(data):\n    plt.hist(data, bins=20)\n    plt.title('Histogram of Input Data')\n    plt.show()\n\n# Example data\ndata = [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1]\n\ncreate_histogram(data)"
    },
    {
        "instruction": "Write a Python program to create a custom discussion forum with a given list of topics.",
        "input": "topics=['Cars','Computers','Home Automation']",
        "output": "# Define a custom class for the forum\nclass Forum:\n    # Initialize the class with a title and a list of topics  \n    def __init__(self, title, topics):\n        self.title = title\n        self.topics = topics\n\n    # Define a method to print the list of topics\n    def display_topics(self):\n        for topic in self.topics:\n            print(topic)\n\n# Create a new Forum object \nmyforum = Forum(\"Discussions Forum\", topics)\n\n# Print the list of topics \nmyforum.display_topics() # Output: Cars, Computers, Home Automation",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a custom discussion forum with a given list of topics.\n\n### Input:\ntopics=['Cars','Computers','Home Automation']\n\n### Output:\n# Define a custom class for the forum\nclass Forum:\n    # Initialize the class with a title and a list of topics  \n    def __init__(self, title, topics):\n        self.title = title\n        self.topics = topics\n\n    # Define a method to print the list of topics\n    def display_topics(self):\n        for topic in self.topics:\n            print(topic)\n\n# Create a new Forum object \nmyforum = Forum(\"Discussions Forum\", topics)\n\n# Print the list of topics \nmyforum.display_topics() # Output: Cars, Computers, Home Automation"
    },
    {
        "instruction": "Write a Python program to sort a list of numbers from lowest to highest.",
        "input": "[7, 3, 5, 8, 4]",
        "output": "[3, 4, 5, 7, 8]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a list of numbers from lowest to highest.\n\n### Input:\n[7, 3, 5, 8, 4]\n\n### Output:\n[3, 4, 5, 7, 8]"
    },
    {
        "instruction": "Design a loop in Python that runs until the user enters q.",
        "input": "",
        "output": "while True:\n    user_input = input(\"Please enter something or 'q' to exit: \")\n    \n    if user_input == 'q':\n        break\n    else:\n        # Do something with the input",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a loop in Python that runs until the user enters q.\n\n### Input:\n\n\n### Output:\nwhile True:\n    user_input = input(\"Please enter something or 'q' to exit: \")\n    \n    if user_input == 'q':\n        break\n    else:\n        # Do something with the input"
    },
    {
        "instruction": "Generate a python program which sorts an array using the bubble sort algorithm.",
        "input": "[3, 2, 5, 2, 4]",
        "output": "def bubble_sort(arr):\n    # Traverse through all array elements \n    for i in range(len(arr)):\n \n        # Last i elements are already in place \n        for j in range(0, len(arr)-i-1):\n \n            # traverse the array from 0 to n-i-1\n            # Swap if the element found is greater than the next element \n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n \n    return arr\n\nresult = bubble_sort([3, 2, 5, 2, 4]))\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program which sorts an array using the bubble sort algorithm.\n\n### Input:\n[3, 2, 5, 2, 4]\n\n### Output:\ndef bubble_sort(arr):\n    # Traverse through all array elements \n    for i in range(len(arr)):\n \n        # Last i elements are already in place \n        for j in range(0, len(arr)-i-1):\n \n            # traverse the array from 0 to n-i-1\n            # Swap if the element found is greater than the next element \n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n \n    return arr\n\nresult = bubble_sort([3, 2, 5, 2, 4]))\nprint(result)"
    },
    {
        "instruction": "Write a Python function that takes two arguments and prints the sum.",
        "input": "",
        "output": "def print_sum(a, b):\n    print(a + b)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes two arguments and prints the sum.\n\n### Input:\n\n\n### Output:\ndef print_sum(a, b):\n    print(a + b)"
    },
    {
        "instruction": "Create a Python function that calculates the factorial of a given number",
        "input": "x = 4",
        "output": "def factorial(x):\n    result = 1\n    for num in range(1,x+1):\n        result *= num\n    return result",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that calculates the factorial of a given number\n\n### Input:\nx = 4\n\n### Output:\ndef factorial(x):\n    result = 1\n    for num in range(1,x+1):\n        result *= num\n    return result"
    },
    {
        "instruction": "In the data set below, write a Python program that finds the most common pet type in each region.\n\nRegion, Pet Type\n1, Dog\n1, Dog\n2, Cat\n2, Cat\n2, Bird\n3, Fish",
        "input": "Region, Pet Type\n1, Dog\n1, Dog\n2, Cat\n2, Cat\n2, Bird\n3, Fish",
        "output": "from collections import defaultdict \n  \n# Initialize a dictionary \nd = defaultdict(int) \n  \n# Input Data \ndata = [[1, \"Dog\"], [1, \"Dog\"], [2, \"Cat\"], [2, \"Cat\"], [2, \"Bird\"], [3, \"Fish\"]] \n  \n# Iterate through the list of lists \nfor sublist in data: \n    region = sublist[0] \n    pet_type = sublist[1] \n    d[region] += 1\n  \n# Iterate through the dictionary \nfor key, value in d.items(): \n    if value == max(d.values()): \n        most_common_pet = key \n        print(\"Most common pet in region\", key, \"is\", most_common_pet) \n  \n# Output: Most common pet in region 1 is Dog",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn the data set below, write a Python program that finds the most common pet type in each region.\n\nRegion, Pet Type\n1, Dog\n1, Dog\n2, Cat\n2, Cat\n2, Bird\n3, Fish\n\n### Input:\nRegion, Pet Type\n1, Dog\n1, Dog\n2, Cat\n2, Cat\n2, Bird\n3, Fish\n\n### Output:\nfrom collections import defaultdict \n  \n# Initialize a dictionary \nd = defaultdict(int) \n  \n# Input Data \ndata = [[1, \"Dog\"], [1, \"Dog\"], [2, \"Cat\"], [2, \"Cat\"], [2, \"Bird\"], [3, \"Fish\"]] \n  \n# Iterate through the list of lists \nfor sublist in data: \n    region = sublist[0] \n    pet_type = sublist[1] \n    d[region] += 1\n  \n# Iterate through the dictionary \nfor key, value in d.items(): \n    if value == max(d.values()): \n        most_common_pet = key \n        print(\"Most common pet in region\", key, \"is\", most_common_pet) \n  \n# Output: Most common pet in region 1 is Dog"
    },
    {
        "instruction": "Create a python class that stores customer data as a dictionary and has methods for adding and subtracting customers.",
        "input": "",
        "output": "class Customers:\n    def __init__(self):\n        self.customers = {}\n \n    def add_customer(self, name, info):\n        self.customers[name] = info\n \n    def remove_customer(self, name):\n        if name in self.customers:\n            del self.customers[name]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python class that stores customer data as a dictionary and has methods for adding and subtracting customers.\n\n### Input:\n\n\n### Output:\nclass Customers:\n    def __init__(self):\n        self.customers = {}\n \n    def add_customer(self, name, info):\n        self.customers[name] = info\n \n    def remove_customer(self, name):\n        if name in self.customers:\n            del self.customers[name]"
    },
    {
        "instruction": "Update the given Python code such that the output will be printed in ascending order.",
        "input": "lst = [3, 1, 4, 5, 2]\n\nfor number in lst:\n    print(number)",
        "output": "lst = [3, 1, 4, 5, 2]\n\nfor number in sorted(lst):\n    print(number)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUpdate the given Python code such that the output will be printed in ascending order.\n\n### Input:\nlst = [3, 1, 4, 5, 2]\n\nfor number in lst:\n    print(number)\n\n### Output:\nlst = [3, 1, 4, 5, 2]\n\nfor number in sorted(lst):\n    print(number)"
    },
    {
        "instruction": "Write a Python program to make a prediction using a Support Vector Machine (SVM)",
        "input": "X = [[0, 0], [1, 1]]\ny = [0, 1]",
        "output": "import numpy as np\nfrom sklearn import svm\n\nX = np.array([[0, 0], [1, 1]])\ny = np.array([0, 1])\n\nclf = svm.SVC(kernel='linear')\nclf.fit(X, y)\n\nprediction = clf.predict([[2., 2.]])\nprint(prediction)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to make a prediction using a Support Vector Machine (SVM)\n\n### Input:\nX = [[0, 0], [1, 1]]\ny = [0, 1]\n\n### Output:\nimport numpy as np\nfrom sklearn import svm\n\nX = np.array([[0, 0], [1, 1]])\ny = np.array([0, 1])\n\nclf = svm.SVC(kernel='linear')\nclf.fit(X, y)\n\nprediction = clf.predict([[2., 2.]])\nprint(prediction)"
    },
    {
        "instruction": "Write a function in Python Web scripting to update the value of a given list.",
        "input": "my_list = [1,2,3]\nnew_value = 5",
        "output": "def update_list(my_list, new_value):\n    my_list[-1] = new_value\n    return my_list\n\nmy_list = [1,2,3]\nnew_value = 5\n\nupdated_list = update_list(my_list, new_value)\nprint(updated_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python Web scripting to update the value of a given list.\n\n### Input:\nmy_list = [1,2,3]\nnew_value = 5\n\n### Output:\ndef update_list(my_list, new_value):\n    my_list[-1] = new_value\n    return my_list\n\nmy_list = [1,2,3]\nnew_value = 5\n\nupdated_list = update_list(my_list, new_value)\nprint(updated_list)"
    },
    {
        "instruction": "Develop a python script that extracts the titles of all articles from a given website.",
        "input": "www.example.com",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\n# specify url\nurl = 'www.example.com'\n\n# fetch the page\nresponse = requests.get(url)\nhtml = response.content\n\n# parse page content\nsoup = BeautifulSoup(html)\n\n# extract titles\ntitles = []\nfor title in soup.find_all('title'):\n titles.append(title.text)\n\n# print titles\nprint(titles)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python script that extracts the titles of all articles from a given website.\n\n### Input:\nwww.example.com\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# specify url\nurl = 'www.example.com'\n\n# fetch the page\nresponse = requests.get(url)\nhtml = response.content\n\n# parse page content\nsoup = BeautifulSoup(html)\n\n# extract titles\ntitles = []\nfor title in soup.find_all('title'):\n titles.append(title.text)\n\n# print titles\nprint(titles)"
    },
    {
        "instruction": "Generate a predictive model in Python to predict the number of employees will leave in a given year based on the age, job position and current salary.",
        "input": "",
        "output": "\"\"\"\nGenerate a predictive model in Python to predict the number of employees will leave in a given year based on the age, job position and current salary.\n\"\"\"\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Load the data\ndata = pd.read_csv(\"data.csv\")\n\n# Convert categorical variables to dummy variables\ndata = pd.get_dummies(data, columns=['position'])\n\n# Split the data into independent and dependent variables\nx = data.iloc[:, :-1]    #Independent Variables\ny = data.iloc[:, -1]     #Dependent Variable\n\n# Build the linear regression model\nmodel = LinearRegression().fit(x, y)\n\n# Make predictions\npredictions = model.predict(x)\n\n# Evaluate the model\nprint(\"Model score:\", model.score(x, y))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a predictive model in Python to predict the number of employees will leave in a given year based on the age, job position and current salary.\n\n### Input:\n\n\n### Output:\n\"\"\"\nGenerate a predictive model in Python to predict the number of employees will leave in a given year based on the age, job position and current salary.\n\"\"\"\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\n\n# Load the data\ndata = pd.read_csv(\"data.csv\")\n\n# Convert categorical variables to dummy variables\ndata = pd.get_dummies(data, columns=['position'])\n\n# Split the data into independent and dependent variables\nx = data.iloc[:, :-1]    #Independent Variables\ny = data.iloc[:, -1]     #Dependent Variable\n\n# Build the linear regression model\nmodel = LinearRegression().fit(x, y)\n\n# Make predictions\npredictions = model.predict(x)\n\n# Evaluate the model\nprint(\"Model score:\", model.score(x, y))"
    },
    {
        "instruction": "Edit the given Python code to return the maximum value from a list",
        "input": "def max_val(nums):\n    maximum = 0\n    for i in range(len(nums)):\n        if nums[i] > maximum:\n            maximum = nums[i]\n    return maximum\n\nlist = [1, 4, 8, 10]",
        "output": "def max_val(nums):\n    maximum = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > maximum:\n            maximum = nums[i]\n    return maximum\n\nlist = [1, 4, 8, 10]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the given Python code to return the maximum value from a list\n\n### Input:\ndef max_val(nums):\n    maximum = 0\n    for i in range(len(nums)):\n        if nums[i] > maximum:\n            maximum = nums[i]\n    return maximum\n\nlist = [1, 4, 8, 10]\n\n### Output:\ndef max_val(nums):\n    maximum = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > maximum:\n            maximum = nums[i]\n    return maximum\n\nlist = [1, 4, 8, 10]"
    },
    {
        "instruction": "Generate a function in Python that finds the max element in a given list.",
        "input": "[2, 78, 34, 55]",
        "output": "def maxElement(arr):\n    return max(arr)\n\narray = [2, 78, 34, 55]\n\nprint(maxElement(array)) # 78",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python that finds the max element in a given list.\n\n### Input:\n[2, 78, 34, 55]\n\n### Output:\ndef maxElement(arr):\n    return max(arr)\n\narray = [2, 78, 34, 55]\n\nprint(maxElement(array)) # 78"
    },
    {
        "instruction": "Create an example of a two dimensional array in Python.",
        "input": "",
        "output": "array_2d = [[1,2,3], [4,5,6], [7,8,9]]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an example of a two dimensional array in Python.\n\n### Input:\n\n\n### Output:\narray_2d = [[1,2,3], [4,5,6], [7,8,9]]"
    },
    {
        "instruction": "Generate a python code to sum the elements in the given array.",
        "input": "arr = [1, 2, 3, 4, 5]",
        "output": "def sum_array(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\nsum_array(arr)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python code to sum the elements in the given array.\n\n### Input:\narr = [1, 2, 3, 4, 5]\n\n### Output:\ndef sum_array(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\nsum_array(arr)"
    },
    {
        "instruction": "Create a Python function that takes two strings and calculates the Levenshtein edit distance between them.",
        "input": "string1 = 'cat'\nstring2 = 'bat'",
        "output": "def levenshteinDistance(str1, str2):\n    dp = [[0 for _ in range(len(str2) + 1)] for _ in range(len(str1) + 1)]\n    for i in range(len(str1) + 1):\n        dp[i][0] = i\n    for j in range(len(str2) + 1):\n        dp[0][j] = j\n    for i in range(1, len(str1) + 1):\n        for j in range(1, len(str2) + 1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    return dp[-1][-1]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes two strings and calculates the Levenshtein edit distance between them.\n\n### Input:\nstring1 = 'cat'\nstring2 = 'bat'\n\n### Output:\ndef levenshteinDistance(str1, str2):\n    dp = [[0 for _ in range(len(str2) + 1)] for _ in range(len(str1) + 1)]\n    for i in range(len(str1) + 1):\n        dp[i][0] = i\n    for j in range(len(str2) + 1):\n        dp[0][j] = j\n    for i in range(1, len(str1) + 1):\n        for j in range(1, len(str2) + 1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    return dp[-1][-1]"
    },
    {
        "instruction": "Create a command line tool in Python that takes a numerical input (e.g. from user input) and prints out all prime numbers up to that number.",
        "input": "50",
        "output": "import sys\n\ndef main():\n try:\n number = int(sys.argv[1])\n except (IndexError, ValueError):\n number = int(input('Please enter a number: '))\n\n prime_list = []\n for num in range(2, number + 1):\n for i in prime_list:\n if num % i == 0:\n break\n else:\n prime_list.append(num)\n\nprint(prime_list)\n\nif __name__ == '__main__':\n main()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a command line tool in Python that takes a numerical input (e.g. from user input) and prints out all prime numbers up to that number.\n\n### Input:\n50\n\n### Output:\nimport sys\n\ndef main():\n try:\n number = int(sys.argv[1])\n except (IndexError, ValueError):\n number = int(input('Please enter a number: '))\n\n prime_list = []\n for num in range(2, number + 1):\n for i in prime_list:\n if num % i == 0:\n break\n else:\n prime_list.append(num)\n\nprint(prime_list)\n\nif __name__ == '__main__':\n main()"
    },
    {
        "instruction": "Generate a Python script to shuffle a list of numbers.",
        "input": "[1,2,3,4,5]",
        "output": "import random\n\ndef shuffle_list(numbers): \n    # Create a copy of the list to avoid mutating the original list\n    shuffled_list = list(numbers)\n    # Iterate over the list\n    for i in range(len(shuffled_list)):\n        # Generate a random index for the current position\n        rand_index = random.randint(0, len(shuffled_list)-1)\n        # Swap the two elements\n        shuffled_list[i], shuffled_list[rand_index] = shuffled_list[rand_index], shuffled_list[i]\n    \n    return shuffled_list\n\nexample_list = [1,2,3,4,5]\nprint(shuffle_list(example_list)) # Output: [3, 2, 5, 1, 4]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python script to shuffle a list of numbers.\n\n### Input:\n[1,2,3,4,5]\n\n### Output:\nimport random\n\ndef shuffle_list(numbers): \n    # Create a copy of the list to avoid mutating the original list\n    shuffled_list = list(numbers)\n    # Iterate over the list\n    for i in range(len(shuffled_list)):\n        # Generate a random index for the current position\n        rand_index = random.randint(0, len(shuffled_list)-1)\n        # Swap the two elements\n        shuffled_list[i], shuffled_list[rand_index] = shuffled_list[rand_index], shuffled_list[i]\n    \n    return shuffled_list\n\nexample_list = [1,2,3,4,5]\nprint(shuffle_list(example_list)) # Output: [3, 2, 5, 1, 4]"
    },
    {
        "instruction": "Create a Python script to make a GET request to a given URL and extract all the hyperlinks from the page.",
        "input": "Not applicable",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\n# Make the request\nr = requests.get('https://www.example.com/')\n\n# Parse the response\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Get all hyperlinks from the page\nlinks = []\nfor link in soup.findAll('a'):\n links.append(link.get('href'))\n\nprint(links)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to make a GET request to a given URL and extract all the hyperlinks from the page.\n\n### Input:\nNot applicable\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\n# Make the request\nr = requests.get('https://www.example.com/')\n\n# Parse the response\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Get all hyperlinks from the page\nlinks = []\nfor link in soup.findAll('a'):\n links.append(link.get('href'))\n\nprint(links)"
    },
    {
        "instruction": "Write a python program to create a histogram of the given list elements",
        "input": "list: [1, 2, 4, 5, 6, 3, 2]",
        "output": "def create_histogram(list):\n    hist = dict()\n    \n    for i in list:\n        if i not in hist:\n            hist[i] = 1\n        else:\n            hist[i] += 1\n    \n    return hist",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to create a histogram of the given list elements\n\n### Input:\nlist: [1, 2, 4, 5, 6, 3, 2]\n\n### Output:\ndef create_histogram(list):\n    hist = dict()\n    \n    for i in list:\n        if i not in hist:\n            hist[i] = 1\n        else:\n            hist[i] += 1\n    \n    return hist"
    },
    {
        "instruction": "Modify a given Python code to make it run faster.",
        "input": "Python code",
        "output": "# original code \ndef find_sum(numbers):\n  total = 0\n  for number in numbers:\n    total += number\n  return total \n\n# modified code \ndef find_sum(numbers):\n  return sum(numbers)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify a given Python code to make it run faster.\n\n### Input:\nPython code\n\n### Output:\n# original code \ndef find_sum(numbers):\n  total = 0\n  for number in numbers:\n    total += number\n  return total \n\n# modified code \ndef find_sum(numbers):\n  return sum(numbers)"
    },
    {
        "instruction": "Create a Python program to calculate the total cost of an order based on item cost and quantity.",
        "input": "Item cost: 10\nQuantity: 5",
        "output": "def calculate_cost(item_cost, quantity):\n return item_cost * quantity\n\ncost = calculate_cost(10, 5)\nprint('The total cost of your order is:', cost)  # The total cost of your order is: 50",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the total cost of an order based on item cost and quantity.\n\n### Input:\nItem cost: 10\nQuantity: 5\n\n### Output:\ndef calculate_cost(item_cost, quantity):\n return item_cost * quantity\n\ncost = calculate_cost(10, 5)\nprint('The total cost of your order is:', cost)  # The total cost of your order is: 50"
    },
    {
        "instruction": "Create a Python machine learning program to classify Iris plants based on their petal length and width.",
        "input": "petal_length petal_width species\n5.5          1.8          setosa\n7.5          2.2          versicolor\n4.9          1.5          setosa\n5.8          2.4          virginica",
        "output": "import numpy as np\nfrom sklearn import datasets\nfrom sklearn import svm\n\niris = datasets.load_iris()\nX = iris.data[:, :2]\ny = iris.target\n\nclf = svm.SVC(kernel='linear', C=1)\nclf.fit(X, y)\n\ntest_data = np.array([[5.5, 1.8], [7.5, 2.2], [4.9, 1.5], [5.8, 2.4]])\npredictions = clf.predict(test_data)\n\nprint(predictions)\n\n# Output: [0 1 0 2] which correspond to setosa, versicolor, setosa, and virginica respectively. \n# The order of the output matches the order of the test data provided.",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python machine learning program to classify Iris plants based on their petal length and width.\n\n### Input:\npetal_length petal_width species\n5.5          1.8          setosa\n7.5          2.2          versicolor\n4.9          1.5          setosa\n5.8          2.4          virginica\n\n### Output:\nimport numpy as np\nfrom sklearn import datasets\nfrom sklearn import svm\n\niris = datasets.load_iris()\nX = iris.data[:, :2]\ny = iris.target\n\nclf = svm.SVC(kernel='linear', C=1)\nclf.fit(X, y)\n\ntest_data = np.array([[5.5, 1.8], [7.5, 2.2], [4.9, 1.5], [5.8, 2.4]])\npredictions = clf.predict(test_data)\n\nprint(predictions)\n\n# Output: [0 1 0 2] which correspond to setosa, versicolor, setosa, and virginica respectively. \n# The order of the output matches the order of the test data provided."
    },
    {
        "instruction": "Create a Python script that calculates how many possible paths are there from one point to another in a given grid.",
        "input": "rows = 3, cols = 3",
        "output": "# calculate how many possible paths are there from one point to another in a given grid\n\ndef num_paths(rows, cols): \n    # base case \n    if (rows == 1 or cols == 1): \n        return 1\n  \n    # calculate the number of paths in the grid\n    return num_paths(rows-1, cols) + num_paths(rows, cols-1) \n  \n# call the function\nresult = num_paths(3, 3)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that calculates how many possible paths are there from one point to another in a given grid.\n\n### Input:\nrows = 3, cols = 3\n\n### Output:\n# calculate how many possible paths are there from one point to another in a given grid\n\ndef num_paths(rows, cols): \n    # base case \n    if (rows == 1 or cols == 1): \n        return 1\n  \n    # calculate the number of paths in the grid\n    return num_paths(rows-1, cols) + num_paths(rows, cols-1) \n  \n# call the function\nresult = num_paths(3, 3)\nprint(result)"
    },
    {
        "instruction": "Implement a multi-class classification model in Python using a scikit-learn Random Forest Classifier to classify the Iris dataset.",
        "input": "iris_dataset = datasets.load_iris()",
        "output": "from sklearn.ensemble import RandomForestClassifier\n\n# Load data\niris_dataset = datasets.load_iris()\nX = iris_dataset.data\ny = iris_dataset.target\n\n#Split data\nX_train, X_test, y_train, y_test = train_test_split(\n X, y, test_size=0.20, stratify=y, random_state=2\n)\n\n# Create a random forest classifier\nclf = RandomForestClassifier(n_estimators=1000, random_state=2)\n\n# Train the classifier\nclf.fit(X_train, y_train)\n\n# Make predictions\ny_pred = clf.predict(X_test)\n\n# Evaluate predictions\naccuracy = accuracy_score(y_test, y_pred)\nprint('Accuracy of the model is {}'.format(accuracy))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a multi-class classification model in Python using a scikit-learn Random Forest Classifier to classify the Iris dataset.\n\n### Input:\niris_dataset = datasets.load_iris()\n\n### Output:\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Load data\niris_dataset = datasets.load_iris()\nX = iris_dataset.data\ny = iris_dataset.target\n\n#Split data\nX_train, X_test, y_train, y_test = train_test_split(\n X, y, test_size=0.20, stratify=y, random_state=2\n)\n\n# Create a random forest classifier\nclf = RandomForestClassifier(n_estimators=1000, random_state=2)\n\n# Train the classifier\nclf.fit(X_train, y_train)\n\n# Make predictions\ny_pred = clf.predict(X_test)\n\n# Evaluate predictions\naccuracy = accuracy_score(y_test, y_pred)\nprint('Accuracy of the model is {}'.format(accuracy))"
    },
    {
        "instruction": "This code generates metadata files for TIVO episodes. To use it, import the necessary modules and create an instance of the TIVOMetadata class. Call the write_ep_file method on an episode object to generate and write the metadata file for that episode. The metadata file will be saved in a .meta subdirectory of the episode's location with the same name as the episode file, but with a .txt extension. The metadata file will contain information about the episode, such as its title, description, air date, and rating.",
        "input": "",
        "output": "# Author: Nic Wolfe <nic@wolfeden.ca>\n# Author: Gordon Turner <gordonturner@gordonturner.ca>\n# URL: http://code.google.com/p/sickbeard/\n#\n# This file is part of Sick Beard.\n#\n# Sick Beard is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Sick Beard is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Sick Beard.  If not, see <http://www.gnu.org/licenses/>.\n\nimport datetime\nimport os\n\nimport sickbeard\n\n#from sickbeard.common import *\nfrom sickbeard import logger, exceptions, helpers\nfrom sickbeard.metadata import generic\nfrom sickbeard import encodingKludge as ek\n\nfrom lib.tvdb_api import tvdb_api, tvdb_exceptions\n\nclass TIVOMetadata(generic.GenericMetadata):\n    \"\"\"\n    Metadata generation class for TIVO\n\n    The following file structure is used:\n\n    show_root/Season 01/show - 1x01 - episode.avi.txt       (* existing episode)\n    show_root/Season 01/.meta/show - 1x01 - episode.avi.txt (episode metadata)\n    \n    This class only generates episode specific metadata files, it does NOT generated a default.txt file.\n    \"\"\"\n    \n    def __init__(self,\n                 show_metadata=False,\n                 episode_metadata=False,\n                 poster=False,\n                 fanart=False,\n                 episode_thumbnails=False,\n                 season_thumbnails=False):\n\n        generic.GenericMetadata.__init__(self,\n                                         show_metadata,\n                                         episode_metadata,\n                                         poster,\n                                         fanart,\n                                         episode_thumbnails,\n                                         season_thumbnails)\n        \n        self._ep_nfo_extension = \"txt\"\n        \n        self.generate_ep_metadata = True\n        \n        self.name = 'TIVO'\n\n        self.eg_show_metadata = \"<i>not supported</i>\"\n        self.eg_episode_metadata = \"Season##\\\\.meta\\\\<i>filename</i>.txt\"\n        self.eg_fanart = \"<i>not supported</i>\"\n        self.eg_poster = \"<i>not supported</i>\"\n        self.eg_episode_thumbnails = \"<i>not supported</i>\"\n        self.eg_season_thumbnails = \"<i>not supported</i>\"\n    \n    # Override with empty methods for unsupported features.\n    def create_show_metadata(self, show_obj):\n        pass\n    \n    def create_fanart(self, show_obj):\n        pass\n    \n    def get_episode_thumb_path(self, ep_obj):\n        pass\n    \n    def get_season_thumb_path(self, show_obj, season):\n        pass\n\n    def retrieveShowMetadata(self, dir):\n        return (None, None)\n        \n    # Override and implement features for Tivo.\n    def get_episode_file_path(self, ep_obj):\n        \"\"\"\n        Returns a full show dir/.meta/episode.txt path for Tivo\n        episode metadata files.\n        \n        Note, that pyTivo requires the metadata filename to include the original extention.\n        \n        ie If the episode name is foo.avi, the metadata name is foo.avi.txt\n        \n        ep_obj: a TVEpisode object to get the path for\n        \"\"\"\n        if ek.ek(os.path.isfile, ep_obj.location):\n            metadata_file_name = ek.ek(os.path.basename, ep_obj.location) + \".\" + self._ep_nfo_extension\n            metadata_dir_name = ek.ek(os.path.join, ek.ek(os.path.dirname, ep_obj.location), '.meta')\n            metadata_file_path = ek.ek(os.path.join, metadata_dir_name, metadata_file_name)\n        else:\n            logger.log(u\"Episode location doesn't exist: \"+str(ep_obj.location), logger.DEBUG)\n            return ''\n        return metadata_file_path\n\n    def _ep_data(self, ep_obj):\n        \"\"\"\n        Creates a key value structure for a Tivo episode metadata file and\n        returns the resulting data object.\n        \n        ep_obj: a TVEpisode instance to create the metadata file for.\n        \n        Lookup the show in http://thetvdb.com/ using the python library:\n        \n        https://github.com/dbr/tvdb_api/\n        \n        The results are saved in the object myShow.\n            \n        The key values for the tivo metadata file are from:\n            \n        http://pytivo.sourceforge.net/wiki/index.php/Metadata\n        \"\"\"\n        \n        data = \"\";\n                \n        eps_to_write = [ep_obj] + ep_obj.relatedEps\n        \n        tvdb_lang = ep_obj.show.lang\n    \n        try:\n            # There's gotta be a better way of doing this but we don't wanna\n            # change the language value elsewhere\n            ltvdb_api_parms = sickbeard.TVDB_API_PARMS.copy()\n\n            if tvdb_lang and not tvdb_lang == 'en':\n                ltvdb_api_parms['language'] = tvdb_lang\n\n            t = tvdb_api.Tvdb(actors=True, **ltvdb_api_parms)\n            myShow = t[ep_obj.show.tvdbid]\n        except tvdb_exceptions.tvdb_shownotfound, e:\n            raise exceptions.ShowNotFoundException(str(e))\n        except tvdb_exceptions.tvdb_error, e:\n            logger.log(\"Unable to connect to TVDB while creating meta files - skipping - \"+str(e), logger.ERROR)\n            return False\n        \n        for curEpToWrite in eps_to_write:\n        \n            try:\n                myEp = myShow[curEpToWrite.season][curEpToWrite.episode]\n            except (tvdb_exceptions.tvdb_episodenotfound, tvdb_exceptions.tvdb_seasonnotfound):\n                logger.log(\"Unable to find episode \" + str(curEpToWrite.season) + \"x\" + str(curEpToWrite.episode) + \" on tvdb... has it been removed? Should I delete from db?\")\n                return None\n            \n            if myEp[\"firstaired\"] == None and ep_obj.season == 0:\n                myEp[\"firstaired\"] = str(datetime.date.fromordinal(1))\n            \n            if myEp[\"episodename\"] == None or myEp[\"firstaired\"] == None:\n                return None\n                \n            if myShow[\"seriesname\"] != None: \n            \n                # Title of the series (The Simpsons, Seinfeld, etc.) or title of the movie (The Mummy, Spiderman, etc).\n                data += (\"title : \" + myShow[\"seriesname\"] + \"\\n\")\n                \n                \n                # Name of series (The Simpsons, Seinfeld, etc.). This should be included if the show is episodic. \n                # For movies, you may repeat the name of the movie (The Mummy, Spiderman, etc), leave blank, or omit. \n                data += (\"seriesTitle : \" + myShow[\"seriesname\"] + \"\\n\")\n                \n            \n            # Title of the episode (Pilot, Homer's Night Out, Episode 02, etc.) Should be included for episodic shows. \n            # Leave blank or omit for movies.\n            data += (\"episodeTitle : \" + curEpToWrite.name + \"\\n\")\n            \n            \n            # This should be entered for episodic shows and omitted for movies. The standard tivo format is to enter \n            # the season number followed by the episode number for that season. For example, enter 201 for season 2 \n            # episode 01. \n\n            # This only shows up if you go into the Details from the Program screen. \n\n            # This seems to disappear once the video is transferred to TiVo.\n\n            # NOTE: May not be correct format, missing season, but based on description from wiki leaving as is.\n\n            data += (\"episodeNumber : \" + str(curEpToWrite.episode) + \"\\n\")\n            \n            \n            # Must be entered as true or false. If true, the year from originalAirDate will be shown in parentheses \n            # after the episode's title and before the description on the Program screen.\n \n            # FIXME: Hardcode isEpisode to true for now, not sure how to handle movies\n\n            data += (\"isEpisode : true\\n\")\n            \n            \n            # Write the synopsis of the video here. \n            \n            # Micrsoft Word's smartquotes can die in a fire.\n            sanitizedDescription = curEpToWrite.description\n            # Replace double curly quotes\n            sanitizedDescription = sanitizedDescription.replace(u\"\\u201c\", \"\\\"\").replace(u\"\\u201d\", \"\\\"\")\n            # Replace single curly quotes\n            sanitizedDescription = sanitizedDescription.replace(u\"\\u2018\", \"'\").replace(u\"\\u2019\", \"'\").replace(u\"\\u02BC\", \"'\")\n\n            data += (\"description : \" + sanitizedDescription + \"\\n\")\n            \n            \n            # Usually starts with \"SH\" and followed by 6-8 digits.\n            # Tivo uses zap2it for thier data, so the series id is the zap2it_id.\n            if myShow[\"zap2it_id\"] != None:\n                data += (\"seriesId : \" + myShow[\"zap2it_id\"] + \"\\n\")\n                \n\n            # This is the call sign of the channel the episode was recorded from.\n            if myShow[\"network\"] != None:\n                data += (\"callsign : \" + myShow[\"network\"] + \"\\n\")\n            \n                    \n            # This must be entered as yyyy-mm-ddThh:mm:ssZ (the t is capitalized and never changes, the Z is also \n            # capitalized and never changes). This is the original air date of the episode. \n            # NOTE: Hard coded the time to T00:00:00Z as we really don't know when during the day the first run happened.\n            if curEpToWrite.airdate != datetime.date.fromordinal(1):\n                data += (\"originalAirDate : \" + str(curEpToWrite.airdate) + \"T00:00:00Z\\n\")\n               \n                    \n            # This shows up at the beginning of the description on the Program screen and on the Details screen.\n            if myShow[\"actors\"]:\n                for actor in myShow[\"actors\"].split('|'):\n                    if actor:\n                        data += (\"vActor : \" + actor + \"\\n\")\n                    \n               \n            # This is shown on both the Program screen and the Details screen. It uses a single digit to determine the \n            # number of stars: 1 for 1 star, 7 for 4 stars\n            if myShow[\"rating\"] != None:\n                try:\n                    rating = float(myShow['rating'])\n                except ValueError:\n                    rating = 0.0\n                rating = rating / 10 * 4\n                data += (\"starRating : \" + str(rating) + \"\\n\")\n\n                    \n            # This is shown on both the Program screen and the Details screen.\n            # It uses the standard TV rating system of: TV-Y7, TV-Y, TV-G, TV-PG, TV-14, TV-MA and TV-NR.\n            if myShow[\"contentrating\"]:\n                data += (\"tvRating : \" + str(myShow[\"contentrating\"]) + \"\\n\")\n            \n                    \n            # This field can be repeated as many times as necessary or omitted completely.\n            if ep_obj.show.genre:\n                for genre in ep_obj.show.genre.split('|'):\n                    if genre:\n                        data += (\"vProgramGenre : \" + str(genre) + \"\\n\")\n\n                        \n            # NOTE: The following are metadata keywords are not used\n            # displayMajorNumber\n            # showingBits\n            # displayMinorNumber\n            # colorCode\n            # vSeriesGenre\n            # vGuestStar, vDirector, vExecProducer, vProducer, vWriter, vHost, vChoreographer\n            # partCount\n            # partIndex\n            \n        \n        return data\n\n    def write_ep_file(self, ep_obj):\n        \"\"\"\n        Generates and writes ep_obj's metadata under the given path with the\n        given filename root. Uses the episode's name with the extension in\n        _ep_nfo_extension.\n        \n        ep_obj: TVEpisode object for which to create the metadata\n        \n        file_name_path: The file name to use for this metadata. Note that the extension\n                will be automatically added based on _ep_nfo_extension. This should\n                include an absolute path.\n        \"\"\"       \n        data = self._ep_data(ep_obj)\n        \n        if not data:\n            return False\n        \n        nfo_file_path = self.get_episode_file_path(ep_obj)\n        nfo_file_dir = ek.ek(os.path.dirname, nfo_file_path)\n        \n        try:\n            if not ek.ek(os.path.isdir, nfo_file_dir):\n                logger.log(\"Metadata dir didn't exist, creating it at \"+nfo_file_dir, logger.DEBUG)\n                ek.ek(os.makedirs, nfo_file_dir)\n                helpers.chmodAsParent(nfo_file_dir)\n            \n            logger.log(u\"Writing episode nfo file to \"+nfo_file_path)\n            nfo_file = ek.ek(open, nfo_file_path, 'w')\n            \n            # Calling encode directly, b/c often descriptions have wonky characters.\n            nfo_file.write( data.encode( \"utf-8\" ) )\n            \n            nfo_file.close()\n            helpers.chmodAsParent(nfo_file_path)\n        except IOError, e:\n            logger.log(u\"Unable to write file to \"+nfo_file_path+\" - are you sure the folder is writable? \"+str(e).decode('utf-8'), logger.ERROR)\n            return False\n        \n        return True\n\n# present a standard \"interface\"\nmetadata_class = TIVOMetadata\n\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code generates metadata files for TIVO episodes. To use it, import the necessary modules and create an instance of the TIVOMetadata class. Call the write_ep_file method on an episode object to generate and write the metadata file for that episode. The metadata file will be saved in a .meta subdirectory of the episode's location with the same name as the episode file, but with a .txt extension. The metadata file will contain information about the episode, such as its title, description, air date, and rating.\n\n### Input:\n\n\n### Output:\n# Author: Nic Wolfe <nic@wolfeden.ca>\n# Author: Gordon Turner <gordonturner@gordonturner.ca>\n# URL: http://code.google.com/p/sickbeard/\n#\n# This file is part of Sick Beard.\n#\n# Sick Beard is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Sick Beard is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Sick Beard.  If not, see <http://www.gnu.org/licenses/>.\n\nimport datetime\nimport os\n\nimport sickbeard\n\n#from sickbeard.common import *\nfrom sickbeard import logger, exceptions, helpers\nfrom sickbeard.metadata import generic\nfrom sickbeard import encodingKludge as ek\n\nfrom lib.tvdb_api import tvdb_api, tvdb_exceptions\n\nclass TIVOMetadata(generic.GenericMetadata):\n    \"\"\"\n    Metadata generation class for TIVO\n\n    The following file structure is used:\n\n    show_root/Season 01/show - 1x01 - episode.avi.txt       (* existing episode)\n    show_root/Season 01/.meta/show - 1x01 - episode.avi.txt (episode metadata)\n    \n    This class only generates episode specific metadata files, it does NOT generated a default.txt file.\n    \"\"\"\n    \n    def __init__(self,\n                 show_metadata=False,\n                 episode_metadata=False,\n                 poster=False,\n                 fanart=False,\n                 episode_thumbnails=False,\n                 season_thumbnails=False):\n\n        generic.GenericMetadata.__init__(self,\n                                         show_metadata,\n                                         episode_metadata,\n                                         poster,\n                                         fanart,\n                                         episode_thumbnails,\n                                         season_thumbnails)\n        \n        self._ep_nfo_extension = \"txt\"\n        \n        self.generate_ep_metadata = True\n        \n        self.name = 'TIVO'\n\n        self.eg_show_metadata = \"<i>not supported</i>\"\n        self.eg_episode_metadata = \"Season##\\\\.meta\\\\<i>filename</i>.txt\"\n        self.eg_fanart = \"<i>not supported</i>\"\n        self.eg_poster = \"<i>not supported</i>\"\n        self.eg_episode_thumbnails = \"<i>not supported</i>\"\n        self.eg_season_thumbnails = \"<i>not supported</i>\"\n    \n    # Override with empty methods for unsupported features.\n    def create_show_metadata(self, show_obj):\n        pass\n    \n    def create_fanart(self, show_obj):\n        pass\n    \n    def get_episode_thumb_path(self, ep_obj):\n        pass\n    \n    def get_season_thumb_path(self, show_obj, season):\n        pass\n\n    def retrieveShowMetadata(self, dir):\n        return (None, None)\n        \n    # Override and implement features for Tivo.\n    def get_episode_file_path(self, ep_obj):\n        \"\"\"\n        Returns a full show dir/.meta/episode.txt path for Tivo\n        episode metadata files.\n        \n        Note, that pyTivo requires the metadata filename to include the original extention.\n        \n        ie If the episode name is foo.avi, the metadata name is foo.avi.txt\n        \n        ep_obj: a TVEpisode object to get the path for\n        \"\"\"\n        if ek.ek(os.path.isfile, ep_obj.location):\n            metadata_file_name = ek.ek(os.path.basename, ep_obj.location) + \".\" + self._ep_nfo_extension\n            metadata_dir_name = ek.ek(os.path.join, ek.ek(os.path.dirname, ep_obj.location), '.meta')\n            metadata_file_path = ek.ek(os.path.join, metadata_dir_name, metadata_file_name)\n        else:\n            logger.log(u\"Episode location doesn't exist: \"+str(ep_obj.location), logger.DEBUG)\n            return ''\n        return metadata_file_path\n\n    def _ep_data(self, ep_obj):\n        \"\"\"\n        Creates a key value structure for a Tivo episode metadata file and\n        returns the resulting data object.\n        \n        ep_obj: a TVEpisode instance to create the metadata file for.\n        \n        Lookup the show in http://thetvdb.com/ using the python library:\n        \n        https://github.com/dbr/tvdb_api/\n        \n        The results are saved in the object myShow.\n            \n        The key values for the tivo metadata file are from:\n            \n        http://pytivo.sourceforge.net/wiki/index.php/Metadata\n        \"\"\"\n        \n        data = \"\";\n                \n        eps_to_write = [ep_obj] + ep_obj.relatedEps\n        \n        tvdb_lang = ep_obj.show.lang\n    \n        try:\n            # There's gotta be a better way of doing this but we don't wanna\n            # change the language value elsewhere\n            ltvdb_api_parms = sickbeard.TVDB_API_PARMS.copy()\n\n            if tvdb_lang and not tvdb_lang == 'en':\n                ltvdb_api_parms['language'] = tvdb_lang\n\n            t = tvdb_api.Tvdb(actors=True, **ltvdb_api_parms)\n            myShow = t[ep_obj.show.tvdbid]\n        except tvdb_exceptions.tvdb_shownotfound, e:\n            raise exceptions.ShowNotFoundException(str(e))\n        except tvdb_exceptions.tvdb_error, e:\n            logger.log(\"Unable to connect to TVDB while creating meta files - skipping - \"+str(e), logger.ERROR)\n            return False\n        \n        for curEpToWrite in eps_to_write:\n        \n            try:\n                myEp = myShow[curEpToWrite.season][curEpToWrite.episode]\n            except (tvdb_exceptions.tvdb_episodenotfound, tvdb_exceptions.tvdb_seasonnotfound):\n                logger.log(\"Unable to find episode \" + str(curEpToWrite.season) + \"x\" + str(curEpToWrite.episode) + \" on tvdb... has it been removed? Should I delete from db?\")\n                return None\n            \n            if myEp[\"firstaired\"] == None and ep_obj.season == 0:\n                myEp[\"firstaired\"] = str(datetime.date.fromordinal(1))\n            \n            if myEp[\"episodename\"] == None or myEp[\"firstaired\"] == None:\n                return None\n                \n            if myShow[\"seriesname\"] != None: \n            \n                # Title of the series (The Simpsons, Seinfeld, etc.) or title of the movie (The Mummy, Spiderman, etc).\n                data += (\"title : \" + myShow[\"seriesname\"] + \"\\n\")\n                \n                \n                # Name of series (The Simpsons, Seinfeld, etc.). This should be included if the show is episodic. \n                # For movies, you may repeat the name of the movie (The Mummy, Spiderman, etc), leave blank, or omit. \n                data += (\"seriesTitle : \" + myShow[\"seriesname\"] + \"\\n\")\n                \n            \n            # Title of the episode (Pilot, Homer's Night Out, Episode 02, etc.) Should be included for episodic shows. \n            # Leave blank or omit for movies.\n            data += (\"episodeTitle : \" + curEpToWrite.name + \"\\n\")\n            \n            \n            # This should be entered for episodic shows and omitted for movies. The standard tivo format is to enter \n            # the season number followed by the episode number for that season. For example, enter 201 for season 2 \n            # episode 01. \n\n            # This only shows up if you go into the Details from the Program screen. \n\n            # This seems to disappear once the video is transferred to TiVo.\n\n            # NOTE: May not be correct format, missing season, but based on description from wiki leaving as is.\n\n            data += (\"episodeNumber : \" + str(curEpToWrite.episode) + \"\\n\")\n            \n            \n            # Must be entered as true or false. If true, the year from originalAirDate will be shown in parentheses \n            # after the episode's title and before the description on the Program screen.\n \n            # FIXME: Hardcode isEpisode to true for now, not sure how to handle movies\n\n            data += (\"isEpisode : true\\n\")\n            \n            \n            # Write the synopsis of the video here. \n            \n            # Micrsoft Word's smartquotes can die in a fire.\n            sanitizedDescription = curEpToWrite.description\n            # Replace double curly quotes\n            sanitizedDescription = sanitizedDescription.replace(u\"\\u201c\", \"\\\"\").replace(u\"\\u201d\", \"\\\"\")\n            # Replace single curly quotes\n            sanitizedDescription = sanitizedDescription.replace(u\"\\u2018\", \"'\").replace(u\"\\u2019\", \"'\").replace(u\"\\u02BC\", \"'\")\n\n            data += (\"description : \" + sanitizedDescription + \"\\n\")\n            \n            \n            # Usually starts with \"SH\" and followed by 6-8 digits.\n            # Tivo uses zap2it for thier data, so the series id is the zap2it_id.\n            if myShow[\"zap2it_id\"] != None:\n                data += (\"seriesId : \" + myShow[\"zap2it_id\"] + \"\\n\")\n                \n\n            # This is the call sign of the channel the episode was recorded from.\n            if myShow[\"network\"] != None:\n                data += (\"callsign : \" + myShow[\"network\"] + \"\\n\")\n            \n                    \n            # This must be entered as yyyy-mm-ddThh:mm:ssZ (the t is capitalized and never changes, the Z is also \n            # capitalized and never changes). This is the original air date of the episode. \n            # NOTE: Hard coded the time to T00:00:00Z as we really don't know when during the day the first run happened.\n            if curEpToWrite.airdate != datetime.date.fromordinal(1):\n                data += (\"originalAirDate : \" + str(curEpToWrite.airdate) + \"T00:00:00Z\\n\")\n               \n                    \n            # This shows up at the beginning of the description on the Program screen and on the Details screen.\n            if myShow[\"actors\"]:\n                for actor in myShow[\"actors\"].split('|'):\n                    if actor:\n                        data += (\"vActor : \" + actor + \"\\n\")\n                    \n               \n            # This is shown on both the Program screen and the Details screen. It uses a single digit to determine the \n            # number of stars: 1 for 1 star, 7 for 4 stars\n            if myShow[\"rating\"] != None:\n                try:\n                    rating = float(myShow['rating'])\n                except ValueError:\n                    rating = 0.0\n                rating = rating / 10 * 4\n                data += (\"starRating : \" + str(rating) + \"\\n\")\n\n                    \n            # This is shown on both the Program screen and the Details screen.\n            # It uses the standard TV rating system of: TV-Y7, TV-Y, TV-G, TV-PG, TV-14, TV-MA and TV-NR.\n            if myShow[\"contentrating\"]:\n                data += (\"tvRating : \" + str(myShow[\"contentrating\"]) + \"\\n\")\n            \n                    \n            # This field can be repeated as many times as necessary or omitted completely.\n            if ep_obj.show.genre:\n                for genre in ep_obj.show.genre.split('|'):\n                    if genre:\n                        data += (\"vProgramGenre : \" + str(genre) + \"\\n\")\n\n                        \n            # NOTE: The following are metadata keywords are not used\n            # displayMajorNumber\n            # showingBits\n            # displayMinorNumber\n            # colorCode\n            # vSeriesGenre\n            # vGuestStar, vDirector, vExecProducer, vProducer, vWriter, vHost, vChoreographer\n            # partCount\n            # partIndex\n            \n        \n        return data\n\n    def write_ep_file(self, ep_obj):\n        \"\"\"\n        Generates and writes ep_obj's metadata under the given path with the\n        given filename root. Uses the episode's name with the extension in\n        _ep_nfo_extension.\n        \n        ep_obj: TVEpisode object for which to create the metadata\n        \n        file_name_path: The file name to use for this metadata. Note that the extension\n                will be automatically added based on _ep_nfo_extension. This should\n                include an absolute path.\n        \"\"\"       \n        data = self._ep_data(ep_obj)\n        \n        if not data:\n            return False\n        \n        nfo_file_path = self.get_episode_file_path(ep_obj)\n        nfo_file_dir = ek.ek(os.path.dirname, nfo_file_path)\n        \n        try:\n            if not ek.ek(os.path.isdir, nfo_file_dir):\n                logger.log(\"Metadata dir didn't exist, creating it at \"+nfo_file_dir, logger.DEBUG)\n                ek.ek(os.makedirs, nfo_file_dir)\n                helpers.chmodAsParent(nfo_file_dir)\n            \n            logger.log(u\"Writing episode nfo file to \"+nfo_file_path)\n            nfo_file = ek.ek(open, nfo_file_path, 'w')\n            \n            # Calling encode directly, b/c often descriptions have wonky characters.\n            nfo_file.write( data.encode( \"utf-8\" ) )\n            \n            nfo_file.close()\n            helpers.chmodAsParent(nfo_file_path)\n        except IOError, e:\n            logger.log(u\"Unable to write file to \"+nfo_file_path+\" - are you sure the folder is writable? \"+str(e).decode('utf-8'), logger.ERROR)\n            return False\n        \n        return True\n\n# present a standard \"interface\"\nmetadata_class = TIVOMetadata\n\n"
    },
    {
        "instruction": "Design a Python function that takes as input a list of dictionaries and returns the most commonly used value for a given key from the list.",
        "input": "data = [\n  { 'key': 'foo', 'value': 'foo' },\n  { 'key': 'bar', 'value': 'bar' },\n  { 'key': 'foo', 'value': 'baz' }\n]",
        "output": "def most_common_value(data, key):\n counts = {}\n \n for d in data:\n value = d[key]\n if value in counts:\n counts[value] += 1\n else:\n counts[value] = 1\n \n max_value = None\n max_count = 0\n \n # Find the most common value\n for k, v in counts.items():\n if v > max_count:\n max_value = k\n max_count = v\n \n return max_value",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python function that takes as input a list of dictionaries and returns the most commonly used value for a given key from the list.\n\n### Input:\ndata = [\n  { 'key': 'foo', 'value': 'foo' },\n  { 'key': 'bar', 'value': 'bar' },\n  { 'key': 'foo', 'value': 'baz' }\n]\n\n### Output:\ndef most_common_value(data, key):\n counts = {}\n \n for d in data:\n value = d[key]\n if value in counts:\n counts[value] += 1\n else:\n counts[value] = 1\n \n max_value = None\n max_count = 0\n \n # Find the most common value\n for k, v in counts.items():\n if v > max_count:\n max_value = k\n max_count = v\n \n return max_value"
    },
    {
        "instruction": "Create a Neural Network class in Python that takes in two arguments (input size and number of outputs).",
        "input": "",
        "output": "class NeuralNetwork:\n    def __init__(self, input_size, num_outputs):\n        self.input_size = input_size\n        self.num_outputs = num_outputs\n\n        self.weights = np.random.rand(input_size, num_outputs)\n\n    def forward(self, x):\n        z = np.dot(x, self.weights)\n        return z",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Neural Network class in Python that takes in two arguments (input size and number of outputs).\n\n### Input:\n\n\n### Output:\nclass NeuralNetwork:\n    def __init__(self, input_size, num_outputs):\n        self.input_size = input_size\n        self.num_outputs = num_outputs\n\n        self.weights = np.random.rand(input_size, num_outputs)\n\n    def forward(self, x):\n        z = np.dot(x, self.weights)\n        return z"
    },
    {
        "instruction": "Design a program in Python to find the largest of three numbers.",
        "input": "2, 5, 7",
        "output": "def getMax(a,b,c):\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n\nprint(getMax(2, 5, 7))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python to find the largest of three numbers.\n\n### Input:\n2, 5, 7\n\n### Output:\ndef getMax(a,b,c):\n    if a > b and a > c:\n        return a\n    elif b > a and b > c:\n        return b\n    else:\n        return c\n\nprint(getMax(2, 5, 7))"
    },
    {
        "instruction": "Generate code for a Python for loop that prints \"Hello World\" n times.",
        "input": "Number = 5",
        "output": "for i in range(5):\n print(\"Hello World\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code for a Python for loop that prints \"Hello World\" n times.\n\n### Input:\nNumber = 5\n\n### Output:\nfor i in range(5):\n print(\"Hello World\")"
    },
    {
        "instruction": "Generate a python function to detect whether all elements in a given array are equal.",
        "input": "arr = [1, 1, 1, 1]",
        "output": "def all_equal(arr):\n    return len(set(arr)) == 1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python function to detect whether all elements in a given array are equal.\n\n### Input:\narr = [1, 1, 1, 1]\n\n### Output:\ndef all_equal(arr):\n    return len(set(arr)) == 1"
    },
    {
        "instruction": "Optimize an existing Python program using the scikit-learn library.",
        "input": "An existing Python program to classify spam emails.",
        "output": "# Load required modules\nimport pandas as pd\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer\n\n# Load spam emails\nspam_df = pd.read_csv(\"spam.csv\")\n\n# Split into independent and dependent features\nX = spam_df['Email']\ny = spam_df['Label']\n\n# Create a pipeline\nmodel = make_pipeline(CountVectorizer(),\n                      TfidfTransformer(),\n                      MultinomialNB())\n\n# Fit the pipeline\nmodel.fit(X, y)\n\n# Resize the dataset\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Fit the model\nmodel.fit(X_train, y_train)\n\n# Generate predictions\ny_pred = model.predict(X_test)\n\n# Generate accuracy score\nfrom sklearn.metrics import accuracy_score\nprint(accuracy_score(y_test, y_pred))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize an existing Python program using the scikit-learn library.\n\n### Input:\nAn existing Python program to classify spam emails.\n\n### Output:\n# Load required modules\nimport pandas as pd\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer\n\n# Load spam emails\nspam_df = pd.read_csv(\"spam.csv\")\n\n# Split into independent and dependent features\nX = spam_df['Email']\ny = spam_df['Label']\n\n# Create a pipeline\nmodel = make_pipeline(CountVectorizer(),\n                      TfidfTransformer(),\n                      MultinomialNB())\n\n# Fit the pipeline\nmodel.fit(X, y)\n\n# Resize the dataset\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Fit the model\nmodel.fit(X_train, y_train)\n\n# Generate predictions\ny_pred = model.predict(X_test)\n\n# Generate accuracy score\nfrom sklearn.metrics import accuracy_score\nprint(accuracy_score(y_test, y_pred))"
    },
    {
        "instruction": "Write a Python program to sort a dictionary by its values and return the sorted list?",
        "input": "{\"Red\":120,\"Blue\":90,\"Yellow\":50,\"Purple\":75}",
        "output": "unsortedDict = {\"Red\":120,\"Blue\":90,\"Yellow\":50,\"Purple\":75}\n\nsortedList = sorted(unsortedDict.items(), key=lambda x: x[1])\nprint(sortedList)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to sort a dictionary by its values and return the sorted list?\n\n### Input:\n{\"Red\":120,\"Blue\":90,\"Yellow\":50,\"Purple\":75}\n\n### Output:\nunsortedDict = {\"Red\":120,\"Blue\":90,\"Yellow\":50,\"Purple\":75}\n\nsortedList = sorted(unsortedDict.items(), key=lambda x: x[1])\nprint(sortedList)"
    },
    {
        "instruction": "Design a neural network in Python to predict the output given the input.",
        "input": "X1: [1, 0]\nX2: [0, 1]\nY: [1, 1]",
        "output": "import numpy as np\nimport tensorflow as tf\n\n# defining the neural network\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(2, activation='sigmoid', input_shape=(2, )))\nmodel.add(tf.keras.layers.Dense(2))\n\n# compiling the network\nmodel.compile( optimizer='sgd',\n              loss='mean_squared_error',\n              metrics=['accuracy']\n            )\n\n# training the network\nX = np.array([[1,0],[0,1]])\nY = np.array([[1,1]])\nmodel.fit(X, Y, epochs=1000)\n\n# predicting the output\nprint(model.predict(X))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a neural network in Python to predict the output given the input.\n\n### Input:\nX1: [1, 0]\nX2: [0, 1]\nY: [1, 1]\n\n### Output:\nimport numpy as np\nimport tensorflow as tf\n\n# defining the neural network\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(2, activation='sigmoid', input_shape=(2, )))\nmodel.add(tf.keras.layers.Dense(2))\n\n# compiling the network\nmodel.compile( optimizer='sgd',\n              loss='mean_squared_error',\n              metrics=['accuracy']\n            )\n\n# training the network\nX = np.array([[1,0],[0,1]])\nY = np.array([[1,1]])\nmodel.fit(X, Y, epochs=1000)\n\n# predicting the output\nprint(model.predict(X))"
    },
    {
        "instruction": "Create a Python function to compute the root mean square (RMS) of an array of values.",
        "input": "values = [3,4,5,6,7]",
        "output": "import math\n\ndef computeRMS(values):\n    # calculate the mean\n    mean = sum(values)/len(values)\n    # calculate the sum of the squares\n    squares_sum = sum([val**2 for val in values])\n    # calculate the RMS\n    rms = math.sqrt(squares_sum/len(values))\n    \n    return rms\n    \nvalues = [3,4,5,6,7]\nrms = computeRMS(values)\nprint(\"Root mean square is: \", rms)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to compute the root mean square (RMS) of an array of values.\n\n### Input:\nvalues = [3,4,5,6,7]\n\n### Output:\nimport math\n\ndef computeRMS(values):\n    # calculate the mean\n    mean = sum(values)/len(values)\n    # calculate the sum of the squares\n    squares_sum = sum([val**2 for val in values])\n    # calculate the RMS\n    rms = math.sqrt(squares_sum/len(values))\n    \n    return rms\n    \nvalues = [3,4,5,6,7]\nrms = computeRMS(values)\nprint(\"Root mean square is: \", rms)"
    },
    {
        "instruction": "Using the provided Python code, optimize the code to be as efficient as possible.",
        "input": "x = 0\ny = 0\n\ndef func():\nglobal x\nglobal y\nx += 1\ny += 2\n\nfor i in range(10000):\nfunc()",
        "output": "x = 0\ny = 0\n\ndef func():\nglobal x, y\nx, y = x+1, y+2\n\nfunc()\nx += 9999\ny += 19998",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the provided Python code, optimize the code to be as efficient as possible.\n\n### Input:\nx = 0\ny = 0\n\ndef func():\nglobal x\nglobal y\nx += 1\ny += 2\n\nfor i in range(10000):\nfunc()\n\n### Output:\nx = 0\ny = 0\n\ndef func():\nglobal x, y\nx, y = x+1, y+2\n\nfunc()\nx += 9999\ny += 19998"
    },
    {
        "instruction": "Construct a regex pattern in Python to detect URLs.",
        "input": "",
        "output": "import re\n\nurl_pattern = re.compile(\n    r'^(?:http|ftp)s?://' # http:// or https://\n    r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n    r'localhost|' #localhost...\n    r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n    r'(?::\\d+)?' # optional port\n    r'(?:/?|[/?]\\S+)$', re.IGNORECASE)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a regex pattern in Python to detect URLs.\n\n### Input:\n\n\n### Output:\nimport re\n\nurl_pattern = re.compile(\n    r'^(?:http|ftp)s?://' # http:// or https://\n    r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}\\.?)|' #domain...\n    r'localhost|' #localhost...\n    r'\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})' # ...or ip\n    r'(?::\\d+)?' # optional port\n    r'(?:/?|[/?]\\S+)$', re.IGNORECASE)"
    },
    {
        "instruction": "Convert the following Python script to Java.",
        "input": "my_list = [1, 2, 3, 4, 5]\nfor i in range(len(my_list)):\n    print(my_list[i], end = ' ')",
        "output": "List<Integer> myList = Arrays.asList(1, 2, 3, 4, 5);\nfor(int i = 0; i < myList.size(); i++){\n    System.out.print(myList.get(i) + \" \");\n}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following Python script to Java.\n\n### Input:\nmy_list = [1, 2, 3, 4, 5]\nfor i in range(len(my_list)):\n    print(my_list[i], end = ' ')\n\n### Output:\nList<Integer> myList = Arrays.asList(1, 2, 3, 4, 5);\nfor(int i = 0; i < myList.size(); i++){\n    System.out.print(myList.get(i) + \" \");\n}"
    },
    {
        "instruction": "Write an algorithm in Python to count the number of occurrences of a given element in a given array.",
        "input": "",
        "output": "def count_occurrences(array, element): \n    count = 0\n    for i in range(len(array)): \n        if array[i] == element: \n            count += 1\n    return count",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python to count the number of occurrences of a given element in a given array.\n\n### Input:\n\n\n### Output:\ndef count_occurrences(array, element): \n    count = 0\n    for i in range(len(array)): \n        if array[i] == element: \n            count += 1\n    return count"
    },
    {
        "instruction": "Build a Python web scraper that extracts data from a web page and exports it in CSV format.",
        "input": "URL of the website",
        "output": "import requests\nfrom bs4 import BeautifulSoup\nimport csv\n\nurl = \"https://www.example.com\"\n\n# Get the webpage\nr = requests.get(url)\n\n# Parse the content of the request with BeautifulSoup\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Find the relevant table\ntable = soup.find('table')\n\n# Get the data from the table\ndata = []\nfor row in table.find_all('tr'):\n    data_row = [cell.text.strip() for cell in row.find_all('td')]\n    data.append(data_row)\n\n# Write the data to a CSV file\nwith open('example.csv', 'w', newline='') as f:\n    writer = csv.writer(f)\n    writer.writerows(data)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python web scraper that extracts data from a web page and exports it in CSV format.\n\n### Input:\nURL of the website\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\nimport csv\n\nurl = \"https://www.example.com\"\n\n# Get the webpage\nr = requests.get(url)\n\n# Parse the content of the request with BeautifulSoup\nsoup = BeautifulSoup(r.text, 'html.parser')\n\n# Find the relevant table\ntable = soup.find('table')\n\n# Get the data from the table\ndata = []\nfor row in table.find_all('tr'):\n    data_row = [cell.text.strip() for cell in row.find_all('td')]\n    data.append(data_row)\n\n# Write the data to a CSV file\nwith open('example.csv', 'w', newline='') as f:\n    writer = csv.writer(f)\n    writer.writerows(data)"
    },
    {
        "instruction": "Create a Cloud Function using Python for managing a list of strings.",
        "input": "Not applicable",
        "output": "from google.cloud import storage\n\ndef manage_list_strings(data, context):\n    strings_list = data['strings_list']\n    action = data['action']\n    \n    if action == 'add':\n        strings_list.append(data['string'])\n    elif action == 'delete':\n        strings_list.remove(data['string'])\n    elif action == 'update':\n        strings_list = strings_list.map(lambda x: data['string'] if x == data['old_string'] else x)\n    \n    bucket = storage.Client().get_bucket('my-bucket')\n    blob = bucket.blob('my-strings-list.json')\n    blob.upload_from_string(str(strings_list))\n    \n    return strings_list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Cloud Function using Python for managing a list of strings.\n\n### Input:\nNot applicable\n\n### Output:\nfrom google.cloud import storage\n\ndef manage_list_strings(data, context):\n    strings_list = data['strings_list']\n    action = data['action']\n    \n    if action == 'add':\n        strings_list.append(data['string'])\n    elif action == 'delete':\n        strings_list.remove(data['string'])\n    elif action == 'update':\n        strings_list = strings_list.map(lambda x: data['string'] if x == data['old_string'] else x)\n    \n    bucket = storage.Client().get_bucket('my-bucket')\n    blob = bucket.blob('my-strings-list.json')\n    blob.upload_from_string(str(strings_list))\n    \n    return strings_list"
    },
    {
        "instruction": "Design a game in Python in which two players take turns guessing a randomly generated number between 0 and 100. The player who guesses the number first wins.",
        "input": "Not applicable",
        "output": "import random\n\nprint('Player 1 Taking Turn')\n\nrandom_number = random.randint(0, 100)\n\np1_name = input('Enter your name: ')  \np2_name = input('Enter your name: ')\n\ngame_over = False\n\nwhile not game_over:\n\n  # Player 1 guessing\n  p1_guess = int(input('Guess a number between 0 and 100: '))\n  if p1_guess == random_number:\n    print('{} wins!'.format(p1_name))\n    game_over = True\n  elif p1_guess > random_number:\n    print('{} your guess is too high'.format(p1_name))\n\n  # Player 2 guessing\n  print('\\n' + p2_name + ' Taking Turn')\n  p2_guess = int(input('Guess a number between 0 and 100: '))\n  if p2_guess == random_number:\n    print('{} wins!'.format(p2_name))\n    game_over = True\n  elif p2_guess > random_number:\n    print('{} your guess is too high'.format(p2_name))\n    \nprint('Game over!')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a game in Python in which two players take turns guessing a randomly generated number between 0 and 100. The player who guesses the number first wins.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\nprint('Player 1 Taking Turn')\n\nrandom_number = random.randint(0, 100)\n\np1_name = input('Enter your name: ')  \np2_name = input('Enter your name: ')\n\ngame_over = False\n\nwhile not game_over:\n\n  # Player 1 guessing\n  p1_guess = int(input('Guess a number between 0 and 100: '))\n  if p1_guess == random_number:\n    print('{} wins!'.format(p1_name))\n    game_over = True\n  elif p1_guess > random_number:\n    print('{} your guess is too high'.format(p1_name))\n\n  # Player 2 guessing\n  print('\\n' + p2_name + ' Taking Turn')\n  p2_guess = int(input('Guess a number between 0 and 100: '))\n  if p2_guess == random_number:\n    print('{} wins!'.format(p2_name))\n    game_over = True\n  elif p2_guess > random_number:\n    print('{} your guess is too high'.format(p2_name))\n    \nprint('Game over!')"
    },
    {
        "instruction": "Develop a python code to find the maximum rectangle area in a given matrix of 1s and 0s.",
        "input": "matrix = [\n    [1, 1, 0, 0],\n    [1, 1, 1, 1],\n    [1, 1, 1, 1],\n    [0, 1, 1, 0]\n]",
        "output": "def max_rect_area(matrix):\n\n    max_area = 0\n\n    for row in range(len(matrix)):\n        for col in range(len(matrix[0])):\n\n            if matrix[row][col] == 0: # if current element is 0, skip\n                continue\n\n            # calculate the maximum possible rectangle area\n            # considering (row, col) as one of the vertices \n            min_column = len(matrix[0])\n            for r in range(row, len(matrix)):\n                min_column = min(min_column, matrix[r][col])\n\n            # calculate area of the rectangle \n            # composed of 1s belonging with these limits \n            area = min_column*(r - row + 1)\n\n            # update maximum area so far \n            max_area = max(max_area, area)\n\n    return max_area\n\n# Main Program \nmatrix = [\n    [1, 1, 0, 0],\n    [1, 1, 1, 1],\n    [1, 1, 1, 1],\n    [0, 1, 1, 0]\n]\nresult = max_rect_area(matrix) \n\nprint(\"The maximum rectangle area is {:d}\".format(result))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python code to find the maximum rectangle area in a given matrix of 1s and 0s.\n\n### Input:\nmatrix = [\n    [1, 1, 0, 0],\n    [1, 1, 1, 1],\n    [1, 1, 1, 1],\n    [0, 1, 1, 0]\n]\n\n### Output:\ndef max_rect_area(matrix):\n\n    max_area = 0\n\n    for row in range(len(matrix)):\n        for col in range(len(matrix[0])):\n\n            if matrix[row][col] == 0: # if current element is 0, skip\n                continue\n\n            # calculate the maximum possible rectangle area\n            # considering (row, col) as one of the vertices \n            min_column = len(matrix[0])\n            for r in range(row, len(matrix)):\n                min_column = min(min_column, matrix[r][col])\n\n            # calculate area of the rectangle \n            # composed of 1s belonging with these limits \n            area = min_column*(r - row + 1)\n\n            # update maximum area so far \n            max_area = max(max_area, area)\n\n    return max_area\n\n# Main Program \nmatrix = [\n    [1, 1, 0, 0],\n    [1, 1, 1, 1],\n    [1, 1, 1, 1],\n    [0, 1, 1, 0]\n]\nresult = max_rect_area(matrix) \n\nprint(\"The maximum rectangle area is {:d}\".format(result))"
    },
    {
        "instruction": "Write a Python program that merges two sorted lists into one.",
        "input": "list_1 = [1, 3, 5, 7, 9]\nlist_2 = [2, 4, 6, 8, 10]",
        "output": "list_1 = [1, 3, 5, 7, 9]\nlist_2 = [2, 4, 6, 8, 10]\n\ndef merge_lists(list_1, list_2):\n '''Merges two sorted lists into one'''\n\n merged_list = []\n\n while list_1 and list_2:\n if list_1[0] < list_2[0]:\n merged_list.append(list_1.pop(0))\n else:\n merged_list.append(list_2.pop(0))\n\n merged_list.extend(list_1 + list_2)\n\n return merged_list\n\nmerged_list = merge_lists(list_1, list_2)\n\nprint(merged_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that merges two sorted lists into one.\n\n### Input:\nlist_1 = [1, 3, 5, 7, 9]\nlist_2 = [2, 4, 6, 8, 10]\n\n### Output:\nlist_1 = [1, 3, 5, 7, 9]\nlist_2 = [2, 4, 6, 8, 10]\n\ndef merge_lists(list_1, list_2):\n '''Merges two sorted lists into one'''\n\n merged_list = []\n\n while list_1 and list_2:\n if list_1[0] < list_2[0]:\n merged_list.append(list_1.pop(0))\n else:\n merged_list.append(list_2.pop(0))\n\n merged_list.extend(list_1 + list_2)\n\n return merged_list\n\nmerged_list = merge_lists(list_1, list_2)\n\nprint(merged_list)"
    },
    {
        "instruction": "Construct a Python program to round the number up to the nearest integer",
        "input": "num = 5.6",
        "output": "def round_up(num): \n    if num == int(num): \n        return int(num) \n    return int(num + 1) \n\nnum = 5.6\nprint(round_up(num))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python program to round the number up to the nearest integer\n\n### Input:\nnum = 5.6\n\n### Output:\ndef round_up(num): \n    if num == int(num): \n        return int(num) \n    return int(num + 1) \n\nnum = 5.6\nprint(round_up(num))"
    },
    {
        "instruction": "Generate a program to generate a deck of cards using Object-oriented programming in Python.",
        "input": "",
        "output": "class Deck:\n    # list of cards in the deck\n    cards = []\n  \n    # constructor\n    def __init__(self):\n        suits = [\"Hearts\", \"Diamonds\",\"Spades\",\"Clubs\" ]\n        ranks = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen', 'King', 'Ace']\n        self.cards = [ Card(suit,rank) for suit in suits for rank in ranks]\n\n        # shuffle the cards\n        random.shuffle(self.cards)\n  \n    def deal_one_card(self):\n        # return the next card from the shuffled deck\n        return self.cards.pop()\n  \nclass Card:\n    suit = \"\"\n    rank = \"\"\n\n    # constructor\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank\n\n    def __str__(self):\n        return \"{} of {}\".format(self.rank, self.suit)\n\ndeck = Deck()\ncard = deck.deal_one_card()\nprint(card) \n# --> 8 of Hearts",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program to generate a deck of cards using Object-oriented programming in Python.\n\n### Input:\n\n\n### Output:\nclass Deck:\n    # list of cards in the deck\n    cards = []\n  \n    # constructor\n    def __init__(self):\n        suits = [\"Hearts\", \"Diamonds\",\"Spades\",\"Clubs\" ]\n        ranks = [2, 3, 4, 5, 6, 7, 8, 9, 10, 'Jack', 'Queen', 'King', 'Ace']\n        self.cards = [ Card(suit,rank) for suit in suits for rank in ranks]\n\n        # shuffle the cards\n        random.shuffle(self.cards)\n  \n    def deal_one_card(self):\n        # return the next card from the shuffled deck\n        return self.cards.pop()\n  \nclass Card:\n    suit = \"\"\n    rank = \"\"\n\n    # constructor\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank\n\n    def __str__(self):\n        return \"{} of {}\".format(self.rank, self.suit)\n\ndeck = Deck()\ncard = deck.deal_one_card()\nprint(card) \n# --> 8 of Hearts"
    },
    {
        "instruction": "Create a new feature for a Python Django application that allows users to search and filter data based on their search query.",
        "input": "Not applicable",
        "output": "# views.py\ndef search(request):\n    query = request.GET.get('q')\n    if query:\n        results = MyModel.objects.filter(\n            Q(title__icontains=query) # Search title field\n            | Q(body__icontains=query) # Search body field\n        ).distinct()\n    else:\n        results = []\n    return render(request, 'results.html', {\n        'results': results,\n        'query': query\n    })\n\n# models.py\nclass MyModel(models.Model):\n    title = models.CharField(max_length=100)\n    body = models.TextField()\n    \n# results.html\n<h1>Results</h1>\n{% if results %}\n    {% for result in results %}\n        {{ result.title }}\n    {% endfor %}\n{% else %}\n    <p>No results</p>\n{% endif %}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a new feature for a Python Django application that allows users to search and filter data based on their search query.\n\n### Input:\nNot applicable\n\n### Output:\n# views.py\ndef search(request):\n    query = request.GET.get('q')\n    if query:\n        results = MyModel.objects.filter(\n            Q(title__icontains=query) # Search title field\n            | Q(body__icontains=query) # Search body field\n        ).distinct()\n    else:\n        results = []\n    return render(request, 'results.html', {\n        'results': results,\n        'query': query\n    })\n\n# models.py\nclass MyModel(models.Model):\n    title = models.CharField(max_length=100)\n    body = models.TextField()\n    \n# results.html\n<h1>Results</h1>\n{% if results %}\n    {% for result in results %}\n        {{ result.title }}\n    {% endfor %}\n{% else %}\n    <p>No results</p>\n{% endif %}"
    },
    {
        "instruction": "Create a code generator in Python that generates Java code for implementing the Bubble Sort algorithm.",
        "input": "Not applicable",
        "output": "def bubble_sort(arr): \n    # Iterate over the array \n    for i in range(len(arr)): \n          \n        # Last i elements are already in place \n        for j in range(0, len(arr)-i-1): \n  \n            # Swap if the element found is greater than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nbubble_sort(arr) \n  \nprint (\"Sorted array :\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code generator in Python that generates Java code for implementing the Bubble Sort algorithm.\n\n### Input:\nNot applicable\n\n### Output:\ndef bubble_sort(arr): \n    # Iterate over the array \n    for i in range(len(arr)): \n          \n        # Last i elements are already in place \n        for j in range(0, len(arr)-i-1): \n  \n            # Swap if the element found is greater than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nbubble_sort(arr) \n  \nprint (\"Sorted array :\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])"
    },
    {
        "instruction": "Create python code to implement a decision tree classifier.",
        "input": "Not applicable",
        "output": "import numpy as np\nfrom sklearn import datasets\n\nclass DecisionTreeClassifier():\n\n def __init__(self):\n self.tree = None\n\n def fit(self, X, y):\n self.tree = self._build_tree(X, y)\n\n def predict(self, X):\n return [self._predict(x, self.tree) for x in X]\n\n def _build_tree(self, X, y):\n# build decision tree\ndef _predict(self, x, node):\n# predict class\nreturn node.label",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate python code to implement a decision tree classifier.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nfrom sklearn import datasets\n\nclass DecisionTreeClassifier():\n\n def __init__(self):\n self.tree = None\n\n def fit(self, X, y):\n self.tree = self._build_tree(X, y)\n\n def predict(self, X):\n return [self._predict(x, self.tree) for x in X]\n\n def _build_tree(self, X, y):\n# build decision tree\ndef _predict(self, x, node):\n# predict class\nreturn node.label"
    },
    {
        "instruction": "Create a user input validation in Python to restrict user input to a number between 0 and 10.",
        "input": "",
        "output": "def validate_input(user_input):\n  if user_input < 0 or user_input > 10:\n    raise ValueError('Input should be between 0 and 10')\n  else:\n    return user_input\n\n# take user input\nuser_input = int(input('Enter a number between 0 and 10: '))\n\n# validate and print the result\nvalidated_input = validate_input(user_input)\nprint('Validated input: ', validated_input)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a user input validation in Python to restrict user input to a number between 0 and 10.\n\n### Input:\n\n\n### Output:\ndef validate_input(user_input):\n  if user_input < 0 or user_input > 10:\n    raise ValueError('Input should be between 0 and 10')\n  else:\n    return user_input\n\n# take user input\nuser_input = int(input('Enter a number between 0 and 10: '))\n\n# validate and print the result\nvalidated_input = validate_input(user_input)\nprint('Validated input: ', validated_input)"
    },
    {
        "instruction": "Formulate a linear programming problem in Python to minimize a given cost function.",
        "input": "",
        "output": "import pulp \n  \n# Declare the problem \nprob = pulp.LpProblem(\"Cost Minimization Problem\", pulp.LpMinimize)  \n  \n# Define the decision variables  \nx = pulp.LpVariable(\"x\", lowBound = 0) \ny = pulp.LpVariable(\"y\", lowBound = 0) \n  \n# Define the objective function  \nprob += 4 * x + 5 * y  \n  \n# Define the constraints  \nprob += x + y <= 10\nprob += 2 * x + 3 * y <= 18\n  \n# Solve the problem \nprob.solve() \n  \n# Print the results \nprint(\"The value of x is {} and the value of y is {}\".format(x.varValue, y.varValue)) \nprint(\"The total cost is {}\".format(pulp.value(prob.objective)))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFormulate a linear programming problem in Python to minimize a given cost function.\n\n### Input:\n\n\n### Output:\nimport pulp \n  \n# Declare the problem \nprob = pulp.LpProblem(\"Cost Minimization Problem\", pulp.LpMinimize)  \n  \n# Define the decision variables  \nx = pulp.LpVariable(\"x\", lowBound = 0) \ny = pulp.LpVariable(\"y\", lowBound = 0) \n  \n# Define the objective function  \nprob += 4 * x + 5 * y  \n  \n# Define the constraints  \nprob += x + y <= 10\nprob += 2 * x + 3 * y <= 18\n  \n# Solve the problem \nprob.solve() \n  \n# Print the results \nprint(\"The value of x is {} and the value of y is {}\".format(x.varValue, y.varValue)) \nprint(\"The total cost is {}\".format(pulp.value(prob.objective)))"
    },
    {
        "instruction": "Create an algorithm in Python to complete Knapsack problem of size 5 using dynamic programming.",
        "input": "Items with value and weight\n((2,3), (3,4), (4,5), (5,6), (6,7))\nCapacity 5",
        "output": "def knapsack(capacity, items):\n# Create array of rows\ntable = [[0 for _ in range(capacity + 1)] for _ in range(len(items) + 1)]\n\n# Fill the table\nfor i in range(1, len(table)):\n    for j in range(1, len(table[0])):\n        value, weight = items[i - 1]\n        if weight > j:\n            table[i][j] = table[i - 1][j]\n        else:\n            table[i][j] = max(table[i - 1][j], table[i - 1][j - weight] + value)\n\n# Traceback\ncurr_row = len(table) - 1 \ncurr_col = capacity\nknapsack = []\nwhile curr_row > 0:\n    if table[curr_row][curr_col] != table[curr_row - 1][curr_col]:\n        knapsack.append(items[curr_row - 1])\n        curr_col -= items[curr_row - 1][1]\n    curr_row -= 1\n\nreturn [table[-1][-1], knapsack]\n\n# Usage example\nitems = [(2,3), (3,4), (4,5), (5,6), (6,7)]\ncapacity = 5\nprint(knapsack(capacity, items))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to complete Knapsack problem of size 5 using dynamic programming.\n\n### Input:\nItems with value and weight\n((2,3), (3,4), (4,5), (5,6), (6,7))\nCapacity 5\n\n### Output:\ndef knapsack(capacity, items):\n# Create array of rows\ntable = [[0 for _ in range(capacity + 1)] for _ in range(len(items) + 1)]\n\n# Fill the table\nfor i in range(1, len(table)):\n    for j in range(1, len(table[0])):\n        value, weight = items[i - 1]\n        if weight > j:\n            table[i][j] = table[i - 1][j]\n        else:\n            table[i][j] = max(table[i - 1][j], table[i - 1][j - weight] + value)\n\n# Traceback\ncurr_row = len(table) - 1 \ncurr_col = capacity\nknapsack = []\nwhile curr_row > 0:\n    if table[curr_row][curr_col] != table[curr_row - 1][curr_col]:\n        knapsack.append(items[curr_row - 1])\n        curr_col -= items[curr_row - 1][1]\n    curr_row -= 1\n\nreturn [table[-1][-1], knapsack]\n\n# Usage example\nitems = [(2,3), (3,4), (4,5), (5,6), (6,7)]\ncapacity = 5\nprint(knapsack(capacity, items))"
    },
    {
        "instruction": "Generate a random password of 10 characters using Python.",
        "input": "",
        "output": "import string \nimport random \n  \ndef random_password(): \n    letters_and_digits = string.ascii_letters + string.digits \n    password = ''.join(random.choice(letters_and_digits) for i in range(10))\n  \n    return password \n  \npassword = random_password() \nprint(\"Random Password: \",password)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random password of 10 characters using Python.\n\n### Input:\n\n\n### Output:\nimport string \nimport random \n  \ndef random_password(): \n    letters_and_digits = string.ascii_letters + string.digits \n    password = ''.join(random.choice(letters_and_digits) for i in range(10))\n  \n    return password \n  \npassword = random_password() \nprint(\"Random Password: \",password)"
    },
    {
        "instruction": "Create a web application using the Django framework with an endpoint /blog/ that accepts HTTP GET requests and returns the title and content of all blog posts with the word 'Python' in the title.",
        "input": "Example blog posts:\n\nBlogPost 1: \ntitle: Python is Awesome \ncontent: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n\nBlogPost 2:\ntitle: JavaScript is Cool\ncontent: Vestibulum mollis eros enim, imperdiet lacinia est congue vel.\n\nBlogPost 3:\ntitle: Learn Python\ncontent: Pellentesque sed justo sed sapien fringilla dictum.",
        "output": "from django.shortcuts import render\nfrom django.http import JsonResponse\n\nfrom .models import BlogPost\n\ndef blog(request):\n posts = BlogPost.objects.filter(title__icontains='python')\n result = [{'title': post.title, 'content': post.content} for post in posts]\n return JsonResponse(result, safe=False)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application using the Django framework with an endpoint /blog/ that accepts HTTP GET requests and returns the title and content of all blog posts with the word 'Python' in the title.\n\n### Input:\nExample blog posts:\n\nBlogPost 1: \ntitle: Python is Awesome \ncontent: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n\nBlogPost 2:\ntitle: JavaScript is Cool\ncontent: Vestibulum mollis eros enim, imperdiet lacinia est congue vel.\n\nBlogPost 3:\ntitle: Learn Python\ncontent: Pellentesque sed justo sed sapien fringilla dictum.\n\n### Output:\nfrom django.shortcuts import render\nfrom django.http import JsonResponse\n\nfrom .models import BlogPost\n\ndef blog(request):\n posts = BlogPost.objects.filter(title__icontains='python')\n result = [{'title': post.title, 'content': post.content} for post in posts]\n return JsonResponse(result, safe=False)"
    },
    {
        "instruction": "Create a slugify function in Python that converts a sentence into a valid URL slug.",
        "input": "This Is a Test",
        "output": "def slugify(string):\n    slug = string.lower().strip().replace(' ', '-')\n    return slug\n\nslug = slugify(\"This Is a Test\")\nprint(slug)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a slugify function in Python that converts a sentence into a valid URL slug.\n\n### Input:\nThis Is a Test\n\n### Output:\ndef slugify(string):\n    slug = string.lower().strip().replace(' ', '-')\n    return slug\n\nslug = slugify(\"This Is a Test\")\nprint(slug)"
    },
    {
        "instruction": "Write a Python script to convert a string containing temperatures in Celsius to Fahrenheit",
        "input": "string celsius = '25, 15, 32'",
        "output": "def convertCelsiusToFahrenheit(celsius):\n temperature_fahrenheit = []\n\n for c in celsius.split(','):\n temperature_fahrenheit.append(float(c)*1.8 + 32)\n\n return temperature_fahrenheit\n\nfahrenheit = convertCelsiusToFahrenheit(celsius)\nprint(fahrenheit)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to convert a string containing temperatures in Celsius to Fahrenheit\n\n### Input:\nstring celsius = '25, 15, 32'\n\n### Output:\ndef convertCelsiusToFahrenheit(celsius):\n temperature_fahrenheit = []\n\n for c in celsius.split(','):\n temperature_fahrenheit.append(float(c)*1.8 + 32)\n\n return temperature_fahrenheit\n\nfahrenheit = convertCelsiusToFahrenheit(celsius)\nprint(fahrenheit)"
    },
    {
        "instruction": "Write a Python program to insert a given string at the beginning of all items in a list.",
        "input": "List: ['Red', 'Green', 'Black']\nString: 'White'",
        "output": "def add_string_beginning(list_string, add_string):\n    new_list = [add_string + str(item) for item in list(list_string)]\n    return  new_list\n\nlist_string = ['Red', 'Green', 'Black']\nadd_string = 'White'\n\nprint(add_string_beginning(list_string, add_string)) # ['WhiteRed', 'WhiteGreen', 'WhiteBlack']",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to insert a given string at the beginning of all items in a list.\n\n### Input:\nList: ['Red', 'Green', 'Black']\nString: 'White'\n\n### Output:\ndef add_string_beginning(list_string, add_string):\n    new_list = [add_string + str(item) for item in list(list_string)]\n    return  new_list\n\nlist_string = ['Red', 'Green', 'Black']\nadd_string = 'White'\n\nprint(add_string_beginning(list_string, add_string)) # ['WhiteRed', 'WhiteGreen', 'WhiteBlack']"
    },
    {
        "instruction": "Generate a Huffman encoded sequence for a given input string.",
        "input": "\"Hello\"",
        "output": "# Python program for Huffman Coding \n# A class that represents huffman node \nclass Node: \n    def __init__(self, freq, data): \n        self.freq = freq \n        self.data = data \n        self.left = None\n        self.right = None\n \ndef printEncodedSequence(root, str): \n    if root == None: \n        return\n    # If the current node is leaf \n    if root.data != '$': \n        print(root.data + \": \" + str) \n  \n    # If left child is not null, add '0' to the string obtained so far \n    # The value of str is passed by the invocation of this function \n    if root.left != None: \n        printEncodedSequence(root.left, str + \"0\") \n  \n    # If right child is not null, add '1' to the string obtained so far \n    if root.right != None: \n        printEncodedSequence(root.right, str + \"1\") \n\n# Output: H: 0\n#        e: 10\n#        l: 110\n#        o: 111",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Huffman encoded sequence for a given input string.\n\n### Input:\n\"Hello\"\n\n### Output:\n# Python program for Huffman Coding \n# A class that represents huffman node \nclass Node: \n    def __init__(self, freq, data): \n        self.freq = freq \n        self.data = data \n        self.left = None\n        self.right = None\n \ndef printEncodedSequence(root, str): \n    if root == None: \n        return\n    # If the current node is leaf \n    if root.data != '$': \n        print(root.data + \": \" + str) \n  \n    # If left child is not null, add '0' to the string obtained so far \n    # The value of str is passed by the invocation of this function \n    if root.left != None: \n        printEncodedSequence(root.left, str + \"0\") \n  \n    # If right child is not null, add '1' to the string obtained so far \n    if root.right != None: \n        printEncodedSequence(root.right, str + \"1\") \n\n# Output: H: 0\n#        e: 10\n#        l: 110\n#        o: 111"
    },
    {
        "instruction": "Write a Python code to calculate the mean and variance of a given list of numbers.",
        "input": "",
        "output": "def calculate_mean_variance(nums):\n mean = sum(nums)/len(nums)\n variance = 0\n\nfor num in nums:\n variance += (num - mean)**2\n variance = variance/len(nums)\n\nreturn mean, variance",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to calculate the mean and variance of a given list of numbers.\n\n### Input:\n\n\n### Output:\ndef calculate_mean_variance(nums):\n mean = sum(nums)/len(nums)\n variance = 0\n\nfor num in nums:\n variance += (num - mean)**2\n variance = variance/len(nums)\n\nreturn mean, variance"
    },
    {
        "instruction": "Optimize a function in Python.",
        "input": "def sum_of_list(lst): \n    sum = 0\n    for n in lst: \n        sum += n \n    return sum",
        "output": "def sum_of_list(lst): \n    return sum(lst)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a function in Python.\n\n### Input:\ndef sum_of_list(lst): \n    sum = 0\n    for n in lst: \n        sum += n \n    return sum\n\n### Output:\ndef sum_of_list(lst): \n    return sum(lst)"
    },
    {
        "instruction": "Design a code generator in Python to generate content based on the provided input.",
        "input": "Create a program to generate retweets to a post.",
        "output": "def generate_retweets(post_id):\n    retweets = []\n    for _ in range(10):\n        # Retrieve post from API using post_id\n        post = get_post(post_id)\n\n        # Generate a random retweet of the post\n        retweet = f'RT @{post['author']}: {post['message']}'\n        retweets.append(retweet)\n    \n    return retweets",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a code generator in Python to generate content based on the provided input.\n\n### Input:\nCreate a program to generate retweets to a post.\n\n### Output:\ndef generate_retweets(post_id):\n    retweets = []\n    for _ in range(10):\n        # Retrieve post from API using post_id\n        post = get_post(post_id)\n\n        # Generate a random retweet of the post\n        retweet = f'RT @{post['author']}: {post['message']}'\n        retweets.append(retweet)\n    \n    return retweets"
    },
    {
        "instruction": "Write a Python program to optimize a given solution.",
        "input": "Solution:\ndef multiply(a, b):\n c = a * b\n return c",
        "output": "def optimize_solution(solution):\n optimized_solution = solution.replace(\"*\", \"\n times\")\n optimized_solution = optimized_solution.replace(\" c =\", \"return a times b\")\n return optimized_solution",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize a given solution.\n\n### Input:\nSolution:\ndef multiply(a, b):\n c = a * b\n return c\n\n### Output:\ndef optimize_solution(solution):\n optimized_solution = solution.replace(\"*\", \"\n times\")\n optimized_solution = optimized_solution.replace(\" c =\", \"return a times b\")\n return optimized_solution"
    },
    {
        "instruction": "Determine the maximum possible profits by writing a Python program to optimize the given input.",
        "input": "Quantities: [0, 19, 14, 18, 12, 13] \nPrice Table : \n\t\tQty \tPrice \n0 \t\t$1 \n1-5 \t$3 \n6-9 \t$6 \n10-15 \t$5 \n16-20  $4",
        "output": "$164",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDetermine the maximum possible profits by writing a Python program to optimize the given input.\n\n### Input:\nQuantities: [0, 19, 14, 18, 12, 13] \nPrice Table : \n\t\tQty \tPrice \n0 \t\t$1 \n1-5 \t$3 \n6-9 \t$6 \n10-15 \t$5 \n16-20  $4\n\n### Output:\n$164"
    },
    {
        "instruction": "Edit an existing Python script for a text-based adventure game. The script should include additional scenarios for the game as well as functions for player movement and interaction.",
        "input": "def move_player(new_location):\n player_location = new_location\n    print(\"You moved to the \" + player_location)",
        "output": "def move_player(new_location):\n player_location = new_location\n if new_location == \"forest\":\n  print(\"You enter the forest and find yourself surrounded by tall pine trees.\")\n elif new_location == \"cave\":\n  print(\"You take a deep breath and enter the dark cave. You hear mysterious noises as you walk into the unknown.\")\n elif new_location == \"river\":\n  print(\"You come across a small babbling brook. The water looks cool and refreshing.\")\n else:\n  print(\"You moved to the \" + player_location)\n\ndef interact():\n print(\"You can do a few things here. What do you want to do?\")\n print(\"1. Interact with the environment\")\n print(\"2. Collect items\")\n print(\"3. Talk to NPCs\")\n\nchoice = input(\"What would you like to do? \")\nif choice == \"1\":\n print(\"You interact with the environment and find some useful items.\")\nelif choice == \"2\":\n print(\"You collect some useful items from the environment.\")\nelif choice == \"3\":\n print(\"You have a short conversation with a nearby NPC.\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit an existing Python script for a text-based adventure game. The script should include additional scenarios for the game as well as functions for player movement and interaction.\n\n### Input:\ndef move_player(new_location):\n player_location = new_location\n    print(\"You moved to the \" + player_location)\n\n### Output:\ndef move_player(new_location):\n player_location = new_location\n if new_location == \"forest\":\n  print(\"You enter the forest and find yourself surrounded by tall pine trees.\")\n elif new_location == \"cave\":\n  print(\"You take a deep breath and enter the dark cave. You hear mysterious noises as you walk into the unknown.\")\n elif new_location == \"river\":\n  print(\"You come across a small babbling brook. The water looks cool and refreshing.\")\n else:\n  print(\"You moved to the \" + player_location)\n\ndef interact():\n print(\"You can do a few things here. What do you want to do?\")\n print(\"1. Interact with the environment\")\n print(\"2. Collect items\")\n print(\"3. Talk to NPCs\")\n\nchoice = input(\"What would you like to do? \")\nif choice == \"1\":\n print(\"You interact with the environment and find some useful items.\")\nelif choice == \"2\":\n print(\"You collect some useful items from the environment.\")\nelif choice == \"3\":\n print(\"You have a short conversation with a nearby NPC.\")"
    },
    {
        "instruction": "Construct a program in Python to create a TCP/IP server and client that accepts messages from the client and relays them to the server.",
        "input": "",
        "output": "# Python program to implement server side of chatroom \nimport socket \nimport select \nimport sys \n  \nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM) \nserver.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) \n  \nif len(sys.argv) != 3: \n    print(\"Correct usage: script, IP address, port number\")\n    exit() \n  \nIP_address = str(sys.argv[1]) \nPort = int(sys.argv[2]) \nserver.bind((IP_address, Port)) \nserver.listen(100) \n  \nlist_of_clients = [] \n  \ndef clientthread(conn, addr): \n  \n    conn.send(\"Welcome to this chatroom!\") \n  \n    while True: \n            try: \n                message = conn.recv(2048) \n                if message: \n  \n                    print(\"<\" + addr[0] + \"> \" + message) \n  \n                    message_to_send = \"<\" + addr[0] + \"> \" + message \n                    broadcast(message_to_send, conn) \n  \n                else: \n                    remove(conn) \n  \n            except: \n                continue\n  \ndef broadcast(message, connection): \n    for clients in list_of_clients: \n        if clients!=connection: \n            try: \n                clients.send(message) \n            except: \n                clients.close() \n  \n                remove(clients) \n            \n# main function \nif __name__ == \"__main__\": \n      \n    while True: \n  \n        conn, addr = server.accept() \n  \n        list_of_clients.append(conn) \n  \n        # prints the address of the user that just connected \n        print(addr[0] + \" connected\") \n        clientthread(conn, addr)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program in Python to create a TCP/IP server and client that accepts messages from the client and relays them to the server.\n\n### Input:\n\n\n### Output:\n# Python program to implement server side of chatroom \nimport socket \nimport select \nimport sys \n  \nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM) \nserver.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) \n  \nif len(sys.argv) != 3: \n    print(\"Correct usage: script, IP address, port number\")\n    exit() \n  \nIP_address = str(sys.argv[1]) \nPort = int(sys.argv[2]) \nserver.bind((IP_address, Port)) \nserver.listen(100) \n  \nlist_of_clients = [] \n  \ndef clientthread(conn, addr): \n  \n    conn.send(\"Welcome to this chatroom!\") \n  \n    while True: \n            try: \n                message = conn.recv(2048) \n                if message: \n  \n                    print(\"<\" + addr[0] + \"> \" + message) \n  \n                    message_to_send = \"<\" + addr[0] + \"> \" + message \n                    broadcast(message_to_send, conn) \n  \n                else: \n                    remove(conn) \n  \n            except: \n                continue\n  \ndef broadcast(message, connection): \n    for clients in list_of_clients: \n        if clients!=connection: \n            try: \n                clients.send(message) \n            except: \n                clients.close() \n  \n                remove(clients) \n            \n# main function \nif __name__ == \"__main__\": \n      \n    while True: \n  \n        conn, addr = server.accept() \n  \n        list_of_clients.append(conn) \n  \n        # prints the address of the user that just connected \n        print(addr[0] + \" connected\") \n        clientthread(conn, addr)"
    },
    {
        "instruction": "Design a function in Python to delete duplicate characters from a given string.",
        "input": "String: python",
        "output": "def delete_duplicate(str):\n    temp_str = \"\"\n    for i in range(0, len(str)):\n        if str[i] not in temp_str:\n            temp_str += str[i]\n    return temp_str\n\ninput_string = \"w3python\"\nresult = delete_duplicate(input_string)\n\nprint(\"After deleting duplicate character, string is:\", result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to delete duplicate characters from a given string.\n\n### Input:\nString: python\n\n### Output:\ndef delete_duplicate(str):\n    temp_str = \"\"\n    for i in range(0, len(str)):\n        if str[i] not in temp_str:\n            temp_str += str[i]\n    return temp_str\n\ninput_string = \"w3python\"\nresult = delete_duplicate(input_string)\n\nprint(\"After deleting duplicate character, string is:\", result)"
    },
    {
        "instruction": "Create a python program to return the difference between two sets x and y.",
        "input": "",
        "output": "def set_difference(x, y): \n    return x.difference(y)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program to return the difference between two sets x and y.\n\n### Input:\n\n\n### Output:\ndef set_difference(x, y): \n    return x.difference(y)"
    },
    {
        "instruction": "Use the Python script below to generate a random sequence of 0s and 1s.",
        "input": "import random\n\ndef generate_sequence(length):\n return [random.randint(0, 1) for _ in range(length)]",
        "output": "def is_balanced(sequence):\n count = {0: 0, 1: 0}\n for bit in sequence:\n count[bit] += 1\n \n return count[0] == count[1]\n \nsequence = generate_sequence(20)\nbalanced = is_balanced(sequence)\n\nprint(\"Sequence:\", sequence)\nprint(\"Balanced:\", balanced)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the Python script below to generate a random sequence of 0s and 1s.\n\n### Input:\nimport random\n\ndef generate_sequence(length):\n return [random.randint(0, 1) for _ in range(length)]\n\n### Output:\ndef is_balanced(sequence):\n count = {0: 0, 1: 0}\n for bit in sequence:\n count[bit] += 1\n \n return count[0] == count[1]\n \nsequence = generate_sequence(20)\nbalanced = is_balanced(sequence)\n\nprint(\"Sequence:\", sequence)\nprint(\"Balanced:\", balanced)"
    },
    {
        "instruction": "Write a Python program to convert all strings in a list to uppercase.",
        "input": "",
        "output": "def to_uppercase(list):\n  return [item.upper() for item in list]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert all strings in a list to uppercase.\n\n### Input:\n\n\n### Output:\ndef to_uppercase(list):\n  return [item.upper() for item in list]"
    },
    {
        "instruction": "Write a code snippet to generate a random number from 1 to 10 in Python.",
        "input": "",
        "output": "import random\n\ndef randNumber():\n    return random.randint(1, 10)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet to generate a random number from 1 to 10 in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\ndef randNumber():\n    return random.randint(1, 10)"
    },
    {
        "instruction": "Rewrite the following Python program that calculates the factorial of a given number n into Java.",
        "input": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)",
        "output": "public class Factorial {\n    public static int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n-1);\n        }\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(factorial(5));\n    }\n}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following Python program that calculates the factorial of a given number n into Java.\n\n### Input:\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n### Output:\npublic class Factorial {\n    public static int factorial(int n) {\n        if (n == 0) {\n            return 1;\n        } else {\n            return n * factorial(n-1);\n        }\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(factorial(5));\n    }\n}"
    },
    {
        "instruction": "Define a function to compute 3 raised to the power of 5 in Python.",
        "input": "",
        "output": "def power(x, y): \n    if (y == 0): \n        return 1\n    elif (int(y % 2) == 0): \n        return (power(x, int(y / 2)) *\n               power(x, int(y / 2))) \n    else: \n        return (x * power(x, int(y / 2)) *\n               power(x, int(y / 2))) \n\n\n# Driver Code \nx = 3; y = 5\nprint(power(x, y))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDefine a function to compute 3 raised to the power of 5 in Python.\n\n### Input:\n\n\n### Output:\ndef power(x, y): \n    if (y == 0): \n        return 1\n    elif (int(y % 2) == 0): \n        return (power(x, int(y / 2)) *\n               power(x, int(y / 2))) \n    else: \n        return (x * power(x, int(y / 2)) *\n               power(x, int(y / 2))) \n\n\n# Driver Code \nx = 3; y = 5\nprint(power(x, y))"
    },
    {
        "instruction": "Design a web application from scratch to manage a restaurant's menu.",
        "input": "",
        "output": "The web application will be built using HTML, CSS, JavaScript, and a server-side language such as PHP, Node.js, or Python. The primary function of this application will be to manage a restaurant's menu. This will include creating menu items, setting prices, managing ingredients, taking orders and more. The application will be easy to use and will be able to store large amounts of data. Additionally, the application should be able to generate reports on sales and profit.",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a web application from scratch to manage a restaurant's menu.\n\n### Input:\n\n\n### Output:\nThe web application will be built using HTML, CSS, JavaScript, and a server-side language such as PHP, Node.js, or Python. The primary function of this application will be to manage a restaurant's menu. This will include creating menu items, setting prices, managing ingredients, taking orders and more. The application will be easy to use and will be able to store large amounts of data. Additionally, the application should be able to generate reports on sales and profit."
    },
    {
        "instruction": "Write a Python code snippet to search and print all items in the list that starts with substring \"java\".",
        "input": "arr = [\"python\", \"c++\", \"java\", \"java-script\"]",
        "output": "arr = [\"python\", \"c++\", \"java\", \"java-script\"]\n\nresult = []\nfor item in arr:\n    if item.startswith(\"java\"):\n        result.append(item)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code snippet to search and print all items in the list that starts with substring \"java\".\n\n### Input:\narr = [\"python\", \"c++\", \"java\", \"java-script\"]\n\n### Output:\narr = [\"python\", \"c++\", \"java\", \"java-script\"]\n\nresult = []\nfor item in arr:\n    if item.startswith(\"java\"):\n        result.append(item)\nprint(result)"
    },
    {
        "instruction": "Design and implement a function in Python that takes a list of strings as an argument and returns the words that appear the most.",
        "input": "words = [\"apple\", \"banana\", \"apple\", \"orange\", \"apple\", \"banana\", \"coconut\"]",
        "output": "def most_frequent(words):\n frequency = {}\n \n for word in words:\n  if word in frequency:\n   frequency[word] += 1\n  else:\n   frequency[word] = 1\n \n most_frequent_word = None\n max_frequency = 0\n \n for word, count in frequency.items():\n  if count > max_frequency:\n   max_frequency = count\n   most_frequent_word = word\n \n return most_frequent_word",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign and implement a function in Python that takes a list of strings as an argument and returns the words that appear the most.\n\n### Input:\nwords = [\"apple\", \"banana\", \"apple\", \"orange\", \"apple\", \"banana\", \"coconut\"]\n\n### Output:\ndef most_frequent(words):\n frequency = {}\n \n for word in words:\n  if word in frequency:\n   frequency[word] += 1\n  else:\n   frequency[word] = 1\n \n most_frequent_word = None\n max_frequency = 0\n \n for word, count in frequency.items():\n  if count > max_frequency:\n   max_frequency = count\n   most_frequent_word = word\n \n return most_frequent_word"
    },
    {
        "instruction": "Construct a program in Python to encrypt the entered text using a simple substitution cipher.",
        "input": "",
        "output": "def encrypt(plainText, key):\n    cipherText = \"\"\n    for char in plainText:\n        if char.isalpha():\n            cipherChar = chr(((ord(char) - ord('a')) + key) % 26 + ord('a'))\n        else:\n            cipherChar = char\n        cipherText += cipherChar\n    return cipherText",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program in Python to encrypt the entered text using a simple substitution cipher.\n\n### Input:\n\n\n### Output:\ndef encrypt(plainText, key):\n    cipherText = \"\"\n    for char in plainText:\n        if char.isalpha():\n            cipherChar = chr(((ord(char) - ord('a')) + key) % 26 + ord('a'))\n        else:\n            cipherChar = char\n        cipherText += cipherChar\n    return cipherText"
    },
    {
        "instruction": "Use Python to convert a single number from binary to decimal",
        "input": "10011",
        "output": "def binary2decimal(binary):\n\tdec = 0\n\tfor i in range(len(binary)):\n\t\tdigit = binary[i]\n\t\tdec += int(digit)*(2**(len(binary)-1-i))\n\n\treturn dec\n\nprint(binary2decimal(\"10011\")) # 19",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse Python to convert a single number from binary to decimal\n\n### Input:\n10011\n\n### Output:\ndef binary2decimal(binary):\n\tdec = 0\n\tfor i in range(len(binary)):\n\t\tdigit = binary[i]\n\t\tdec += int(digit)*(2**(len(binary)-1-i))\n\n\treturn dec\n\nprint(binary2decimal(\"10011\")) # 19"
    },
    {
        "instruction": "Create an algorithm in Python to count all the even numbers in a given list of numbers",
        "input": "[1, 2, 3, 4, 5, 6]",
        "output": "def count_even(array):\n    count = 0\n    for num in array:\n        if num % 2 == 0:\n            count += 1\n    return count\n\narr = [1, 2, 3, 4, 5, 6]\nprint(count_even(arr)) # Output: 3",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to count all the even numbers in a given list of numbers\n\n### Input:\n[1, 2, 3, 4, 5, 6]\n\n### Output:\ndef count_even(array):\n    count = 0\n    for num in array:\n        if num % 2 == 0:\n            count += 1\n    return count\n\narr = [1, 2, 3, 4, 5, 6]\nprint(count_even(arr)) # Output: 3"
    },
    {
        "instruction": "Generate a program to take a sentence and capitalize the first letter of each word in the sentence.",
        "input": "",
        "output": "def capitalize_sentence(sentence):\n  words = sentence.split(' ')\n  capitalized_words = [word.capitalize() for word in words]\n  return ' '.join(capitalized_words)\n\n# Driver Code\nsentence = 'i am learning python'\n\nresult = capitalize_sentence(sentence)\n\nprint(result) # prints \"I Am Learning Python\"",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program to take a sentence and capitalize the first letter of each word in the sentence.\n\n### Input:\n\n\n### Output:\ndef capitalize_sentence(sentence):\n  words = sentence.split(' ')\n  capitalized_words = [word.capitalize() for word in words]\n  return ' '.join(capitalized_words)\n\n# Driver Code\nsentence = 'i am learning python'\n\nresult = capitalize_sentence(sentence)\n\nprint(result) # prints \"I Am Learning Python\""
    },
    {
        "instruction": "Create a Python function to remove all the elements in a list that are greater than a specified value.",
        "input": "[1, 2, 3, 4, 5], 3",
        "output": "def remove_greater_than(arr, value):\n    new_arr = []\n    for item in arr:\n        if item <= value:\n            new_arr.append(item)\n    return new_arr\n\nresult = remove_greater_than([1, 2, 3, 4, 5], 3)\nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to remove all the elements in a list that are greater than a specified value.\n\n### Input:\n[1, 2, 3, 4, 5], 3\n\n### Output:\ndef remove_greater_than(arr, value):\n    new_arr = []\n    for item in arr:\n        if item <= value:\n            new_arr.append(item)\n    return new_arr\n\nresult = remove_greater_than([1, 2, 3, 4, 5], 3)\nprint(result)"
    },
    {
        "instruction": "Create a Natural Language Processing (NLP) program in Python to classify an article as a sports article or a politics article.",
        "input": "Sample article about a 2018 soccer match",
        "output": "from sklearn import svm\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Your training data\nsport_articles = [\n 'Soccer player scores winning goal in extra time...',\n 'Basketball game ends in a tie\u2026',\n]\n\npolitics_articles = [\n 'President makes statement on the economy\u2026',\n 'Supreme Court rules against the president\u2026',\n]\n\n# Convert text to numeric arrays\nvectorizer = TfidfVectorizer()\nsport_vectors = vectorizer.fit_transform(sport_articles)\npolitics_vectors = vectorizer.fit_transform(politics_articles)\n\n# Create the model\nmodel = svm.SVC(kernel = 'linear')\n\n# Train the model\nmodel.fit(sport_vectors, [1]*len(sport_articles))\nmodel.fit(politics_vectors, [0]*len(politics_articles))\n\n# Test the model with the article\narticle = 'Soccer player scores winning goal in extra time...'\narticle_vector = vectorizer.transform([article])\nprint(model.predict(article_vector))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Natural Language Processing (NLP) program in Python to classify an article as a sports article or a politics article.\n\n### Input:\nSample article about a 2018 soccer match\n\n### Output:\nfrom sklearn import svm\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n# Your training data\nsport_articles = [\n 'Soccer player scores winning goal in extra time...',\n 'Basketball game ends in a tie\u2026',\n]\n\npolitics_articles = [\n 'President makes statement on the economy\u2026',\n 'Supreme Court rules against the president\u2026',\n]\n\n# Convert text to numeric arrays\nvectorizer = TfidfVectorizer()\nsport_vectors = vectorizer.fit_transform(sport_articles)\npolitics_vectors = vectorizer.fit_transform(politics_articles)\n\n# Create the model\nmodel = svm.SVC(kernel = 'linear')\n\n# Train the model\nmodel.fit(sport_vectors, [1]*len(sport_articles))\nmodel.fit(politics_vectors, [0]*len(politics_articles))\n\n# Test the model with the article\narticle = 'Soccer player scores winning goal in extra time...'\narticle_vector = vectorizer.transform([article])\nprint(model.predict(article_vector))"
    },
    {
        "instruction": "Write a Python program to generate a randomly sized array with random numbers between 0 and 1000.",
        "input": "Not applicable",
        "output": "import random\n\nn = random.randint(1, 10)\narray = [random.randint(0, 1000) for i in range(n)]\nprint(array)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate a randomly sized array with random numbers between 0 and 1000.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\nn = random.randint(1, 10)\narray = [random.randint(0, 1000) for i in range(n)]\nprint(array)"
    },
    {
        "instruction": "Design a chaos-based Python program to simulate the predator\u2013prey interactions between a fox and a rabbit.",
        "input": "Two species: fox and rabbit\nNumber of rabbits: 10\nNumber of foxes: 3",
        "output": "import random \n  \ndef fox_and_rabbit_simulator(num_of_rabbits, num_of_fox): \n      \n    # Initialize the population \n    rabbit_population = [num_of_rabbits] \n    fox_population = [num_of_fox] \n      \n    # Simulation of Fox and Rabbit interaction \n    for i in range(365): \n        # For every day, the numbers of rabbits and foxes are calculated \n        rabbit_pop = rabbit_population[i] * random.uniform(0.9, 1.1) \n        fox_pop = fox_population[i] * random.uniform(1.01, 1.2) \n        # Calculate the number of foxes and rabbits for next day \n        rabbit_population.append(rabbit_pop) \n        fox_population.append(fox_pop) \n  \n    print(\"Rabbit population after 365 days :\", round(rabbit_population[-1])) \n    print(\"Fox population after 365 days :\", round(fox_population[-1])) \n  \n# Driver Code \nif __name__ == \"__main__\": \n    fox_and_rabbit_simulator(10, 3)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a chaos-based Python program to simulate the predator\u2013prey interactions between a fox and a rabbit.\n\n### Input:\nTwo species: fox and rabbit\nNumber of rabbits: 10\nNumber of foxes: 3\n\n### Output:\nimport random \n  \ndef fox_and_rabbit_simulator(num_of_rabbits, num_of_fox): \n      \n    # Initialize the population \n    rabbit_population = [num_of_rabbits] \n    fox_population = [num_of_fox] \n      \n    # Simulation of Fox and Rabbit interaction \n    for i in range(365): \n        # For every day, the numbers of rabbits and foxes are calculated \n        rabbit_pop = rabbit_population[i] * random.uniform(0.9, 1.1) \n        fox_pop = fox_population[i] * random.uniform(1.01, 1.2) \n        # Calculate the number of foxes and rabbits for next day \n        rabbit_population.append(rabbit_pop) \n        fox_population.append(fox_pop) \n  \n    print(\"Rabbit population after 365 days :\", round(rabbit_population[-1])) \n    print(\"Fox population after 365 days :\", round(fox_population[-1])) \n  \n# Driver Code \nif __name__ == \"__main__\": \n    fox_and_rabbit_simulator(10, 3)"
    },
    {
        "instruction": "Design an algorithm in Python to check if two strings are anagrams.",
        "input": "",
        "output": "def is_anagram(str1, str2): \n\t\n\t# Get lengths of both strings \n\tn1 = len(str1) \n\tn2 = len(str2) \n\n\t# If length of both strings is not same, \n\t# then they cannot be anagram \n\tif n1 != n2: \n\t\treturn 0\n\n\t# Sort both strings \n\tstr1 = sorted(str1) \n\tstr2 = sorted(str2) \n\n\t# Compare sorted strings \n\tfor i in range(0, n1): \n\t\tif str1[i] != str2[i]: \n\t\t\treturn 0\n\n\treturn 1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to check if two strings are anagrams.\n\n### Input:\n\n\n### Output:\ndef is_anagram(str1, str2): \n\t\n\t# Get lengths of both strings \n\tn1 = len(str1) \n\tn2 = len(str2) \n\n\t# If length of both strings is not same, \n\t# then they cannot be anagram \n\tif n1 != n2: \n\t\treturn 0\n\n\t# Sort both strings \n\tstr1 = sorted(str1) \n\tstr2 = sorted(str2) \n\n\t# Compare sorted strings \n\tfor i in range(0, n1): \n\t\tif str1[i] != str2[i]: \n\t\t\treturn 0\n\n\treturn 1"
    },
    {
        "instruction": "Write a Python program to find the sum of all the divisors of a given integer.",
        "input": "90",
        "output": "def calculate_sum_divisors(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total_sum += i\n    return total_sum\n \nprint(calculate_sum_divisors(90))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the sum of all the divisors of a given integer.\n\n### Input:\n90\n\n### Output:\ndef calculate_sum_divisors(n):\n    total_sum = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total_sum += i\n    return total_sum\n \nprint(calculate_sum_divisors(90))"
    },
    {
        "instruction": "Design a code optimization program for Python programs.",
        "input": "def brute_force_traverse(data):\n    for i in range(len(data)):\n        for j in range(len(data)):\n            if data[i] + data[j] == 0:\n                return (i, j)\n\ndata = [3, -1, 5, 7]",
        "output": "def optimized_traverse(data):\n    # create a mapping of number to its index\n    data_mappings = {num:idx for idx, num in enumerate(data)}\n    # traverse the data in a single pass\n    for idx, num in enumerate(data):\n        if -num in data_mappings.keys():\n            return (idx,data_mappings[-num])\n\ndata = [3, -1, 5, 7]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a code optimization program for Python programs.\n\n### Input:\ndef brute_force_traverse(data):\n    for i in range(len(data)):\n        for j in range(len(data)):\n            if data[i] + data[j] == 0:\n                return (i, j)\n\ndata = [3, -1, 5, 7]\n\n### Output:\ndef optimized_traverse(data):\n    # create a mapping of number to its index\n    data_mappings = {num:idx for idx, num in enumerate(data)}\n    # traverse the data in a single pass\n    for idx, num in enumerate(data):\n        if -num in data_mappings.keys():\n            return (idx,data_mappings[-num])\n\ndata = [3, -1, 5, 7]"
    },
    {
        "instruction": "Create a program in Python that uses a machine learning approach to classify a type of data.",
        "input": "dataset = [[1,2,3], [4,5,6], [7,8,9]]\nlabels = [\"a\", \"b\", \"c\"]",
        "output": "import numpy as np\nfrom sklearn.svm import SVC\n\n# Intialize dataset and labels\ndataset = [[1,2,3], [4,5,6], [7,8,9]]\nlabels = [\"a\", \"b\", \"c\"]\n\n# Fit the model\nclf = SVC(gamma='auto')\nclf.fit(dataset, labels)\n\n# Make predictions \nx = [2, 3, 4]\nprediction = clf.predict([x])\nprint(\"The prediction is\", prediction[0])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that uses a machine learning approach to classify a type of data.\n\n### Input:\ndataset = [[1,2,3], [4,5,6], [7,8,9]]\nlabels = [\"a\", \"b\", \"c\"]\n\n### Output:\nimport numpy as np\nfrom sklearn.svm import SVC\n\n# Intialize dataset and labels\ndataset = [[1,2,3], [4,5,6], [7,8,9]]\nlabels = [\"a\", \"b\", \"c\"]\n\n# Fit the model\nclf = SVC(gamma='auto')\nclf.fit(dataset, labels)\n\n# Make predictions \nx = [2, 3, 4]\nprediction = clf.predict([x])\nprint(\"The prediction is\", prediction[0])"
    },
    {
        "instruction": "Create a Python program that prints out all the odd numbers between 1 and 30.",
        "input": "",
        "output": "for i in range(1, 31):\n if(i%2 != 0):\n  print(i)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that prints out all the odd numbers between 1 and 30.\n\n### Input:\n\n\n### Output:\nfor i in range(1, 31):\n if(i%2 != 0):\n  print(i)"
    },
    {
        "instruction": "Write Python code to shuffle a given list.",
        "input": "",
        "output": "def shuffle_list(given_list):\n    temp_list = given_list[:]\n    random.shuffle(temp_list)\n    return temp_list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to shuffle a given list.\n\n### Input:\n\n\n### Output:\ndef shuffle_list(given_list):\n    temp_list = given_list[:]\n    random.shuffle(temp_list)\n    return temp_list"
    },
    {
        "instruction": "Create an API endpoint in Python using Django Rest Framework which provides basic CRUD functionality for a Post model (i.e. Create, Read, Update, Delete operations).",
        "input": "Not applicable",
        "output": "from rest_framework import views, status\nfrom rest_framework.response import Response\nfrom .models import Post\nfrom .serializers import PostSerializer\n\nclass PostView(views.APIView):\n    def get(self, request):\n        posts = Post.objects.all()\n        serializer = PostSerializer(posts, many=True)\n        return Response(serializer.data)\n\n    def post(self, request):\n        serializer = PostSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\nclass PostDetailView(views.APIView):\n    def get(self, request, pk):\n        post = Post.objects.get(pk=pk)\n        serializer = PostSerializer(post)\n        return Response(serializer.data)\n\n    def put(self, request, pk):\n        post = Post.objects.get(pk=pk)\n        serializer = PostSerializer(post, data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n   def delete(self, request, pk):\n        post = Post.objects.get(pk=pk)\n        post.delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API endpoint in Python using Django Rest Framework which provides basic CRUD functionality for a Post model (i.e. Create, Read, Update, Delete operations).\n\n### Input:\nNot applicable\n\n### Output:\nfrom rest_framework import views, status\nfrom rest_framework.response import Response\nfrom .models import Post\nfrom .serializers import PostSerializer\n\nclass PostView(views.APIView):\n    def get(self, request):\n        posts = Post.objects.all()\n        serializer = PostSerializer(posts, many=True)\n        return Response(serializer.data)\n\n    def post(self, request):\n        serializer = PostSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\nclass PostDetailView(views.APIView):\n    def get(self, request, pk):\n        post = Post.objects.get(pk=pk)\n        serializer = PostSerializer(post)\n        return Response(serializer.data)\n\n    def put(self, request, pk):\n        post = Post.objects.get(pk=pk)\n        serializer = PostSerializer(post, data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data)\n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\n   def delete(self, request, pk):\n        post = Post.objects.get(pk=pk)\n        post.delete()\n        return Response(status=status.HTTP_204_NO_CONTENT)"
    },
    {
        "instruction": "Design a template system for generating emails using Python.",
        "input": "A JSON object containing the email's data",
        "output": "import re\nimport json\n\n# Load the data from the JSON\nwith open('email_data.json') as f:\n data = json.load(f)\n\n# Create a template for the email\nemail_template = \"\"\"\nDear {{ recipient }},\n\n{{ greeting }},\n\n{{ message }}\n\n{{ signature }}\n\"\"\"\n\n# Compile the regex\npattern = re.compile(r'{{\\s*(.*?)\\s*}}')\n\n# Function to format the template\ndef format_template(template, data):\n # Find all the placeholders\n placeholders = pattern.findall(template)\n\n # Replace the placeholders in the template with the actual values\n for placeholder in placeholders:\n value = data.get(placeholder)\n template = template.replace('{{ %s }}' % placeholder, value)\n\n return template\n\n# Format the email template\nformatted_email = format_template(email_template, data)\n\n# Print the formatted email\nprint(formatted_email)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a template system for generating emails using Python.\n\n### Input:\nA JSON object containing the email's data\n\n### Output:\nimport re\nimport json\n\n# Load the data from the JSON\nwith open('email_data.json') as f:\n data = json.load(f)\n\n# Create a template for the email\nemail_template = \"\"\"\nDear {{ recipient }},\n\n{{ greeting }},\n\n{{ message }}\n\n{{ signature }}\n\"\"\"\n\n# Compile the regex\npattern = re.compile(r'{{\\s*(.*?)\\s*}}')\n\n# Function to format the template\ndef format_template(template, data):\n # Find all the placeholders\n placeholders = pattern.findall(template)\n\n # Replace the placeholders in the template with the actual values\n for placeholder in placeholders:\n value = data.get(placeholder)\n template = template.replace('{{ %s }}' % placeholder, value)\n\n return template\n\n# Format the email template\nformatted_email = format_template(email_template, data)\n\n# Print the formatted email\nprint(formatted_email)"
    },
    {
        "instruction": "Write a Python program which accepts a sequence of comma-separated numbers from console and generates a list.",
        "input": "1,2,3,4,5",
        "output": "numbers = input(\"Please enter a sequence of comma-separated numbers:\")\n\nnum_list = numbers.split(',')\n\nnum_list = list(map(int, num_list))\n\nprint(num_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program which accepts a sequence of comma-separated numbers from console and generates a list.\n\n### Input:\n1,2,3,4,5\n\n### Output:\nnumbers = input(\"Please enter a sequence of comma-separated numbers:\")\n\nnum_list = numbers.split(',')\n\nnum_list = list(map(int, num_list))\n\nprint(num_list)"
    },
    {
        "instruction": "Develop an AI agent in Python for playing tic-tac-toe.",
        "input": "",
        "output": "import numpy as np\n\nclass TicTacToeAgent:\n    def __init__(self, turn='X'):\n        self.turn = turn\n        self.opponent = 'O' if turn == 'X' else 'X'\n    \n    def make_move(self, state):\n        outcome, move = self.minimax(state, self.turn)\n        return move\n     \n    def minimax(self, state, player):\n        if self.game_over(state):\n            winner = self.winner(state)\n            if winner == self.turn:\n                return 1, None\n            elif winner == self.opponent:\n                return -1, None\n            else:\n                return 0, None\n \n        if player == self.turn:\n            best_outcome = -float('inf')\n            best_move = None\n            for row in range(3):\n                for col in range(3):\n                    if state[row][col] == 0:\n                        state[row][col] = self.turn\n                        _, move = self.minimax(state, self.opponent)\n                        state[row][col] = 0\n                        if move is not None:\n                            best_move = (row, col)\n                        best_outcome = max(best_outcome, _)\n            return best_outcome, best_move\n        else:\n            best_outcome = float('inf')\n            best_move = None\n            for row in range(3):\n                for col in range(3):\n                    if state[row][col] == 0:\n                        state[row][col] = self.opponent\n                        _, move = self.minimax(state, self.turn)\n                        state[row][col] = 0\n                        if move is not None:\n                            best_move = (row, col)\n                        best_outcome = min(best_outcome, _)\n            return best_outcome, best_move\n                        \n    def game_over(self, state):\n        return tuple(np.sum(state, axis=1)) in (3, -3) or \n               tuple(np.sum(state, axis=0)) in (3, -3) or \n               np.sum(np.diagonal(state)) in (3, -3) or \n               np.sum(np.fliplr(state).diagonal()) in (3, -3)\n \n    def winner(self, state):\n        for player in ('X', 'O'):\n            if tuple(np.sum(state, axis=1)) == (3,) * 3:\n                return player\n            elif tuple(np.sum(state, axis=0)) == (3,) * 3:\n                return player\n            elif np.sum(np.diagonal(state)) == 3: \n                return player\n            elif np.sum(np.fliplr(state).diagonal()) == 3: \n                return player\n            elif tuple(np.sum(state, axis=1)) == (-3,) * 3:\n                return player\n            elif tuple(np.sum(state, axis=0)) == (-3,) * 3: \n                return player\n            elif np.sum(np.diagonal(state)) == -3: \n                return player\n            elif np.sum(np.fliplr(state).diagonal()) == -3:\n                return player\n        return None",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an AI agent in Python for playing tic-tac-toe.\n\n### Input:\n\n\n### Output:\nimport numpy as np\n\nclass TicTacToeAgent:\n    def __init__(self, turn='X'):\n        self.turn = turn\n        self.opponent = 'O' if turn == 'X' else 'X'\n    \n    def make_move(self, state):\n        outcome, move = self.minimax(state, self.turn)\n        return move\n     \n    def minimax(self, state, player):\n        if self.game_over(state):\n            winner = self.winner(state)\n            if winner == self.turn:\n                return 1, None\n            elif winner == self.opponent:\n                return -1, None\n            else:\n                return 0, None\n \n        if player == self.turn:\n            best_outcome = -float('inf')\n            best_move = None\n            for row in range(3):\n                for col in range(3):\n                    if state[row][col] == 0:\n                        state[row][col] = self.turn\n                        _, move = self.minimax(state, self.opponent)\n                        state[row][col] = 0\n                        if move is not None:\n                            best_move = (row, col)\n                        best_outcome = max(best_outcome, _)\n            return best_outcome, best_move\n        else:\n            best_outcome = float('inf')\n            best_move = None\n            for row in range(3):\n                for col in range(3):\n                    if state[row][col] == 0:\n                        state[row][col] = self.opponent\n                        _, move = self.minimax(state, self.turn)\n                        state[row][col] = 0\n                        if move is not None:\n                            best_move = (row, col)\n                        best_outcome = min(best_outcome, _)\n            return best_outcome, best_move\n                        \n    def game_over(self, state):\n        return tuple(np.sum(state, axis=1)) in (3, -3) or \n               tuple(np.sum(state, axis=0)) in (3, -3) or \n               np.sum(np.diagonal(state)) in (3, -3) or \n               np.sum(np.fliplr(state).diagonal()) in (3, -3)\n \n    def winner(self, state):\n        for player in ('X', 'O'):\n            if tuple(np.sum(state, axis=1)) == (3,) * 3:\n                return player\n            elif tuple(np.sum(state, axis=0)) == (3,) * 3:\n                return player\n            elif np.sum(np.diagonal(state)) == 3: \n                return player\n            elif np.sum(np.fliplr(state).diagonal()) == 3: \n                return player\n            elif tuple(np.sum(state, axis=1)) == (-3,) * 3:\n                return player\n            elif tuple(np.sum(state, axis=0)) == (-3,) * 3: \n                return player\n            elif np.sum(np.diagonal(state)) == -3: \n                return player\n            elif np.sum(np.fliplr(state).diagonal()) == -3:\n                return player\n        return None"
    },
    {
        "instruction": "Write a Python program to find the closest pair of points given a set of points",
        "input": "[[2, 3], [12, 30], [40, 50], [5, 1], [12, 10], [3, 4]]",
        "output": "import math\n \ndef closest_pair_of_points(points):\n \n   closest_pair = [1000, 1000]\n   shortest_distance = 10000\n \n   for point in points:\n      for inner_point in points:\n         if (point is not inner_point):\n            distance = math.sqrt(((point[0] - inner_point[0])**2) + ((point[1] - inner_point[1])**2))\n            if distance < shortest_distance:\n               closest_pair = [point, inner_point]\n               shortest_distance = distance\n   \n   return (closest_pair, shortest_distance)\n  \npoints = [[2, 3], [12, 30], [40, 50], [5, 1], [12, 10], [3, 4]]\nprint(closest_pair_of_points(points))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the closest pair of points given a set of points\n\n### Input:\n[[2, 3], [12, 30], [40, 50], [5, 1], [12, 10], [3, 4]]\n\n### Output:\nimport math\n \ndef closest_pair_of_points(points):\n \n   closest_pair = [1000, 1000]\n   shortest_distance = 10000\n \n   for point in points:\n      for inner_point in points:\n         if (point is not inner_point):\n            distance = math.sqrt(((point[0] - inner_point[0])**2) + ((point[1] - inner_point[1])**2))\n            if distance < shortest_distance:\n               closest_pair = [point, inner_point]\n               shortest_distance = distance\n   \n   return (closest_pair, shortest_distance)\n  \npoints = [[2, 3], [12, 30], [40, 50], [5, 1], [12, 10], [3, 4]]\nprint(closest_pair_of_points(points))"
    },
    {
        "instruction": "Write a Python program to check the validity of a password (input from users).",
        "input": "",
        "output": "def is_valid_password(password):\n    if len(password) < 8:\n        return False\n\n    has_uppercase = False\n    has_lowercase = False\n    has_digit = False\n\n    for char in password:\n        if char.isupper():\n            has_uppercase = True\n        elif char.islower():\n            has_lowercase = True\n        elif char.isdigit():\n            has_digit = True\n    \n    if has_uppercase and has_lowercase and has_digit:\n        return True\n    else:\n        return False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to check the validity of a password (input from users).\n\n### Input:\n\n\n### Output:\ndef is_valid_password(password):\n    if len(password) < 8:\n        return False\n\n    has_uppercase = False\n    has_lowercase = False\n    has_digit = False\n\n    for char in password:\n        if char.isupper():\n            has_uppercase = True\n        elif char.islower():\n            has_lowercase = True\n        elif char.isdigit():\n            has_digit = True\n    \n    if has_uppercase and has_lowercase and has_digit:\n        return True\n    else:\n        return False"
    },
    {
        "instruction": "Generate an artificial neural network in python that calculates the output for the given input matrix.",
        "input": "Input matrix:\n[[3, -0.5, 2],\n [-0.5, 0.7, 1.2],\n [0.2, -0.3, 0.8]]",
        "output": "# import the necessary libraries \nimport numpy as np \nimport tensorflow as tf \n\n# define the input matrix\ninput_matrix = np.array([[3, -0.5, 2],\n [-0.5, 0.7, 1.2],\n [0.2, -0.3, 0.8]])\n\n# create a 3x3 weight matrix\nweights = tf.Variable(tf.truncated_normal(shape=[3, 3], mean=0, stddev=0.1, dtype=tf.float32))\n# define the biases\nbiases = tf.Variable(tf.constant(0.1, shape=[3]))\n\n# define the output\nout = tf.matmul(input_matrix, weights) + biases\n\n# initialize the weights and biases\ninit = tf.initialize_all_variables()\n\n# define the sesssion\nsess = tf.Session()\n# run the session\nsess.run(init)\n\n# print the result\nprint(sess.run(out))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an artificial neural network in python that calculates the output for the given input matrix.\n\n### Input:\nInput matrix:\n[[3, -0.5, 2],\n [-0.5, 0.7, 1.2],\n [0.2, -0.3, 0.8]]\n\n### Output:\n# import the necessary libraries \nimport numpy as np \nimport tensorflow as tf \n\n# define the input matrix\ninput_matrix = np.array([[3, -0.5, 2],\n [-0.5, 0.7, 1.2],\n [0.2, -0.3, 0.8]])\n\n# create a 3x3 weight matrix\nweights = tf.Variable(tf.truncated_normal(shape=[3, 3], mean=0, stddev=0.1, dtype=tf.float32))\n# define the biases\nbiases = tf.Variable(tf.constant(0.1, shape=[3]))\n\n# define the output\nout = tf.matmul(input_matrix, weights) + biases\n\n# initialize the weights and biases\ninit = tf.initialize_all_variables()\n\n# define the sesssion\nsess = tf.Session()\n# run the session\nsess.run(init)\n\n# print the result\nprint(sess.run(out))"
    },
    {
        "instruction": "Create a Python class that implements iterable protocol.",
        "input": "",
        "output": "class IterableData:\n    def __init__(self, data):\n        self.data = data\n    \n    def __iter__(self):\n        for item in self.data:\n            yield item\n\n# Usage\niterable = IterableData([1, 2, 3, 4])\nfor item in iterable:\n    print(item)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class that implements iterable protocol.\n\n### Input:\n\n\n### Output:\nclass IterableData:\n    def __init__(self, data):\n        self.data = data\n    \n    def __iter__(self):\n        for item in self.data:\n            yield item\n\n# Usage\niterable = IterableData([1, 2, 3, 4])\nfor item in iterable:\n    print(item)"
    },
    {
        "instruction": "Create an array from the following list in Python.",
        "input": "List: [\"a\", \"b\", \"c\", \"d\"]",
        "output": "arr = [\"a\", \"b\", \"c\", \"d\"]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an array from the following list in Python.\n\n### Input:\nList: [\"a\", \"b\", \"c\", \"d\"]\n\n### Output:\narr = [\"a\", \"b\", \"c\", \"d\"]"
    },
    {
        "instruction": "Design a search algorithm in Python which returns the position of a number in a given list.",
        "input": "array = [2, 3, 4, 5, 7, 8, 9] \ntarget = 7",
        "output": "def findPosition(arr, target): \n\t\n\t# check if the array is empty \n\tif len(arr) == 0: \n\t\treturn -1\n\t\n\t# start the search from the beginning of the array \n\tstart = 0\n\t\n\t# search until the end of the array \n\tend = len(arr) - 1\n\t\n\t# loop until the start index is less than the end index \n\twhile start <= end: \n\t\t\n\t\t# find the middle index \n\t\tmid = start + (end - start) // 2\n\t\t\n\t\t# check if the current element is greater, smaller or equal to the target\n\t\tif arr[mid] > target: \n\t\t\tend = mid - 1\n\t\telif arr[mid] < target: \n\t\t\tstart = mid + 1\n\t\telse: \n\t\t\treturn mid \n\t\t\n\t# if the search failed  \n\treturn -1\n \npos = findPosition(array, target) \nif pos == -1: \n\tprint (\"Number not found\") \nelse: \n\tprint (\"Number found at index\", pos)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a search algorithm in Python which returns the position of a number in a given list.\n\n### Input:\narray = [2, 3, 4, 5, 7, 8, 9] \ntarget = 7\n\n### Output:\ndef findPosition(arr, target): \n\t\n\t# check if the array is empty \n\tif len(arr) == 0: \n\t\treturn -1\n\t\n\t# start the search from the beginning of the array \n\tstart = 0\n\t\n\t# search until the end of the array \n\tend = len(arr) - 1\n\t\n\t# loop until the start index is less than the end index \n\twhile start <= end: \n\t\t\n\t\t# find the middle index \n\t\tmid = start + (end - start) // 2\n\t\t\n\t\t# check if the current element is greater, smaller or equal to the target\n\t\tif arr[mid] > target: \n\t\t\tend = mid - 1\n\t\telif arr[mid] < target: \n\t\t\tstart = mid + 1\n\t\telse: \n\t\t\treturn mid \n\t\t\n\t# if the search failed  \n\treturn -1\n \npos = findPosition(array, target) \nif pos == -1: \n\tprint (\"Number not found\") \nelse: \n\tprint (\"Number found at index\", pos)"
    },
    {
        "instruction": "Write code in Python to create a dictionary with two keys, \"x\" and \"y\", and their values of 7 and 8 respectively.",
        "input": "<no input>",
        "output": "dictionary = {\n    \"x\" : 7,\n    \"y\" : 8\n}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code in Python to create a dictionary with two keys, \"x\" and \"y\", and their values of 7 and 8 respectively.\n\n### Input:\n<no input>\n\n### Output:\ndictionary = {\n    \"x\" : 7,\n    \"y\" : 8\n}"
    },
    {
        "instruction": "Write a Python program to generate N random numbers.",
        "input": "5",
        "output": "import random\n\nrandom_numbers = []\n\nfor _ in range(5):\n  random_numbers.append(random.random()) \n\nprint(random_numbers)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate N random numbers.\n\n### Input:\n5\n\n### Output:\nimport random\n\nrandom_numbers = []\n\nfor _ in range(5):\n  random_numbers.append(random.random()) \n\nprint(random_numbers)"
    },
    {
        "instruction": "Create a class in python that represents a circle and contains functions to calculate the area and circumference.",
        "input": "",
        "output": "class Circle:\n    def __init__ (self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.1416 * self.radius ** 2\n\n    def circumference(self):\n        return 2 * 3.1416 * self.radius",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in python that represents a circle and contains functions to calculate the area and circumference.\n\n### Input:\n\n\n### Output:\nclass Circle:\n    def __init__ (self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.1416 * self.radius ** 2\n\n    def circumference(self):\n        return 2 * 3.1416 * self.radius"
    },
    {
        "instruction": "Find the value of x in the following equation using a numerical calculation method in Python.",
        "input": "ax+by = 0\nx = 3\ny = 4\na = 5\nb = 7",
        "output": "# define variables\na = 5\nb = 7\nx = 3\ny = 4\n\n# calculate x\nx = (0 - (b*y))/a\n\nprint(x)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the value of x in the following equation using a numerical calculation method in Python.\n\n### Input:\nax+by = 0\nx = 3\ny = 4\na = 5\nb = 7\n\n### Output:\n# define variables\na = 5\nb = 7\nx = 3\ny = 4\n\n# calculate x\nx = (0 - (b*y))/a\n\nprint(x)"
    },
    {
        "instruction": "Write a function in Python that creates a random password of length 8 with at least two uppercase letters, one lowercase letter, one number, and one special character.",
        "input": "Not applicable",
        "output": "import random\nimport string\n\ndef random_password():\n  char_length = 8\n  characters = string.ascii_letters + string.digits + string.punctuation\n  password = ''.join(random.choice(characters) for x in range(char_length))\n  has_uppercase = any(x.isupper() for x in password)\n  has_lowercase = any(x.islower() for x in password)\n  has_numbers = any(x.isnumeric() for x in password)\n  has_specials = any(x in string.punctuation for x in password)\n  if has_uppercase+has_lowercase+has_numbers+has_specials >= 3:\n    return password\n  else:\n    return random_password()\n\npwd = random_password",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that creates a random password of length 8 with at least two uppercase letters, one lowercase letter, one number, and one special character.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\nimport string\n\ndef random_password():\n  char_length = 8\n  characters = string.ascii_letters + string.digits + string.punctuation\n  password = ''.join(random.choice(characters) for x in range(char_length))\n  has_uppercase = any(x.isupper() for x in password)\n  has_lowercase = any(x.islower() for x in password)\n  has_numbers = any(x.isnumeric() for x in password)\n  has_specials = any(x in string.punctuation for x in password)\n  if has_uppercase+has_lowercase+has_numbers+has_specials >= 3:\n    return password\n  else:\n    return random_password()\n\npwd = random_password"
    },
    {
        "instruction": "Implement an algorithm in Python that finds the Nth Fibonacci Number.",
        "input": "",
        "output": "def Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm in Python that finds the Nth Fibonacci Number.\n\n### Input:\n\n\n### Output:\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)"
    },
    {
        "instruction": "Create a Python program to find the sum of all numbers in a given string that can represent a mathematical expression.",
        "input": "",
        "output": "import re\n\ndef sum_expression(expression):\n sum = 0\n \n # Extract all numbers from the expression\n numbers = re.findall(r\"\\d+\", expression)\n \n # Calculate the sum\n for num in numbers:\n sum += int(num)\n \n return sum\n\n# Driver code\nexpression = \"2 + 4 - 7 + 3 + 4 - 8\"\nresult = sum_expression(expression)\n\nprint(\"Sum of the expression:\", result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find the sum of all numbers in a given string that can represent a mathematical expression.\n\n### Input:\n\n\n### Output:\nimport re\n\ndef sum_expression(expression):\n sum = 0\n \n # Extract all numbers from the expression\n numbers = re.findall(r\"\\d+\", expression)\n \n # Calculate the sum\n for num in numbers:\n sum += int(num)\n \n return sum\n\n# Driver code\nexpression = \"2 + 4 - 7 + 3 + 4 - 8\"\nresult = sum_expression(expression)\n\nprint(\"Sum of the expression:\", result)"
    },
    {
        "instruction": "Convert a C++ program to a Python program.",
        "input": "#include <iostream>\n\nint main()\n{\n    std::cout << \"Hello World!\";\n    return 0;\n}",
        "output": "print(\"Hello World!\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a C++ program to a Python program.\n\n### Input:\n#include <iostream>\n\nint main()\n{\n    std::cout << \"Hello World!\";\n    return 0;\n}\n\n### Output:\nprint(\"Hello World!\")"
    },
    {
        "instruction": "How can you generate a random number between 1 to 10 using Python?",
        "input": "",
        "output": "import random\n\nrandom.seed()\n\nprint(random.randint(1, 10))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow can you generate a random number between 1 to 10 using Python?\n\n### Input:\n\n\n### Output:\nimport random\n\nrandom.seed()\n\nprint(random.randint(1, 10))"
    },
    {
        "instruction": "Write a Python program to split a list into two parts, where the size of the first part is determined by the user.",
        "input": "[1, 2, 3, 4, 5, 6, 7]",
        "output": "def split_list(lst, size):\n    part1 = lst[:size]\n    part2 = lst[size:]\n    return part1, part2\n\n# example\nmy_list = [1, 2, 3, 4, 5, 6, 7]\npart1, part2 = split_list(my_list, 3)\nprint(part1) # [1, 2, 3]\nprint(part2) # [4, 5, 6, 7]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to split a list into two parts, where the size of the first part is determined by the user.\n\n### Input:\n[1, 2, 3, 4, 5, 6, 7]\n\n### Output:\ndef split_list(lst, size):\n    part1 = lst[:size]\n    part2 = lst[size:]\n    return part1, part2\n\n# example\nmy_list = [1, 2, 3, 4, 5, 6, 7]\npart1, part2 = split_list(my_list, 3)\nprint(part1) # [1, 2, 3]\nprint(part2) # [4, 5, 6, 7]"
    },
    {
        "instruction": "Create a Python program to calculate the Factorial of a positive integer.",
        "input": "n = 4",
        "output": "def Factorial(n): \n    if (n == 0): \n        return 1\n    else: \n        return n * Factorial(n - 1) \n  \n# Compute and print result \nresult = Factorial(n) \nprint(f\"Factorial of {n} is {result}\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the Factorial of a positive integer.\n\n### Input:\nn = 4\n\n### Output:\ndef Factorial(n): \n    if (n == 0): \n        return 1\n    else: \n        return n * Factorial(n - 1) \n  \n# Compute and print result \nresult = Factorial(n) \nprint(f\"Factorial of {n} is {result}\")"
    },
    {
        "instruction": "Create a class in Python to represent a 2-D point and implement a method for finding the Euclidean distance between the two points.",
        "input": "p1 = (3, 4)\np2 = (7, 8)",
        "output": "class Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def distance(self, point):\n        x_diff = self.x - point.x\n        y_diff = self.y - point.y\n        return math.sqrt(x_diff**2 + y_diff**2)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to represent a 2-D point and implement a method for finding the Euclidean distance between the two points.\n\n### Input:\np1 = (3, 4)\np2 = (7, 8)\n\n### Output:\nclass Point:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def distance(self, point):\n        x_diff = self.x - point.x\n        y_diff = self.y - point.y\n        return math.sqrt(x_diff**2 + y_diff**2)"
    },
    {
        "instruction": "Create a Python class called Car with properties for make, model, year, color and fuel type.",
        "input": "Not applicable",
        "output": "class Car:\n  def __init__(self, make, model, year, color, fuel):\n    self.make = make\n    self.model = model\n    self.year = year\n    self.color = color\n    self.fuel = fuel\n    \n  def get_make(self):\n    return self.make\n    \n  def get_model(self):\n    return self.model\n    \n  def get_year(self):\n    return self.year\n    \n  def get_color(self):\n    return self.color\n    \n  def get_fuel(self):\n    return self.fuel",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class called Car with properties for make, model, year, color and fuel type.\n\n### Input:\nNot applicable\n\n### Output:\nclass Car:\n  def __init__(self, make, model, year, color, fuel):\n    self.make = make\n    self.model = model\n    self.year = year\n    self.color = color\n    self.fuel = fuel\n    \n  def get_make(self):\n    return self.make\n    \n  def get_model(self):\n    return self.model\n    \n  def get_year(self):\n    return self.year\n    \n  def get_color(self):\n    return self.color\n    \n  def get_fuel(self):\n    return self.fuel"
    },
    {
        "instruction": "Generate a random number between 0 and 1 in Python.",
        "input": "",
        "output": "import random\n\nrandomNumber = random.random()\nprint(randomNumber)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random number between 0 and 1 in Python.\n\n### Input:\n\n\n### Output:\nimport random\n\nrandomNumber = random.random()\nprint(randomNumber)"
    },
    {
        "instruction": "Generate a correct Python program to compute the maximum sub array sum",
        "input": "",
        "output": "def max_sub_array_sum(arr): \n    max_sum = 0\n    for i in range(len(arr)): \n        ans = 0\n        for j in range(i, len(arr)): \n            ans += arr[j]  \n            max_sum = max(max_sum, ans) \n    return max_sum",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a correct Python program to compute the maximum sub array sum\n\n### Input:\n\n\n### Output:\ndef max_sub_array_sum(arr): \n    max_sum = 0\n    for i in range(len(arr)): \n        ans = 0\n        for j in range(i, len(arr)): \n            ans += arr[j]  \n            max_sum = max(max_sum, ans) \n    return max_sum"
    },
    {
        "instruction": "Create a Python program which takes a list of words as input, and prints out the frequent words.",
        "input": "Words: [\"python\", \"is\", \"a\", \"programming\", \"language\"]",
        "output": "from collections import Counter\n\nwords = [\"python\", \"is\", \"a\", \"programming\", \"language\"]\n\nword_count = Counter(words) \n\nfor k,v in word_count.items(): \n    print(k,v) \n\n# To get the most frequent word \nmost_freq_word = max(word_count, key=word_count.get) \n\nprint(\"Most frequent word is:\", most_freq_word)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program which takes a list of words as input, and prints out the frequent words.\n\n### Input:\nWords: [\"python\", \"is\", \"a\", \"programming\", \"language\"]\n\n### Output:\nfrom collections import Counter\n\nwords = [\"python\", \"is\", \"a\", \"programming\", \"language\"]\n\nword_count = Counter(words) \n\nfor k,v in word_count.items(): \n    print(k,v) \n\n# To get the most frequent word \nmost_freq_word = max(word_count, key=word_count.get) \n\nprint(\"Most frequent word is:\", most_freq_word)"
    },
    {
        "instruction": "This code sets up an MQTT RPC server. To use it, you need to import the necessary libraries and create an instance of the TMQTTRPCServer class, passing in a Mosquitto client and a driver ID. Then, call the setup method on the server instance to subscribe to the appropriate MQTT topics. Finally, start the Mosquitto client loop to begin listening for incoming messages.",
        "input": "",
        "output": "#!/usr/bin/python\nimport argparse\n\ntry:\n    import mosquitto\nexcept ImportError:\n    import paho.mqtt.client as mosquitto\n\nimport time, random\nimport sys\n\nfrom mqttrpc import MQTTRPCResponseManager, dispatcher\n\nimport logging\nlogging.getLogger().setLevel(logging.DEBUG)\n\n@dispatcher.add_method\ndef foobar(**kwargs):\n    return kwargs[\"foo\"] + kwargs[\"bar\"]\n\n\n\nclass TMQTTRPCServer(object):\n    def __init__(self, client, driver_id):\n        self.client = client\n        self.driver_id = driver_id\n\n    def on_mqtt_message(self, mosq, obj, msg):\n        print msg.topic\n        print msg.payload\n\n        parts = msg.topic.split('/')\n        driver_id = parts[3]\n        service_id = parts[4]\n        method_id = parts[5]\n        client_id = parts[6]\n\n\n        response = MQTTRPCResponseManager.handle(msg.payload, service_id, method_id, dispatcher)\n\n        self.client.publish(\"/rpc/v1/%s/%s/%s/%s/reply\" % (self.driver_id, service_id, method_id, client_id ), response.json)\n\n\n    def setup(self):\n        for service, method in dispatcher.iterkeys():\n            self.client.publish(\"/rpc/v1/%s/%s/%s\" % (self.driver_id, service, method), \"1\", retain=True)\n\n            self.client.subscribe(\"/rpc/v1/%s/%s/%s/+\" % (self.driver_id, service, method))\n\n\n\n\n\n\n# Dispatcher is dictionary {<method_name>: callable}\ndispatcher[(\"test\", \"echo\")] = lambda s: s\ndispatcher[(\"test\", \"add\")] = lambda a, b: a + b\n\n\n\n\nif __name__ =='__main__':\n    parser = argparse.ArgumentParser(description='Sample RPC server', add_help=False)\n\n    parser.add_argument('-h', '--host', dest='host', type=str,\n                     help='MQTT host', default='localhost')\n\n    parser.add_argument('-u', '--username', dest='username', type=str,\n                     help='MQTT username', default='')\n\n    parser.add_argument('-P', '--password', dest='password', type=str,\n                     help='MQTT password', default='')\n\n    parser.add_argument('-p', '--port', dest='port', type=int,\n                     help='MQTT port', default='1883')\n\n    args = parser.parse_args()\n    client = mosquitto.Mosquitto()\n\n    if args.username:\n        client.username_pw_set(args.username, args.password)\n\n\n    rpc_server = TMQTTRPCServer(client, 'Driver')\n\n    client.connect(args.host, args.port)\n    client.on_message = rpc_server.on_mqtt_message\n    rpc_server.setup()\n\n\n    while 1:\n        rc = client.loop()\n        if rc != 0:\n            break\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code sets up an MQTT RPC server. To use it, you need to import the necessary libraries and create an instance of the TMQTTRPCServer class, passing in a Mosquitto client and a driver ID. Then, call the setup method on the server instance to subscribe to the appropriate MQTT topics. Finally, start the Mosquitto client loop to begin listening for incoming messages.\n\n### Input:\n\n\n### Output:\n#!/usr/bin/python\nimport argparse\n\ntry:\n    import mosquitto\nexcept ImportError:\n    import paho.mqtt.client as mosquitto\n\nimport time, random\nimport sys\n\nfrom mqttrpc import MQTTRPCResponseManager, dispatcher\n\nimport logging\nlogging.getLogger().setLevel(logging.DEBUG)\n\n@dispatcher.add_method\ndef foobar(**kwargs):\n    return kwargs[\"foo\"] + kwargs[\"bar\"]\n\n\n\nclass TMQTTRPCServer(object):\n    def __init__(self, client, driver_id):\n        self.client = client\n        self.driver_id = driver_id\n\n    def on_mqtt_message(self, mosq, obj, msg):\n        print msg.topic\n        print msg.payload\n\n        parts = msg.topic.split('/')\n        driver_id = parts[3]\n        service_id = parts[4]\n        method_id = parts[5]\n        client_id = parts[6]\n\n\n        response = MQTTRPCResponseManager.handle(msg.payload, service_id, method_id, dispatcher)\n\n        self.client.publish(\"/rpc/v1/%s/%s/%s/%s/reply\" % (self.driver_id, service_id, method_id, client_id ), response.json)\n\n\n    def setup(self):\n        for service, method in dispatcher.iterkeys():\n            self.client.publish(\"/rpc/v1/%s/%s/%s\" % (self.driver_id, service, method), \"1\", retain=True)\n\n            self.client.subscribe(\"/rpc/v1/%s/%s/%s/+\" % (self.driver_id, service, method))\n\n\n\n\n\n\n# Dispatcher is dictionary {<method_name>: callable}\ndispatcher[(\"test\", \"echo\")] = lambda s: s\ndispatcher[(\"test\", \"add\")] = lambda a, b: a + b\n\n\n\n\nif __name__ =='__main__':\n    parser = argparse.ArgumentParser(description='Sample RPC server', add_help=False)\n\n    parser.add_argument('-h', '--host', dest='host', type=str,\n                     help='MQTT host', default='localhost')\n\n    parser.add_argument('-u', '--username', dest='username', type=str,\n                     help='MQTT username', default='')\n\n    parser.add_argument('-P', '--password', dest='password', type=str,\n                     help='MQTT password', default='')\n\n    parser.add_argument('-p', '--port', dest='port', type=int,\n                     help='MQTT port', default='1883')\n\n    args = parser.parse_args()\n    client = mosquitto.Mosquitto()\n\n    if args.username:\n        client.username_pw_set(args.username, args.password)\n\n\n    rpc_server = TMQTTRPCServer(client, 'Driver')\n\n    client.connect(args.host, args.port)\n    client.on_message = rpc_server.on_mqtt_message\n    rpc_server.setup()\n\n\n    while 1:\n        rc = client.loop()\n        if rc != 0:\n            break\n"
    },
    {
        "instruction": "Implement a function in Python that takes an array of strings and returns a list of all strings that have length greater than 6",
        "input": "[\"testing\", \"this\",\"array\"]",
        "output": "def getStringsWithLength(array):\n    output = []\n    for x in array:\n        if len(x) > 6:\n            output.append(x)\n    return output\n\nprint(getStringsWithLength([\"testing\", \"this\",\"array\"]))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python that takes an array of strings and returns a list of all strings that have length greater than 6\n\n### Input:\n[\"testing\", \"this\",\"array\"]\n\n### Output:\ndef getStringsWithLength(array):\n    output = []\n    for x in array:\n        if len(x) > 6:\n            output.append(x)\n    return output\n\nprint(getStringsWithLength([\"testing\", \"this\",\"array\"]))"
    },
    {
        "instruction": "Create a Python program to generate a multiplication table.",
        "input": "",
        "output": "def generate_table():\n    for i in range(1, 11):\n        for j in range(1, 11):\n             print('{0} x {1} = {2}'.format(i, j, i*j))\n        print('\\n')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a multiplication table.\n\n### Input:\n\n\n### Output:\ndef generate_table():\n    for i in range(1, 11):\n        for j in range(1, 11):\n             print('{0} x {1} = {2}'.format(i, j, i*j))\n        print('\\n')"
    },
    {
        "instruction": "Create a python script to generate random passwords.",
        "input": "",
        "output": "\"\"\"\nCreate a python script to generate random passwords \n\n\"\"\"\nimport string\nimport random\n\ndef generate_password(length=16, chars=string.ascii_letters + string.digits + string.punctuation):\n    return ''.join(random.choice(chars) for _ in range(length))\n\nif __name__ == '__main__':\n    print(generate_password())",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script to generate random passwords.\n\n### Input:\n\n\n### Output:\n\"\"\"\nCreate a python script to generate random passwords \n\n\"\"\"\nimport string\nimport random\n\ndef generate_password(length=16, chars=string.ascii_letters + string.digits + string.punctuation):\n    return ''.join(random.choice(chars) for _ in range(length))\n\nif __name__ == '__main__':\n    print(generate_password())"
    },
    {
        "instruction": "Merge two dictionaries into one using Python.",
        "input": "dict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}",
        "output": "def merge_dictionaries(dict1, dict2):\n    res = {**dict1, **dict2} \n    return res\n\nprint(merge_dictionaries(dict1, dict2)) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMerge two dictionaries into one using Python.\n\n### Input:\ndict1 = {'a': 1, 'b': 2}\ndict2 = {'c': 3, 'd': 4}\n\n### Output:\ndef merge_dictionaries(dict1, dict2):\n    res = {**dict1, **dict2} \n    return res\n\nprint(merge_dictionaries(dict1, dict2)) # Output: {'a': 1, 'b': 2, 'c': 3, 'd': 4}"
    },
    {
        "instruction": "Automate the task of checking if an array of numbers is in sorted order using a Python program.",
        "input": "[2, 3, 6, 4, 8]",
        "output": "def is_sorted(nums):\n    for i, num in enumerate(nums[:-1]):\n        if num > nums[i + 1]:\n            return False\n    return True",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAutomate the task of checking if an array of numbers is in sorted order using a Python program.\n\n### Input:\n[2, 3, 6, 4, 8]\n\n### Output:\ndef is_sorted(nums):\n    for i, num in enumerate(nums[:-1]):\n        if num > nums[i + 1]:\n            return False\n    return True"
    },
    {
        "instruction": "Write a function in Python which takes a list of numbers as input and outputs a list with each element multiplied by two.",
        "input": "[3, 5, 8, 9]",
        "output": "def list_multiplication(nums):\n    output_list = []\n    for i in range(len(nums)):\n        output_list.append(nums[i] * 2)\n    return output_list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python which takes a list of numbers as input and outputs a list with each element multiplied by two.\n\n### Input:\n[3, 5, 8, 9]\n\n### Output:\ndef list_multiplication(nums):\n    output_list = []\n    for i in range(len(nums)):\n        output_list.append(nums[i] * 2)\n    return output_list"
    },
    {
        "instruction": "Code a function in Python to find the maximum value in a dictionary.",
        "input": "",
        "output": "def max_in_dictionary(dic):\n    max_value = float('-inf')\n    for key,value in dic.items():\n        if value > max_value:\n            max_value = value\n    return max_value",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a function in Python to find the maximum value in a dictionary.\n\n### Input:\n\n\n### Output:\ndef max_in_dictionary(dic):\n    max_value = float('-inf')\n    for key,value in dic.items():\n        if value > max_value:\n            max_value = value\n    return max_value"
    },
    {
        "instruction": "Develop a code in Python to find the first unique character in a given string.",
        "input": "string = \"Hello World!\"",
        "output": "def first_non_repeating_character(string):\n  seen_letter_dict = {}\n\n  # Iterate over string and record counts\n  for letter in string:\n    if letter not in seen_letter_dict:\n      seen_letter_dict[letter] = 1\n    else: \n      seen_letter_dict[letter] += 1\n\n  # Check if any letter has count 1\n  for letter in string:\n    if seen_letter_dict[letter] == 1:\n      return letter\n\n  return None\n\nfirst_unique = first_non_repeating_character(string)\n\nprint(first_unique)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a code in Python to find the first unique character in a given string.\n\n### Input:\nstring = \"Hello World!\"\n\n### Output:\ndef first_non_repeating_character(string):\n  seen_letter_dict = {}\n\n  # Iterate over string and record counts\n  for letter in string:\n    if letter not in seen_letter_dict:\n      seen_letter_dict[letter] = 1\n    else: \n      seen_letter_dict[letter] += 1\n\n  # Check if any letter has count 1\n  for letter in string:\n    if seen_letter_dict[letter] == 1:\n      return letter\n\n  return None\n\nfirst_unique = first_non_repeating_character(string)\n\nprint(first_unique)"
    },
    {
        "instruction": "Given an input sentence with 4 different words, create a python program that phrases each word with the same first letter.",
        "input": "Hello World Goodbye Mars",
        "output": "\"\"\"\nGiven an input sentence with 4 different words, create a python program that phrases each word with the same first letter\n\"\"\"\n\nwords = 'Hello World Goodbye Mars'.split()\n\nfor word in words:\n  print(word[0] + word[1:])",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an input sentence with 4 different words, create a python program that phrases each word with the same first letter.\n\n### Input:\nHello World Goodbye Mars\n\n### Output:\n\"\"\"\nGiven an input sentence with 4 different words, create a python program that phrases each word with the same first letter\n\"\"\"\n\nwords = 'Hello World Goodbye Mars'.split()\n\nfor word in words:\n  print(word[0] + word[1:])"
    },
    {
        "instruction": "Create a Python program that reads in a restaurant menu in JSON format and processes it to produce an output with prices in USD and a total cost.",
        "input": "{\n  \"name\": \"Delicious Pizza\",\n  \"meals\": [\n    {\n      \"name\": \"Pepperoni\",\n      \"price\": 4.95\n    },\n    {\n      \"name\": \"Cheese\",\n      \"price\": 3.95\n    },\n    {\n      \"name\": \"Sausage\",\n      \"price\": 5.95\n    }\n  ]\n}",
        "output": "import json\ndef process_menu(menu):\n total = 0\n for meal in menu['meals']:\n  cost = meal['price']\n  cost_usd = \"$\" + str(cost)\n  print(f\"{meal['name']}: {cost_usd}\")\n  total += cost\n total_usd = \"$\" + str(total)\n print(f\"Total cost: {total_usd}\")\n \n\nwith open('menu.json') as f:\n menu = json.load(f)\n process_menu(menu)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that reads in a restaurant menu in JSON format and processes it to produce an output with prices in USD and a total cost.\n\n### Input:\n{\n  \"name\": \"Delicious Pizza\",\n  \"meals\": [\n    {\n      \"name\": \"Pepperoni\",\n      \"price\": 4.95\n    },\n    {\n      \"name\": \"Cheese\",\n      \"price\": 3.95\n    },\n    {\n      \"name\": \"Sausage\",\n      \"price\": 5.95\n    }\n  ]\n}\n\n### Output:\nimport json\ndef process_menu(menu):\n total = 0\n for meal in menu['meals']:\n  cost = meal['price']\n  cost_usd = \"$\" + str(cost)\n  print(f\"{meal['name']}: {cost_usd}\")\n  total += cost\n total_usd = \"$\" + str(total)\n print(f\"Total cost: {total_usd}\")\n \n\nwith open('menu.json') as f:\n menu = json.load(f)\n process_menu(menu)"
    },
    {
        "instruction": "Create a Python function to generate a histogram given a set of data.",
        "input": "[ 1, 2, 4, 5, 7, 10]",
        "output": "import matplotlib.pyplot as plt\n\ndef histogram (data): \n    plt.hist(data)\n    plt.title(\"Frequency Histogram\")\n    plt.xlabel('Data')\n    plt.ylabel('Frequency')\n    plt.show()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to generate a histogram given a set of data.\n\n### Input:\n[ 1, 2, 4, 5, 7, 10]\n\n### Output:\nimport matplotlib.pyplot as plt\n\ndef histogram (data): \n    plt.hist(data)\n    plt.title(\"Frequency Histogram\")\n    plt.xlabel('Data')\n    plt.ylabel('Frequency')\n    plt.show()"
    },
    {
        "instruction": "Create a Python program to perform KNearest Neighbours algorithm on a given dataset.",
        "input": "Dataset: \nsamples = [[2.7810836,2.550537003,0],\n[1.465489372,2.362125076,0],\n[3.396561688,4.400293529,0],\n[1.38807019,1.850220317,0],\n[3.06407232,3.005305973,0],\n[7.627531214,2.759262235,1],\n[5.332441248,2.088626775,1],\n[6.922596716,1.77106367,1],\n[8.675418651,-0.242068655,1],\n        [7.673756466,3.508563011,1]]",
        "output": "import numpy as np\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Create the dataset\nsamples = np.array(samples)\nX = samples[:, :2]\ny = samples[:, -1]\n\n# Create the K Nearest Neighbors classifier\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X, y)\n\n# Predict for the given input sample\nx_sample = np.array([4, 4])\nprediction = knn.predict([x_sample])[0]\n\nprint('Prediction for the sample {}: {}'.format(x_sample, prediction))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to perform KNearest Neighbours algorithm on a given dataset.\n\n### Input:\nDataset: \nsamples = [[2.7810836,2.550537003,0],\n[1.465489372,2.362125076,0],\n[3.396561688,4.400293529,0],\n[1.38807019,1.850220317,0],\n[3.06407232,3.005305973,0],\n[7.627531214,2.759262235,1],\n[5.332441248,2.088626775,1],\n[6.922596716,1.77106367,1],\n[8.675418651,-0.242068655,1],\n        [7.673756466,3.508563011,1]]\n\n### Output:\nimport numpy as np\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Create the dataset\nsamples = np.array(samples)\nX = samples[:, :2]\ny = samples[:, -1]\n\n# Create the K Nearest Neighbors classifier\nknn = KNeighborsClassifier(n_neighbors=3)\nknn.fit(X, y)\n\n# Predict for the given input sample\nx_sample = np.array([4, 4])\nprediction = knn.predict([x_sample])[0]\n\nprint('Prediction for the sample {}: {}'.format(x_sample, prediction))"
    },
    {
        "instruction": "Create a Python algorithm to predict the house prices using the given dataset.",
        "input": "",
        "output": "import numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Read the data \ndata = pd.read_csv('housing_data.csv')\n\n# Features and labels\nX = data[['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors']]\ny = data['price']\n\n# Create the model \nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Predict the house prices\npredictions = model.predict(X)\n\n# Print the predictions\nprint('Predicted Prices:', predictions)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python algorithm to predict the house prices using the given dataset.\n\n### Input:\n\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Read the data \ndata = pd.read_csv('housing_data.csv')\n\n# Features and labels\nX = data[['bedrooms', 'bathrooms', 'sqft_living', 'sqft_lot', 'floors']]\ny = data['price']\n\n# Create the model \nmodel = LinearRegression()\nmodel.fit(X, y)\n\n# Predict the house prices\npredictions = model.predict(X)\n\n# Print the predictions\nprint('Predicted Prices:', predictions)"
    },
    {
        "instruction": "Create a function in Python to transform an input string into an HTML table.",
        "input": "Name, Age, Gender\nJohn, 25, Male\nAmanda, 23, Female",
        "output": "def create_html_table(inp):\n    lines = inp.split('\\n')\n    col_names = lines[0]\n    col_names = col_names.split(',')\n    \n    html = \"<table><thead><tr>\"\n    for c in col_names:\n        html += \"<th>{0}</th>\".format(c)\n    html += \"</tr></thead><tbody>\"\n\n    for i in range(1, len(lines)):\n        row = lines[i].split(',')\n        html += \"<tr>\"\n        for r in row:\n            html += \"<td>{0}</td>\".format(r)\n        html += \"</tr>\"\n\n    html += \"</tbody></table>\"\n    return html\n\ninp = \"\"\"Name, Age, Gender\nJohn, 25, Male\nAmanda, 23, Female\"\"\"\n\nprint(create_html_table(inp))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to transform an input string into an HTML table.\n\n### Input:\nName, Age, Gender\nJohn, 25, Male\nAmanda, 23, Female\n\n### Output:\ndef create_html_table(inp):\n    lines = inp.split('\\n')\n    col_names = lines[0]\n    col_names = col_names.split(',')\n    \n    html = \"<table><thead><tr>\"\n    for c in col_names:\n        html += \"<th>{0}</th>\".format(c)\n    html += \"</tr></thead><tbody>\"\n\n    for i in range(1, len(lines)):\n        row = lines[i].split(',')\n        html += \"<tr>\"\n        for r in row:\n            html += \"<td>{0}</td>\".format(r)\n        html += \"</tr>\"\n\n    html += \"</tbody></table>\"\n    return html\n\ninp = \"\"\"Name, Age, Gender\nJohn, 25, Male\nAmanda, 23, Female\"\"\"\n\nprint(create_html_table(inp))"
    },
    {
        "instruction": "Develop a machine learning model for predicting stock price using Python.",
        "input": "Financial data of 10 different stocks",
        "output": "# Import modules\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Read in the data\ndata = pd.read_csv('data.csv')\n\n# Seperate data into dependent variable (y) and independent variables (X)\ny = data.pop('price')\nX = data\n\n# Instantiate the model\nmodel = LinearRegression()\n\n# Fit the model to the data\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a machine learning model for predicting stock price using Python.\n\n### Input:\nFinancial data of 10 different stocks\n\n### Output:\n# Import modules\nimport pandas as pd\nfrom sklearn.linear_model import LinearRegression\n\n# Read in the data\ndata = pd.read_csv('data.csv')\n\n# Seperate data into dependent variable (y) and independent variables (X)\ny = data.pop('price')\nX = data\n\n# Instantiate the model\nmodel = LinearRegression()\n\n# Fit the model to the data\nmodel.fit(X, y)\n\n# Make predictions\npredictions = model.predict(X)"
    },
    {
        "instruction": "Develop a classifier in Python to predict whether a bank loan application is approved or denied.",
        "input": "Table Name: Loan Applications\n\nColumns:\n- id: int\n- applicant_age: int\n- debt: int\n- income: int\n- approved: int",
        "output": "# Imports\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Read in the data\ndata = pd.read_csv(\"data/loan_applications.csv\")\n\n# Define features and labels\nX = data.drop(columns=['approved'])\ny = data['approved']\n\n# Preprocess the data\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\n# Split the data into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n\n# Build the model\nmodel = RandomForestClassifier(max_depth=10, random_state=1)\n\n# Train the model\nmodel.fit(X_train, y_train)\n\n# Test the model\ny_pred = model.predict(X_test)\n\n# Calculate accuracy\naccuracy = model.score(X_test, y_test)\nprint(accuracy)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a classifier in Python to predict whether a bank loan application is approved or denied.\n\n### Input:\nTable Name: Loan Applications\n\nColumns:\n- id: int\n- applicant_age: int\n- debt: int\n- income: int\n- approved: int\n\n### Output:\n# Imports\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\n\n# Read in the data\ndata = pd.read_csv(\"data/loan_applications.csv\")\n\n# Define features and labels\nX = data.drop(columns=['approved'])\ny = data['approved']\n\n# Preprocess the data\nscaler = StandardScaler()\nX = scaler.fit_transform(X)\n\n# Split the data into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n\n# Build the model\nmodel = RandomForestClassifier(max_depth=10, random_state=1)\n\n# Train the model\nmodel.fit(X_train, y_train)\n\n# Test the model\ny_pred = model.predict(X_test)\n\n# Calculate accuracy\naccuracy = model.score(X_test, y_test)\nprint(accuracy)"
    },
    {
        "instruction": "Write a Python program to decrypt a given ciphertext using a simple substitution cipher.",
        "input": "ciphertext = \"sfls tfhq stlr phqz qfacj\"",
        "output": "plaintext = \"\"\n\n# dictionary of cipher alphabet and plain alphabet \ncipher_alphabet = {'s':'a', 'f':'b', 'l':'c', 't':'d', 'h':'e', \n                   'q':'f', 'p':'g', 'z':'h', 'a':'i', 'c':'j'} \n\n# traverse the ciphertext \nfor char in ciphertext:\n    if char != ' ':\n        plaintext += cipher_alphabet[char] \n    else:\n        plaintext += \" \"\n\nprint(plaintext)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to decrypt a given ciphertext using a simple substitution cipher.\n\n### Input:\nciphertext = \"sfls tfhq stlr phqz qfacj\"\n\n### Output:\nplaintext = \"\"\n\n# dictionary of cipher alphabet and plain alphabet \ncipher_alphabet = {'s':'a', 'f':'b', 'l':'c', 't':'d', 'h':'e', \n                   'q':'f', 'p':'g', 'z':'h', 'a':'i', 'c':'j'} \n\n# traverse the ciphertext \nfor char in ciphertext:\n    if char != ' ':\n        plaintext += cipher_alphabet[char] \n    else:\n        plaintext += \" \"\n\nprint(plaintext)"
    },
    {
        "instruction": "Design a program in Python that will determine the closeness of a given color to a target color.",
        "input": "",
        "output": "import colorsys\n\ndef get_closeness_to_target(source_rgb, target_rgb):\n    \"\"\"\n    Compute the closeness of a given color to a target color\n    \"\"\"\n    source_hls = colorsys.rgb_to_hls(*source_rgb)\n    target_hls = colorsys.rgb_to_hls(*target_rgb)\n\n    # Compute Euclidean distance between the two color's attributes\n    h_dist = (source_hls[0] - target_hls[0])**2\n    l_dist = (source_hls[1] - target_hls[1])**2\n    s_dist = (source_hls[2] - target_hls[2])**2\n\n    closeness = (h_dist + l_dist + s_dist)**0.5\n    return closeness",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program in Python that will determine the closeness of a given color to a target color.\n\n### Input:\n\n\n### Output:\nimport colorsys\n\ndef get_closeness_to_target(source_rgb, target_rgb):\n    \"\"\"\n    Compute the closeness of a given color to a target color\n    \"\"\"\n    source_hls = colorsys.rgb_to_hls(*source_rgb)\n    target_hls = colorsys.rgb_to_hls(*target_rgb)\n\n    # Compute Euclidean distance between the two color's attributes\n    h_dist = (source_hls[0] - target_hls[0])**2\n    l_dist = (source_hls[1] - target_hls[1])**2\n    s_dist = (source_hls[2] - target_hls[2])**2\n\n    closeness = (h_dist + l_dist + s_dist)**0.5\n    return closeness"
    },
    {
        "instruction": "This code is a Python script that defines a class called \"source\" and several methods within it. To use this code, import the necessary modules and create an instance of the \"source\" class. Then, call the appropriate methods to perform actions such as searching for movies or TV shows, retrieving sources for a given URL, or resolving a URL. The code also includes a license statement at the beginning, which should be retained if the code is used or modified.",
        "input": "",
        "output": "# -*- coding: UTF-8 -*-\n#######################################################################\n # ----------------------------------------------------------------------------\n # \"THE BEER-WARE LICENSE\" (Revision 42):\n # @tantrumdev wrote this file.  As long as you retain this notice you\n # can do whatever you want with this stuff. If we meet some day, and you think\n # this stuff is worth it, you can buy me a beer in return. - Muad'Dib\n # ----------------------------------------------------------------------------\n#######################################################################\n\n# Addon Name: Placenta\n# Addon id: plugin.video.placenta\n# Addon Provider: Mr.Blamo\n\nimport re, urllib, urlparse, base64, json, unicodedata\n\nfrom resources.lib.modules import cleantitle\nfrom resources.lib.modules import client\nfrom resources.lib.modules import proxy\n\n\nclass source:\n    def __init__(self):\n        self.priority = 1\n        self.language = ['fr']\n        self.domains = ['filmenstreaminghd.co']\n\n        #http://dpstreaming.tv/?s=max+steel\n        #http://dpstreaming.tv/max-steel-vostfr-streaming-telecharger/']\n\n        self.base_link = 'http://www.filmenstreaminghd.co'\n        self.key_link = '?'\n        self.moviesearch_link = 's=%s'\n        self.tvsearch_link = 's=%s'\n\n    def movie(self, imdb, title, localtitle, aliases, year):\n        try:\n            url = {'imdb': imdb, 'title': title, 'year': year}\n            url = urllib.urlencode(url)\n            return url\n        except:\n            return\n\n    def tvshow(self, imdb, tvdb, tvshowtitle, localtvshowtitle, aliases, year):\n        try:\n            url = {'imdb': imdb, 'tvdb': tvdb, 'tvshowtitle': tvshowtitle, 'year': year}\n            url = urllib.urlencode(url)\n            return url\n        except:\n            return\n\n    def episode(self, url, imdb, tvdb, title, premiered, season, episode):\n        try:\n            if url == None: return\n\n            url = urlparse.parse_qs(url)\n            url = dict([(i, url[i][0]) if url[i] else (i, '') for i in url])\n            url['title'], url['premiered'], url['season'], url['episode'] = title, premiered, season, episode\n            url = urllib.urlencode(url)\n            return url\n        except:\n            return\n\n    def sources(self, url, hostDict, hostprDict):\n        try:\n            print '-------------------------------    -------------------------------'\n            sources = []\n\n            print url\n\n            data = urlparse.parse_qs(url)\n            data = dict([(i, data[i][0]) if data[i] else (i, '') for i in data])\n\n            season = data['season'] if 'season' in data else False\n            episode = data['episode'] if 'episode' in data else False\n\n            print season, episode\n\n            if season and episode:\n                print 'TV'\n\n                self.search_link = 'query=%s&submit=Submit+Query'\n                aTitle = data['tvshowtitle']\n\n            else:\n                self.search_link = 'query=%s&submit=Submit+Query'\n                aTitle = data['title']\n\n\n            post = self.search_link % (urllib.quote_plus(cleantitle.query(aTitle)))\n            url = 'http://www.filmenstreaminghd.com/recherche/'\n\n\n            t = cleantitle.get(aTitle)\n\n            r = client.request(url, XHR=True, referer=url, post=post)\n\n            r = client.parseDOM(r, 'div', attrs={'class': 'film-k kutu-icerik kat'})\n\n            if season and episode:\n                t = t + 'saison0' + season\n\n            r = client.parseDOM(r, 'div', attrs={'class': 'play fa fa-play-circle'})\n            r = sorted(set(r))\n            r = [(client.parseDOM(r, 'a', ret='href'), client.parseDOM(r, 'a', ret='title')) for i in r]\n            r = [(i[0][0], i[1][0].lower()) for i in r if len(i[0]) > 0 and len(i[1]) > 0]\n            r = [i[0] for i in r if t == cleantitle.get(i[1])][0]\n            #r = sorted(set(r))\n\n            url0 = '%s%s' % ('http://www.filmenstreaminghd.com' , r)\n            print url0\n            url = client.replaceHTMLCodes(url0)\n            url = url0.encode('utf-8')\n\n            r = client.request(url, XHR=True, referer=url)\n            r = re.sub('(\\n|\\t)', '', r)\n\n            langue = re.compile('<b class=\\\"fa fa-cc\\\"></b><span>(.+?)</span>', re.MULTILINE | re.DOTALL).findall(r)[0]\n            if langue == 'VF':\n                langue = 'FR'\n\n            quality2 = re.compile('<div class=\\\"kalite\\\">(.+?)</div>', re.MULTILINE | re.DOTALL).findall(r)[0]\n            quality2 = re.sub('-', '', quality2)\n\n            if season and episode:\n                unLien0a = client.parseDOM(r, 'div', attrs={'class': 'dizi-bolumleri'})[0]\n                r = re.compile('Saison\\s+0%s\\s+\\-\\s+Episode\\s+0%s(.+?)class=\\\"dropit-trigger\\\">' % (season, episode), re.MULTILINE | re.DOTALL).findall(unLien0a)[0]\n                unLien0b = client.parseDOM(r, 'li', ret='id')\n            else:\n                r = client.parseDOM(r, 'div', attrs={'class': 'dizi-bolumleri film'})\n                unLien0b = client.parseDOM(r, 'span', ret='id')\n\n            counter = 0\n\n            for unLienUrl in unLien0b:\n\n                if 'gf-' in unLienUrl:\n                    continue\n\n                dataUrl = urllib.urlencode({'pid': unLienUrl[1:]})\n                dataUrl = client.request(url0, post=dataUrl, XHR=True, referer=url0)\n\n                try:\n                    url = client.parseDOM(dataUrl, 'iframe', ret='src')[1]\n                except:\n                    url = client.parseDOM(dataUrl, 'iframe', ret='src')[0]\n\n                if url.startswith('//'):\n                    url = url.replace('//', '', 1)\n\n                host = re.findall('([\\w]+[.][\\w]+)$', urlparse.urlparse(url.strip().lower()).netloc)[0]\n                if not host in hostDict: continue\n                host = client.replaceHTMLCodes(host)\n                host = host.encode('utf-8')\n\n                url = url.encode('utf-8')\n\n                if '1080p' in quality2:\n                    quality = '1080p'\n                elif '720p' in quality2 or 'bdrip' in quality2 or 'hdrip' in quality2:\n                    quality = 'HD'\n                else:\n                    quality = 'SD'\n\n                if 'dvdscr' in quality2 or 'r5' in quality2 or 'r6' in quality2:\n                    quality2 = 'SCR'\n                elif 'camrip' in quality2 or 'tsrip' in quality2 or 'hdcam' in quality2 or 'hdts' in quality2 or 'dvdcam' in quality2 or 'dvdts' in quality2 or 'cam' in quality2 or 'telesync' in quality2 or 'ts' in quality2:\n                    quality2 = 'CAM'\n\n                sources.append({'source': host, 'quality': quality, 'language': langue, 'url': url, 'direct': False, 'debridonly': False})\n\n            print sources\n\n            return sources\n        except:\n            return sources\n\n\n    def resolve(self, url):\n\n        return url\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code is a Python script that defines a class called \"source\" and several methods within it. To use this code, import the necessary modules and create an instance of the \"source\" class. Then, call the appropriate methods to perform actions such as searching for movies or TV shows, retrieving sources for a given URL, or resolving a URL. The code also includes a license statement at the beginning, which should be retained if the code is used or modified.\n\n### Input:\n\n\n### Output:\n# -*- coding: UTF-8 -*-\n#######################################################################\n # ----------------------------------------------------------------------------\n # \"THE BEER-WARE LICENSE\" (Revision 42):\n # @tantrumdev wrote this file.  As long as you retain this notice you\n # can do whatever you want with this stuff. If we meet some day, and you think\n # this stuff is worth it, you can buy me a beer in return. - Muad'Dib\n # ----------------------------------------------------------------------------\n#######################################################################\n\n# Addon Name: Placenta\n# Addon id: plugin.video.placenta\n# Addon Provider: Mr.Blamo\n\nimport re, urllib, urlparse, base64, json, unicodedata\n\nfrom resources.lib.modules import cleantitle\nfrom resources.lib.modules import client\nfrom resources.lib.modules import proxy\n\n\nclass source:\n    def __init__(self):\n        self.priority = 1\n        self.language = ['fr']\n        self.domains = ['filmenstreaminghd.co']\n\n        #http://dpstreaming.tv/?s=max+steel\n        #http://dpstreaming.tv/max-steel-vostfr-streaming-telecharger/']\n\n        self.base_link = 'http://www.filmenstreaminghd.co'\n        self.key_link = '?'\n        self.moviesearch_link = 's=%s'\n        self.tvsearch_link = 's=%s'\n\n    def movie(self, imdb, title, localtitle, aliases, year):\n        try:\n            url = {'imdb': imdb, 'title': title, 'year': year}\n            url = urllib.urlencode(url)\n            return url\n        except:\n            return\n\n    def tvshow(self, imdb, tvdb, tvshowtitle, localtvshowtitle, aliases, year):\n        try:\n            url = {'imdb': imdb, 'tvdb': tvdb, 'tvshowtitle': tvshowtitle, 'year': year}\n            url = urllib.urlencode(url)\n            return url\n        except:\n            return\n\n    def episode(self, url, imdb, tvdb, title, premiered, season, episode):\n        try:\n            if url == None: return\n\n            url = urlparse.parse_qs(url)\n            url = dict([(i, url[i][0]) if url[i] else (i, '') for i in url])\n            url['title'], url['premiered'], url['season'], url['episode'] = title, premiered, season, episode\n            url = urllib.urlencode(url)\n            return url\n        except:\n            return\n\n    def sources(self, url, hostDict, hostprDict):\n        try:\n            print '-------------------------------    -------------------------------'\n            sources = []\n\n            print url\n\n            data = urlparse.parse_qs(url)\n            data = dict([(i, data[i][0]) if data[i] else (i, '') for i in data])\n\n            season = data['season'] if 'season' in data else False\n            episode = data['episode'] if 'episode' in data else False\n\n            print season, episode\n\n            if season and episode:\n                print 'TV'\n\n                self.search_link = 'query=%s&submit=Submit+Query'\n                aTitle = data['tvshowtitle']\n\n            else:\n                self.search_link = 'query=%s&submit=Submit+Query'\n                aTitle = data['title']\n\n\n            post = self.search_link % (urllib.quote_plus(cleantitle.query(aTitle)))\n            url = 'http://www.filmenstreaminghd.com/recherche/'\n\n\n            t = cleantitle.get(aTitle)\n\n            r = client.request(url, XHR=True, referer=url, post=post)\n\n            r = client.parseDOM(r, 'div', attrs={'class': 'film-k kutu-icerik kat'})\n\n            if season and episode:\n                t = t + 'saison0' + season\n\n            r = client.parseDOM(r, 'div', attrs={'class': 'play fa fa-play-circle'})\n            r = sorted(set(r))\n            r = [(client.parseDOM(r, 'a', ret='href'), client.parseDOM(r, 'a', ret='title')) for i in r]\n            r = [(i[0][0], i[1][0].lower()) for i in r if len(i[0]) > 0 and len(i[1]) > 0]\n            r = [i[0] for i in r if t == cleantitle.get(i[1])][0]\n            #r = sorted(set(r))\n\n            url0 = '%s%s' % ('http://www.filmenstreaminghd.com' , r)\n            print url0\n            url = client.replaceHTMLCodes(url0)\n            url = url0.encode('utf-8')\n\n            r = client.request(url, XHR=True, referer=url)\n            r = re.sub('(\\n|\\t)', '', r)\n\n            langue = re.compile('<b class=\\\"fa fa-cc\\\"></b><span>(.+?)</span>', re.MULTILINE | re.DOTALL).findall(r)[0]\n            if langue == 'VF':\n                langue = 'FR'\n\n            quality2 = re.compile('<div class=\\\"kalite\\\">(.+?)</div>', re.MULTILINE | re.DOTALL).findall(r)[0]\n            quality2 = re.sub('-', '', quality2)\n\n            if season and episode:\n                unLien0a = client.parseDOM(r, 'div', attrs={'class': 'dizi-bolumleri'})[0]\n                r = re.compile('Saison\\s+0%s\\s+\\-\\s+Episode\\s+0%s(.+?)class=\\\"dropit-trigger\\\">' % (season, episode), re.MULTILINE | re.DOTALL).findall(unLien0a)[0]\n                unLien0b = client.parseDOM(r, 'li', ret='id')\n            else:\n                r = client.parseDOM(r, 'div', attrs={'class': 'dizi-bolumleri film'})\n                unLien0b = client.parseDOM(r, 'span', ret='id')\n\n            counter = 0\n\n            for unLienUrl in unLien0b:\n\n                if 'gf-' in unLienUrl:\n                    continue\n\n                dataUrl = urllib.urlencode({'pid': unLienUrl[1:]})\n                dataUrl = client.request(url0, post=dataUrl, XHR=True, referer=url0)\n\n                try:\n                    url = client.parseDOM(dataUrl, 'iframe', ret='src')[1]\n                except:\n                    url = client.parseDOM(dataUrl, 'iframe', ret='src')[0]\n\n                if url.startswith('//'):\n                    url = url.replace('//', '', 1)\n\n                host = re.findall('([\\w]+[.][\\w]+)$', urlparse.urlparse(url.strip().lower()).netloc)[0]\n                if not host in hostDict: continue\n                host = client.replaceHTMLCodes(host)\n                host = host.encode('utf-8')\n\n                url = url.encode('utf-8')\n\n                if '1080p' in quality2:\n                    quality = '1080p'\n                elif '720p' in quality2 or 'bdrip' in quality2 or 'hdrip' in quality2:\n                    quality = 'HD'\n                else:\n                    quality = 'SD'\n\n                if 'dvdscr' in quality2 or 'r5' in quality2 or 'r6' in quality2:\n                    quality2 = 'SCR'\n                elif 'camrip' in quality2 or 'tsrip' in quality2 or 'hdcam' in quality2 or 'hdts' in quality2 or 'dvdcam' in quality2 or 'dvdts' in quality2 or 'cam' in quality2 or 'telesync' in quality2 or 'ts' in quality2:\n                    quality2 = 'CAM'\n\n                sources.append({'source': host, 'quality': quality, 'language': langue, 'url': url, 'direct': False, 'debridonly': False})\n\n            print sources\n\n            return sources\n        except:\n            return sources\n\n\n    def resolve(self, url):\n\n        return url\n"
    },
    {
        "instruction": "Update the given Python code to remove all the duplicated elements from a list.",
        "input": "",
        "output": "def remove_duplicates(nums):\n    new_list = []\n    for num in nums:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUpdate the given Python code to remove all the duplicated elements from a list.\n\n### Input:\n\n\n### Output:\ndef remove_duplicates(nums):\n    new_list = []\n    for num in nums:\n        if num not in new_list:\n            new_list.append(num)\n    return new_list"
    },
    {
        "instruction": "This code contains unit tests for the CollectionQuery class. To use this code, create a new Python file and import the unittest and CollectionQuery classes. Then, create a new TestCollectionClass class that inherits from unittest.TestCase. Within this class, define test methods that call methods of the CollectionQuery class and use assertions to verify that the expected results are returned. Use the test_archive_center method to test the archive_center method of the CollectionQuery class, the test_keyword method to test the keyword method, the test_valid_formats method to test the format method with valid formats, the test_invalid_format method to test the format method with invalid formats, the test_valid_concept_id method to test the concept_id method with valid concept IDs, and the test_invalid_concept_id method to test the concept_id method with invalid concept IDs.",
        "input": "",
        "output": "import unittest\n\nfrom cmr.queries import CollectionQuery\n\nclass TestCollectionClass(unittest.TestCase):\n\n    def test_archive_center(self):\n        query = CollectionQuery()\n        query.archive_center(\"LP DAAC\")\n\n        self.assertIn(\"archive_center\", query.params)\n        self.assertEqual(query.params[\"archive_center\"], \"LP DAAC\")\n    \n    def test_keyword(self):\n        query = CollectionQuery()\n        query.keyword(\"AST_*\")\n\n        self.assertIn(\"keyword\", query.params)\n        self.assertEqual(query.params[\"keyword\"], \"AST_*\")\n    \n    def test_valid_formats(self):\n        query = CollectionQuery()\n        formats = [\n            \"json\", \"xml\", \"echo10\", \"iso\", \"iso19115\",\n            \"csv\", \"atom\", \"kml\", \"native\", \"dif\", \"dif10\",\n            \"opendata\", \"umm_json\", \"umm_json_v1_1\" \"umm_json_v1_9\"]\n\n        for _format in formats:\n            query.format(_format)\n            self.assertEqual(query._format, _format)\n    \n    def test_invalid_format(self):\n        query = CollectionQuery()\n\n        with self.assertRaises(ValueError):\n            query.format(\"invalid\")\n            query.format(\"jsonn\")\n            query.format(\"iso19116\")\n    \n    def test_valid_concept_id(self):\n        query = CollectionQuery()\n\n        query.concept_id(\"C1299783579-LPDAAC_ECS\")\n        self.assertEqual(query.params[\"concept_id\"], [\"C1299783579-LPDAAC_ECS\"])\n        \n        query.concept_id([\"C1299783579-LPDAAC_ECS\", \"C1441380236-PODAAC\"])\n        self.assertEqual(query.params[\"concept_id\"], [\"C1299783579-LPDAAC_ECS\", \"C1441380236-PODAAC\"])\n    \n    def test_invalid_concept_id(self):\n        query = CollectionQuery()\n\n        with self.assertRaises(ValueError):\n            query.concept_id(\"G1327299284-LPDAAC_ECS\")\n        \n        with self.assertRaises(ValueError):\n            query.concept_id([\"C1299783579-LPDAAC_ECS\", \"G1327299284-LPDAAC_ECS\"])\n\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code contains unit tests for the CollectionQuery class. To use this code, create a new Python file and import the unittest and CollectionQuery classes. Then, create a new TestCollectionClass class that inherits from unittest.TestCase. Within this class, define test methods that call methods of the CollectionQuery class and use assertions to verify that the expected results are returned. Use the test_archive_center method to test the archive_center method of the CollectionQuery class, the test_keyword method to test the keyword method, the test_valid_formats method to test the format method with valid formats, the test_invalid_format method to test the format method with invalid formats, the test_valid_concept_id method to test the concept_id method with valid concept IDs, and the test_invalid_concept_id method to test the concept_id method with invalid concept IDs.\n\n### Input:\n\n\n### Output:\nimport unittest\n\nfrom cmr.queries import CollectionQuery\n\nclass TestCollectionClass(unittest.TestCase):\n\n    def test_archive_center(self):\n        query = CollectionQuery()\n        query.archive_center(\"LP DAAC\")\n\n        self.assertIn(\"archive_center\", query.params)\n        self.assertEqual(query.params[\"archive_center\"], \"LP DAAC\")\n    \n    def test_keyword(self):\n        query = CollectionQuery()\n        query.keyword(\"AST_*\")\n\n        self.assertIn(\"keyword\", query.params)\n        self.assertEqual(query.params[\"keyword\"], \"AST_*\")\n    \n    def test_valid_formats(self):\n        query = CollectionQuery()\n        formats = [\n            \"json\", \"xml\", \"echo10\", \"iso\", \"iso19115\",\n            \"csv\", \"atom\", \"kml\", \"native\", \"dif\", \"dif10\",\n            \"opendata\", \"umm_json\", \"umm_json_v1_1\" \"umm_json_v1_9\"]\n\n        for _format in formats:\n            query.format(_format)\n            self.assertEqual(query._format, _format)\n    \n    def test_invalid_format(self):\n        query = CollectionQuery()\n\n        with self.assertRaises(ValueError):\n            query.format(\"invalid\")\n            query.format(\"jsonn\")\n            query.format(\"iso19116\")\n    \n    def test_valid_concept_id(self):\n        query = CollectionQuery()\n\n        query.concept_id(\"C1299783579-LPDAAC_ECS\")\n        self.assertEqual(query.params[\"concept_id\"], [\"C1299783579-LPDAAC_ECS\"])\n        \n        query.concept_id([\"C1299783579-LPDAAC_ECS\", \"C1441380236-PODAAC\"])\n        self.assertEqual(query.params[\"concept_id\"], [\"C1299783579-LPDAAC_ECS\", \"C1441380236-PODAAC\"])\n    \n    def test_invalid_concept_id(self):\n        query = CollectionQuery()\n\n        with self.assertRaises(ValueError):\n            query.concept_id(\"G1327299284-LPDAAC_ECS\")\n        \n        with self.assertRaises(ValueError):\n            query.concept_id([\"C1299783579-LPDAAC_ECS\", \"G1327299284-LPDAAC_ECS\"])\n\n"
    },
    {
        "instruction": "Write a Python program using NumPy to generate a random array of 10 values between 0 and 1.",
        "input": "Not applicable",
        "output": "import numpy as np\n\n# Generate an array of 10 random values between 0 and 1\narray = np.random.random(10)\n\nprint(array)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program using NumPy to generate a random array of 10 values between 0 and 1.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\n\n# Generate an array of 10 random values between 0 and 1\narray = np.random.random(10)\n\nprint(array)"
    },
    {
        "instruction": "Build a Python script to optimize a given linear equation by minimizing the cost.",
        "input": "x + 2y = 4",
        "output": "import numpy as np\nfrom scipy.optimize import minimize\n\ndef cost_function(X): \n    x = X[0]\n    y = X[1]\n    return x + 2*y - 4\n\nX = minimize(cost_function, [0, 0])\n\nx_opt = X.x[0]\ny_opt = X.x[1]\n\n# the optimal solution is x = 2, y = 1",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python script to optimize a given linear equation by minimizing the cost.\n\n### Input:\nx + 2y = 4\n\n### Output:\nimport numpy as np\nfrom scipy.optimize import minimize\n\ndef cost_function(X): \n    x = X[0]\n    y = X[1]\n    return x + 2*y - 4\n\nX = minimize(cost_function, [0, 0])\n\nx_opt = X.x[0]\ny_opt = X.x[1]\n\n# the optimal solution is x = 2, y = 1"
    },
    {
        "instruction": "Create a Python script that logs into a Hacker News account and fetches the list of saved stories. Use the given code as a starting point and make sure to import the necessary modules. The script should define a class called HNSession that has methods for logging in, fetching saved stories, and resolving URLs. The get_saved_stories method should take optional arguments for the maximum number of pages to fetch and a function to break out of the loop early. The script should also define a parse_date_header function that parses a date string using a list of possible formats.",
        "input": "",
        "output": "\nimport os\nimport json\nimport re\nimport sys\nimport requests\nimport lxml.html\n\nfrom datetime import datetime, timedelta\nfrom pprint import pprint as PP\nfrom time import sleep\nfrom urlparse import urljoin\n\nfrom .utils import hn_relatime_to_datetime, get_story_id\nfrom .logger import logger\n\ndef parse_date_header(date):\n    errors = []\n    formats = [\n        \"%a, %d %B %Y %H:%M:%S %Z\",\n        \"%a, %d %b %Y %H:%M:%S %Z\",\n    ]\n\n    for format in formats:\n        try:\n            return datetime.strptime(date, format)\n        except ValueError as e:\n            errors.append(e)\n\n    raise errors[0]\n\nclass HNSession(object):\n    user_agent = 'hn-saved-stories/0.2 (https://github.com/bsandrow/hn-saved-stories/)'\n    max_retries = 2\n    retry_delay = 30\n\n    def __init__(self, headers=None):\n        headers = headers or {}\n        headers['User-Agent'] = headers.get('User-Agent', self.user_agent)\n\n        self.session = requests.Session()\n        self.session.headers = headers\n\n        self.last_response = None\n\n    def last_response_time(self):\n        \"\"\" Return the time of the last response \"\"\"\n        if 'last_response' in self.__dict__ and self.last_response.headers.get('date'):\n            return parse_date_header(self.last_response.headers.get('date'))\n        else:\n            return None\n\n    def last_response_url(self):\n        \"\"\" Return the url of the last response \"\"\"\n        if 'last_response' in self.__dict__:\n            return self.last_response.url\n        else:\n            return None\n\n    def get(self, *args, **kwargs):\n        \"\"\" requests.get() within the session\n\n        Wraps requests.get() within the session (so it has access to session\n        cookies), and also retries on failures, because timeouts seem to\n        happen randomly.\n        \"\"\"\n        if 'timeout' not in kwargs:\n            kwargs['timeout'] = 10\n        retries = 0\n        while True:\n            try:\n                request = self.session.get(*args, **kwargs)\n                request.raise_for_status()\n                return request\n            except requests.exceptions.RequestException as e:\n                if retries < self.max_retries:\n                    retries += 1\n                    sleep(self.retry_delay)\n                    logger.info(\"[Sleeping between requests (%ss)]\" % self.retry_delay)\n                else:\n                    raise\n\n    def resolve_url(self, url):\n        \"\"\" Resolve :url: using the most appropriate base url \"\"\"\n        base_url = self.last_response_url() or 'https://news.ycombinator.com'\n        return urljoin(base_url, url)\n\n    def login(self, username, password, debug=False):\n        \"\"\" Log into the session using provided credentials \"\"\"\n        try:\n            response = self.get('https://news.ycombinator.com/newslogin')\n        except requests.exceptions.HTTPError:\n            raise Exception(\"Error: Unable to retrieve login page\")\n\n        doc = lxml.html.fromstring(response.text)\n\n        fields = doc.xpath('.//form[1]/input')\n        form_data = { x.get('name'): x.get('value') for x in fields }\n        form_data['u'] = username\n        form_data['p'] = password\n\n        if debug:\n            print \"Login Form Data: \",\n            import pprint\n            pprint.pprint(form_data)\n\n        response = self.session.post('https://news.ycombinator.com/y', data=form_data, timeout=10)\n        if response.status_code != requests.codes.ok:\n            raise Exception(\"Error: Unable to successfully login.\")\n\n        self.username = username\n        self.last_response = response\n\n    def get_saved_stories(self, max_pages=None, break_func=None):\n        \"\"\" Fetch the list of 'saved stories' from a profile\n\n        Fetch the list of saved stories for a Hacker News user account. The\n        session needs to be logged into an account for this to work.\n\n        break_func - A function that takes the current page's story list, and\n                     returns True if we should break out of the loop.\n\n        max_pages - The maximum number of pages that we should go through\n                    before aborting. A value of None goes through all pages.\n        \"\"\"\n\n        def parse_story(title, subtext):\n            \"\"\" Parse a story from title + subtext \"\"\"\n            url_keys = ['url', 'comments', 'submitter_link']\n            story = {}\n            title_anchor = title.xpath('./a')[0]\n\n            comments_anchor = subtext.xpath('.//a[contains(text(), \"comments\") or contains(text(), \"discuss\")]')[0] # See Footnote [1]\n\n            story['url'] = title_anchor.get('href')\n            story['title'] = title_anchor.text\n            story['comments'] = comments_anchor.get('href')\n            story['submitter'] = subtext.xpath('.//a[1]//text()')[0] # See Footnote [4]\n            story['submitter_link'] = subtext.xpath('.//a[1]/@href')[0]\n            story['submitted_at'] = str( hn_relatime_to_datetime(self.last_response_time(), subtext.xpath('./text()')[1]) )\n\n            # Resolve all relative URLs\n            for key in story.keys():\n                if key in url_keys and story.get(key):\n                    story[key] = self.resolve_url(story[key])\n\n            return get_story_id(story), story\n\n        page = 1\n        stories = {}\n        url = 'https://news.ycombinator.com/saved?id=%s' % self.username\n\n        while max_pages is None or page <= max_pages:\n            html = None\n            try:\n                logger.info(\"Page %d:\" % page)\n                logger.debug(\"  url = %s\" % url)\n                logger.info(\"  Fetching...\")\n\n                try:\n                    response = self.get(url)\n                except requests.exceptions.HTTPError as e:\n                    raise Exception(\"Error: Failed to retrieve page %d, error:'%s', rurl: %s\" % (page, str(e), url))\n\n                if response.text == \"Can't display that.\":\n                    raise Exception(\"Error: Got \\\"Can't display that\\\" response.\")\n\n                logger.info(\"  Parsing...\")\n                html = lxml.html.fromstring(response.text)\n                basetime = parse_date_header(response.headers['date'])\n\n                title = html.cssselect('td.title') # See Footnote [3]\n                subtext = html.cssselect('td.subtext')\n\n                page_stories = dict([ parse_story(*s) for s in zip(title[1::2], subtext) ])\n                try:\n                    next_link = title[-1].xpath('.//a[text() = \"More\"]/@href')\n                except IndexError:\n                    sys.exit(\"Caught IndexError. Dumping HTML:\" + lxml.html.tostring(html))\n\n                next_link = next_link[0] if next_link else None\n\n                stories.update(page_stories)\n\n                should_break = (break_func and break_func(page_stories)) or next_link is None\n                if should_break:\n                    break\n\n                url = self.resolve_url(next_link)\n                page += 1\n\n                logger.info(\"  Sleeping (1s)...\")\n                sleep(1)\n            except Exception as e:\n                if html:\n                    logger.debug(\"Caught exception. Dumping page...\")\n                    logger.debug(\"______________\")\n                    logger.debug(lxml.html.tostring(html, pretty_print=True))\n                    logger.debug(\"______________\")\n                raise\n\n        logger.info(\"Done.\")\n        return stories\n\n# Footnotes\n# ~~~~~~~~~\n# [1] Anchor text needs 'comments,' because Polls submitted by yourself there\n#     is a 'add choice.' Also, if the story has no comments, then the anchor\n#     text is just 'discuss.'\n#\n# [2] '[Dead]' links remove the 'href' attribute from the anchor, so you end up\n#     with None as a URL.\n#\n# [3] 'td.title' selects 3 different things:\n#         1) the number of the story (in reverse, story #1 is\n#            the most recently saved)\n#         2) the title + link of the story\n#         3) the 'More' link at the bottom of the page, which\n#            goes to the next page in the series.\n#     The series should look something like [1,2,1,2,1,2,1,2,3], #1 and #2\n#     alternating with #3 being the last in the list. #3 will be missing on the\n#     final page.\n#\n# [4] The '//text()' part is needed because sometimes the submitter has a\n#     <font> element colouring it, so text() is not a direct child of the\n#     anchor. E.g.:\n#\n#       <a href=\"user?id=foofoobar\"><font color=\"#3c963c\">foofoobar</font></a>\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that logs into a Hacker News account and fetches the list of saved stories. Use the given code as a starting point and make sure to import the necessary modules. The script should define a class called HNSession that has methods for logging in, fetching saved stories, and resolving URLs. The get_saved_stories method should take optional arguments for the maximum number of pages to fetch and a function to break out of the loop early. The script should also define a parse_date_header function that parses a date string using a list of possible formats.\n\n### Input:\n\n\n### Output:\n\nimport os\nimport json\nimport re\nimport sys\nimport requests\nimport lxml.html\n\nfrom datetime import datetime, timedelta\nfrom pprint import pprint as PP\nfrom time import sleep\nfrom urlparse import urljoin\n\nfrom .utils import hn_relatime_to_datetime, get_story_id\nfrom .logger import logger\n\ndef parse_date_header(date):\n    errors = []\n    formats = [\n        \"%a, %d %B %Y %H:%M:%S %Z\",\n        \"%a, %d %b %Y %H:%M:%S %Z\",\n    ]\n\n    for format in formats:\n        try:\n            return datetime.strptime(date, format)\n        except ValueError as e:\n            errors.append(e)\n\n    raise errors[0]\n\nclass HNSession(object):\n    user_agent = 'hn-saved-stories/0.2 (https://github.com/bsandrow/hn-saved-stories/)'\n    max_retries = 2\n    retry_delay = 30\n\n    def __init__(self, headers=None):\n        headers = headers or {}\n        headers['User-Agent'] = headers.get('User-Agent', self.user_agent)\n\n        self.session = requests.Session()\n        self.session.headers = headers\n\n        self.last_response = None\n\n    def last_response_time(self):\n        \"\"\" Return the time of the last response \"\"\"\n        if 'last_response' in self.__dict__ and self.last_response.headers.get('date'):\n            return parse_date_header(self.last_response.headers.get('date'))\n        else:\n            return None\n\n    def last_response_url(self):\n        \"\"\" Return the url of the last response \"\"\"\n        if 'last_response' in self.__dict__:\n            return self.last_response.url\n        else:\n            return None\n\n    def get(self, *args, **kwargs):\n        \"\"\" requests.get() within the session\n\n        Wraps requests.get() within the session (so it has access to session\n        cookies), and also retries on failures, because timeouts seem to\n        happen randomly.\n        \"\"\"\n        if 'timeout' not in kwargs:\n            kwargs['timeout'] = 10\n        retries = 0\n        while True:\n            try:\n                request = self.session.get(*args, **kwargs)\n                request.raise_for_status()\n                return request\n            except requests.exceptions.RequestException as e:\n                if retries < self.max_retries:\n                    retries += 1\n                    sleep(self.retry_delay)\n                    logger.info(\"[Sleeping between requests (%ss)]\" % self.retry_delay)\n                else:\n                    raise\n\n    def resolve_url(self, url):\n        \"\"\" Resolve :url: using the most appropriate base url \"\"\"\n        base_url = self.last_response_url() or 'https://news.ycombinator.com'\n        return urljoin(base_url, url)\n\n    def login(self, username, password, debug=False):\n        \"\"\" Log into the session using provided credentials \"\"\"\n        try:\n            response = self.get('https://news.ycombinator.com/newslogin')\n        except requests.exceptions.HTTPError:\n            raise Exception(\"Error: Unable to retrieve login page\")\n\n        doc = lxml.html.fromstring(response.text)\n\n        fields = doc.xpath('.//form[1]/input')\n        form_data = { x.get('name'): x.get('value') for x in fields }\n        form_data['u'] = username\n        form_data['p'] = password\n\n        if debug:\n            print \"Login Form Data: \",\n            import pprint\n            pprint.pprint(form_data)\n\n        response = self.session.post('https://news.ycombinator.com/y', data=form_data, timeout=10)\n        if response.status_code != requests.codes.ok:\n            raise Exception(\"Error: Unable to successfully login.\")\n\n        self.username = username\n        self.last_response = response\n\n    def get_saved_stories(self, max_pages=None, break_func=None):\n        \"\"\" Fetch the list of 'saved stories' from a profile\n\n        Fetch the list of saved stories for a Hacker News user account. The\n        session needs to be logged into an account for this to work.\n\n        break_func - A function that takes the current page's story list, and\n                     returns True if we should break out of the loop.\n\n        max_pages - The maximum number of pages that we should go through\n                    before aborting. A value of None goes through all pages.\n        \"\"\"\n\n        def parse_story(title, subtext):\n            \"\"\" Parse a story from title + subtext \"\"\"\n            url_keys = ['url', 'comments', 'submitter_link']\n            story = {}\n            title_anchor = title.xpath('./a')[0]\n\n            comments_anchor = subtext.xpath('.//a[contains(text(), \"comments\") or contains(text(), \"discuss\")]')[0] # See Footnote [1]\n\n            story['url'] = title_anchor.get('href')\n            story['title'] = title_anchor.text\n            story['comments'] = comments_anchor.get('href')\n            story['submitter'] = subtext.xpath('.//a[1]//text()')[0] # See Footnote [4]\n            story['submitter_link'] = subtext.xpath('.//a[1]/@href')[0]\n            story['submitted_at'] = str( hn_relatime_to_datetime(self.last_response_time(), subtext.xpath('./text()')[1]) )\n\n            # Resolve all relative URLs\n            for key in story.keys():\n                if key in url_keys and story.get(key):\n                    story[key] = self.resolve_url(story[key])\n\n            return get_story_id(story), story\n\n        page = 1\n        stories = {}\n        url = 'https://news.ycombinator.com/saved?id=%s' % self.username\n\n        while max_pages is None or page <= max_pages:\n            html = None\n            try:\n                logger.info(\"Page %d:\" % page)\n                logger.debug(\"  url = %s\" % url)\n                logger.info(\"  Fetching...\")\n\n                try:\n                    response = self.get(url)\n                except requests.exceptions.HTTPError as e:\n                    raise Exception(\"Error: Failed to retrieve page %d, error:'%s', rurl: %s\" % (page, str(e), url))\n\n                if response.text == \"Can't display that.\":\n                    raise Exception(\"Error: Got \\\"Can't display that\\\" response.\")\n\n                logger.info(\"  Parsing...\")\n                html = lxml.html.fromstring(response.text)\n                basetime = parse_date_header(response.headers['date'])\n\n                title = html.cssselect('td.title') # See Footnote [3]\n                subtext = html.cssselect('td.subtext')\n\n                page_stories = dict([ parse_story(*s) for s in zip(title[1::2], subtext) ])\n                try:\n                    next_link = title[-1].xpath('.//a[text() = \"More\"]/@href')\n                except IndexError:\n                    sys.exit(\"Caught IndexError. Dumping HTML:\" + lxml.html.tostring(html))\n\n                next_link = next_link[0] if next_link else None\n\n                stories.update(page_stories)\n\n                should_break = (break_func and break_func(page_stories)) or next_link is None\n                if should_break:\n                    break\n\n                url = self.resolve_url(next_link)\n                page += 1\n\n                logger.info(\"  Sleeping (1s)...\")\n                sleep(1)\n            except Exception as e:\n                if html:\n                    logger.debug(\"Caught exception. Dumping page...\")\n                    logger.debug(\"______________\")\n                    logger.debug(lxml.html.tostring(html, pretty_print=True))\n                    logger.debug(\"______________\")\n                raise\n\n        logger.info(\"Done.\")\n        return stories\n\n# Footnotes\n# ~~~~~~~~~\n# [1] Anchor text needs 'comments,' because Polls submitted by yourself there\n#     is a 'add choice.' Also, if the story has no comments, then the anchor\n#     text is just 'discuss.'\n#\n# [2] '[Dead]' links remove the 'href' attribute from the anchor, so you end up\n#     with None as a URL.\n#\n# [3] 'td.title' selects 3 different things:\n#         1) the number of the story (in reverse, story #1 is\n#            the most recently saved)\n#         2) the title + link of the story\n#         3) the 'More' link at the bottom of the page, which\n#            goes to the next page in the series.\n#     The series should look something like [1,2,1,2,1,2,1,2,3], #1 and #2\n#     alternating with #3 being the last in the list. #3 will be missing on the\n#     final page.\n#\n# [4] The '//text()' part is needed because sometimes the submitter has a\n#     <font> element colouring it, so text() is not a direct child of the\n#     anchor. E.g.:\n#\n#       <a href=\"user?id=foofoobar\"><font color=\"#3c963c\">foofoobar</font></a>\n"
    },
    {
        "instruction": "Craft a Python code for sorting a list of strings by character length",
        "input": "",
        "output": "def sort_by_char_length(strings):\n    return sorted(strings, key = len)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCraft a Python code for sorting a list of strings by character length\n\n### Input:\n\n\n### Output:\ndef sort_by_char_length(strings):\n    return sorted(strings, key = len)"
    },
    {
        "instruction": "Generate a visualization of a dataset using Python?",
        "input": "",
        "output": "import matplotlib.pyplot as plt \n\n# Data \nx = [1, 2, 3, 4] \ny = [10, 20, 25, 30] \n\n# Plot \nplt.plot(x, y) \n\n# Add labels \nplt.title(\"Simple Plot\") \nplt.xlabel(\"X-axis\") \nplt.ylabel(\"Y-axis\") \n\n# Show plot \nplt.show()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a visualization of a dataset using Python?\n\n### Input:\n\n\n### Output:\nimport matplotlib.pyplot as plt \n\n# Data \nx = [1, 2, 3, 4] \ny = [10, 20, 25, 30] \n\n# Plot \nplt.plot(x, y) \n\n# Add labels \nplt.title(\"Simple Plot\") \nplt.xlabel(\"X-axis\") \nplt.ylabel(\"Y-axis\") \n\n# Show plot \nplt.show()"
    },
    {
        "instruction": "Compose python code that efficiently resolves the specified task:",
        "input": "Determine the greatest common divisor of two numbers.",
        "output": "def gcd(x, y):\n        while(y):\n            x, y = y, x % y\n\n        return x\n\n# Driver Code \nnum1, num2 = map(int, input().split())\n\nprint(gcd(num1, num2))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose python code that efficiently resolves the specified task:\n\n### Input:\nDetermine the greatest common divisor of two numbers.\n\n### Output:\ndef gcd(x, y):\n        while(y):\n            x, y = y, x % y\n\n        return x\n\n# Driver Code \nnum1, num2 = map(int, input().split())\n\nprint(gcd(num1, num2))"
    },
    {
        "instruction": "Create a function to analyze the sentiment of a given sentence in Python.",
        "input": "",
        "output": "import textblob\ndef sentiment_analysis(sentence):\n sentiment = textblob.TextBlob(sentence).sentiment.polarity\n if sentiment > 0.0: \n  return \"positive\"\n elif sentiment == 0.0: \n  return \"neutral\"\n else: \n  return \"negative\"",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to analyze the sentiment of a given sentence in Python.\n\n### Input:\n\n\n### Output:\nimport textblob\ndef sentiment_analysis(sentence):\n sentiment = textblob.TextBlob(sentence).sentiment.polarity\n if sentiment > 0.0: \n  return \"positive\"\n elif sentiment == 0.0: \n  return \"neutral\"\n else: \n  return \"negative\""
    },
    {
        "instruction": "Create a Python program to classify emails as either spam or non-spam.",
        "input": "Not applicable",
        "output": "import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load dataset\ndf = pd.read_csv('dataset.csv')\n\n# Encode labels\nle = LabelEncoder()\nX = df.drop(['label'],axis=1).values\ny = le.fit_transform(df['label'])\n\n# Split into train and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Train model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# Make prediction\nprediction = model.predict(X_test)\n\n# Evaluate model\naccuracy = np.mean(prediction == y_test)\nprint('Accuracy: ', accuracy)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to classify emails as either spam or non-spam.\n\n### Input:\nNot applicable\n\n### Output:\nimport numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\n\n# Load dataset\ndf = pd.read_csv('dataset.csv')\n\n# Encode labels\nle = LabelEncoder()\nX = df.drop(['label'],axis=1).values\ny = le.fit_transform(df['label'])\n\n# Split into train and test set\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Train model\nmodel = MultinomialNB()\nmodel.fit(X_train, y_train)\n\n# Make prediction\nprediction = model.predict(X_test)\n\n# Evaluate model\naccuracy = np.mean(prediction == y_test)\nprint('Accuracy: ', accuracy)"
    },
    {
        "instruction": "Develop a Python program to add two matrices.",
        "input": "A = [[1, 2], \n     [3, 4]] \nB = [[5, 6], \n     [7, 8]]",
        "output": "def addMatrix(A, B): \n    #nrows and ncols are the number of \n    #rows and columns of the matrix \n    rowsA = len(A)\n    colsA = len(A[0])\n    rowsB = len(B)\n    colsB = len(B[0])\n  \n    # initialize resulting matrix \n    result = [[0 for row in range(rowsA)]  \n                for col in range(colsA)] \n  \n    # Check matrix dimensions \n    if rowsA != rowsB or colsA != colsB: \n        print (\"Matrices should be of the same dimensions.\") \n        return\n  \n    # Iterate over the resultant matrix \n    # and add the corresponding values  \n    # of matrices A and B \n    for i in range(rowsA): \n        for j in range(colsB): \n            result[i][j] = A[i][j] + B[i][j] \n    return result\n  \nA = [[1, 2], \n     [3, 4]] \nB = [[5, 6], \n     [7, 8]]\n    \nprint (addMatrix(A, B))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to add two matrices.\n\n### Input:\nA = [[1, 2], \n     [3, 4]] \nB = [[5, 6], \n     [7, 8]]\n\n### Output:\ndef addMatrix(A, B): \n    #nrows and ncols are the number of \n    #rows and columns of the matrix \n    rowsA = len(A)\n    colsA = len(A[0])\n    rowsB = len(B)\n    colsB = len(B[0])\n  \n    # initialize resulting matrix \n    result = [[0 for row in range(rowsA)]  \n                for col in range(colsA)] \n  \n    # Check matrix dimensions \n    if rowsA != rowsB or colsA != colsB: \n        print (\"Matrices should be of the same dimensions.\") \n        return\n  \n    # Iterate over the resultant matrix \n    # and add the corresponding values  \n    # of matrices A and B \n    for i in range(rowsA): \n        for j in range(colsB): \n            result[i][j] = A[i][j] + B[i][j] \n    return result\n  \nA = [[1, 2], \n     [3, 4]] \nB = [[5, 6], \n     [7, 8]]\n    \nprint (addMatrix(A, B))"
    },
    {
        "instruction": "Create a program in Python to read input from the user and respond with a randomly generated quote.",
        "input": "Not applicable",
        "output": "import random\n\nquotes = [\n \"It's not who you are that holds you back, it's who you think you're not.\",\n \"You don't have to be great to start, but you have to start to be great.\",\n \"It's not what happens to you, but how you react to it that matters.\",\n \"It does not matter how slowly you go, as long as you do not stop.\"\n]\n\nprint(\"Enter your name:\")\nname = input()\n\nrandom_quote = random.choice(quotes)\nprint(\"{}, {}\".format(name, random_quote))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to read input from the user and respond with a randomly generated quote.\n\n### Input:\nNot applicable\n\n### Output:\nimport random\n\nquotes = [\n \"It's not who you are that holds you back, it's who you think you're not.\",\n \"You don't have to be great to start, but you have to start to be great.\",\n \"It's not what happens to you, but how you react to it that matters.\",\n \"It does not matter how slowly you go, as long as you do not stop.\"\n]\n\nprint(\"Enter your name:\")\nname = input()\n\nrandom_quote = random.choice(quotes)\nprint(\"{}, {}\".format(name, random_quote))"
    },
    {
        "instruction": "Write a Python program to generate multiplication tables from 1 to 10.",
        "input": "",
        "output": "for num in range(1,11):\n for i in range(1,11):\n  print(num,\"X\",i,\"=\",num*i)\n  print(\"\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate multiplication tables from 1 to 10.\n\n### Input:\n\n\n### Output:\nfor num in range(1,11):\n for i in range(1,11):\n  print(num,\"X\",i,\"=\",num*i)\n  print(\"\")"
    },
    {
        "instruction": "Create a login system, using Python, that asks for the user's username and password and only allows a user to login if their username and password are correct.",
        "input": "",
        "output": "\"\"\"\nLogin system in Python\n\"\"\"\n\nimport hashlib\n\n# create a list to store usernames and passwords.\n# Format: [[username, hashed_password],[username, hashed_password]] \nuser_data = [['user1', '9ced2ba5752f6228bb8cd2b17c63cdaf6a96106d07decd8477d3e9b3ab1b16f7'], \n             ['user2', '5e884898da28047151d0e56f8dc6292773603d0bb4decd42a4a4d12816e831fd']]\n\ndef check_login(uname, pwd):\n    #calculate the hased password for the given username\n    hashed_pwd_calculated = hashlib.sha256(pwd.encode()).hexdigest()\n    \n    # check if the given username is in the user_data list\n    isExist = False\n    for data in user_data:\n        # if the corresponding user exists in the user_data list, then get the hashed password and compare\n        if data[0] == uname:\n            isExist =True\n            if data[1] == hashed_pwd_calculated:\n                return True\n            else:\n                return False\n    \n    # if the user is not exist in the user_data list\n    if isExist == False:\n        return False\n    \n# set the username and password\nusername = input('Please input your username: ')\npassword = input('Please input your password: ')\n\n# call the check_login() function\nif check_login(username, password):\n    print('Login Success!')\nelse:\n    print('Login Failed!')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a login system, using Python, that asks for the user's username and password and only allows a user to login if their username and password are correct.\n\n### Input:\n\n\n### Output:\n\"\"\"\nLogin system in Python\n\"\"\"\n\nimport hashlib\n\n# create a list to store usernames and passwords.\n# Format: [[username, hashed_password],[username, hashed_password]] \nuser_data = [['user1', '9ced2ba5752f6228bb8cd2b17c63cdaf6a96106d07decd8477d3e9b3ab1b16f7'], \n             ['user2', '5e884898da28047151d0e56f8dc6292773603d0bb4decd42a4a4d12816e831fd']]\n\ndef check_login(uname, pwd):\n    #calculate the hased password for the given username\n    hashed_pwd_calculated = hashlib.sha256(pwd.encode()).hexdigest()\n    \n    # check if the given username is in the user_data list\n    isExist = False\n    for data in user_data:\n        # if the corresponding user exists in the user_data list, then get the hashed password and compare\n        if data[0] == uname:\n            isExist =True\n            if data[1] == hashed_pwd_calculated:\n                return True\n            else:\n                return False\n    \n    # if the user is not exist in the user_data list\n    if isExist == False:\n        return False\n    \n# set the username and password\nusername = input('Please input your username: ')\npassword = input('Please input your password: ')\n\n# call the check_login() function\nif check_login(username, password):\n    print('Login Success!')\nelse:\n    print('Login Failed!')"
    },
    {
        "instruction": "Create a Python method which will make an HTTP GET request to the given URL and return the response.",
        "input": "url='http://www.example.com/'",
        "output": "import requests\n\ndef getRequest(url):\n response = requests.get(url)\n return response\n\nres = getRequest('http://www.example.com/')\nprint(res.text)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python method which will make an HTTP GET request to the given URL and return the response.\n\n### Input:\nurl='http://www.example.com/'\n\n### Output:\nimport requests\n\ndef getRequest(url):\n response = requests.get(url)\n return response\n\nres = getRequest('http://www.example.com/')\nprint(res.text)"
    },
    {
        "instruction": "Write a Python program to clean up a data set containing temperature readings. Write a function that takes the raw temperature data and returns a list of cleaned up readings as integers.",
        "input": "raw_readings = [\"  24.8\",\"31 \",\"   15.6    \", \"21.9  \"]",
        "output": "def clean_temps(raw_readings):\n cleaned_data = []\n for reading in raw_readings:\n cleaned_data.append(int(reading.strip()))\n return cleaned_data\n \nprint(clean_temps(raw_readings)) \n# Output: [24, 31, 15, 21]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to clean up a data set containing temperature readings. Write a function that takes the raw temperature data and returns a list of cleaned up readings as integers.\n\n### Input:\nraw_readings = [\"  24.8\",\"31 \",\"   15.6    \", \"21.9  \"]\n\n### Output:\ndef clean_temps(raw_readings):\n cleaned_data = []\n for reading in raw_readings:\n cleaned_data.append(int(reading.strip()))\n return cleaned_data\n \nprint(clean_temps(raw_readings)) \n# Output: [24, 31, 15, 21]"
    },
    {
        "instruction": "Write a Python script to pad a matrix to a given size.",
        "input": "matrix = [[1, 2], [3, 4], [5, 6]]\npad_size = 3",
        "output": "def pad_matrix(matrix, pad_size):\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    new_matrix = [[0 for j in range(pad_size)] for i in range(pad_size)] \n    \n    for i in range(rows):\n        for j in range(cols):\n            new_matrix[i][j] = matrix[i][j]\n\n    return new_matrix\n\nprint(pad_matrix(matrix, pad_size))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to pad a matrix to a given size.\n\n### Input:\nmatrix = [[1, 2], [3, 4], [5, 6]]\npad_size = 3\n\n### Output:\ndef pad_matrix(matrix, pad_size):\n    rows = len(matrix)\n    cols = len(matrix[0])\n\n    new_matrix = [[0 for j in range(pad_size)] for i in range(pad_size)] \n    \n    for i in range(rows):\n        for j in range(cols):\n            new_matrix[i][j] = matrix[i][j]\n\n    return new_matrix\n\nprint(pad_matrix(matrix, pad_size))"
    },
    {
        "instruction": "Create a program in Python to find the maximum value in a given sequence.",
        "input": "[3, 4, 6, 2, 8, 9, 5]",
        "output": "def findMaxValue(arr):\n    max_val = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n\n    return max_val\n\narr = [3, 4, 6, 2, 8, 9, 5]\nmaxValue = findMaxValue(arr)\nprint('Max value in given array is: {}'.format(maxValue))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to find the maximum value in a given sequence.\n\n### Input:\n[3, 4, 6, 2, 8, 9, 5]\n\n### Output:\ndef findMaxValue(arr):\n    max_val = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n\n    return max_val\n\narr = [3, 4, 6, 2, 8, 9, 5]\nmaxValue = findMaxValue(arr)\nprint('Max value in given array is: {}'.format(maxValue))"
    },
    {
        "instruction": "Create a function in Python to create a basic calculator.",
        "input": "",
        "output": "def calculator():\n    while True:\n    print(\"Options:\")\n    print(\"Enter 'add' to add two numbers\")\n    print(\"Enter 'subtract' to subtract two numbers\")\n    print(\"Enter 'multiply' to multiply two numbers\")\n    print(\"Enter 'divide' to divide two numbers\")\n    print(\"Enter 'quit' to end the program\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to create a basic calculator.\n\n### Input:\n\n\n### Output:\ndef calculator():\n    while True:\n    print(\"Options:\")\n    print(\"Enter 'add' to add two numbers\")\n    print(\"Enter 'subtract' to subtract two numbers\")\n    print(\"Enter 'multiply' to multiply two numbers\")\n    print(\"Enter 'divide' to divide two numbers\")\n    print(\"Enter 'quit' to end the program\")"
    },
    {
        "instruction": "This code defines a function called parser_args() that takes in command line arguments and returns parsed options and arguments. To use this function, import it into your Python script and call it with the desired command line arguments. Ensure that the source and target options are provided, and that the target path exists. The function will return the parsed options and arguments.",
        "input": "",
        "output": "#/usr/bin/env python\n#coding:utf-8\n# Author        : tuxpy\n# Email         : q8886888@qq.com.com\n# Last modified : 2015-05-19 14:03:37\n# Filename      : args.py\n# Description   : \nimport optparse\nfrom replace import version\nimport os\n\ndef parser_args():\n    usage = \"Usage: %prog [options] target_path\"\n\n    parser = optparse.OptionParser(usage, \n            version = version)\n\n\n    _help = \"exclude files matching PATTERN\"\n    parser.add_option('--filter_filename',\n            dest = 'filter_filename', type = str, action=\"append\",\n            metavar = 'PATTERN', help = _help)\n\n    _help = 'only include files matching PATTERN(high priority)'\n    parser.add_option('--include_filename', \n            dest = 'include_filename', type = str, action=\"append\",\n            metavar = 'PATTERN', help = _help)\n\n    _help = 'source re pattern'\n    parser.add_option('-s', '--source', type = str,\n            dest = 'source_re_string', help = _help)\n\n    _help = 'target string'\n    parser.add_option('-t', '--target', type = str,\n            dest = 'target_string', help = _help)\n\n    _help = 'include hidden file'\n    parser.add_option('-H', default = False, action = \"store_true\", dest=\"include_hidden\", help = _help)\n\n    _help = 'prompt before every replace'\n    parser.add_option('-i', default = False,\n            dest = 'interactive', action = 'store_true',\n            help = _help)\n\n    opt, args = parser.parse_args()\n\n    if opt.source_re_string == None or opt.target_string == None:\n        parser.error('--source or --target be must')\n\n    for target_path in args:\n        if not os.path.exists(target_path):\n            parser.error(\"%s is not exists\" % (target_path, ))\n\n\n    return opt, args\n\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code defines a function called parser_args() that takes in command line arguments and returns parsed options and arguments. To use this function, import it into your Python script and call it with the desired command line arguments. Ensure that the source and target options are provided, and that the target path exists. The function will return the parsed options and arguments.\n\n### Input:\n\n\n### Output:\n#/usr/bin/env python\n#coding:utf-8\n# Author        : tuxpy\n# Email         : q8886888@qq.com.com\n# Last modified : 2015-05-19 14:03:37\n# Filename      : args.py\n# Description   : \nimport optparse\nfrom replace import version\nimport os\n\ndef parser_args():\n    usage = \"Usage: %prog [options] target_path\"\n\n    parser = optparse.OptionParser(usage, \n            version = version)\n\n\n    _help = \"exclude files matching PATTERN\"\n    parser.add_option('--filter_filename',\n            dest = 'filter_filename', type = str, action=\"append\",\n            metavar = 'PATTERN', help = _help)\n\n    _help = 'only include files matching PATTERN(high priority)'\n    parser.add_option('--include_filename', \n            dest = 'include_filename', type = str, action=\"append\",\n            metavar = 'PATTERN', help = _help)\n\n    _help = 'source re pattern'\n    parser.add_option('-s', '--source', type = str,\n            dest = 'source_re_string', help = _help)\n\n    _help = 'target string'\n    parser.add_option('-t', '--target', type = str,\n            dest = 'target_string', help = _help)\n\n    _help = 'include hidden file'\n    parser.add_option('-H', default = False, action = \"store_true\", dest=\"include_hidden\", help = _help)\n\n    _help = 'prompt before every replace'\n    parser.add_option('-i', default = False,\n            dest = 'interactive', action = 'store_true',\n            help = _help)\n\n    opt, args = parser.parse_args()\n\n    if opt.source_re_string == None or opt.target_string == None:\n        parser.error('--source or --target be must')\n\n    for target_path in args:\n        if not os.path.exists(target_path):\n            parser.error(\"%s is not exists\" % (target_path, ))\n\n\n    return opt, args\n\n"
    },
    {
        "instruction": "Develop a Python program to print out the multiplication table of a given number.",
        "input": "",
        "output": "def print_multiplication_table(num):\n    for i in range(1, 11):\n        print(f\"{num} x {i} = {num*i}\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to print out the multiplication table of a given number.\n\n### Input:\n\n\n### Output:\ndef print_multiplication_table(num):\n    for i in range(1, 11):\n        print(f\"{num} x {i} = {num*i}\")"
    },
    {
        "instruction": "Design a system to encode and decode a string of text.",
        "input": "Not applicable",
        "output": "def encode(text):\n # Create an empty string\n encoded_string = ''\n # Iterate over every character\n for i in text:\n     # Convert it to the ASCII value\n     n = ord(i)\n     # Add +1 to each Character\n     n += 1\n \n     # Convert it back to character\n     c = chr(n)\n \n     # Append it to the result\n     encoded_string += c\n \n # Return the result\n return encoded_string\n\ndef decode(encoded_text):\n # Create an empty string\n decoded_string = ''\n # Iterate over every character\n for i in encoded_text:\n     # Convert it to the ASCII value\n     n = ord(i)\n     # subtract -1 from each Character \n     n -= 1\n \n     # Convert it back to character\n     c = chr(n)\n \n     # Append it to the result\n     decoded_string += c\n \n # Return the result\n return decoded_string\n\n# Test the code\ntext = 'Python'\nencoded_text = encode(text)\n decoded_text = decode(encoded_text)\n \n print ( text == decoded_text )  #True",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a system to encode and decode a string of text.\n\n### Input:\nNot applicable\n\n### Output:\ndef encode(text):\n # Create an empty string\n encoded_string = ''\n # Iterate over every character\n for i in text:\n     # Convert it to the ASCII value\n     n = ord(i)\n     # Add +1 to each Character\n     n += 1\n \n     # Convert it back to character\n     c = chr(n)\n \n     # Append it to the result\n     encoded_string += c\n \n # Return the result\n return encoded_string\n\ndef decode(encoded_text):\n # Create an empty string\n decoded_string = ''\n # Iterate over every character\n for i in encoded_text:\n     # Convert it to the ASCII value\n     n = ord(i)\n     # subtract -1 from each Character \n     n -= 1\n \n     # Convert it back to character\n     c = chr(n)\n \n     # Append it to the result\n     decoded_string += c\n \n # Return the result\n return decoded_string\n\n# Test the code\ntext = 'Python'\nencoded_text = encode(text)\n decoded_text = decode(encoded_text)\n \n print ( text == decoded_text )  #True"
    },
    {
        "instruction": "Generate a matrix of random numbers using Python.",
        "input": "Matrix Size: 20 x 30",
        "output": "matrix = [[random.random() for j in range(30)] for i in range(20)]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a matrix of random numbers using Python.\n\n### Input:\nMatrix Size: 20 x 30\n\n### Output:\nmatrix = [[random.random() for j in range(30)] for i in range(20)]"
    },
    {
        "instruction": "Create a relational mapping between two arrays using python.",
        "input": "arr1 = [1, 2, 3]\narr2 = [a, b, c]",
        "output": "# Create a relational mapping between two arrays using python\n\narr1 = [1, 2, 3] \narr2 = ['a', 'b', 'c'] \n  \n# Create a final dictionary \nresult = dict(zip(arr1,arr2)) \n  \n# Print the created mapping  \nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a relational mapping between two arrays using python.\n\n### Input:\narr1 = [1, 2, 3]\narr2 = [a, b, c]\n\n### Output:\n# Create a relational mapping between two arrays using python\n\narr1 = [1, 2, 3] \narr2 = ['a', 'b', 'c'] \n  \n# Create a final dictionary \nresult = dict(zip(arr1,arr2)) \n  \n# Print the created mapping  \nprint(result)"
    },
    {
        "instruction": "Create a REST API with Python and Flask to get forecast data from a given API.",
        "input": "API URL: \"https://api.weather.com/v1/location/cities/geoposition/search\"",
        "output": "import requests\nimport json\nimport flask \n\napp = flask.Flask(name) \n\n@app.route('/forecast', methods=['GET']) \ndef get_forecast(): \n    # get the forecast from the API \n    url = 'https://api.weather.com/v1/location/cities/geoposition/search'\n    api_response = requests.get(url)\n    data = json.loads(api_response.text)\n    # prepare the response\n    response = {}\n    response['city'] = data['city']\n    response['temperature'] = data['temperature']\n    response['humidity'] = data['humidity']\n    response['wind'] = data['wind']\n    response['sunrise'] = data['sunrise']\n    response['sunset'] = data['sunset']\n    # return response\n    return flask.jsonify(response)\n\nif name == 'main':  \n    app.run()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a REST API with Python and Flask to get forecast data from a given API.\n\n### Input:\nAPI URL: \"https://api.weather.com/v1/location/cities/geoposition/search\"\n\n### Output:\nimport requests\nimport json\nimport flask \n\napp = flask.Flask(name) \n\n@app.route('/forecast', methods=['GET']) \ndef get_forecast(): \n    # get the forecast from the API \n    url = 'https://api.weather.com/v1/location/cities/geoposition/search'\n    api_response = requests.get(url)\n    data = json.loads(api_response.text)\n    # prepare the response\n    response = {}\n    response['city'] = data['city']\n    response['temperature'] = data['temperature']\n    response['humidity'] = data['humidity']\n    response['wind'] = data['wind']\n    response['sunrise'] = data['sunrise']\n    response['sunset'] = data['sunset']\n    # return response\n    return flask.jsonify(response)\n\nif name == 'main':  \n    app.run()"
    },
    {
        "instruction": "Formulate a Python function to count the occurrences of a character in a given string.",
        "input": "",
        "output": "def count_characters(string, character):\n    count = 0\n    for char in string:\n        if char == character:\n            count += 1\n    return count",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFormulate a Python function to count the occurrences of a character in a given string.\n\n### Input:\n\n\n### Output:\ndef count_characters(string, character):\n    count = 0\n    for char in string:\n        if char == character:\n            count += 1\n    return count"
    },
    {
        "instruction": "Build a function in Python to convert a list of strings to a string.",
        "input": "",
        "output": "def listOfStringsToString(list):  \n    \n    # Using join() \n    s = \" \".join(list) \n    \n    return s \n\n#Testing\nlist = [\"This\",\"is\",\"an\",\"example\"]  \nprint(listOfStringsToString(list)) # Output: This is an example",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a function in Python to convert a list of strings to a string.\n\n### Input:\n\n\n### Output:\ndef listOfStringsToString(list):  \n    \n    # Using join() \n    s = \" \".join(list) \n    \n    return s \n\n#Testing\nlist = [\"This\",\"is\",\"an\",\"example\"]  \nprint(listOfStringsToString(list)) # Output: This is an example"
    },
    {
        "instruction": "Create a Python code for reversing a given string.",
        "input": "",
        "output": "def reverse_string(str):\n    rev_str = \"\"\n    for ch in str: \n        rev_str = ch + rev_str \n    return rev_str\n  \nstring = \"Hello World\"\nprint(reverse_string(string))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code for reversing a given string.\n\n### Input:\n\n\n### Output:\ndef reverse_string(str):\n    rev_str = \"\"\n    for ch in str: \n        rev_str = ch + rev_str \n    return rev_str\n  \nstring = \"Hello World\"\nprint(reverse_string(string))"
    },
    {
        "instruction": "Develop a game trajectory algorithm in Python for a two-dimensional environment.",
        "input": "",
        "output": "# Define a function for trajectory algorithms\ndef trajectory_algorithm(start_point, end_point):\n    # Set the dampening parameter, which determines how far the ball moves in each step\n    d = 0.1\n    # Find the distance between start and end points\n    dist = (end_point[0] - start_point[0])**2 + (end_point[1] - start_point[1])**2\n    # Define a loop to iterate through\n    while dist > (d ** 2):\n        # Move the ball closer to the end point\n        start_point[0] = start_point[0] + ((end_point[0] - start_point[0]) * d)\n        start_point[1] = start_point[1] + ((end_point[1] - start_point[1]) * d)\n        # Redefine the distance for the next iteration\n        dist = (end_point[0] - start_point[0])**2 + (end_point[1] - start_point[1])**2\n    # Return the final point\n    return start_point",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a game trajectory algorithm in Python for a two-dimensional environment.\n\n### Input:\n\n\n### Output:\n# Define a function for trajectory algorithms\ndef trajectory_algorithm(start_point, end_point):\n    # Set the dampening parameter, which determines how far the ball moves in each step\n    d = 0.1\n    # Find the distance between start and end points\n    dist = (end_point[0] - start_point[0])**2 + (end_point[1] - start_point[1])**2\n    # Define a loop to iterate through\n    while dist > (d ** 2):\n        # Move the ball closer to the end point\n        start_point[0] = start_point[0] + ((end_point[0] - start_point[0]) * d)\n        start_point[1] = start_point[1] + ((end_point[1] - start_point[1]) * d)\n        # Redefine the distance for the next iteration\n        dist = (end_point[0] - start_point[0])**2 + (end_point[1] - start_point[1])**2\n    # Return the final point\n    return start_point"
    },
    {
        "instruction": "Develop a natural language processing (NLP) model in Python that takes a sentence as an input and returns the subject and predicate of the sentence.",
        "input": "The cat is happy.",
        "output": "def parse_sentence(sentence):\n tokens = nltk.word_tokenize(sentence)\n tagged_tokens = nltk.pos_tag(tokens)\n subject = None\n predicate = None\n for token, tag in tagged_tokens:\n if tag == 'NN':\n subject = token\n elif tag == 'VBP':\n predicate = token\n return subject, predicate",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a natural language processing (NLP) model in Python that takes a sentence as an input and returns the subject and predicate of the sentence.\n\n### Input:\nThe cat is happy.\n\n### Output:\ndef parse_sentence(sentence):\n tokens = nltk.word_tokenize(sentence)\n tagged_tokens = nltk.pos_tag(tokens)\n subject = None\n predicate = None\n for token, tag in tagged_tokens:\n if tag == 'NN':\n subject = token\n elif tag == 'VBP':\n predicate = token\n return subject, predicate"
    },
    {
        "instruction": "Write a python program to generate random passwords of 8 characters, containing uppercase and lowercase alphabets and numbers.",
        "input": "",
        "output": "import string\nimport random\n\ndef generate_password():\n    characters = string.ascii_letters + string.digits\n    return ''.join(random.choice(characters) for i in range (8)) \n\nprint(generate_password())",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to generate random passwords of 8 characters, containing uppercase and lowercase alphabets and numbers.\n\n### Input:\n\n\n### Output:\nimport string\nimport random\n\ndef generate_password():\n    characters = string.ascii_letters + string.digits\n    return ''.join(random.choice(characters) for i in range (8)) \n\nprint(generate_password())"
    },
    {
        "instruction": "Write a Python program that consists of a class with a method to compute the average of the elements in a list.",
        "input": "[3,4,5,6,7]",
        "output": "\"\"\"\nPython program with a class to compute the average of the elements in a list\n\"\"\"\n\nclass AverageCalculator():\n    def __init__(self, numbers):\n        self.numbers = numbers\n        \n    def get_average(self):\n        total = 0\n        \n        for number in self.numbers:\n            total += number\n        \n        return total/len(self.numbers)\n        \nif __name__ == '__main__':\n    numbers = [3, 4, 5, 6, 7]\n    average_calculator = AverageCalculator(numbers)\n    print(average_calculator.get_average()) # 5.0",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that consists of a class with a method to compute the average of the elements in a list.\n\n### Input:\n[3,4,5,6,7]\n\n### Output:\n\"\"\"\nPython program with a class to compute the average of the elements in a list\n\"\"\"\n\nclass AverageCalculator():\n    def __init__(self, numbers):\n        self.numbers = numbers\n        \n    def get_average(self):\n        total = 0\n        \n        for number in self.numbers:\n            total += number\n        \n        return total/len(self.numbers)\n        \nif __name__ == '__main__':\n    numbers = [3, 4, 5, 6, 7]\n    average_calculator = AverageCalculator(numbers)\n    print(average_calculator.get_average()) # 5.0"
    },
    {
        "instruction": "Generate and return a list of the first 10 prime numbers in Python.",
        "input": "Not applicable",
        "output": "def get_first_prime_numbers(n):\n prime_numbers = []\n for num in range(2, n+1):\n for i in range(2, num):\n if (num % i) == 0:\n break\n else:\n prime_numbers.append(num)\n return prime_numbers\n\nprint(get_first_prime_numbers(10)) # [2, 3, 5, 7, 11,13,17,19,23,29]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate and return a list of the first 10 prime numbers in Python.\n\n### Input:\nNot applicable\n\n### Output:\ndef get_first_prime_numbers(n):\n prime_numbers = []\n for num in range(2, n+1):\n for i in range(2, num):\n if (num % i) == 0:\n break\n else:\n prime_numbers.append(num)\n return prime_numbers\n\nprint(get_first_prime_numbers(10)) # [2, 3, 5, 7, 11,13,17,19,23,29]"
    },
    {
        "instruction": "Create a Python program to generate a random password that satisfies a given set of criteria.",
        "input": "A password should contain at least one upper case character, one lower case character, one special character and one number.",
        "output": "import random\nimport string\n\ndef generate_password():\n    \n    # generate a random string of 8  characters\n    characters = string.ascii_letters + string.digits + '!@#$%^&*'\n    password = ''.join(random.choice(characters) for i in range(8))\n\n    # check if the password satisfies all criteria\n    while not satisfy_criteria(password):\n        password = ''.join(random.choice(characters) for i in range(8))\n\n    return password\n\n# function to check if a given password satisfies all criteria\ndef satisfy_criteria(password):\n\n    lower_chars = [c for c in password if c.islower()]\n    upper_chars = [c for c in password if c.isupper()]\n    special_chars = [c for c in password if c in string.punctuation]\n    numbers = [c for c in password if c.isdigit()]\n\n    # check if all criteria are met\n    if len(lower_chars) == 0 or len(upper_chars) == 0 or len(special_chars) == 0 or len(numbers) == 0:\n        return False\n    else:\n        return True\n\nif __name__ == '__main__':\n    \n    # generate a random password\n    password = generate_password()\n    \n    # print the generated password\n    print('Generated Password: ' + password)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to generate a random password that satisfies a given set of criteria.\n\n### Input:\nA password should contain at least one upper case character, one lower case character, one special character and one number.\n\n### Output:\nimport random\nimport string\n\ndef generate_password():\n    \n    # generate a random string of 8  characters\n    characters = string.ascii_letters + string.digits + '!@#$%^&*'\n    password = ''.join(random.choice(characters) for i in range(8))\n\n    # check if the password satisfies all criteria\n    while not satisfy_criteria(password):\n        password = ''.join(random.choice(characters) for i in range(8))\n\n    return password\n\n# function to check if a given password satisfies all criteria\ndef satisfy_criteria(password):\n\n    lower_chars = [c for c in password if c.islower()]\n    upper_chars = [c for c in password if c.isupper()]\n    special_chars = [c for c in password if c in string.punctuation]\n    numbers = [c for c in password if c.isdigit()]\n\n    # check if all criteria are met\n    if len(lower_chars) == 0 or len(upper_chars) == 0 or len(special_chars) == 0 or len(numbers) == 0:\n        return False\n    else:\n        return True\n\nif __name__ == '__main__':\n    \n    # generate a random password\n    password = generate_password()\n    \n    # print the generated password\n    print('Generated Password: ' + password)"
    },
    {
        "instruction": "Create a class in Python to represent a circle containing methods to calculate the area and circumference.",
        "input": "-",
        "output": "class Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * self.radius * self.radius\n\n    def circumference(self):\n        return 2 * 3.14 * self.radius",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to represent a circle containing methods to calculate the area and circumference.\n\n### Input:\n-\n\n### Output:\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n\n    def area(self):\n        return 3.14 * self.radius * self.radius\n\n    def circumference(self):\n        return 2 * 3.14 * self.radius"
    },
    {
        "instruction": "Optimize a given Python program, by removing any unnecessary imports, improving readability, and making the code more efficient.",
        "input": "import random\nimport sys\n\ndef main():\n   \n    min = 0\n    max = 100\n   \n    num = random.randint(min, max)\n\n    while True:\n        print(\"Guess a number between {} and {}\".format(min, max))\n        guess = int(input())\n   \n        if guess == num:\n            print(\"You guessed it!\")\n            break\n        elif guess > num: \n            max = guess\n        else:\n            min = guess\n\nif __name__ == \"__main__\":\n    sys.exit(main())",
        "output": "import random\n\ndef main():\n   \n    min = 0\n    max = 100\n    num = random.randint(min, max)\n\n    while True:\n        print(f'Guess a number between {min} and {max}')\n        guess = int(input())\n   \n        if guess == num:\n            print(\"You guessed it!\")\n            break\n        elif guess > num: \n            max = guess\n        else:\n            min = guess\n\nif __name__ == \"__main__\":\n    main()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOptimize a given Python program, by removing any unnecessary imports, improving readability, and making the code more efficient.\n\n### Input:\nimport random\nimport sys\n\ndef main():\n   \n    min = 0\n    max = 100\n   \n    num = random.randint(min, max)\n\n    while True:\n        print(\"Guess a number between {} and {}\".format(min, max))\n        guess = int(input())\n   \n        if guess == num:\n            print(\"You guessed it!\")\n            break\n        elif guess > num: \n            max = guess\n        else:\n            min = guess\n\nif __name__ == \"__main__\":\n    sys.exit(main())\n\n### Output:\nimport random\n\ndef main():\n   \n    min = 0\n    max = 100\n    num = random.randint(min, max)\n\n    while True:\n        print(f'Guess a number between {min} and {max}')\n        guess = int(input())\n   \n        if guess == num:\n            print(\"You guessed it!\")\n            break\n        elif guess > num: \n            max = guess\n        else:\n            min = guess\n\nif __name__ == \"__main__\":\n    main()"
    },
    {
        "instruction": "Produce an algorithm in Python to calculate the total area of a polygon given its side lengths?",
        "input": "[2, 3, 4, 5, 6]",
        "output": "def polygon_area(sides):\n\tx = sum(sides) / 2\n\tn = len(sides)\n\t\n\tarea = (x * (x-sides[0]) * (x-sides[1]) * (x-sides[2]) * ... * (x-sides[n-1])) ** 0.5\n\t\n\treturn area\n\ntotal_area = polygon_area([2, 3, 4, 5, 6])\nprint(total_area)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce an algorithm in Python to calculate the total area of a polygon given its side lengths?\n\n### Input:\n[2, 3, 4, 5, 6]\n\n### Output:\ndef polygon_area(sides):\n\tx = sum(sides) / 2\n\tn = len(sides)\n\t\n\tarea = (x * (x-sides[0]) * (x-sides[1]) * (x-sides[2]) * ... * (x-sides[n-1])) ** 0.5\n\t\n\treturn area\n\ntotal_area = polygon_area([2, 3, 4, 5, 6])\nprint(total_area)"
    },
    {
        "instruction": "Create a function in Python to check if a number is even or odd, without using modulo (%) operator.",
        "input": "Not applicable",
        "output": "def is_even_odd(num):\n if int(num / 2) * 2 == num:\n return \"even\"\n else:\n return \"odd\"",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to check if a number is even or odd, without using modulo (%) operator.\n\n### Input:\nNot applicable\n\n### Output:\ndef is_even_odd(num):\n if int(num / 2) * 2 == num:\n return \"even\"\n else:\n return \"odd\""
    },
    {
        "instruction": "Improve the execution time of a given Python program.",
        "input": "def factorial(n):\n    if n==1 or n==0:\n        return 1\n    return n * factorial(n-1)\n\nnum = 4\nprint(factorial(num))",
        "output": "def factorial(n):\n    ans = 1\n    while(n > 1):\n        ans *= n\n        n -= 1\n    return ans\n\nnum = 4\nprint(factorial(num))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImprove the execution time of a given Python program.\n\n### Input:\ndef factorial(n):\n    if n==1 or n==0:\n        return 1\n    return n * factorial(n-1)\n\nnum = 4\nprint(factorial(num))\n\n### Output:\ndef factorial(n):\n    ans = 1\n    while(n > 1):\n        ans *= n\n        n -= 1\n    return ans\n\nnum = 4\nprint(factorial(num))"
    },
    {
        "instruction": "Generate a python program to sort an array using Merge sort method.",
        "input": "arr = [6, 5, 3, 1, 8, 7, 2, 4]",
        "output": "# Sort the array using Merge sort\ndef mergeSort(arr): \n    if len(arr) > 1: \n        mid = len(arr)//2 \n        L = arr[:mid] \n        R = arr[mid:] \n  \n        # Sort the left and right side\n        mergeSort(L) \n        mergeSort(R) \n  \n        # Merge the parts recursively \n        i = j = k = 0\n        \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n          \n        # Checking if any element was left \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1\n  \n# Print the sorted array\nmergeSort(arr) \nprint(\"Sorted array is:\",arr)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program to sort an array using Merge sort method.\n\n### Input:\narr = [6, 5, 3, 1, 8, 7, 2, 4]\n\n### Output:\n# Sort the array using Merge sort\ndef mergeSort(arr): \n    if len(arr) > 1: \n        mid = len(arr)//2 \n        L = arr[:mid] \n        R = arr[mid:] \n  \n        # Sort the left and right side\n        mergeSort(L) \n        mergeSort(R) \n  \n        # Merge the parts recursively \n        i = j = k = 0\n        \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n          \n        # Checking if any element was left \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1\n  \n# Print the sorted array\nmergeSort(arr) \nprint(\"Sorted array is:\",arr)"
    },
    {
        "instruction": "Create a Binomial Tree in python",
        "input": "",
        "output": "class BinomialTree:\n    def __init__(self, n):\n        self.n = n\n\n    def create(self):\n        tree = [None] * self.n\n        tree[0] = 1\n\n        for i in range(self.n):\n            for j in range(i+1):\n                if tree[i] is not None:\n                    if j == 0:\n                        tree[i + 1] = tree[i] * 2\n                    else:\n                        tree[i + 1] += tree[i - j]\n        return tree",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Binomial Tree in python\n\n### Input:\n\n\n### Output:\nclass BinomialTree:\n    def __init__(self, n):\n        self.n = n\n\n    def create(self):\n        tree = [None] * self.n\n        tree[0] = 1\n\n        for i in range(self.n):\n            for j in range(i+1):\n                if tree[i] is not None:\n                    if j == 0:\n                        tree[i + 1] = tree[i] * 2\n                    else:\n                        tree[i + 1] += tree[i - j]\n        return tree"
    },
    {
        "instruction": "Write a web scraper in Python to collect web data from a website.",
        "input": "Website: https://example.com",
        "output": "import requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://example.com\"\n\ntry: \n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    # your web scraping code here\n\nexcept Exception as e:\n    print('Error:', e)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a web scraper in Python to collect web data from a website.\n\n### Input:\nWebsite: https://example.com\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\n\nurl = \"https://example.com\"\n\ntry: \n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    # your web scraping code here\n\nexcept Exception as e:\n    print('Error:', e)"
    },
    {
        "instruction": "Create an HTML page that displays a 3-column table containing a list of programming language features and benefits.",
        "input": "No input.",
        "output": "<html>\n  <head>\n    <title>Programming Languages Features and Benefits</title>\n  </head>\n  <body>\n    <table>\n      <tr>\n        <th>Language</th>\n        <th>Feature</th>\n        <th>Benefit</th>\n      </tr>\n      <tr>\n        <td>Python</td>\n        <td>Strong support for object-oriented programming </td> \n        <td>Allows for more efficient and organized programming </td>\n      </tr>\n      <tr>\n        <td>C++</td>\n        <td>Ease of integration into other code</td> \n        <td>Reduces amount of code needed to add existing libraries </td>\n      </tr>\n      <tr>\n        <td>JavaScript</td>\n        <td> Third-party libraries available </td> \n        <td>Allows developers to access existing functions quickly without having to code them </td>\n      </tr>\n      <tr>\n        <td>C#</td>\n        <td>Multiple type systems available </td> \n        <td>Allows you to use the type system more suited to the tasks at hand </td>\n      </tr>\n    </table>\n  </body>\n</html>",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an HTML page that displays a 3-column table containing a list of programming language features and benefits.\n\n### Input:\nNo input.\n\n### Output:\n<html>\n  <head>\n    <title>Programming Languages Features and Benefits</title>\n  </head>\n  <body>\n    <table>\n      <tr>\n        <th>Language</th>\n        <th>Feature</th>\n        <th>Benefit</th>\n      </tr>\n      <tr>\n        <td>Python</td>\n        <td>Strong support for object-oriented programming </td> \n        <td>Allows for more efficient and organized programming </td>\n      </tr>\n      <tr>\n        <td>C++</td>\n        <td>Ease of integration into other code</td> \n        <td>Reduces amount of code needed to add existing libraries </td>\n      </tr>\n      <tr>\n        <td>JavaScript</td>\n        <td> Third-party libraries available </td> \n        <td>Allows developers to access existing functions quickly without having to code them </td>\n      </tr>\n      <tr>\n        <td>C#</td>\n        <td>Multiple type systems available </td> \n        <td>Allows you to use the type system more suited to the tasks at hand </td>\n      </tr>\n    </table>\n  </body>\n</html>"
    },
    {
        "instruction": "Create an algorithm in Python that takes a list of strings as input and checks whether the strings meet a certain length requirement.",
        "input": "word_list = [\"cat\", \"hello\", \"moon\"]",
        "output": "def checkLength(word_list, min_length):\n    \"\"\"\n    Checks all words in a list to ensure they are at least a certain length\n \n    Args:\n        word_list (List[str]): List of words to be evaluated\n        min_length (int): Minimum length of words accepted\n    Returns:\n        (bool): True if all words meet the minimum length criteria, False otherwise\n    \"\"\"\n    for word in word_list:\n        if len(word) < min_length:\n            return False\n\n    return True\n\nword_list = [\"cat\", \"hello\", \"moon\"]\nmin_length = 3\n\nis_valid = checkLength(word_list, min_length)\n\nprint(is_valid) # True",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python that takes a list of strings as input and checks whether the strings meet a certain length requirement.\n\n### Input:\nword_list = [\"cat\", \"hello\", \"moon\"]\n\n### Output:\ndef checkLength(word_list, min_length):\n    \"\"\"\n    Checks all words in a list to ensure they are at least a certain length\n \n    Args:\n        word_list (List[str]): List of words to be evaluated\n        min_length (int): Minimum length of words accepted\n    Returns:\n        (bool): True if all words meet the minimum length criteria, False otherwise\n    \"\"\"\n    for word in word_list:\n        if len(word) < min_length:\n            return False\n\n    return True\n\nword_list = [\"cat\", \"hello\", \"moon\"]\nmin_length = 3\n\nis_valid = checkLength(word_list, min_length)\n\nprint(is_valid) # True"
    },
    {
        "instruction": "Write a Python program to convert a given string to uppercase without using the upper() or upperCase() functions.",
        "input": "",
        "output": "# Convert the given string to uppercase\ndef to_uppercase(string):\n  result = ''\n  # Loops till the length of string \n  for char in string:     \n    # Append only alphabets in result \n    # by checking case \n    if ord(char) >= 97 and ord(char) <= 122:\n      result = result + chr(ord(char) - 32) \n    else:\n        result = result + char \n\n  # Print result after conversion\n  print( result ) \n\n# Driver code\nstring = \"This is geeksforgeeks\"\nto_uppercase(string)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a given string to uppercase without using the upper() or upperCase() functions.\n\n### Input:\n\n\n### Output:\n# Convert the given string to uppercase\ndef to_uppercase(string):\n  result = ''\n  # Loops till the length of string \n  for char in string:     \n    # Append only alphabets in result \n    # by checking case \n    if ord(char) >= 97 and ord(char) <= 122:\n      result = result + chr(ord(char) - 32) \n    else:\n        result = result + char \n\n  # Print result after conversion\n  print( result ) \n\n# Driver code\nstring = \"This is geeksforgeeks\"\nto_uppercase(string)"
    },
    {
        "instruction": "Create a function to sort the below list of numbers in ascending order in Python.",
        "input": "[3,7,1,9,2]",
        "output": "def sorting_ascending(lst): \n    lst.sort() \n    return lst",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to sort the below list of numbers in ascending order in Python.\n\n### Input:\n[3,7,1,9,2]\n\n### Output:\ndef sorting_ascending(lst): \n    lst.sort() \n    return lst"
    },
    {
        "instruction": "Create a Python module that combines two lists into a dictionary. The dictionary should have the elements of the first list as its keys and the elements of the second list as its values.",
        "input": "list1 = [1, 2, 3]\nlist2 = [\"one\", \"two\", \"three\"]",
        "output": "def combine_lists_to_dict(list1, list2):\n    return {list1[i]: list2[i] for i in range(len(list1))}\n\nlist1 = [1, 2, 3]\nlist2 = [\"one\", \"two\", \"three\"]\n\nresult = combine_lists_to_dict(list1, list2)\nprint(result)  # {1: 'one', 2: 'two', 3: 'three'}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python module that combines two lists into a dictionary. The dictionary should have the elements of the first list as its keys and the elements of the second list as its values.\n\n### Input:\nlist1 = [1, 2, 3]\nlist2 = [\"one\", \"two\", \"three\"]\n\n### Output:\ndef combine_lists_to_dict(list1, list2):\n    return {list1[i]: list2[i] for i in range(len(list1))}\n\nlist1 = [1, 2, 3]\nlist2 = [\"one\", \"two\", \"three\"]\n\nresult = combine_lists_to_dict(list1, list2)\nprint(result)  # {1: 'one', 2: 'two', 3: 'three'}"
    },
    {
        "instruction": "Identfy the techniques used in the code snippet to achieve concurrent execution.",
        "input": "import threading \n\n def func1():",
        "output": "The code snippet uses the threading module from Python to achieve concurrent execution. This is done by using the Thread class to create new threads and using the start() method to start each thread. The Thread class also provides methods for synchronization and communication between the threads, such as the Lock and Condition Objects.",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIdentfy the techniques used in the code snippet to achieve concurrent execution.\n\n### Input:\nimport threading \n\n def func1():\n\n### Output:\nThe code snippet uses the threading module from Python to achieve concurrent execution. This is done by using the Thread class to create new threads and using the start() method to start each thread. The Thread class also provides methods for synchronization and communication between the threads, such as the Lock and Condition Objects."
    },
    {
        "instruction": "Develop a python class to create a tree structure from a given list of tuples.",
        "input": "tuples = [('a', 'b'), ('a', 'c'), ('b', 'd'), ('b', 'e')]",
        "output": "class TreeNode: \n  \n    # Constructor to create a new node \n    def __init__(self, data): \n        self.data = data \n        self.children = []\n  \n    def add_child(self, node): \n        self.children.append(node) \n  \n# function to create tree from given tuples \ndef createTree(tuples): \n    nodes = {} \n    for x, y in tuples: \n  \n        # If x is not already a key \n        if x not in nodes: \n            # Create a new TreeNode \n            nodes[x] = TreeNode(x) \n  \n        # If y is not already a key \n        if y not in nodes: \n            # Create a new TreeNode \n            nodes[y] = TreeNode(y) \n  \n        # Append the new TreeNode to the children \n        # of the node X \n        nodes[x].add_child(nodes[y]) \n  \n    # Return the root of the tree \n    return nodes['a']",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python class to create a tree structure from a given list of tuples.\n\n### Input:\ntuples = [('a', 'b'), ('a', 'c'), ('b', 'd'), ('b', 'e')]\n\n### Output:\nclass TreeNode: \n  \n    # Constructor to create a new node \n    def __init__(self, data): \n        self.data = data \n        self.children = []\n  \n    def add_child(self, node): \n        self.children.append(node) \n  \n# function to create tree from given tuples \ndef createTree(tuples): \n    nodes = {} \n    for x, y in tuples: \n  \n        # If x is not already a key \n        if x not in nodes: \n            # Create a new TreeNode \n            nodes[x] = TreeNode(x) \n  \n        # If y is not already a key \n        if y not in nodes: \n            # Create a new TreeNode \n            nodes[y] = TreeNode(y) \n  \n        # Append the new TreeNode to the children \n        # of the node X \n        nodes[x].add_child(nodes[y]) \n  \n    # Return the root of the tree \n    return nodes['a']"
    },
    {
        "instruction": "Design a Python script to generate a frequency table from a given data set.",
        "input": "data_set = [9, 5, 9, 8, 5, 5, 9]",
        "output": "def calculateFrequency(data_set):\n    frequency_table = dict()\n    for item in data_set:\n        frequency_table[item] = frequency_table.get(item, 0) + 1\n    return frequency_table\n\ndata_set = [9,5,9,8,5,5,9]\nfrequency_table = calculateFrequency(data_set)\nprint(frequency_table) # Outputs {9: 3, 5: 3, 8: 1}",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script to generate a frequency table from a given data set.\n\n### Input:\ndata_set = [9, 5, 9, 8, 5, 5, 9]\n\n### Output:\ndef calculateFrequency(data_set):\n    frequency_table = dict()\n    for item in data_set:\n        frequency_table[item] = frequency_table.get(item, 0) + 1\n    return frequency_table\n\ndata_set = [9,5,9,8,5,5,9]\nfrequency_table = calculateFrequency(data_set)\nprint(frequency_table) # Outputs {9: 3, 5: 3, 8: 1}"
    },
    {
        "instruction": "Create a quick sort algorithm in Python.",
        "input": "",
        "output": "def quick_sort(a): \n    if len(a) <= 1: \n        return a \n  \n    lower, equal, greater = [], [], [] \n  \n    pivot = a[len(a) - 1] \n  \n    for i in a: \n        if i < pivot: \n            lower.append(i) \n        elif i == pivot: \n            equal.append(i) \n        else: \n            greater.append(i) \n  \n    return quick_sort(lower) + equal + quick_sort(greater)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a quick sort algorithm in Python.\n\n### Input:\n\n\n### Output:\ndef quick_sort(a): \n    if len(a) <= 1: \n        return a \n  \n    lower, equal, greater = [], [], [] \n  \n    pivot = a[len(a) - 1] \n  \n    for i in a: \n        if i < pivot: \n            lower.append(i) \n        elif i == pivot: \n            equal.append(i) \n        else: \n            greater.append(i) \n  \n    return quick_sort(lower) + equal + quick_sort(greater)"
    },
    {
        "instruction": "Write a Python program to find the number of uniquely identifiable countries in the list given below.",
        "input": "['GB', 'CH', 'GB', 'US', 'CH', 'CN', 'ES', 'CN']",
        "output": "def unique_countries(lst): \n    return len(set(lst))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the number of uniquely identifiable countries in the list given below.\n\n### Input:\n['GB', 'CH', 'GB', 'US', 'CH', 'CN', 'ES', 'CN']\n\n### Output:\ndef unique_countries(lst): \n    return len(set(lst))"
    },
    {
        "instruction": "Given a list of strings, write a Python program to convert each of the strings to lowercase.",
        "input": "[\"My Heart Will Go On\",\"We Are The Champions\",\"Thriller\",\"Welcome To The Jungle\",\"Eye Of The Tiger\",\"Money For Nothing\",\"Billie Jean\",\"Purple Rain\",\"The Show Must Go On\",\"Bohemian Rhapsody\"]",
        "output": "new_list = []\nfor item in [\"My Heart Will Go On\",\"We Are The Champions\",\"Thriller\",\"Welcome To The Jungle\",\"Eye Of The Tiger\",\"Money For Nothing\",\"Billie Jean\",\"Purple Rain\",\"The Show Must Go On\",\"Bohemian Rhapsody\"]:\n    new_list.append(item.lower())\n\nprint(new_list)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of strings, write a Python program to convert each of the strings to lowercase.\n\n### Input:\n[\"My Heart Will Go On\",\"We Are The Champions\",\"Thriller\",\"Welcome To The Jungle\",\"Eye Of The Tiger\",\"Money For Nothing\",\"Billie Jean\",\"Purple Rain\",\"The Show Must Go On\",\"Bohemian Rhapsody\"]\n\n### Output:\nnew_list = []\nfor item in [\"My Heart Will Go On\",\"We Are The Champions\",\"Thriller\",\"Welcome To The Jungle\",\"Eye Of The Tiger\",\"Money For Nothing\",\"Billie Jean\",\"Purple Rain\",\"The Show Must Go On\",\"Bohemian Rhapsody\"]:\n    new_list.append(item.lower())\n\nprint(new_list)"
    },
    {
        "instruction": "Create a Python program to implement the Levenshtein Distance algorithm to measure the similarity between two strings.",
        "input": "\"intention\", \"execution\"",
        "output": "def levenshteinDistance(str1, str2):\n  rows = len(str1)+1\n  cols = len(str2)+1\n  distance = [[0 for i in range(cols)] for x in range(rows)]\n\n  for i in range(1, rows):\n    for j in range(1, cols):\n      if str1[i-1] == str2[j-1]:\n        cost = 0\n      else:\n        cost = 1\n\n      distance[i][j] = min(distance[i-1][j] + 1,\n                           distance[i][j-1] + 1,\n                           distance[i-1][j-1] + cost)\n\n  return distance[rows-1][cols-1]\n\nstr1 = \"intention\"\nstr2 = \"execution\"\n\nprint(\"Levenshtein Distance between \"+str1 +\" and \"+ str2+\" is\", levenshteinDistance(str1, str2))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to implement the Levenshtein Distance algorithm to measure the similarity between two strings.\n\n### Input:\n\"intention\", \"execution\"\n\n### Output:\ndef levenshteinDistance(str1, str2):\n  rows = len(str1)+1\n  cols = len(str2)+1\n  distance = [[0 for i in range(cols)] for x in range(rows)]\n\n  for i in range(1, rows):\n    for j in range(1, cols):\n      if str1[i-1] == str2[j-1]:\n        cost = 0\n      else:\n        cost = 1\n\n      distance[i][j] = min(distance[i-1][j] + 1,\n                           distance[i][j-1] + 1,\n                           distance[i-1][j-1] + cost)\n\n  return distance[rows-1][cols-1]\n\nstr1 = \"intention\"\nstr2 = \"execution\"\n\nprint(\"Levenshtein Distance between \"+str1 +\" and \"+ str2+\" is\", levenshteinDistance(str1, str2))"
    },
    {
        "instruction": "Create a simple bot using Python and the ChatterBot library that can greet a user, respond to simple statements, such as \"Hi\" and \"How are you?\", and remember information provided by the user.",
        "input": "Not applicable",
        "output": "from chatterbot import ChatBot\nfrom chatterbot.trainers import ChatterBotCorpusTrainer\n\nbot = ChatBot('Bot')\n\ntrainer = ChatterBotCorpusTrainer(bot)\n\ntrainer.train('chatterbot.corpus.english')\n\nuser_name = input('Enter your name: ')\n\nprint('Hi {0}. How can I help you?'.format(user_name))\n\nwhile True:\n input_statement = input()\n if input_statement == 'quit':\n  break\n response = bot.get_response(input_statement)\n print(response)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple bot using Python and the ChatterBot library that can greet a user, respond to simple statements, such as \"Hi\" and \"How are you?\", and remember information provided by the user.\n\n### Input:\nNot applicable\n\n### Output:\nfrom chatterbot import ChatBot\nfrom chatterbot.trainers import ChatterBotCorpusTrainer\n\nbot = ChatBot('Bot')\n\ntrainer = ChatterBotCorpusTrainer(bot)\n\ntrainer.train('chatterbot.corpus.english')\n\nuser_name = input('Enter your name: ')\n\nprint('Hi {0}. How can I help you?'.format(user_name))\n\nwhile True:\n input_statement = input()\n if input_statement == 'quit':\n  break\n response = bot.get_response(input_statement)\n print(response)"
    },
    {
        "instruction": "Create a program in Python to evaluate a strinf expression and solve it.",
        "input": "exp = '4+2/3'",
        "output": "def solve_expression(exp):\n # Solve the expression\n return eval(exp)\n\nexp = '4+2/3'\nres = solve_expression(exp)\nprint(res) # Output: 4.666666666666667",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python to evaluate a strinf expression and solve it.\n\n### Input:\nexp = '4+2/3'\n\n### Output:\ndef solve_expression(exp):\n # Solve the expression\n return eval(exp)\n\nexp = '4+2/3'\nres = solve_expression(exp)\nprint(res) # Output: 4.666666666666667"
    },
    {
        "instruction": "This code allows running a function on a large dataset with a set of parameters. Results are extracted and saved in a way that they can easily be compared with another set. The data should be organized as the following: (names of images can be changed but must be passed as parameters to this function). The function `test_function` takes the following arguments: function to test (`-f`), dataset directory (`-d`), arguments to pass to the function that is tested (`-p`), number of CPU used for testing (`-cpu-nb`), and requirements on center, study, ... that must be satisfied by the json file of each tested subjects (`-json`). The function `generate_data_list` is used to construct the data list from the data set. The function `process_results` is used to process the results. The function `function_launcher` is used to launch the function. The function `init_worker` is used to initialize the worker. The function `get_parser` is used to initialize the parser.",
        "input": "",
        "output": "#!/usr/bin/env python\n#########################################################################################\n#\n# This function allows to run a function on a large dataset with a set of parameters.\n# Results are extracted and saved in a way that they can easily be compared with another set.\n#\n# Data should be organized as the following:\n# (names of images can be changed but must be passed as parameters to this function)\n#\n# data/\n# ......subject_name_01/\n# ......subject_name_02/\n# .................t1/\n# .........................subject_02_anything_t1.nii.gz\n# .........................some_landmarks_of_vertebral_levels.nii.gz\n# .........................subject_02_manual_segmentation_t1.nii.gz\n# .................t2/\n# .........................subject_02_anything_t2.nii.gz\n# .........................some_landmarks_of_vertebral_levels.nii.gz\n# .........................subject_02_manual_segmentation_t2.nii.gz\n# .................t2star/\n# .........................subject_02_anything_t2star.nii.gz\n# .........................subject_02_manual_segmentation_t2star.nii.gz\n# ......subject_name_03/\n#          .\n#          .\n#          .\n#\n# ---------------------------------------------------------------------------------------\n# Copyright (c) 2015 Polytechnique Montreal <www.neuro.polymtl.ca>\n# Author: Sara Dupont, Benjamin De Leener\n# Modified: 2015-09-30\n#\n# About the license: see the file LICENSE.TXT\n#########################################################################################\nimport sys\nimport commands\nimport platform\nimport signal\nfrom time import time, strftime\nfrom msct_parser import Parser\nimport sct_utils as sct\nimport os\nimport copy_reg\nimport types\nimport pandas as pd\nimport json\n\n\n# get path of the toolbox\n# TODO: put it back below when working again (julien 2016-04-04)\n# <<<\n# OLD\n# status, path_sct = commands.getstatusoutput('echo $SCT_DIR')\n# NEW\npath_script = os.path.dirname(__file__)\npath_sct = os.path.dirname(path_script)\n# >>>\n# append path that contains scripts, to be able to load modules\nsys.path.append(path_sct + '/scripts')\nsys.path.append(path_sct + '/testing')\n\n\ndef _pickle_method(method):\n    \"\"\"\n    Author: Steven Bethard (author of argparse)\n    http://bytes.com/topic/python/answers/552476-why-cant-you-pickle-instancemethods\n    \"\"\"\n    func_name = method.im_func.__name__\n    obj = method.im_self\n    cls = method.im_class\n    cls_name = ''\n    if func_name.startswith('__') and not func_name.endswith('__'):\n        cls_name = cls.__name__.lstrip('_')\n    if cls_name:\n        func_name = '_' + cls_name + func_name\n    return _unpickle_method, (func_name, obj, cls)\n\n\ndef _unpickle_method(func_name, obj, cls):\n    \"\"\"\n    Author: Steven Bethard\n    http://bytes.com/topic/python/answers/552476-why-cant-you-pickle-instancemethods\n    \"\"\"\n    for cls in cls.mro():\n        try:\n            func = cls.__dict__[func_name]\n        except KeyError:\n            pass\n        else:\n            break\n    return func.__get__(obj, cls)\n\ncopy_reg.pickle(types.MethodType, _pickle_method, _unpickle_method)\n\n\ndef generate_data_list(folder_dataset, json_requirements=None, verbose=1):\n    \"\"\"\n    Construction of the data list from the data set\n    This function return a list of directory (in folder_dataset) in which the contrast is present.\n    :return data:\n    \"\"\"\n    data_subjects, subjects_dir = [], []\n\n    # each directory in folder_dataset should be a directory of a subject\n    for subject_dir in os.listdir(folder_dataset):\n        if not subject_dir.startswith('.') and os.path.isdir(folder_dataset + subject_dir):\n            if read_json(folder_dataset + subject_dir, json_requirements=json_requirements):\n                data_subjects.append(folder_dataset + subject_dir + '/')\n                subjects_dir.append(subject_dir)\n\n    if not data_subjects:\n        sct.printv('ERROR: No subject data were found in ' + folder_dataset + '. '\n                   'Please organize your data correctly or provide a correct dataset.',\n                   verbose=verbose, type='error')\n\n    return data_subjects, subjects_dir\n\ndef read_json(path_dir, json_requirements=None, fname_json='dataset_description.json'):\n    path_dir = sct.slash_at_the_end(path_dir, slash=1)\n    if fname_json not in os.listdir(path_dir) and json_requirements is not None:\n        accept_subject = False\n    elif json_requirements is None:\n        accept_subject = True\n    else:\n        json_file = open(path_dir+fname_json)\n        dic_info = json.load(json_file)\n        json_file.close()\n        # pass keys and items to lower case\n        dic_info = dict((k.lower(), v.lower()) for k, v in dic_info.iteritems())\n        # if no condition is not verified, accept subject\n        accept_subject = True\n        # read requirements:\n        list_conditions = json_requirements.split(',')\n        for condition in list_conditions:\n            key, val = condition.split('=')\n            key, val = key.lower(), val.lower()\n            # if key do not exist, do not accept subject\n            if key not in dic_info.keys():\n                accept_subject = False\n            # if value for this key is not the one required, do not accept subject\n            elif dic_info[key] != val:\n                accept_subject = False\n\n    return accept_subject\n\n\ndef process_results(results, subjects_name, function, folder_dataset, parameters):\n    try:\n        results_dataframe = pd.concat([result[2] for result in results])\n        results_dataframe.loc[:, 'subject'] = pd.Series(subjects_name, index=results_dataframe.index)\n        results_dataframe.loc[:, 'script'] = pd.Series([function]*len(subjects_name), index=results_dataframe.index)\n        results_dataframe.loc[:, 'dataset'] = pd.Series([folder_dataset]*len(subjects_name), index=results_dataframe.index)\n        results_dataframe.loc[:, 'parameters'] = pd.Series([parameters] * len(subjects_name), index=results_dataframe.index)\n        return results_dataframe\n    except KeyboardInterrupt:\n        return 'KeyboardException'\n    except Exception as e:\n        sct.printv('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), 1, 'warning')\n        sct.printv(str(e), 1, 'warning')\n        sys.exit(2)\n\n\ndef function_launcher(args):\n    import importlib\n    # append local script to PYTHONPATH for import\n    sys.path.append(os.path.abspath(os.curdir))\n    script_to_be_run = importlib.import_module('test_' + args[0])  # import function as a module\n    try:\n        output = script_to_be_run.test(*args[1:])\n    except:\n        import traceback\n        print('%s: %s' % ('test_' + args[0], traceback.format_exc()))\n        # output = (1, 'ERROR: Function crashed', 'No result')\n        from pandas import DataFrame\n        status_script = 1\n        output_script = 'ERROR: Function crashed.'\n        output = (status_script, output_script, DataFrame(data={'status': int(status_script), 'output': output_script}, index=['']))\n    return output\n    # return script_to_be_run.test(*args[1:])\n\n\ndef init_worker():\n    signal.signal(signal.SIGINT, signal.SIG_IGN)\n\n\ndef test_function(function, folder_dataset, parameters='', nb_cpu=None, json_requirements=None, verbose=1):\n    \"\"\"\n    Run a test function on the dataset using multiprocessing and save the results\n    :return: results\n    # results are organized as the following: tuple of (status, output, DataFrame with results)\n    \"\"\"\n\n    # generate data list from folder containing\n    data_subjects, subjects_name = generate_data_list(folder_dataset, json_requirements=json_requirements)\n\n    # All scripts that are using multithreading with ITK must not use it when using multiprocessing on several subjects\n    os.environ[\"ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS\"] = \"1\"\n\n    from multiprocessing import Pool\n\n    # create datasets with parameters\n    import itertools\n    data_and_params = itertools.izip(itertools.repeat(function), data_subjects, itertools.repeat(parameters))\n\n    pool = Pool(processes=nb_cpu, initializer=init_worker)\n\n    try:\n        async_results = pool.map_async(function_launcher, data_and_params).get(9999999)\n        # results = process_results(async_results.get(9999999), subjects_name, function, folder_dataset, parameters)  # get the sorted results once all jobs are finished\n        pool.close()\n        pool.join()  # waiting for all the jobs to be done\n        results = process_results(async_results, subjects_name, function, folder_dataset, parameters)  # get the sorted results once all jobs are finished\n    except KeyboardInterrupt:\n        print \"\\nWarning: Caught KeyboardInterrupt, terminating workers\"\n        pool.terminate()\n        pool.join()\n        # return\n        # raise KeyboardInterrupt\n        # sys.exit(2)\n    except Exception as e:\n        sct.printv('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), 1, 'warning')\n        sct.printv(str(e), 1, 'warning')\n        pool.terminate()\n        pool.join()\n        # raise Exception\n        # sys.exit(2)\n\n    return results\n\n\ndef get_parser():\n    # Initialize parser\n    parser = Parser(__file__)\n\n    # Mandatory arguments\n    parser.usage.set_description(\"\")\n    parser.add_option(name=\"-f\",\n                      type_value=\"str\",\n                      description=\"Function to test.\",\n                      mandatory=True,\n                      example=\"sct_propseg\")\n\n    parser.add_option(name=\"-d\",\n                      type_value=\"folder\",\n                      description=\"Dataset directory.\",\n                      mandatory=True,\n                      example=\"dataset_full/\")\n\n    parser.add_option(name=\"-p\",\n                      type_value=\"str\",\n                      description=\"Arguments to pass to the function that is tested. Please put double-quotes if there are spaces in the list of parameters.\\n\"\n                                  \"Image paths must be contains in the arguments list.\",\n                      mandatory=False)\n\n    parser.add_option(name=\"-json\",\n                      type_value=\"str\",\n                      description=\"Requirements on center, study, ... that must be satisfied by the json file of each tested subjects\\n\"\n                                  \"Syntax:  center=unf,study=errsm,gm_model=0\",\n                      mandatory=False)\n\n    parser.add_option(name=\"-cpu-nb\",\n                      type_value=\"int\",\n                      description=\"Number of CPU used for testing. 0: no multiprocessing. If not provided, \"\n                                  \"it uses all the available cores.\",\n                      mandatory=False,\n                      default_value=0,\n                      example='42')\n\n    parser.add_option(name=\"-log\",\n                      type_value='multiple_choice',\n                      description=\"Redirects Terminal verbose to log file.\",\n                      mandatory=False,\n                      example=['0', '1'],\n                      default_value='1')\n\n    parser.add_option(name=\"-v\",\n                      type_value=\"multiple_choice\",\n                      description=\"Verbose. 0: nothing, 1: basic, 2: extended.\",\n                      mandatory=False,\n                      example=['0', '1', '2'],\n                      default_value='1')\n\n    return parser\n\n\n# ====================================================================================================\n# Start program\n# ====================================================================================================\nif __name__ == \"__main__\":\n\n    # get parameters\n    parser = get_parser()\n    arguments = parser.parse(sys.argv[1:])\n    function_to_test = arguments[\"-f\"]\n    dataset = arguments[\"-d\"]\n    dataset = sct.slash_at_the_end(dataset, slash=1)\n    parameters = ''\n    if \"-p\" in arguments:\n        parameters = arguments[\"-p\"]\n    json_requirements = None\n    if \"-json\" in arguments:\n        json_requirements = arguments[\"-json\"]\n    nb_cpu = None\n    if \"-cpu-nb\" in arguments:\n        nb_cpu = arguments[\"-cpu-nb\"]\n    create_log = int(arguments['-log'])\n    verbose = arguments[\"-v\"]\n\n    # start timer\n    start_time = time()\n    # create single time variable for output names\n    output_time = strftime(\"%y%m%d%H%M%S\")\n    print 'Testing started on: '+strftime(\"%Y-%m-%d %H:%M:%S\")\n\n    # build log file name\n    if create_log:\n        file_log = 'results_test_'+function_to_test+'_'+output_time\n        orig_stdout = sys.stdout\n        fname_log = file_log+'.log'\n        handle_log = file(fname_log, 'w')\n        # redirect to log file\n        sys.stdout = handle_log\n        print 'Testing started on: '+strftime(\"%Y-%m-%d %H:%M:%S\")\n\n    # get path of the toolbox\n    path_script = os.path.dirname(__file__)\n    path_sct = os.path.dirname(path_script)\n\n    # fetch true commit number and branch (do not use commit.txt which is wrong)\n    path_curr = os.path.abspath(os.curdir)\n    os.chdir(path_sct)\n    sct_commit = commands.getoutput('git rev-parse HEAD')\n    if not sct_commit.isalnum():\n        print 'WARNING: Cannot retrieve SCT commit'\n        sct_commit = 'unknown'\n        sct_branch = 'unknown'\n    else:\n        sct_branch = commands.getoutput('git branch --contains '+sct_commit).strip('* ')\n    # with open (path_sct+\"/version.txt\", \"r\") as myfile:\n    #     version_sct = myfile.read().replace('\\n', '')\n    # with open (path_sct+\"/commit.txt\", \"r\") as myfile:\n    #     commit_sct = myfile.read().replace('\\n', '')\n    print 'SCT commit/branch: '+sct_commit+'/'+sct_branch\n    os.chdir(path_curr)\n\n    # check OS\n    platform_running = sys.platform\n    if (platform_running.find('darwin') != -1):\n        os_running = 'osx'\n    elif (platform_running.find('linux') != -1):\n        os_running = 'linux'\n    print 'OS: '+os_running+' ('+platform.platform()+')'\n\n    # check hostname\n    print 'Hostname:', platform.node()\n\n    # Check number of CPU cores\n    from multiprocessing import cpu_count\n    # status, output = sct.run('echo $ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS', 0)\n    print 'CPU cores: ' + str(cpu_count())  # + ', Used by SCT: '+output\n\n    # check RAM\n    sct.checkRAM(os_running, 0)\n\n    # test function\n    try:\n        results = test_function(function_to_test, dataset, parameters, nb_cpu, json_requirements, verbose)\n        pd.set_option('display.max_rows', 500)\n        pd.set_option('display.max_columns', 500)\n        pd.set_option('display.width', 1000)\n        results_subset = results.drop('script', 1).drop('dataset', 1).drop('parameters', 1).drop('output', 1)\n        results_display = results_subset\n\n        # save panda structure\n        if create_log:\n            results_subset.to_pickle(file_log+'.pickle')\n\n        # mean\n        results_mean = results_subset[results_subset.status != 200].mean(numeric_only=True)\n        results_mean['subject'] = 'Mean'\n        results_mean.set_value('status', float('NaN'))  # set status to NaN\n        # results_display = results_display.append(results_mean, ignore_index=True)\n\n        # std\n        results_std = results_subset[results_subset.status != 200].std(numeric_only=True)\n        results_std['subject'] = 'STD'\n        results_std.set_value('status', float('NaN'))  # set status to NaN\n        # results_display = results_display.append(results_std, ignore_index=True)\n\n        # count tests that passed\n        count_passed = results_subset.status[results_subset.status == 0].count()\n        count_crashed = results_subset.status[results_subset.status == 1].count()\n        # count tests that ran\n        count_ran = results_subset.status[results_subset.status != 200].count()\n\n        # results_display = results_display.set_index('subject')\n        # jcohenadad, 2015-10-27: added .reset_index() for better visual clarity\n        results_display = results_display.set_index('subject').reset_index()\n\n        print '\\nCommand: \"' + function_to_test + ' ' + parameters\n        print 'Dataset: ' + dataset\n        # display general results\n        print '\\nGLOBAL RESULTS:'\n        elapsed_time = time() - start_time\n        print 'Duration: ' + str(int(round(elapsed_time)))+'s'\n        # display results\n        print 'Passed: ' + str(count_passed) + '/' + str(count_ran)\n        print 'Crashed: ' + str(count_crashed) + '/' + str(count_ran)\n        # build mean/std entries\n        dict_mean = results_mean.to_dict()\n        dict_mean.pop('status')\n        dict_mean.pop('subject')\n        print 'Mean: ' + str(dict_mean)\n        dict_std = results_std.to_dict()\n        dict_std.pop('status')\n        dict_std.pop('subject')\n        print 'STD: ' + str(dict_std)\n\n        # print detailed results\n        print '\\nDETAILED RESULTS:'\n        print results_display.to_string()\n        print 'Status: 0: Passed | 1: Crashed | 99: Failed | 200: Input file(s) missing | 201: Ground-truth file(s) missing'\n\n    except Exception as err:\n        print err\n\n    # stop file redirection\n    if create_log:\n        sys.stdout.close()\n        sys.stdout = orig_stdout\n        # display log file to Terminal\n        handle_log = file(fname_log, 'r')\n        print handle_log.read()\n",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nThis code allows running a function on a large dataset with a set of parameters. Results are extracted and saved in a way that they can easily be compared with another set. The data should be organized as the following: (names of images can be changed but must be passed as parameters to this function). The function `test_function` takes the following arguments: function to test (`-f`), dataset directory (`-d`), arguments to pass to the function that is tested (`-p`), number of CPU used for testing (`-cpu-nb`), and requirements on center, study, ... that must be satisfied by the json file of each tested subjects (`-json`). The function `generate_data_list` is used to construct the data list from the data set. The function `process_results` is used to process the results. The function `function_launcher` is used to launch the function. The function `init_worker` is used to initialize the worker. The function `get_parser` is used to initialize the parser.\n\n### Input:\n\n\n### Output:\n#!/usr/bin/env python\n#########################################################################################\n#\n# This function allows to run a function on a large dataset with a set of parameters.\n# Results are extracted and saved in a way that they can easily be compared with another set.\n#\n# Data should be organized as the following:\n# (names of images can be changed but must be passed as parameters to this function)\n#\n# data/\n# ......subject_name_01/\n# ......subject_name_02/\n# .................t1/\n# .........................subject_02_anything_t1.nii.gz\n# .........................some_landmarks_of_vertebral_levels.nii.gz\n# .........................subject_02_manual_segmentation_t1.nii.gz\n# .................t2/\n# .........................subject_02_anything_t2.nii.gz\n# .........................some_landmarks_of_vertebral_levels.nii.gz\n# .........................subject_02_manual_segmentation_t2.nii.gz\n# .................t2star/\n# .........................subject_02_anything_t2star.nii.gz\n# .........................subject_02_manual_segmentation_t2star.nii.gz\n# ......subject_name_03/\n#          .\n#          .\n#          .\n#\n# ---------------------------------------------------------------------------------------\n# Copyright (c) 2015 Polytechnique Montreal <www.neuro.polymtl.ca>\n# Author: Sara Dupont, Benjamin De Leener\n# Modified: 2015-09-30\n#\n# About the license: see the file LICENSE.TXT\n#########################################################################################\nimport sys\nimport commands\nimport platform\nimport signal\nfrom time import time, strftime\nfrom msct_parser import Parser\nimport sct_utils as sct\nimport os\nimport copy_reg\nimport types\nimport pandas as pd\nimport json\n\n\n# get path of the toolbox\n# TODO: put it back below when working again (julien 2016-04-04)\n# <<<\n# OLD\n# status, path_sct = commands.getstatusoutput('echo $SCT_DIR')\n# NEW\npath_script = os.path.dirname(__file__)\npath_sct = os.path.dirname(path_script)\n# >>>\n# append path that contains scripts, to be able to load modules\nsys.path.append(path_sct + '/scripts')\nsys.path.append(path_sct + '/testing')\n\n\ndef _pickle_method(method):\n    \"\"\"\n    Author: Steven Bethard (author of argparse)\n    http://bytes.com/topic/python/answers/552476-why-cant-you-pickle-instancemethods\n    \"\"\"\n    func_name = method.im_func.__name__\n    obj = method.im_self\n    cls = method.im_class\n    cls_name = ''\n    if func_name.startswith('__') and not func_name.endswith('__'):\n        cls_name = cls.__name__.lstrip('_')\n    if cls_name:\n        func_name = '_' + cls_name + func_name\n    return _unpickle_method, (func_name, obj, cls)\n\n\ndef _unpickle_method(func_name, obj, cls):\n    \"\"\"\n    Author: Steven Bethard\n    http://bytes.com/topic/python/answers/552476-why-cant-you-pickle-instancemethods\n    \"\"\"\n    for cls in cls.mro():\n        try:\n            func = cls.__dict__[func_name]\n        except KeyError:\n            pass\n        else:\n            break\n    return func.__get__(obj, cls)\n\ncopy_reg.pickle(types.MethodType, _pickle_method, _unpickle_method)\n\n\ndef generate_data_list(folder_dataset, json_requirements=None, verbose=1):\n    \"\"\"\n    Construction of the data list from the data set\n    This function return a list of directory (in folder_dataset) in which the contrast is present.\n    :return data:\n    \"\"\"\n    data_subjects, subjects_dir = [], []\n\n    # each directory in folder_dataset should be a directory of a subject\n    for subject_dir in os.listdir(folder_dataset):\n        if not subject_dir.startswith('.') and os.path.isdir(folder_dataset + subject_dir):\n            if read_json(folder_dataset + subject_dir, json_requirements=json_requirements):\n                data_subjects.append(folder_dataset + subject_dir + '/')\n                subjects_dir.append(subject_dir)\n\n    if not data_subjects:\n        sct.printv('ERROR: No subject data were found in ' + folder_dataset + '. '\n                   'Please organize your data correctly or provide a correct dataset.',\n                   verbose=verbose, type='error')\n\n    return data_subjects, subjects_dir\n\ndef read_json(path_dir, json_requirements=None, fname_json='dataset_description.json'):\n    path_dir = sct.slash_at_the_end(path_dir, slash=1)\n    if fname_json not in os.listdir(path_dir) and json_requirements is not None:\n        accept_subject = False\n    elif json_requirements is None:\n        accept_subject = True\n    else:\n        json_file = open(path_dir+fname_json)\n        dic_info = json.load(json_file)\n        json_file.close()\n        # pass keys and items to lower case\n        dic_info = dict((k.lower(), v.lower()) for k, v in dic_info.iteritems())\n        # if no condition is not verified, accept subject\n        accept_subject = True\n        # read requirements:\n        list_conditions = json_requirements.split(',')\n        for condition in list_conditions:\n            key, val = condition.split('=')\n            key, val = key.lower(), val.lower()\n            # if key do not exist, do not accept subject\n            if key not in dic_info.keys():\n                accept_subject = False\n            # if value for this key is not the one required, do not accept subject\n            elif dic_info[key] != val:\n                accept_subject = False\n\n    return accept_subject\n\n\ndef process_results(results, subjects_name, function, folder_dataset, parameters):\n    try:\n        results_dataframe = pd.concat([result[2] for result in results])\n        results_dataframe.loc[:, 'subject'] = pd.Series(subjects_name, index=results_dataframe.index)\n        results_dataframe.loc[:, 'script'] = pd.Series([function]*len(subjects_name), index=results_dataframe.index)\n        results_dataframe.loc[:, 'dataset'] = pd.Series([folder_dataset]*len(subjects_name), index=results_dataframe.index)\n        results_dataframe.loc[:, 'parameters'] = pd.Series([parameters] * len(subjects_name), index=results_dataframe.index)\n        return results_dataframe\n    except KeyboardInterrupt:\n        return 'KeyboardException'\n    except Exception as e:\n        sct.printv('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), 1, 'warning')\n        sct.printv(str(e), 1, 'warning')\n        sys.exit(2)\n\n\ndef function_launcher(args):\n    import importlib\n    # append local script to PYTHONPATH for import\n    sys.path.append(os.path.abspath(os.curdir))\n    script_to_be_run = importlib.import_module('test_' + args[0])  # import function as a module\n    try:\n        output = script_to_be_run.test(*args[1:])\n    except:\n        import traceback\n        print('%s: %s' % ('test_' + args[0], traceback.format_exc()))\n        # output = (1, 'ERROR: Function crashed', 'No result')\n        from pandas import DataFrame\n        status_script = 1\n        output_script = 'ERROR: Function crashed.'\n        output = (status_script, output_script, DataFrame(data={'status': int(status_script), 'output': output_script}, index=['']))\n    return output\n    # return script_to_be_run.test(*args[1:])\n\n\ndef init_worker():\n    signal.signal(signal.SIGINT, signal.SIG_IGN)\n\n\ndef test_function(function, folder_dataset, parameters='', nb_cpu=None, json_requirements=None, verbose=1):\n    \"\"\"\n    Run a test function on the dataset using multiprocessing and save the results\n    :return: results\n    # results are organized as the following: tuple of (status, output, DataFrame with results)\n    \"\"\"\n\n    # generate data list from folder containing\n    data_subjects, subjects_name = generate_data_list(folder_dataset, json_requirements=json_requirements)\n\n    # All scripts that are using multithreading with ITK must not use it when using multiprocessing on several subjects\n    os.environ[\"ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS\"] = \"1\"\n\n    from multiprocessing import Pool\n\n    # create datasets with parameters\n    import itertools\n    data_and_params = itertools.izip(itertools.repeat(function), data_subjects, itertools.repeat(parameters))\n\n    pool = Pool(processes=nb_cpu, initializer=init_worker)\n\n    try:\n        async_results = pool.map_async(function_launcher, data_and_params).get(9999999)\n        # results = process_results(async_results.get(9999999), subjects_name, function, folder_dataset, parameters)  # get the sorted results once all jobs are finished\n        pool.close()\n        pool.join()  # waiting for all the jobs to be done\n        results = process_results(async_results, subjects_name, function, folder_dataset, parameters)  # get the sorted results once all jobs are finished\n    except KeyboardInterrupt:\n        print \"\\nWarning: Caught KeyboardInterrupt, terminating workers\"\n        pool.terminate()\n        pool.join()\n        # return\n        # raise KeyboardInterrupt\n        # sys.exit(2)\n    except Exception as e:\n        sct.printv('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), 1, 'warning')\n        sct.printv(str(e), 1, 'warning')\n        pool.terminate()\n        pool.join()\n        # raise Exception\n        # sys.exit(2)\n\n    return results\n\n\ndef get_parser():\n    # Initialize parser\n    parser = Parser(__file__)\n\n    # Mandatory arguments\n    parser.usage.set_description(\"\")\n    parser.add_option(name=\"-f\",\n                      type_value=\"str\",\n                      description=\"Function to test.\",\n                      mandatory=True,\n                      example=\"sct_propseg\")\n\n    parser.add_option(name=\"-d\",\n                      type_value=\"folder\",\n                      description=\"Dataset directory.\",\n                      mandatory=True,\n                      example=\"dataset_full/\")\n\n    parser.add_option(name=\"-p\",\n                      type_value=\"str\",\n                      description=\"Arguments to pass to the function that is tested. Please put double-quotes if there are spaces in the list of parameters.\\n\"\n                                  \"Image paths must be contains in the arguments list.\",\n                      mandatory=False)\n\n    parser.add_option(name=\"-json\",\n                      type_value=\"str\",\n                      description=\"Requirements on center, study, ... that must be satisfied by the json file of each tested subjects\\n\"\n                                  \"Syntax:  center=unf,study=errsm,gm_model=0\",\n                      mandatory=False)\n\n    parser.add_option(name=\"-cpu-nb\",\n                      type_value=\"int\",\n                      description=\"Number of CPU used for testing. 0: no multiprocessing. If not provided, \"\n                                  \"it uses all the available cores.\",\n                      mandatory=False,\n                      default_value=0,\n                      example='42')\n\n    parser.add_option(name=\"-log\",\n                      type_value='multiple_choice',\n                      description=\"Redirects Terminal verbose to log file.\",\n                      mandatory=False,\n                      example=['0', '1'],\n                      default_value='1')\n\n    parser.add_option(name=\"-v\",\n                      type_value=\"multiple_choice\",\n                      description=\"Verbose. 0: nothing, 1: basic, 2: extended.\",\n                      mandatory=False,\n                      example=['0', '1', '2'],\n                      default_value='1')\n\n    return parser\n\n\n# ====================================================================================================\n# Start program\n# ====================================================================================================\nif __name__ == \"__main__\":\n\n    # get parameters\n    parser = get_parser()\n    arguments = parser.parse(sys.argv[1:])\n    function_to_test = arguments[\"-f\"]\n    dataset = arguments[\"-d\"]\n    dataset = sct.slash_at_the_end(dataset, slash=1)\n    parameters = ''\n    if \"-p\" in arguments:\n        parameters = arguments[\"-p\"]\n    json_requirements = None\n    if \"-json\" in arguments:\n        json_requirements = arguments[\"-json\"]\n    nb_cpu = None\n    if \"-cpu-nb\" in arguments:\n        nb_cpu = arguments[\"-cpu-nb\"]\n    create_log = int(arguments['-log'])\n    verbose = arguments[\"-v\"]\n\n    # start timer\n    start_time = time()\n    # create single time variable for output names\n    output_time = strftime(\"%y%m%d%H%M%S\")\n    print 'Testing started on: '+strftime(\"%Y-%m-%d %H:%M:%S\")\n\n    # build log file name\n    if create_log:\n        file_log = 'results_test_'+function_to_test+'_'+output_time\n        orig_stdout = sys.stdout\n        fname_log = file_log+'.log'\n        handle_log = file(fname_log, 'w')\n        # redirect to log file\n        sys.stdout = handle_log\n        print 'Testing started on: '+strftime(\"%Y-%m-%d %H:%M:%S\")\n\n    # get path of the toolbox\n    path_script = os.path.dirname(__file__)\n    path_sct = os.path.dirname(path_script)\n\n    # fetch true commit number and branch (do not use commit.txt which is wrong)\n    path_curr = os.path.abspath(os.curdir)\n    os.chdir(path_sct)\n    sct_commit = commands.getoutput('git rev-parse HEAD')\n    if not sct_commit.isalnum():\n        print 'WARNING: Cannot retrieve SCT commit'\n        sct_commit = 'unknown'\n        sct_branch = 'unknown'\n    else:\n        sct_branch = commands.getoutput('git branch --contains '+sct_commit).strip('* ')\n    # with open (path_sct+\"/version.txt\", \"r\") as myfile:\n    #     version_sct = myfile.read().replace('\\n', '')\n    # with open (path_sct+\"/commit.txt\", \"r\") as myfile:\n    #     commit_sct = myfile.read().replace('\\n', '')\n    print 'SCT commit/branch: '+sct_commit+'/'+sct_branch\n    os.chdir(path_curr)\n\n    # check OS\n    platform_running = sys.platform\n    if (platform_running.find('darwin') != -1):\n        os_running = 'osx'\n    elif (platform_running.find('linux') != -1):\n        os_running = 'linux'\n    print 'OS: '+os_running+' ('+platform.platform()+')'\n\n    # check hostname\n    print 'Hostname:', platform.node()\n\n    # Check number of CPU cores\n    from multiprocessing import cpu_count\n    # status, output = sct.run('echo $ITK_GLOBAL_DEFAULT_NUMBER_OF_THREADS', 0)\n    print 'CPU cores: ' + str(cpu_count())  # + ', Used by SCT: '+output\n\n    # check RAM\n    sct.checkRAM(os_running, 0)\n\n    # test function\n    try:\n        results = test_function(function_to_test, dataset, parameters, nb_cpu, json_requirements, verbose)\n        pd.set_option('display.max_rows', 500)\n        pd.set_option('display.max_columns', 500)\n        pd.set_option('display.width', 1000)\n        results_subset = results.drop('script', 1).drop('dataset', 1).drop('parameters', 1).drop('output', 1)\n        results_display = results_subset\n\n        # save panda structure\n        if create_log:\n            results_subset.to_pickle(file_log+'.pickle')\n\n        # mean\n        results_mean = results_subset[results_subset.status != 200].mean(numeric_only=True)\n        results_mean['subject'] = 'Mean'\n        results_mean.set_value('status', float('NaN'))  # set status to NaN\n        # results_display = results_display.append(results_mean, ignore_index=True)\n\n        # std\n        results_std = results_subset[results_subset.status != 200].std(numeric_only=True)\n        results_std['subject'] = 'STD'\n        results_std.set_value('status', float('NaN'))  # set status to NaN\n        # results_display = results_display.append(results_std, ignore_index=True)\n\n        # count tests that passed\n        count_passed = results_subset.status[results_subset.status == 0].count()\n        count_crashed = results_subset.status[results_subset.status == 1].count()\n        # count tests that ran\n        count_ran = results_subset.status[results_subset.status != 200].count()\n\n        # results_display = results_display.set_index('subject')\n        # jcohenadad, 2015-10-27: added .reset_index() for better visual clarity\n        results_display = results_display.set_index('subject').reset_index()\n\n        print '\\nCommand: \"' + function_to_test + ' ' + parameters\n        print 'Dataset: ' + dataset\n        # display general results\n        print '\\nGLOBAL RESULTS:'\n        elapsed_time = time() - start_time\n        print 'Duration: ' + str(int(round(elapsed_time)))+'s'\n        # display results\n        print 'Passed: ' + str(count_passed) + '/' + str(count_ran)\n        print 'Crashed: ' + str(count_crashed) + '/' + str(count_ran)\n        # build mean/std entries\n        dict_mean = results_mean.to_dict()\n        dict_mean.pop('status')\n        dict_mean.pop('subject')\n        print 'Mean: ' + str(dict_mean)\n        dict_std = results_std.to_dict()\n        dict_std.pop('status')\n        dict_std.pop('subject')\n        print 'STD: ' + str(dict_std)\n\n        # print detailed results\n        print '\\nDETAILED RESULTS:'\n        print results_display.to_string()\n        print 'Status: 0: Passed | 1: Crashed | 99: Failed | 200: Input file(s) missing | 201: Ground-truth file(s) missing'\n\n    except Exception as err:\n        print err\n\n    # stop file redirection\n    if create_log:\n        sys.stdout.close()\n        sys.stdout = orig_stdout\n        # display log file to Terminal\n        handle_log = file(fname_log, 'r')\n        print handle_log.read()\n"
    },
    {
        "instruction": "Develop an algorithm in Python that takes a number as input and outputs the sum of all its divisors.",
        "input": "6",
        "output": "def sum_divisors(num):\n \u00a0  # Initialize sum \n \u00a0  summation = 0\n \u00a0  \n \u00a0  # Iterate upto num \n \u00a0  for i in range(1, num+1):\n \u00a0 \u00a0 \u00a0  # If num is divisible  \n \u00a0 \u00a0 \u00a0  # by i, add it to sum \n \u00a0 \u00a0 \u00a0  if num%i == 0:\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  summation += i\n \u00a0  # Return summation \n \u00a0  return summation\n  \n   \n# Driver Code \nnum = 6\nresult = sum_divisors(num) \n  \n# Printing result  \nprint(result)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python that takes a number as input and outputs the sum of all its divisors.\n\n### Input:\n6\n\n### Output:\ndef sum_divisors(num):\n \u00a0  # Initialize sum \n \u00a0  summation = 0\n \u00a0  \n \u00a0  # Iterate upto num \n \u00a0  for i in range(1, num+1):\n \u00a0 \u00a0 \u00a0  # If num is divisible  \n \u00a0 \u00a0 \u00a0  # by i, add it to sum \n \u00a0 \u00a0 \u00a0  if num%i == 0:\n \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  summation += i\n \u00a0  # Return summation \n \u00a0  return summation\n  \n   \n# Driver Code \nnum = 6\nresult = sum_divisors(num) \n  \n# Printing result  \nprint(result)"
    },
    {
        "instruction": "Debug the provided Python code to make it run without errors.",
        "input": "num_list = [1, 2, 3, 4, 5]\n\nfor num in num_list\n print(\"Square of\", num \"is\", num*num)",
        "output": "num_list = [1, 2, 3, 4, 5]\n\nfor num in num_list:\n print(\"Square of\", num, \"is\", num*num)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDebug the provided Python code to make it run without errors.\n\n### Input:\nnum_list = [1, 2, 3, 4, 5]\n\nfor num in num_list\n print(\"Square of\", num \"is\", num*num)\n\n### Output:\nnum_list = [1, 2, 3, 4, 5]\n\nfor num in num_list:\n print(\"Square of\", num, \"is\", num*num)"
    },
    {
        "instruction": "Build a Python program that identifies valid Leap Years.",
        "input": "",
        "output": "def is_leap(year):\n    if (year % 400 == 0): \n        return True\n    if (year % 100 == 0):  \n        return False\n    if (year % 4 == 0): \n        return True\n    else:\n        return False\n  \nyear = int(input())\nprint(is_leap(year))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python program that identifies valid Leap Years.\n\n### Input:\n\n\n### Output:\ndef is_leap(year):\n    if (year % 400 == 0): \n        return True\n    if (year % 100 == 0):  \n        return False\n    if (year % 4 == 0): \n        return True\n    else:\n        return False\n  \nyear = int(input())\nprint(is_leap(year))"
    },
    {
        "instruction": "Write a python program to read input from user and check if it is a valid number.",
        "input": "",
        "output": "while True:\n  num = input(\"Please enter a valid number: \")\n  if num.isdigit():\n    print(\"Valid number entered: \" + num)\n    break\n  else:\n    print(\"Invalid number entered - please try again.\")",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to read input from user and check if it is a valid number.\n\n### Input:\n\n\n### Output:\nwhile True:\n  num = input(\"Please enter a valid number: \")\n  if num.isdigit():\n    print(\"Valid number entered: \" + num)\n    break\n  else:\n    print(\"Invalid number entered - please try again.\")"
    },
    {
        "instruction": "Write a Python program to optimize the given cost function.",
        "input": "C(x, y) = 2x + 9y",
        "output": "def optimize_cost(x, y):\n    return 2*x + 9*y",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to optimize the given cost function.\n\n### Input:\nC(x, y) = 2x + 9y\n\n### Output:\ndef optimize_cost(x, y):\n    return 2*x + 9*y"
    },
    {
        "instruction": "Create a Python program that reads a matrix of size nxn and prints out the transpose of the matrix.",
        "input": "n = 5",
        "output": "def transpose(m): \n  \n    result = [[0 for x in range(len(m))] for y in range(len(m[0]))] \n  \n    # iterate through rows of m \n    for i in range(len(m)): \n        # iterate through columns of m \n        for j in range(len(m[0])): \n            result[j][i] = m[i][j] \n  \n    return result \n  \n# input matrix \nmatrix = [ \n            [1, 2, 3], \n            [4, 5, 6], \n            [7, 8, 9] \n          ] \n  \n# display output \nprint(transpose(matrix))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that reads a matrix of size nxn and prints out the transpose of the matrix.\n\n### Input:\nn = 5\n\n### Output:\ndef transpose(m): \n  \n    result = [[0 for x in range(len(m))] for y in range(len(m[0]))] \n  \n    # iterate through rows of m \n    for i in range(len(m)): \n        # iterate through columns of m \n        for j in range(len(m[0])): \n            result[j][i] = m[i][j] \n  \n    return result \n  \n# input matrix \nmatrix = [ \n            [1, 2, 3], \n            [4, 5, 6], \n            [7, 8, 9] \n          ] \n  \n# display output \nprint(transpose(matrix))"
    },
    {
        "instruction": "Write a python code to detect the palindrome words in a  given sentence.",
        "input": "Sentence: \"Was it a car or a cat I saw?\"",
        "output": "def detect_palindrome(sentence):\n words = sentence.split()\n palindromes = []\n for word in words:\n  if word == word[::-1]:\n   palindromes.append(word)\n return palindromes\n\nprint(detect_palindrome(\"Was it a car or a cat I saw?\"))\n# Output: ['Was', 'a', 'or', 'a', 'I']",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to detect the palindrome words in a  given sentence.\n\n### Input:\nSentence: \"Was it a car or a cat I saw?\"\n\n### Output:\ndef detect_palindrome(sentence):\n words = sentence.split()\n palindromes = []\n for word in words:\n  if word == word[::-1]:\n   palindromes.append(word)\n return palindromes\n\nprint(detect_palindrome(\"Was it a car or a cat I saw?\"))\n# Output: ['Was', 'a', 'or', 'a', 'I']"
    },
    {
        "instruction": "Write an algorithm in Python that finds the longest increasing subarray in an array of integers.",
        "input": "arr = [1,2,5,6,3,2,7,8]",
        "output": "def longestincreasingsequence(arr): \n  \n    n = len(arr) \n    lis = [1]*n \n\n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n\n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum , lis[i])  \n\n    return maximum\n\nprint(longestincreasingsequence(arr))",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python that finds the longest increasing subarray in an array of integers.\n\n### Input:\narr = [1,2,5,6,3,2,7,8]\n\n### Output:\ndef longestincreasingsequence(arr): \n  \n    n = len(arr) \n    lis = [1]*n \n\n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n\n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum , lis[i])  \n\n    return maximum\n\nprint(longestincreasingsequence(arr))"
    },
    {
        "instruction": "Create a recursive function in Python that prints the values from 0 to n.",
        "input": "5",
        "output": "def print_values(n):\n    if n == 0:\n        return\n    else:\n        print(n)\n        print_values(n-1)\n\nprint_values(5)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a recursive function in Python that prints the values from 0 to n.\n\n### Input:\n5\n\n### Output:\ndef print_values(n):\n    if n == 0:\n        return\n    else:\n        print(n)\n        print_values(n-1)\n\nprint_values(5)"
    },
    {
        "instruction": "Create a Python program to implement a selection sort algorithm",
        "input": "",
        "output": "def selection_sort(arr): \n    n = len(arr) \n  \n    # One by one move boundary of unsorted subarray \n    for i in range(n): \n        # Find the minimum element in unsorted array \n        min_index = i \n        for j in range(i+1, n): \n            if arr[min_index] > arr[j]: \n                min_index = j \n  \n        # Swap the found minimum element with the first element         \n        arr[i], arr[min_index] = arr[min_index], arr[i] \n  \n    return arr",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to implement a selection sort algorithm\n\n### Input:\n\n\n### Output:\ndef selection_sort(arr): \n    n = len(arr) \n  \n    # One by one move boundary of unsorted subarray \n    for i in range(n): \n        # Find the minimum element in unsorted array \n        min_index = i \n        for j in range(i+1, n): \n            if arr[min_index] > arr[j]: \n                min_index = j \n  \n        # Swap the found minimum element with the first element         \n        arr[i], arr[min_index] = arr[min_index], arr[i] \n  \n    return arr"
    },
    {
        "instruction": "Create a class in Python to count the instances of an object.",
        "input": "",
        "output": "class Counter:\n def __init__(self):\n  self.count = 0\n \n def increment(self):\n  self.count += 1\n \n def get_count(self):\n  return self.count",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to count the instances of an object.\n\n### Input:\n\n\n### Output:\nclass Counter:\n def __init__(self):\n  self.count = 0\n \n def increment(self):\n  self.count += 1\n \n def get_count(self):\n  return self.count"
    },
    {
        "instruction": "Create a Python program to take in two strings and determine if they are permutations of each other.",
        "input": "",
        "output": "def is_permutation(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    \n    c1 = [0] * 256\n    c2 = [0] * 256\n\n    for i in range(len(s1)):\n        c1[ord(s1[i])] += 1\n        c2[ord(s2[i])] += 1\n\n    if c1 == c2:\n        return True\n    else:\n        return False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to take in two strings and determine if they are permutations of each other.\n\n### Input:\n\n\n### Output:\ndef is_permutation(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    \n    c1 = [0] * 256\n    c2 = [0] * 256\n\n    for i in range(len(s1)):\n        c1[ord(s1[i])] += 1\n        c2[ord(s2[i])] += 1\n\n    if c1 == c2:\n        return True\n    else:\n        return False"
    },
    {
        "instruction": "Build a Python class to manage a candies dictionary.",
        "input": "{\n  \"sourpatchkids\":       10,\n  \"snickers\":            5\n}",
        "output": "class Candies:\n    def __init__(self, candies):\n        self.candies = candies\n    \n    def add_candy(self, name, quantity):\n        self.candies[name] = quantity \n    \n    def remove_candy(self, name):\n        del self.candies[name]\n        \n    def get_list_candy(self):\n        return list(self.candies.keys())\n\ncandies = Candies({\"sourpatchkids\": 10, \"snickers\": 5})\ncandies.add_candy(\"mars\", 7)\ncandies.remove_candy(\"snickers\")\ncandy_list = candies.get_list_candy()",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python class to manage a candies dictionary.\n\n### Input:\n{\n  \"sourpatchkids\":       10,\n  \"snickers\":            5\n}\n\n### Output:\nclass Candies:\n    def __init__(self, candies):\n        self.candies = candies\n    \n    def add_candy(self, name, quantity):\n        self.candies[name] = quantity \n    \n    def remove_candy(self, name):\n        del self.candies[name]\n        \n    def get_list_candy(self):\n        return list(self.candies.keys())\n\ncandies = Candies({\"sourpatchkids\": 10, \"snickers\": 5})\ncandies.add_candy(\"mars\", 7)\ncandies.remove_candy(\"snickers\")\ncandy_list = candies.get_list_candy()"
    },
    {
        "instruction": "Write a Python expression that returns the element at index 2 of a list.",
        "input": "[\"Apple\", \"Banana\", \"Cherry\", \"Date\"]",
        "output": "list[2] # returns \"Cherry\"",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python expression that returns the element at index 2 of a list.\n\n### Input:\n[\"Apple\", \"Banana\", \"Cherry\", \"Date\"]\n\n### Output:\nlist[2] # returns \"Cherry\""
    },
    {
        "instruction": "Create an object-oriented Python program for creating a vending machine. The program should have classes for creating items, updating items, and calculating item prices.",
        "input": "Not applicable",
        "output": "class Item():\n    def __init__(self, name, price, quantity):\n        self.name = name\n        self.price = price\n        self.quantity = quantity\n\n    def update_item(self, quantity):\n        self.quantity += quantity\n        \n    def get_item_price(self):\n        return self.price * self.quantity\n\nclass VendingMachine():\n    def __init__(self, items):\n        self.items = items\n\n    def calculate_total_price(self, items):\n        total_price = 0\n        for item in items:\n            total_price += item.get_item_price()\n        return total_price\n\n# Create your items\ncoke = Item('Coke', 1.00, 1)\nchips = Item('Chips', 0.75, 1)\n\n# Create your Vending machine \nvending_machine = VendingMachine([coke, chips])\n\n# Calculate total price\nprice = vending_machine.calculate_total_price([coke, chips])\n\nprint(price) \n\nOutput:\n1.75",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an object-oriented Python program for creating a vending machine. The program should have classes for creating items, updating items, and calculating item prices.\n\n### Input:\nNot applicable\n\n### Output:\nclass Item():\n    def __init__(self, name, price, quantity):\n        self.name = name\n        self.price = price\n        self.quantity = quantity\n\n    def update_item(self, quantity):\n        self.quantity += quantity\n        \n    def get_item_price(self):\n        return self.price * self.quantity\n\nclass VendingMachine():\n    def __init__(self, items):\n        self.items = items\n\n    def calculate_total_price(self, items):\n        total_price = 0\n        for item in items:\n            total_price += item.get_item_price()\n        return total_price\n\n# Create your items\ncoke = Item('Coke', 1.00, 1)\nchips = Item('Chips', 0.75, 1)\n\n# Create your Vending machine \nvending_machine = VendingMachine([coke, chips])\n\n# Calculate total price\nprice = vending_machine.calculate_total_price([coke, chips])\n\nprint(price) \n\nOutput:\n1.75"
    },
    {
        "instruction": "Generate a python program that tests a user's input for a palindrome.",
        "input": "",
        "output": "def is_palindrome(inp):\n    rev_inp = inp[::-1]\n    if inp == rev_inp:\n        return True\n    else:\n        return False",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python program that tests a user's input for a palindrome.\n\n### Input:\n\n\n### Output:\ndef is_palindrome(inp):\n    rev_inp = inp[::-1]\n    if inp == rev_inp:\n        return True\n    else:\n        return False"
    },
    {
        "instruction": "Generate a loop in Python which iterates through a list and prints the values.",
        "input": "",
        "output": "for value in list_of_values:\n    print(value)",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a loop in Python which iterates through a list and prints the values.\n\n### Input:\n\n\n### Output:\nfor value in list_of_values:\n    print(value)"
    },
    {
        "instruction": "Can you design a function in Python to sort a list of tuples based on the second item in the tuple?",
        "input": "tuples = [(\"b\", 0), (\"a\", 1), (\"c\", -1)]",
        "output": "def sort_tuple(tuples):\n    # sort by 2nd item of the tuple\n    tuples.sort(key=lambda x: x[1])\n    return tuples\n\n# Test\ntuples = [(\"b\", 0), (\"a\", 1), (\"c\", -1)]\nsorted_tuples = sort_tuple(tuples)\nprint(sorted_tuples) # [(\"c\", -1), (\"b\", 0), (\"a\", 1)]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you design a function in Python to sort a list of tuples based on the second item in the tuple?\n\n### Input:\ntuples = [(\"b\", 0), (\"a\", 1), (\"c\", -1)]\n\n### Output:\ndef sort_tuple(tuples):\n    # sort by 2nd item of the tuple\n    tuples.sort(key=lambda x: x[1])\n    return tuples\n\n# Test\ntuples = [(\"b\", 0), (\"a\", 1), (\"c\", -1)]\nsorted_tuples = sort_tuple(tuples)\nprint(sorted_tuples) # [(\"c\", -1), (\"b\", 0), (\"a\", 1)]"
    },
    {
        "instruction": "Generate a Python function to search an array of integers for a specific target integer.",
        "input": "Array = [1, 5, 10, 15, 20], Target = 15",
        "output": "def search(array, target):\n # Iterate over array\n for i in range(len(array)):\n # Check if current index equals target\n if array[i] == target:\n return i\n\nreturn -1\n\n# Test\narray = [1, 5, 10, 15, 20]\ntarget = 15\n\nindex = search(array, target)\n\nif index >= 0:\n print(f\"Target found at index {index}\")\nelse:\n print(\"Target not found\")\n\n# Output: Target found at index 3",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to search an array of integers for a specific target integer.\n\n### Input:\nArray = [1, 5, 10, 15, 20], Target = 15\n\n### Output:\ndef search(array, target):\n # Iterate over array\n for i in range(len(array)):\n # Check if current index equals target\n if array[i] == target:\n return i\n\nreturn -1\n\n# Test\narray = [1, 5, 10, 15, 20]\ntarget = 15\n\nindex = search(array, target)\n\nif index >= 0:\n print(f\"Target found at index {index}\")\nelse:\n print(\"Target not found\")\n\n# Output: Target found at index 3"
    },
    {
        "instruction": "Develop an HTTP API in Python to retrieve the top 10 latest news articles from a given website.",
        "input": "",
        "output": "import requests\nfrom bs4 import BeautifulSoup\nfrom datetime import datetime\n\ndef get_latest_articles(url):\n    r = requests.get(url)\n    html = r.text\n    soup = BeautifulSoup(html, \"html.parser\")\n    articles = soup.find_all('article')\n    latest_articles = []\n    for article in articles:\n        pub_date = article.find('time')['datetime']\n        if (datetime.now() - datetime.fromisoformat(pub_date)).total_seconds() < 1814400:\n            latest_articles.append(article.text)\n    return latest_articles[: 10]",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an HTTP API in Python to retrieve the top 10 latest news articles from a given website.\n\n### Input:\n\n\n### Output:\nimport requests\nfrom bs4 import BeautifulSoup\nfrom datetime import datetime\n\ndef get_latest_articles(url):\n    r = requests.get(url)\n    html = r.text\n    soup = BeautifulSoup(html, \"html.parser\")\n    articles = soup.find_all('article')\n    latest_articles = []\n    for article in articles:\n        pub_date = article.find('time')['datetime']\n        if (datetime.now() - datetime.fromisoformat(pub_date)).total_seconds() < 1814400:\n            latest_articles.append(article.text)\n    return latest_articles[: 10]"
    },
    {
        "instruction": "Create a classification algorithm in Python to distinguish between cats and dogs.",
        "input": "",
        "output": "# Import Python libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score \n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Preprocess data\nX = data[['Height','Weight','Length']].values\ny = data['Label'].values\n\n# Encode labels\nencoder = LabelEncoder()\ny_encoded = encoder.fit_transform(y)\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2)\n\n# Train classifier\nclf = SVC()\nclf.fit(X_train, y_train)\n\n# Make predictions \ny_pred = clf.predict(X_test)\n\n# Evaluate accuracy\naccuracy = accuracy_score(y_test, y_pred)\n\nprint('Classification accuracy: ', accuracy * 100, '%')",
        "prompt": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a classification algorithm in Python to distinguish between cats and dogs.\n\n### Input:\n\n\n### Output:\n# Import Python libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score \n\n# Load data\ndata = pd.read_csv('data.csv')\n\n# Preprocess data\nX = data[['Height','Weight','Length']].values\ny = data['Label'].values\n\n# Encode labels\nencoder = LabelEncoder()\ny_encoded = encoder.fit_transform(y)\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2)\n\n# Train classifier\nclf = SVC()\nclf.fit(X_train, y_train)\n\n# Make predictions \ny_pred = clf.predict(X_test)\n\n# Evaluate accuracy\naccuracy = accuracy_score(y_test, y_pred)\n\nprint('Classification accuracy: ', accuracy * 100, '%')"
    }
]